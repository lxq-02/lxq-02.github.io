<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>语音识别_SAPI实现长时间语音识别(五)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/ContinuousSapiASR/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/ContinuousSapiASR/</url>
      
        <content type="html"><![CDATA[<h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>​通过事件驱动和定时器机制实现了长时间语音识别和静音检测。用户点击开始按钮后，程序一直监听用户的语音输入，当用户讲话时实时更新识别结果，并将其与数据库中的数据进行匹配。同时，通过定时器检测长时间静音，并在静音时进行识别结果处理。用户点击停止按钮后，停止所有识别操作。</p><h2 id="1-1、初始化-SAPI"><a href="#1-1、初始化-SAPI" class="headerlink" title="1.1、初始化 SAPI"></a>1.1、初始化 SAPI</h2><p>在程序启动时，初始化 SAPI 相关组件。主要包括创建语音识别器、识别上下文、语法对象，并加载听写语法。同时设置通知事件和输入音频对象。</p><h2 id="1-2、-开始语音识别"><a href="#1-2、-开始语音识别" class="headerlink" title="1.2、 开始语音识别"></a>1.2、 开始语音识别</h2><p>用户点击“开始”按钮时，启动语音识别功能，并设置相关标志位和定时器。定时器用于检测是否有长时间的静音，以便进行语音识别的处理。</p><h2 id="1-3、-处理语音事件"><a href="#1-3、-处理语音事件" class="headerlink" title="1.3、 处理语音事件"></a>1.3、 处理语音事件</h2><p>通过事件驱动机制，当 SAPI 检测到语音输入时，触发 SPEI_RECOGNITION 事件。此时，获取识别结果并更新最后一次讲话的时间。</p><h2 id="1-4、-更新文本并进行处理"><a href="#1-4、-更新文本并进行处理" class="headerlink" title="1.4、 更新文本并进行处理"></a>1.4、 更新文本并进行处理</h2><p>当收到语音识别结果时，更新对话框中的文本框内容。并使用 Levenshtein 距离算法将识别结果与数据库中的数据进行匹配，找出最相似的文本及其 ID。</p><h2 id="1-5、-停止语音识别"><a href="#1-5、-停止语音识别" class="headerlink" title="1.5、 停止语音识别"></a>1.5、 停止语音识别</h2><p>用户点击“停止”按钮时，停止语音识别功能，取消定时器，并重置相关标志位。</p><h3 id="1-6、-定时器检测静音"><a href="#1-6、-定时器检测静音" class="headerlink" title="1.6、 定时器检测静音"></a>1.6、 定时器检测静音</h3><p>定时器定时检查用户是否长时间没有讲话。如果检测到用户静音超过设定的时间（如 5 秒），则调用 <code>PerformRecognition</code> 函数进行语音识别的处理，并更新识别结果。</p><h3 id="1-7、-数据库连接和查询"><a href="#1-7、-数据库连接和查询" class="headerlink" title="1.7、 数据库连接和查询"></a>1.7、 数据库连接和查询</h3><p>程序初始化时，连接到数据库并查询所有识别内容。将查询结果存储在内存中，以便后续的文本匹配使用。</p><h3 id="1-8、-文本相似度匹配"><a href="#1-8、-文本相似度匹配" class="headerlink" title="1.8、 文本相似度匹配"></a>1.8、 文本相似度匹配</h3><p>使用 Levenshtein 距离算法计算识别结果与数据库中每条数据之间的相似度，找出最匹配的文本及其对应的 ID，并显示在对话框中。</p><h1 id="二、具体实现步骤"><a href="#二、具体实现步骤" class="headerlink" title="二、具体实现步骤"></a>二、具体实现步骤</h1><h2 id="2-1、初始化-SAPI-和音频输入"><a href="#2-1、初始化-SAPI-和音频输入" class="headerlink" title="2.1、初始化 SAPI 和音频输入"></a>2.1、初始化 SAPI 和音频输入</h2><p><code>InitializeSAPI</code>函数将会初始化SAPI，配置识别器和音频输入，并设置事件通知以处理识别结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::InitializeSAPI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 COM 库</span></span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建语音识别器实例</span></span><br><span class="line">    hr = m_pRecognizer.<span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognizer: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建识别上下文</span></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;m_pRecoContext);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognition context: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建语法对象</span></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">1</span>, &amp;m_pGrammar);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载听写语法</span></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to load dictation grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将语法设置为非活动状态</span></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set dictation state: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置事件通知句柄</span></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set notify event: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取事件通知句柄</span></span><br><span class="line">    HANDLE hEvent = m_pRecoContext-&gt;<span class="built_in">GetNotifyEventHandle</span>();</span><br><span class="line">    <span class="keyword">if</span> (hEvent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to get event handle.&quot;</span>));</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置对识别事件的兴趣</span></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetInterest</span>(<span class="built_in">SPFEI</span>(SPEI_RECOGNITION), <span class="built_in">SPFEI</span>(SPEI_RECOGNITION));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set interest for recognition events: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建音频输入对象</span></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpMMAudioIn, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpAudio, (<span class="type">void</span>**)&amp;m_cpAudio);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create audio input object: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置音频输入到识别器</span></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">SetInput</span>(m_cpAudio, TRUE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set audio input: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化成功消息</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Initialize SAPI is successful&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、开始按钮"><a href="#2-2、开始按钮" class="headerlink" title="2.2、开始按钮"></a>2.2、开始按钮</h2><p>点击开始按钮，开始进行录音，因为要支持长期识别，可以添加用户讲话状态和讲话时间，来保证合适进行语音识别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 启动语音识别</span></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    m_bUserSpeaking = <span class="literal">false</span>;  <span class="comment">// 初始化用户讲话状态</span></span><br><span class="line">    m_lastSpeechTime = <span class="built_in">GetTickCount</span>(); <span class="comment">// 初始化最后一次讲话时间</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition started.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">1000</span>, <span class="literal">NULL</span>);    <span class="comment">// 启动定时器，间隔 1 s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、定时器识别录音"><a href="#2-3、定时器识别录音" class="headerlink" title="2.3、定时器识别录音"></a>2.3、定时器识别录音</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (nIDEvent)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> TIMER_ID: <span class="comment">// 定时器ID</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间（以毫秒为单位）</span></span><br><span class="line">        DWORD currentTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">        <span class="comment">// 检查当前时间与最后一次讲话时间的差值是否大于等于5000毫秒（5秒）</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime - m_lastSpeechTime &gt;= <span class="number">5000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果距离上次讲话已经超过5秒，则进行文本处理</span></span><br><span class="line">            <span class="built_in">PerformRecognition</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用基类的OnTimer函数，以确保基类处理其他定时器事件</span></span><br><span class="line">    CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::PerformRecognition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 等待识别上下文中的通知事件，超时时间为1秒</span></span><br><span class="line">    HRESULT hr = m_pRecoContext-&gt;<span class="built_in">WaitForNotifyEvent</span>(<span class="number">1000</span>);  <span class="comment">// 1秒超时</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果等待通知事件失败，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CSpEvent event;</span><br><span class="line">    <span class="comment">// 从识别上下文中获取事件</span></span><br><span class="line">    <span class="keyword">while</span> (event.<span class="built_in">GetFrom</span>(m_pRecoContext) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果事件是识别事件</span></span><br><span class="line">        <span class="keyword">if</span> (event.eEventId == SPEI_RECOGNITION)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取识别结果</span></span><br><span class="line">            ISpRecoResult* pResult = event.<span class="built_in">RecoResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (pResult)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 更新最后一次讲话时间</span></span><br><span class="line">                m_lastSpeechTime = <span class="built_in">GetTickCount</span>(); </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取识别到的文本</span></span><br><span class="line">                LPWSTR pwszText = <span class="literal">nullptr</span>;</span><br><span class="line">                hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, FALSE, &amp;pwszText, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 将识别到的文本包装成CString对象</span></span><br><span class="line">                    CString* pNewText = <span class="keyword">new</span> <span class="built_in">CString</span>(pwszText);</span><br><span class="line">                    <span class="comment">// 发送消息通知主线程更新文本</span></span><br><span class="line">                    <span class="built_in">PostMessage</span>(WM_USER_UPDATE_TEXT, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(pNewText), <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 释放分配的内存</span></span><br><span class="line">                    <span class="built_in">CoTaskMemFree</span>(pwszText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSapiASRDlg, CDialogEx)</span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER_UPDATE_TEXT, &amp;CSapiASRDlg::OnUpdateText)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="function">LRESULT <span class="title">CSapiASRDlg::OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将WPARAM参数转换为CString指针</span></span><br><span class="line">    CString* pNewText = <span class="built_in">reinterpret_cast</span>&lt;CString*&gt;(wParam);</span><br><span class="line">    <span class="keyword">if</span> (pNewText)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置编辑框的文本为新的识别结果</span></span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(*pNewText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将识别结果转换为std::wstring以便于后续处理</span></span><br><span class="line">    <span class="function">std::wstring <span class="title">newText</span><span class="params">((*pNewText).GetString())</span></span>;</span><br><span class="line">    std::wstring bestMatch;</span><br><span class="line">    <span class="type">int</span> bestMatchId = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> minDistance = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数据库中的每一行数据</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row_data : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算识别结果与数据库中每行数据的Levenshtein距离</span></span><br><span class="line">        <span class="type">double</span> distance = <span class="built_in">levenshteinDistance</span>(newText, std::<span class="built_in">wstring</span>(row_data.<span class="built_in">GetString</span>()));</span><br><span class="line">        <span class="comment">// 如果找到更小的距离，则更新最匹配的结果</span></span><br><span class="line">        <span class="keyword">if</span> (distance &lt; minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            bestMatch = row_data.<span class="built_in">GetString</span>();</span><br><span class="line">            bestMatchId = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果的ID输出到ID编辑框</span></span><br><span class="line">    CString idResult;</span><br><span class="line">    idResult.<span class="built_in">Format</span>(_T(<span class="string">&quot;%d&quot;</span>), bestMatchId);</span><br><span class="line">    m_edtIdResult.<span class="built_in">SetWindowText</span>(idResult);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果输出到结果编辑框</span></span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowText</span>(bestMatch.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放分配的内存</span></span><br><span class="line">    <span class="keyword">delete</span> pNewText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4、结束按钮"><a href="#2-4、结束按钮" class="headerlink" title="2.4、结束按钮"></a>2.4、结束按钮</h2><p>如果点击结束按钮，会将定时器关闭，结束语音识别；又需要保证自己最后的录音数据可以被识别，在停止听十七之后再次调用语音识别函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition is not started.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止识别</span></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to stop recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">KillTimer</span>(TIMER_ID);  <span class="comment">// 停止定时器</span></span><br><span class="line">    <span class="built_in">PerformRecognition</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition stopped.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5、Levenshtein距离算法"><a href="#2-5、Levenshtein距离算法" class="headerlink" title="2.5、Levenshtein距离算法"></a>2.5、Levenshtein距离算法</h2><p>以下是带有详细注释的Levenshtein距离算法的实现代码和分析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Levenshtein 距离算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CSapiASRDlg::levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">m</span><span class="params">(s<span class="number">1.</span>size())</span></span>; <span class="comment">// 字符串s1的长度</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">n</span><span class="params">(s<span class="number">2.</span>size())</span></span>; <span class="comment">// 字符串s2的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果s1为空，返回s2的长度</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="comment">// 如果s2为空，返回s1的长度</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个(m+1) x (n+1)的矩阵，用于存储距离</span></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">size_t</span>&gt;&gt; <span class="built_in">matrix</span>(m + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">size_t</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化第一列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= m; ++i) matrix[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="comment">// 初始化第一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt;= n; ++j) matrix[<span class="number">0</span>][j] = j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算矩阵的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果字符相同，代价为0，否则为1</span></span><br><span class="line">            <span class="type">size_t</span> cost = (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 计算删除、插入和替换的代价</span></span><br><span class="line">            <span class="type">size_t</span> deletion = matrix[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> insertion = matrix[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> substitution = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] + cost;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取三者中的最小值</span></span><br><span class="line">            <span class="type">size_t</span> minValue = deletion;</span><br><span class="line">            <span class="keyword">if</span> (insertion &lt; minValue)</span><br><span class="line">                minValue = insertion;</span><br><span class="line">            <span class="keyword">if</span> (substitution &lt; minValue)</span><br><span class="line">                minValue = substitution;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将最小值存储在矩阵中</span></span><br><span class="line">            matrix[i][j] = minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵的右下角值即为Levenshtein距离</span></span><br><span class="line">    <span class="type">size_t</span> distance = matrix[m][n];</span><br><span class="line">    <span class="comment">// 计算长度差异</span></span><br><span class="line">    <span class="type">size_t</span> lengthDifference = std::<span class="built_in">abs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m) - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加长度差异的惩罚项，使用比例因子调整权重</span></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> lengthPenaltyFactor = <span class="number">0.5f</span>; <span class="comment">// 可根据需要调整比例因子</span></span><br><span class="line">    <span class="type">size_t</span> lengthPenalty = <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(lengthDifference * lengthPenaltyFactor);</span><br><span class="line">    distance += lengthPenalty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance; <span class="comment">// 返回最终的距离值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p>​Levenshtein距离算法用于计算两个字符串之间的编辑距离，即将一个字符串转换成另一个字符串所需的最小操作次数。允许的操作包括插入、删除和替换字符。该算法通过动态规划的方式实现，创建一个二维矩阵，其中每个元素表示将字符串的某个前缀转换成另一个字符串的某个前缀的代价。通过依次填充矩阵，最终得到两个字符串的编辑距离。</p><p>​此外，添加了长度差异的惩罚项，以更加公平地比较长度差异较大的字符串。惩罚项的比例因子可以根据具体需求进行调整。</p><h1 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h1><p>Github仓库：<a href="https://github.com/lxq-02/ContinuousSapiASR">lxq-02&#x2F;ContinuousSapiASR (github.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_SAPI实现语音识别(四)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/SAPI/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/SAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SAPI"><a href="#一、SAPI" class="headerlink" title="一、SAPI"></a>一、SAPI</h1><h2 id="SAPI-Speech-Application-Programming-Interface-进行语音识别过程笔记"><a href="#SAPI-Speech-Application-Programming-Interface-进行语音识别过程笔记" class="headerlink" title="SAPI (Speech Application Programming Interface) 进行语音识别过程笔记"></a>SAPI (Speech Application Programming Interface) 进行语音识别过程笔记</h2><p>SAPI 是微软提供的一个接口，用于语音识别和语音合成。以下是使用 SAPI 进行语音识别的过程笔记，包括初始化、配置、启动识别、处理结果等步骤。</p><h2 id="1-初始化-COM-库"><a href="#1-初始化-COM-库" class="headerlink" title="1. 初始化 COM 库"></a>1. 初始化 COM 库</h2><p>在使用 SAPI 之前，必须初始化 COM 库。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理初始化失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建语音识别引擎"><a href="#2-创建语音识别引擎" class="headerlink" title="2. 创建语音识别引擎"></a>2. 创建语音识别引擎</h2><p>创建语音识别引擎的实例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpRecognizer&gt; pRecognizer;</span><br><span class="line">hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpRecognizer, (<span class="type">void</span>**)&amp;pRecognizer);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配置语音识别引擎"><a href="#3-配置语音识别引擎" class="headerlink" title="3. 配置语音识别引擎"></a>3. 配置语音识别引擎</h2><p>设置语音识别引擎的属性，如音频输入设备和语音识别引擎。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpRecoContext&gt; pRecoContext;</span><br><span class="line">hr = pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;pRecoContext);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CComPtr&lt;ISpRecoGrammar&gt; pRecoGrammar;</span><br><span class="line">hr = pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">0</span>, &amp;pRecoGrammar);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载语法</span></span><br><span class="line">hr = pRecoGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理加载语法失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-设置音频输入"><a href="#4-设置音频输入" class="headerlink" title="4. 设置音频输入"></a>4. 设置音频输入</h2><p>选择和配置音频输入设备。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpAudio&gt; pAudio;</span><br><span class="line">hr = <span class="built_in">SpCreateDefaultObjectFromCategoryId</span>(SPCAT_AUDIOIN, &amp;pAudio);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr = pRecognizer-&gt;<span class="built_in">SetInput</span>(pAudio, TRUE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置输入失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-启动识别"><a href="#5-启动识别" class="headerlink" title="5. 启动识别"></a>5. 启动识别</h2><p>设置语音识别模式和开始识别过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hr = pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr = pRecoGrammar-&gt;<span class="built_in">SetRuleState</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, SPRS_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置规则状态失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr = pRecognizer-&gt;<span class="built_in">SetRecoState</span>(SPRST_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置识别状态失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-处理识别结果"><a href="#6-处理识别结果" class="headerlink" title="6. 处理识别结果"></a>6. 处理识别结果</h2><p>接收和处理识别结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpRecoResult&gt; pResult;</span><br><span class="line">hr = pRecoContext-&gt;<span class="built_in">GetResult</span>(&amp;pResult);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr)) &#123;</span><br><span class="line">    CComBSTR bstrText;</span><br><span class="line">    hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, TRUE, &amp;bstrText, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr)) &#123;</span><br><span class="line">        <span class="function">std::wstring <span class="title">recognizedText</span><span class="params">(bstrText)</span></span>;</span><br><span class="line">        <span class="comment">// 处理识别结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-结束识别"><a href="#7-结束识别" class="headerlink" title="7. 结束识别"></a>7. 结束识别</h2><p>停止识别并释放资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hr = pRecognizer-&gt;<span class="built_in">SetRecoState</span>(SPRST_INACTIVE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">::<span class="built_in">CoUninitialize</span>();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>初始化 COM 库</strong>: 确保在任何 SAPI 操作之前正确初始化 COM 库，并在操作完成后释放资源。</li><li><strong>创建和配置识别引擎</strong>: 创建语音识别引擎实例，并配置音频输入和语法。</li><li><strong>启动和管理识别过程</strong>: 启动语音识别并处理识别结果。</li><li><strong>资源管理</strong>: 确保在完成操作后正确释放资源。</li></ol><p>这个过程为使用 SAPI 进行语音识别提供了一个基本的框架，你可以根据具体的需求进行扩展和调整。</p><h1 id="二、数据库内容"><a href="#二、数据库内容" class="headerlink" title="二、数据库内容"></a>二、数据库内容</h1><table><thead><tr><th>识别数据库内容</th><th></th><th></th><th>回复数据库内容</th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>内容</td><td></td><td></td><td>序号</td><td>内容</td></tr><tr><td>0</td><td>小度小度</td><td></td><td></td><td>0</td><td>我在</td></tr><tr><td>1</td><td>调车白灯-8</td><td>9</td><td></td><td>1</td><td>调车白灯</td></tr><tr><td>2</td><td>负载断开</td><td>8</td><td></td><td>2</td><td>负载断开</td></tr><tr><td>3</td><td>进路开通 8</td><td>9</td><td></td><td>3</td><td>进路开通</td></tr><tr><td>4</td><td>母线重联、负载断开</td><td></td><td></td><td>4</td><td>母线重联、负载断开</td></tr><tr><td>5</td><td>注意进站</td><td></td><td></td><td>5</td><td>注意进站</td></tr><tr><td>6</td><td>开左侧门</td><td></td><td></td><td>6</td><td>开左侧门</td></tr><tr><td>7</td><td>欢迎您乘坐5号线列车</td><td></td><td></td><td>7</td><td>欢迎您乘坐5号线列车</td></tr><tr><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td><td></td><td></td><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td></tr><tr><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td><td></td><td></td><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td></tr><tr><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td><td></td><td></td><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td></tr><tr><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td><td></td><td></td><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td></tr><tr><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td><td></td><td></td><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td></tr><tr><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td><td></td><td></td><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td></tr></tbody></table><h1 id="三、数据库实现"><a href="#三、数据库实现" class="headerlink" title="三、数据库实现"></a>三、数据库实现</h1><h2 id="1、启动mysql"><a href="#1、启动mysql" class="headerlink" title="1、启动mysql"></a>1、启动mysql</h2><p>用户密码：还是我的常用密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="comment">--version</span></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql<span class="number">-5.7</span><span class="number">.24</span><span class="operator">-</span>winx64\bin\mysql.exe  Ver <span class="number">14.14</span> Distrib <span class="number">5.7</span><span class="number">.24</span>, <span class="keyword">for</span> Win64 (x86_64)</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> net <span class="keyword">start</span> mysql</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG <span class="number">2182</span> 以获得更多的帮助。</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h2 id="2、MySQL-数据库配置与插入中文数据"><a href="#2、MySQL-数据库配置与插入中文数据" class="headerlink" title="2、MySQL 数据库配置与插入中文数据"></a>2、MySQL 数据库配置与插入中文数据</h2><p>在 MySQL 中，插入中文数据需要确保数据库和表的字符集设置为支持中文的字符集（如 utf8mb4）。以下是创建数据库和表结构以及插入中文数据的正确方法。</p><h3 id="1-创建数据库和表结构"><a href="#1-创建数据库和表结构" class="headerlink" title="1. 创建数据库和表结构"></a>1. 创建数据库和表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库并设置字符集</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE VoiceAssistant <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用创建的数据库</span></span><br><span class="line">USE VoiceAssistant;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建识别内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> RecognizeContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建回复内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ReplyContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入识别内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> RecognizeContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小度小度&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入回复内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ReplyContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;我在&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="四、初始化SAPI和释放资源"><a href="#四、初始化SAPI和释放资源" class="headerlink" title="四、初始化SAPI和释放资源"></a>四、初始化SAPI和释放资源</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::InitializeSAPI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer.<span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognizer: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;m_pRecoContext);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognition context: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">1</span>, &amp;m_pGrammar);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to load dictation grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set dictation state: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set notify event: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetInterest</span>(<span class="built_in">SPFEI</span>(SPEI_RECOGNITION), <span class="built_in">SPFEI</span>(SPEI_RECOGNITION));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set interest for recognition events: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpMMAudioIn, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpAudio, (<span class="type">void</span>**)&amp;m_cpAudio);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create audio input object: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">SetInput</span>(m_cpAudio, TRUE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set audio input: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Initialize SAPI is successful&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSapiASRDlg::~<span class="built_in">CSapiASRDlg</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        m_bRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pGrammar)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecoContext)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecoContext.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecognizer)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecognizer.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、开始录音和结束录音"><a href="#五、开始录音和结束录音" class="headerlink" title="五、开始录音和结束录音"></a>五、开始录音和结束录音</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition started.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition is not started.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to stop recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里进行语音识别，并将结果显示在编辑框中</span></span><br><span class="line">    <span class="built_in">PerformRecognition</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition stopped.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、识别语音"><a href="#六、识别语音" class="headerlink" title="六、识别语音"></a>六、识别语音</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::PerformRecognition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pRecoContext-&gt;<span class="built_in">WaitForNotifyEvent</span>(<span class="number">1000</span>);  <span class="comment">// 1-second timeout</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CSpEvent event;</span><br><span class="line">    <span class="keyword">while</span> (event.<span class="built_in">GetFrom</span>(m_pRecoContext) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.eEventId == SPEI_RECOGNITION)</span><br><span class="line">        &#123;</span><br><span class="line">            ISpRecoResult* pResult = event.<span class="built_in">RecoResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (pResult)</span><br><span class="line">            &#123;</span><br><span class="line">                LPWSTR pwszText = <span class="literal">nullptr</span>;</span><br><span class="line">                hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, FALSE, &amp;pwszText, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">                &#123;</span><br><span class="line">                    CString* pNewText = <span class="keyword">new</span> <span class="built_in">CString</span>(pwszText);</span><br><span class="line">                    <span class="built_in">PostMessage</span>(WM_USER_UPDATE_TEXT, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(pNewText), <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">CoTaskMemFree</span>(pwszText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSapiASRDlg, CDialogEx)</span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER_UPDATE_TEXT, &amp;CSapiASRDlg::OnUpdateText)</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_CLEAR, &amp;CSapiASRDlg::OnBnClickedButtonClear)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure><h1 id="七、更新文本"><a href="#七、更新文本" class="headerlink" title="七、更新文本"></a>七、更新文本</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">CSapiASRDlg::OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CString* pNewText = <span class="built_in">reinterpret_cast</span>&lt;CString*&gt;(wParam);</span><br><span class="line">    <span class="keyword">if</span> (pNewText)</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(*pNewText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::wstring <span class="title">newText</span><span class="params">((*pNewText).GetString())</span></span>;</span><br><span class="line">    std::wstring bestMatch;</span><br><span class="line">    <span class="type">int</span> bestMatchId = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> minDistance = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row_data : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> distance = <span class="built_in">levenshteinDistance</span>(newText, std::<span class="built_in">wstring</span>(row_data.<span class="built_in">GetString</span>()));</span><br><span class="line">        <span class="keyword">if</span> (distance &lt; minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            bestMatch = row_data.<span class="built_in">GetString</span>();</span><br><span class="line">            bestMatchId = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果输出到编辑框</span></span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowText</span>(bestMatch.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">//CString content = GetReplyContent(bestMatch.c_str());</span></span><br><span class="line">    CString content = <span class="built_in">GetReplyContentById</span>(bestMatchId);</span><br><span class="line">    m_edtResponse.<span class="built_in">SetWindowTextW</span>(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pNewText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="八、连接MYSQL数据库，获取对照文本"><a href="#八、连接MYSQL数据库，获取对照文本" class="headerlink" title="八、连接MYSQL数据库，获取对照文本"></a>八、连接MYSQL数据库，获取对照文本</h1><p><a href="https://blog.csdn.net/qq_31762741/article/details/115044657">Visual Studio 2019连接MySQL数据库详细教程_visual studio服务器资源管理器 数据连接-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接的字符集</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出查询结果</span></span><br><span class="line">    <span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line">    <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        CString m_data;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                CString errorMsg;</span><br><span class="line">                errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line">                <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 去除最后一个空字符</span></span><br><span class="line">            <span class="keyword">if</span> (!wstr.<span class="built_in">empty</span>() &amp;&amp; wstr.<span class="built_in">back</span>() == <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                wstr.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), wstr.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        m_database.<span class="built_in">push_back</span>(m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放结果集</span></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示查询结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><h3 id="1、找不到mysql-h"><a href="#1、找不到mysql-h" class="headerlink" title="1、找不到mysql.h"></a>1、找不到mysql.h</h3><p>解决方案：将mysql的include路径和lib路径设置在项目属性中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\include</span><br><span class="line"></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\lib</span><br><span class="line"></span><br><span class="line">链接器找到libmysql.lib,添加进去即可</span><br></pre></td></tr></table></figure><h3 id="2、mysql查找的数据是？乱码"><a href="#2、mysql查找的数据是？乱码" class="headerlink" title="2、mysql查找的数据是？乱码"></a>2、mysql查找的数据是？乱码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集为utf8mb4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，对得到的字符还要转换为宽字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br></pre></td></tr></table></figure><h1 id="九、语音识别结果处理"><a href="#九、语音识别结果处理" class="headerlink" title="九、语音识别结果处理"></a>九、语音识别结果处理</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CString <span class="title">CSapiASRDlg::GetReplyContentById</span><span class="params">(<span class="type">int</span> testId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    CString replyContent;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建查询语句</span></span><br><span class="line"></span><br><span class="line">    std::string query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(testId);</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(query.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT content FROM ReplyContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line">            replyContent = wstr.<span class="built_in">c_str</span>();</span><br><span class="line">            <span class="built_in">speak</span>(wstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> replyContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是添加了详细注释的 Levenshtein 距离算法代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CSapiASRDlg::levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取两个字符串的长度</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">m</span><span class="params">(s<span class="number">1.</span>size())</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">n</span><span class="params">(s<span class="number">2.</span>size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果第一个字符串为空，返回第二个字符串的长度</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="comment">// 如果第二个字符串为空，返回第一个字符串的长度</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 (m+1) x (n+1) 的二维矩阵，用于存储计算结果</span></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">size_t</span>&gt;&gt; <span class="built_in">matrix</span>(m + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">size_t</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化第一列，表示将 s1 转换为空字符串的代价</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= m; ++i) matrix[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="comment">// 初始化第一行，表示将空字符串转换为 s2 的代价</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt;= n; ++j) matrix[<span class="number">0</span>][j] = j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算矩阵的其他元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果字符相同，代价为 0，否则代价为 1</span></span><br><span class="line">            <span class="type">size_t</span> cost = (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 计算删除、插入和替换操作的代价</span></span><br><span class="line">            <span class="type">size_t</span> deletion = matrix[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> insertion = matrix[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> substitution = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] + cost;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取三者中的最小值</span></span><br><span class="line">            <span class="type">size_t</span> minValue = deletion;</span><br><span class="line">            <span class="keyword">if</span> (insertion &lt; minValue)</span><br><span class="line">                minValue = insertion;</span><br><span class="line">            <span class="keyword">if</span> (substitution &lt; minValue)</span><br><span class="line">                minValue = substitution;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将计算结果存储在矩阵中</span></span><br><span class="line">            matrix[i][j] = minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终的 Levenshtein 距离</span></span><br><span class="line">    <span class="type">size_t</span> distance = matrix[m][n];</span><br><span class="line">    <span class="comment">// 计算两个字符串长度的差异</span></span><br><span class="line">    <span class="type">size_t</span> lengthDifference = std::<span class="built_in">abs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m) - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加长度差异的惩罚项，使用比例因子调整权重</span></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> lengthPenaltyFactor = <span class="number">0.5f</span>; <span class="comment">// 可根据需要调整比例因子</span></span><br><span class="line">    <span class="type">size_t</span> lengthPenalty = <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(lengthDifference * lengthPenaltyFactor);</span><br><span class="line">    <span class="comment">// 将惩罚项添加到最终距离中</span></span><br><span class="line">    distance += lengthPenalty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最终的距离</span></span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::jaroWinklerDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> len1 = s<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> len2 = s<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len1 == <span class="number">0</span> || len2 == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义实现 std::max 和 std::min</span></span><br><span class="line">    <span class="keyword">auto</span> customMax = [](<span class="type">size_t</span> a, <span class="type">size_t</span> b) -&gt; <span class="type">size_t</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> customMin = [](<span class="type">size_t</span> a, <span class="type">size_t</span> b) -&gt; <span class="type">size_t</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> matchWindow = <span class="built_in">customMax</span>(len1, len2) / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">s1Matches</span><span class="params">(len1, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">s2Matches</span><span class="params">(len2, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="type">size_t</span> matches = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> transpositions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find matches</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> start = <span class="built_in">customMax</span>(i &gt; matchWindow ? i - matchWindow : <span class="number">0</span>, <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(<span class="number">0</span>));</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> end = <span class="built_in">customMin</span>(i + matchWindow + <span class="number">1</span>, len2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = start; j &lt; end; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s2Matches[j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s1[i] != s2[j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            s1Matches[i] = <span class="literal">true</span>;</span><br><span class="line">            s2Matches[j] = <span class="literal">true</span>;</span><br><span class="line">            ++matches;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (matches == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s1Matches[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!s2Matches[k])</span><br><span class="line">            ++k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s1[i] != s2[k])</span><br><span class="line">            ++transpositions;</span><br><span class="line"></span><br><span class="line">        ++k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> jaro = (matches / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(len1) +</span><br><span class="line">        matches / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(len2) +</span><br><span class="line">        (matches - transpositions / <span class="number">2.0f</span>) / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(matches)) / <span class="number">3.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply Winkler bonus for common prefix</span></span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> prefixLength = <span class="built_in">customMin</span>(<span class="built_in">customMin</span>(len1, len2), <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(<span class="number">4</span>));</span><br><span class="line">    <span class="type">size_t</span> commonPrefix = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (commonPrefix &lt; prefixLength &amp;&amp; s1[commonPrefix] == s2[commonPrefix])</span><br><span class="line">        ++commonPrefix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jaro + <span class="number">0.1f</span> * commonPrefix * (<span class="number">1.0f</span> - jaro);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::cosineSimilarity</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::unordered_map&lt;<span class="type">wchar_t</span>, <span class="type">size_t</span>&gt; freq1, freq2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算频率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : s1)</span><br><span class="line">        ++freq1[c];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : s2)</span><br><span class="line">        ++freq2[c];</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> dotProduct = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="type">float</span> norm1 = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="type">float</span> norm2 = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算点积</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : freq1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = freq<span class="number">2.f</span>ind(key);</span><br><span class="line">        <span class="keyword">if</span> (it != freq<span class="number">2.</span><span class="built_in">end</span>())</span><br><span class="line">            dotProduct += value * it-&gt;second;</span><br><span class="line"></span><br><span class="line">        norm1 += value * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算范数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : freq2)</span><br><span class="line">        norm2 += value * value;</span><br><span class="line"></span><br><span class="line">    norm1 = std::<span class="built_in">sqrt</span>(norm1);</span><br><span class="line">    norm2 = std::<span class="built_in">sqrt</span>(norm2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理范数为零的情况</span></span><br><span class="line">    <span class="keyword">if</span> (norm1 == <span class="number">0.0f</span> || norm2 == <span class="number">0.0f</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dotProduct / (norm1 * norm2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::jaccardSimilarity</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::unordered_set&lt;<span class="type">wchar_t</span>&gt; <span class="title">set1</span><span class="params">(s<span class="number">1.</span>begin(), s<span class="number">1.</span>end())</span></span>;</span><br><span class="line">    <span class="function">std::unordered_set&lt;<span class="type">wchar_t</span>&gt; <span class="title">set2</span><span class="params">(s<span class="number">2.</span>begin(), s<span class="number">2.</span>end())</span></span>;</span><br><span class="line"></span><br><span class="line">    std::unordered_set&lt;<span class="type">wchar_t</span>&gt; intersection;</span><br><span class="line">    <span class="function">std::unordered_set&lt;<span class="type">wchar_t</span>&gt; <span class="title">unionSet</span><span class="params">(set1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : set2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (set<span class="number">1.f</span>ind(c) != set<span class="number">1.</span><span class="built_in">end</span>())</span><br><span class="line">            intersection.<span class="built_in">insert</span>(c);</span><br><span class="line">        unionSet.<span class="built_in">insert</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unionSet.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(intersection.<span class="built_in">size</span>()) / unionSet.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to compute Sift4 similarity</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::unordered_set&lt;std::wstring&gt; <span class="title">generateCharacterPairs</span><span class="params">(<span class="type">const</span> std::wstring&amp; str)</span> </span>&#123;</span><br><span class="line">    std::unordered_set&lt;std::wstring&gt; pairs;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> pairs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        pairs.<span class="built_in">insert</span>(str.<span class="built_in">substr</span>(i, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pairs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::sift4Similarity</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 生成字符对</span></span><br><span class="line">    <span class="keyword">auto</span> pairs1 = <span class="built_in">generateCharacterPairs</span>(s1);</span><br><span class="line">    <span class="keyword">auto</span> pairs2 = <span class="built_in">generateCharacterPairs</span>(s2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算交集</span></span><br><span class="line">    std::unordered_set&lt;std::wstring&gt; intersection;</span><br><span class="line">    <span class="function">std::unordered_set&lt;std::wstring&gt; <span class="title">unionSet</span><span class="params">(pairs1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : pairs2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pairs<span class="number">1.f</span>ind(pair) != pairs<span class="number">1.</span><span class="built_in">end</span>()) &#123;</span><br><span class="line">            intersection.<span class="built_in">insert</span>(pair);</span><br><span class="line">        &#125;</span><br><span class="line">        unionSet.<span class="built_in">insert</span>(pair);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unionSet.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算相似度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(intersection.<span class="built_in">size</span>()) / unionSet.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><p><strong>字符串长度获取</strong>:</p><ul><li><code>const size_t m(s1.size());</code> 获取第一个字符串的长度。</li><li><code>const size_t n(s2.size());</code> 获取第二个字符串的长度。</li></ul></li><li><p><strong>处理空字符串的情况</strong>:</p><ul><li>如果 <code>s1</code> 为空，返回 <code>s2</code> 的长度。</li><li>如果 <code>s2</code> 为空，返回 <code>s1</code> 的长度。</li></ul></li><li><p><strong>初始化矩阵</strong>:</p><ul><li>创建一个大小为 <code>(m+1) x (n+1)</code> 的二维矩阵 <code>matrix</code>，用于存储中间计算结果。</li><li>初始化第一列和第一行，表示将字符串转换为空字符串或从空字符串转换的代价。</li></ul></li><li><p><strong>填充矩阵</strong>:</p><ul><li>遍历每个字符，计算删除、插入和替换操作的代价，并取三者中的最小值，存储在矩阵中。</li></ul></li><li><p><strong>计算最终的 Levenshtein 距离</strong>:</p><ul><li><code>size_t distance = matrix[m][n];</code> 获取最终的 Levenshtein 距离。</li><li>计算两个字符串长度的差异，并根据比例因子 <code>lengthPenaltyFactor</code> 调整权重，添加到最终距离中。</li></ul></li></ol><p>通过这种方法，可以在计算 Levenshtein 距离时更好地考虑字符串长度的差异，同时避免相同长度字符串都跑到一个去的问题。</p><h1 id="十、语音播报"><a href="#十、语音播报" class="headerlink" title="十、语音播报"></a>十、语音播报</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CComPtr&lt;ISpVoice&gt; pVoice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 COM 库</span></span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 SAPI 语音实例</span></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 朗读文本</span></span><br><span class="line">        hr = pVoice-&gt;<span class="built_in">Speak</span>(text.<span class="built_in">c_str</span>(), SPF_DEFAULT, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十一、数据库账号保存在文件中"><a href="#十一、数据库账号保存在文件中" class="headerlink" title="十一、数据库账号保存在文件中"></a>十一、数据库账号保存在文件中</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置文件函数</span></span><br><span class="line"><span class="function">std::map&lt;std::string, std::string&gt; <span class="title">readConfigFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">    std::map&lt;std::string, std::string&gt; config;</span><br><span class="line">    std::string line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::<span class="built_in">getline</span>(file, line))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> pos = line.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos != std::string::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            std::string key = line.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">            std::string value = line.<span class="built_in">substr</span>(pos + <span class="number">1</span>);</span><br><span class="line">            config[key] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; config = <span class="built_in">readConfigFile</span>(<span class="string">&quot;db_config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = config[<span class="string">&quot;server&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = config[<span class="string">&quot;user&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = config[<span class="string">&quot;password&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = config[<span class="string">&quot;database&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p VoiceAssistant &gt; VoiceAssistant.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>-u root</code> 指定 MySQL 用户名为 <code>root</code>。</li><li><code>-p</code> 提示输入密码。</li><li><code>VoiceAssistant</code> 是要导出的数据库名称。</li><li><code>&gt; VoiceAssistant.sql</code> 将输出重定向到 <code>VoiceAssistant.sql</code> 文件。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span>  <span class="comment">// 添加 SAPI 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(push)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphelper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span>  <span class="comment">// 添加 atomic 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(pop)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WM_USER_UPDATE_TEXT (WM_USER + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSapiASRDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CSapiASRDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CSapiASRDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; IDD = IDD_SAPIASR_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">afx_msg LRESULT <span class="title">OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PerformRecognition</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connectToDatabase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span>;</span><br><span class="line">    <span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InitializeSAPI</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnRecognition</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    HICON m_hIcon;</span><br><span class="line">    CComPtr&lt;ISpRecognizer&gt; m_pRecognizer;</span><br><span class="line">    CComPtr&lt;ISpRecoContext&gt; m_pRecoContext;</span><br><span class="line">    CComPtr&lt;ISpRecoGrammar&gt; m_pGrammar;</span><br><span class="line">    CComPtr&lt;ISpAudio&gt; m_cpAudio;</span><br><span class="line">    CEdit m_edtText;</span><br><span class="line">    CString m_lastRecognizedText;</span><br><span class="line">    HANDLE m_hThread;</span><br><span class="line">    <span class="type">bool</span> m_bRunning;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;CString&gt; m_database;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CEdit m_edtResult;</span><br><span class="line">    CEdit m_edtIdResult;</span><br><span class="line">    CEdit m_edtResponse;</span><br><span class="line">    CEdit m_edtIdResponse;</span><br><span class="line">    <span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonClear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">GetReplyContent</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span>;</span><br><span class="line">    <span class="function">CString <span class="title">GetReplyContentById</span><span class="params">(<span class="type">int</span> testId)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SapiASR.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SapiASRDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(push)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphelper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(pop)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlbase.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置文件函数</span></span><br><span class="line"><span class="function">std::map&lt;std::string, std::string&gt; <span class="title">readConfigFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">    std::map&lt;std::string, std::string&gt; config;</span><br><span class="line">    std::string line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::<span class="built_in">getline</span>(file, line))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> pos = line.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos != std::string::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            std::string key = line.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">            std::string value = line.<span class="built_in">substr</span>(pos + <span class="number">1</span>);</span><br><span class="line">            config[key] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WM_USER_UPDATE_TEXT (WM_USER + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line">CSapiASRDlg::<span class="built_in">CSapiASRDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">    : <span class="built_in">CDialogEx</span>(IDD_SAPIASR_DIALOG, pParent),</span><br><span class="line">    <span class="built_in">m_pRecognizer</span>(<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">m_pRecoContext</span>(<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">m_pGrammar</span>(<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">m_bRunning</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">    <span class="built_in">connectToDatabase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_RESULT, m_edtResult);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_RESPONSE, m_edtResponse);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_ID_RESULT, m_edtIdResult);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_ID_RESPONSE, m_edtIdResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSapiASRDlg, CDialogEx)</span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER_UPDATE_TEXT, &amp;CSapiASRDlg::OnUpdateText)</span><br><span class="line">    <span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line">    <span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line">    <span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CSapiASRDlg::OnBnClickedButtonStart)</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CSapiASRDlg::OnBnClickedButtonStop)</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_CLEAR, &amp;CSapiASRDlg::OnBnClickedButtonClear)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CSapiASRDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line">    <span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">    CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line">    <span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BOOL bNameValid;</span><br><span class="line">        CString strAboutMenu;</span><br><span class="line">        bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line">        <span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line">        <span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">            pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetIcon</span>(m_hIcon, TRUE);</span><br><span class="line">    <span class="built_in">SetIcon</span>(m_hIcon, FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitializeSAPI</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">    &#123;</span><br><span class="line">        CAboutDlg dlgAbout;</span><br><span class="line">        dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line">        <span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">        CRect rect;</span><br><span class="line">        <span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line">        <span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HCURSOR <span class="title">CSapiASRDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::InitializeSAPI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer.<span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognizer: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;m_pRecoContext);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognition context: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">1</span>, &amp;m_pGrammar);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to load dictation grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set dictation state: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set notify event: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetInterest</span>(<span class="built_in">SPFEI</span>(SPEI_RECOGNITION), <span class="built_in">SPFEI</span>(SPEI_RECOGNITION));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set interest for recognition events: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpMMAudioIn, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpAudio, (<span class="type">void</span>**)&amp;m_cpAudio);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create audio input object: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">SetInput</span>(m_cpAudio, TRUE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set audio input: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Initialize SAPI is successful&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSapiASRDlg::~<span class="built_in">CSapiASRDlg</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        m_bRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pGrammar)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecoContext)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecoContext.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecognizer)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecognizer.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition started.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition is not started.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to stop recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里进行语音识别，并将结果显示在编辑框中</span></span><br><span class="line">    <span class="built_in">PerformRecognition</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition stopped.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::PerformRecognition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pRecoContext-&gt;<span class="built_in">WaitForNotifyEvent</span>(<span class="number">1000</span>);  <span class="comment">// 1-second timeout</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CSpEvent event;</span><br><span class="line">    <span class="keyword">while</span> (event.<span class="built_in">GetFrom</span>(m_pRecoContext) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.eEventId == SPEI_RECOGNITION)</span><br><span class="line">        &#123;</span><br><span class="line">            ISpRecoResult* pResult = event.<span class="built_in">RecoResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (pResult)</span><br><span class="line">            &#123;</span><br><span class="line">                LPWSTR pwszText = <span class="literal">nullptr</span>;</span><br><span class="line">                hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, FALSE, &amp;pwszText, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">                &#123;</span><br><span class="line">                    CString* pNewText = <span class="keyword">new</span> <span class="built_in">CString</span>(pwszText);</span><br><span class="line">                    <span class="built_in">PostMessage</span>(WM_USER_UPDATE_TEXT, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(pNewText), <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">CoTaskMemFree</span>(pwszText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; config = <span class="built_in">readConfigFile</span>(<span class="string">&quot;db_config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = config[<span class="string">&quot;server&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = config[<span class="string">&quot;user&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = config[<span class="string">&quot;password&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = config[<span class="string">&quot;database&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接的字符集</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出查询结果</span></span><br><span class="line">    <span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line">    <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        CString m_data;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                CString errorMsg;</span><br><span class="line">                errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line">                <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 去除最后一个空字符</span></span><br><span class="line">            <span class="keyword">if</span> (!wstr.<span class="built_in">empty</span>() &amp;&amp; wstr.<span class="built_in">back</span>() == <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                wstr.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), wstr.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        m_database.<span class="built_in">push_back</span>(m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放结果集</span></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//// 显示查询结果</span></span><br><span class="line">    <span class="comment">//for (const auto&amp; row : m_database)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    AfxMessageBox(row);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonClear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_edtText.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtResponse.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtIdResult.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtIdResponse.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Levenshtein 距离算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CSapiASRDlg::levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">m</span><span class="params">(s<span class="number">1.</span>size())</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">n</span><span class="params">(s<span class="number">2.</span>size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">size_t</span>&gt;&gt; <span class="built_in">matrix</span>(m + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">size_t</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= m; ++i) matrix[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt;= n; ++j) matrix[<span class="number">0</span>][j] = j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">size_t</span> cost = (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> deletion = matrix[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> insertion = matrix[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> substitution = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] + cost;</span><br><span class="line"></span><br><span class="line">            <span class="type">size_t</span> minValue = deletion;</span><br><span class="line">            <span class="keyword">if</span> (insertion &lt; minValue)</span><br><span class="line">                minValue = insertion;</span><br><span class="line">            <span class="keyword">if</span> (substitution &lt; minValue)</span><br><span class="line">                minValue = substitution;</span><br><span class="line"></span><br><span class="line">            matrix[i][j] = minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> distance = matrix[m][n];</span><br><span class="line">    <span class="type">size_t</span> lengthDifference = std::<span class="built_in">abs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m) - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加长度差异的惩罚项，使用比例因子调整权重</span></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> lengthPenaltyFactor = <span class="number">0.5f</span>; <span class="comment">// 可根据需要调整比例因子</span></span><br><span class="line">    <span class="type">size_t</span> lengthPenalty = <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(lengthDifference * lengthPenaltyFactor);</span><br><span class="line">    distance += lengthPenalty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT <span class="title">CSapiASRDlg::OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CString* pNewText = <span class="built_in">reinterpret_cast</span>&lt;CString*&gt;(wParam);</span><br><span class="line">    <span class="keyword">if</span> (pNewText)</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(*pNewText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::wstring <span class="title">newText</span><span class="params">((*pNewText).GetString())</span></span>;</span><br><span class="line">    std::wstring bestMatch;</span><br><span class="line">    <span class="type">int</span> bestMatchId = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> minDistance = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row_data : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> distance = <span class="built_in">levenshteinDistance</span>(newText, std::<span class="built_in">wstring</span>(row_data.<span class="built_in">GetString</span>()));</span><br><span class="line">        <span class="comment">//double distance = jaroWinklerDistance(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="comment">//double distance = cosineSimilarity(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="comment">//double distance = jaccardSimilarity(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="comment">//double distance = sift4Similarity(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="keyword">if</span> (distance &lt; minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            bestMatch = row_data.<span class="built_in">GetString</span>();</span><br><span class="line">            bestMatchId = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果输出到编辑框</span></span><br><span class="line">    CString idResult;</span><br><span class="line">    idResult.<span class="built_in">Format</span>(_T(<span class="string">&quot;%d&quot;</span>), bestMatchId);</span><br><span class="line">    m_edtIdResult.<span class="built_in">SetWindowText</span>(idResult);</span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowText</span>(bestMatch.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">//CString content = GetReplyContent(bestMatch.c_str());</span></span><br><span class="line">    CString content = <span class="built_in">GetReplyContentById</span>(bestMatchId);</span><br><span class="line">    m_edtIdResponse.<span class="built_in">SetWindowTextW</span>(idResult);</span><br><span class="line">    m_edtResponse.<span class="built_in">SetWindowTextW</span>(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pNewText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CSapiASRDlg::GetReplyContentById</span><span class="params">(<span class="type">int</span> testId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    CString replyContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; config = <span class="built_in">readConfigFile</span>(<span class="string">&quot;db_config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = config[<span class="string">&quot;server&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = config[<span class="string">&quot;user&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = config[<span class="string">&quot;password&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = config[<span class="string">&quot;database&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建查询语句</span></span><br><span class="line"></span><br><span class="line">    std::string query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(testId);</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(query.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT content FROM ReplyContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line">            replyContent = wstr.<span class="built_in">c_str</span>();</span><br><span class="line">            <span class="built_in">speak</span>(wstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> replyContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CComPtr&lt;ISpVoice&gt; pVoice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 COM 库</span></span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 SAPI 语音实例</span></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 朗读文本</span></span><br><span class="line">        hr = pVoice-&gt;<span class="built_in">Speak</span>(text.<span class="built_in">c_str</span>(), SPF_DEFAULT, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_Pocketsphinx(二)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/Pocketsphinx/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/Pocketsphinx/</url>
      
        <content type="html"><![CDATA[<h1 id="博客："><a href="#博客：" class="headerlink" title="博客："></a>博客：</h1><p>PortAudio:<a href="https://blog.csdn.net/qq_30340349/article/details/131509624">【PortAudio】PortAudio 音频处理库Demo-CSDN博客</a> </p><p>PortAudio:<a href="https://blog.51cto.com/u_4135183/2822776">PortAudio —— 跨平台音频采集API_lyyanziyu的技术博客_51CTO博客</a></p><p>中文模型：[CMU Sphinx - Browse &#x2F;Acoustic and Language Models&#x2F;Mandarin at SourceForge.net](<a href="https://sourceforge.net/projects/cmusphinx/files/Acoustic">https://sourceforge.net/projects/cmusphinx/files/Acoustic</a> and Language Models&#x2F;Mandarin&#x2F;)</p><p>Pocketsphinx源码：<a href="https://github.com/cmusphinx/pocketsphinx/tree/master/">https://github.com/cmusphinx/pocketsphinx/tree/master/</a></p><p>VS2015中编译试用pocketsphinx：<a href="https://www.jianshu.com/p/b0a3690777fc">https://www.jianshu.com/p/b0a3690777fc</a></p><p>window下基于VS，CMUSphinx的中文小词汇量语音识别实例：<a href="https://blog.csdn.net/Anadahoji/article/details/88607261">https://blog.csdn.net/Anadahoji/article/details/88607261</a></p><h1 id="pocketsphinx实现连续大词汇量语音识别"><a href="#pocketsphinx实现连续大词汇量语音识别" class="headerlink" title="pocketsphinx实现连续大词汇量语音识别"></a><a href="https://www.cnblogs.com/yyq745201/p/4633628.html">pocketsphinx实现连续大词汇量语音识别</a></h1><p><a href="https://www.cnblogs.com/huanghuang/archive/2012/08/08/2627747.html">Sphinx应用程序编写 - lovemu - 博客园 (cnblogs.com)</a></p><p>可以简单识别单词，需要设计关键词库</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// SpeechRecognition_PocketSphinxDlg.h: 头文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含必要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;portaudio.h&gt;</span>       <span class="comment">// PortAudio 库头文件，用于音频输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pocketsphinx.h&gt;</span>    <span class="comment">// PocketSphinx 库头文件，用于语音识别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/ad.h&gt;</span>   <span class="comment">// SphinxBase 库头文件，用于音频录制</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/err.h&gt;</span>  <span class="comment">// SphinxBase 库头文件，用于错误处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>           <span class="comment">// 文件操作头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>            <span class="comment">// 字符串处理头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>               <span class="comment">// 集合容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlstr.h&gt;</span>          <span class="comment">// ATL 字符串类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>            <span class="comment">// 线程库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>            <span class="comment">// 向量容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>         <span class="comment">// 算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span>            <span class="comment">// 本地化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span>           <span class="comment">// 编码转换头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>          <span class="comment">// 输入输出流头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_ID 999 <span class="comment">// 定义定时器 ID</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSpeechRecognitionPocketSphinxDlg 对话框</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSpeechRecognitionPocketSphinxDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CSpeechRecognitionPocketSphinxDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_SPEECHRECOGNITION_POCKETSPHINX_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;<span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HICON m_hIcon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的消息映射函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnDestroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;<span class="comment">// 识别后显示的数据</span></span><br><span class="line"></span><br><span class="line">std::vector&lt;int16&gt; m_audioBuffer;   <span class="comment">// 用于存储音频数据</span></span><br><span class="line"><span class="type">bool</span> m_bListening = <span class="literal">false</span>;<span class="comment">// 语音识别信号</span></span><br><span class="line"><span class="type">cmd_ln_t</span>* m_config = <span class="literal">nullptr</span>;<span class="comment">// 配置参数指针</span></span><br><span class="line"><span class="type">ps_decoder_t</span>* m_ps = <span class="literal">nullptr</span>;<span class="comment">// PocketSphinx 解码器指针</span></span><br><span class="line"><span class="type">ad_rec_t</span>* m_ad = <span class="literal">nullptr</span>;<span class="comment">// 音频录制指针</span></span><br><span class="line">uint8 utt_started = FALSE;<span class="comment">// 标志是否开始录制</span></span><br><span class="line"></span><br><span class="line">PaStream* m_stream = <span class="literal">nullptr</span>;<span class="comment">// PortAudio 流指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RecordAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessRecordedAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span>;</span><br><span class="line"><span class="function">CString <span class="title">ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>; <span class="comment">// 定时器处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::thread m_thread; <span class="comment">// 用于音频录制和处理的线程</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// SpeechRecognition_PocketSphinxDlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SpeechRecognition_PocketSphinx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SpeechRecognition_PocketSphinxDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048) <span class="comment">// 调整缓冲区大小</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* userData)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;</span><br><span class="line"><span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 双声道转单声道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSpeechRecognitionPocketSphinxDlg 对话框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSpeechRecognitionPocketSphinxDlg::<span class="built_in">CSpeechRecognitionPocketSphinxDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_SPEECHRECOGNITION_POCKETSPHINX_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line"></span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSpeechRecognitionPocketSphinxDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStart)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStop)</span><br><span class="line"><span class="built_in">ON_WM_DESTROY</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSpeechRecognitionPocketSphinxDlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CSpeechRecognitionPocketSphinxDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CSpeechRecognitionPocketSphinxDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 清空音频缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PortAudio</span></span><br><span class="line">PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频流参数</span></span><br><span class="line">PaStreamParameters inputParameters;</span><br><span class="line">inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line"><span class="keyword">if</span> (inputParameters.device == paNoDevice) &#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 双声道</span></span><br><span class="line">inputParameters.sampleFormat = paInt16; <span class="comment">// 16 位整数</span></span><br><span class="line">inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开音频流</span></span><br><span class="line">err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">&amp;m_stream,</span><br><span class="line">&amp;inputParameters,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line"><span class="number">48000</span>, <span class="comment">// 采样率</span></span><br><span class="line"><span class="number">2048</span>, <span class="comment">// 缓冲区大小</span></span><br><span class="line">paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有回调</span></span><br><span class="line"><span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to open PortAudio stream: %s&quot;</span>), <span class="built_in">Pa_GetErrorText</span>(err));</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动音频流</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError) &#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标志以启动录音</span></span><br><span class="line">m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动录音线程</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CSpeechRecognitionPocketSphinxDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();  <span class="comment">// 分离线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line"><span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"><span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m_bListening) &#123;</span><br><span class="line">PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line"><span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单声道数据添加到缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止音频流</span></span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CSpeechRecognitionPocketSphinxDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to open audio file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;int16&gt; <span class="title">audioData</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioData.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No audio data read from file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, audioData.<span class="built_in">data</span>(), audioData.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(int16), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString result = <span class="built_in">CString</span>(hyp);</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//void CMFCApplication1Dlg::OnBnClickedButton1()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//std::string filePath = &quot;D:\\ASR\\pocketsphinx\\test\\data\\cards\\001.wav&quot;; // ten of clubs</span></span><br><span class="line"><span class="comment">////std::string filePath = &quot;D:\\ASR\\pocketsphinx\\test\\data\\cards\\test.wav&quot;; // ten of clubs</span></span><br><span class="line"><span class="comment">//ProcessAudioFile(filePath);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h1><h2 id="1、模型初始化"><a href="#1、模型初始化" class="headerlink" title="1、模型初始化"></a>1、模型初始化</h2><p>m_config中文如果不可以初始化成功，可以直接在hmm文件夹中修改参数数据</p><p>pocket默认是单通道的设备，可能和自己的设备不一样，需要设置数据变换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">CSpeechRecognitionPocketSphinxDlg::<span class="built_in">CSpeechRecognitionPocketSphinxDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_SPEECHRECOGNITION_POCKETSPHINX_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line"></span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、PortAudio的使用"><a href="#2、PortAudio的使用" class="headerlink" title="2、PortAudio的使用"></a>2、PortAudio的使用</h2><p>Pocketsphinx直接使用电脑的设备可能造成乱码，如果乱码，可以使用portaudio来录制音频，转换为pocketsphinx适配的音频格式</p><p>需要主义，打开音频流之前，一定要对音频流的参数进行设置，否则报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000                 <span class="comment">// 采样率定义为16000Hz</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048)          <span class="comment">// 每个缓冲区包含2048帧</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数用于处理音频数据</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">    PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span>* userData)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;      <span class="comment">// 输入缓冲区的数据</span></span><br><span class="line">    <span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData; <span class="comment">// 用户数据（单声道缓冲区）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果输入缓冲区为空，继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> paContinue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将双声道音频数据转换为单声道</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">        monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 左右声道相加后取平均值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件处理函数，开始录音</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 清空音频缓冲区</span></span><br><span class="line">    m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 PortAudio</span></span><br><span class="line">    PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line">    <span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>)); <span class="comment">// 初始化失败，显示错误消息</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置音频流参数</span></span><br><span class="line">    PaStreamParameters inputParameters;</span><br><span class="line">    inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line">    <span class="keyword">if</span> (inputParameters.device == paNoDevice) &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>)); <span class="comment">// 没有默认输入设备，显示错误消息</span></span><br><span class="line">        <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 设置为双声道</span></span><br><span class="line">    inputParameters.sampleFormat = paInt16; <span class="comment">// 采样格式为16位整数</span></span><br><span class="line">    inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">    inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开音频流</span></span><br><span class="line">    err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">        &amp;m_stream,</span><br><span class="line">        &amp;inputParameters,</span><br><span class="line">        <span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line">        <span class="number">48000</span>, <span class="comment">// 采样率为48000Hz</span></span><br><span class="line">        <span class="number">2048</span>, <span class="comment">// 每个缓冲区2048帧</span></span><br><span class="line">        paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line">        <span class="literal">nullptr</span>, <span class="comment">// 没有回调函数</span></span><br><span class="line">        <span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">        CString errorMsg;</span><br><span class="line">        errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to open PortAudio stream: %s&quot;</span>), <span class="built_in">Pa_GetErrorText</span>(err)); <span class="comment">// 打开音频流失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">        <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动音频流</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError) &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>)); <span class="comment">// 启动音频流失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">Pa_CloseStream</span>(m_stream); <span class="comment">// 关闭音频流</span></span><br><span class="line">        <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置标志，表示正在录音</span></span><br><span class="line">    m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示用户录音已经开始</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动录音线程</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CSpeechRecognitionPocketSphinxDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">    t.<span class="built_in">detach</span>(); <span class="comment">// 分离线程，使其在后台运行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line">    <span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、录音"><a href="#3、录音" class="headerlink" title="3、录音"></a>3、录音</h2><p>注意，读取音频数据失败时，需要进行数据转换，语音识别这些一般是Unicode编码，需要转换，否则报错信息乱码，看不懂；转换为宽多字节可以显示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 开始新的识别单元</span></span><br><span class="line">    <span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区用于存储双声道音频数据</span></span><br><span class="line">    <span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当正在录音时不断读取音频数据</span></span><br><span class="line">    <span class="keyword">while</span> (m_bListening) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从音频流中读取数据到缓冲区</span></span><br><span class="line">        PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line">        <span class="keyword">if</span> (err != paNoError)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读取音频数据失败，显示错误消息</span></span><br><span class="line">            CString errorMsg;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line">                <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">                errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line">                <span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将单声道数据添加到音频缓冲区</span></span><br><span class="line">        m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将单声道数据传递给 PocketSphinx 进行处理</span></span><br><span class="line">        <span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束识别单元</span></span><br><span class="line">    <span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止音频流</span></span><br><span class="line">    <span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line">    <span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line">    <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、识别"><a href="#4、识别" class="headerlink" title="4、识别"></a>4、识别</h2><p>注意转换音频格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果音频缓冲区为空，提示没有音频数据可处理</span></span><br><span class="line">    <span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保 PocketSphinx 已正确初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!m_ps)</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始新的识别单元</span></span><br><span class="line">    <span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理录制的音频数据</span></span><br><span class="line">    <span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束识别单元</span></span><br><span class="line">    <span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取识别结果</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line">            <span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将识别结果显示在编辑框中</span></span><br><span class="line">            m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转换识别结果失败，提示错误信息</span></span><br><span class="line">            m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 没有检测到结果，提示信息</span></span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从识别结果中提取文本</span></span><br><span class="line"><span class="function">CString <span class="title">CSpeechRecognitionPocketSphinxDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、定时器"><a href="#5、定时器" class="headerlink" title="5、定时器"></a>5、定时器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、结束按钮"><a href="#6、结束按钮" class="headerlink" title="6、结束按钮"></a>6、结束按钮</h2><p>音频数据不要一直循环启动，这样识别很乱，一个开始按钮，一个结束按钮；或者就设置15s的录音时间，然后进行读取录音数据，进行识别信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_查看博客(一)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>cmake下载：<a href="https://blog.csdn.net/didi_ya/article/details/123029415">Windows下CMake的下载与安装详解_cmake下载-CSDN博客</a></p><p>vcpkg</p><p>博客：<a href="https://blog.csdn.net/adminstate/article/details/134966644">vcpkg下载及安装-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_48095841/article/details/135639120">Windows下载安装vcpkg并使用它来安装第三方库（visualstudio）_vcpkg下载-CSDN博客</a></p><p>下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:microsoft/vcpkg.git</span><br><span class="line">cd vcpkg</span><br></pre></td></tr></table></figure><p>引导vcpkg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bootstrap-vcpkg.bat</span><br></pre></td></tr></table></figure><p>添加vcpkg路径到系统PATH</p><p><a href="https://cloud.tencent.com/developer/article/2349643">识别准确率竟如此高，实时语音识别服务-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>AaltoASR:<a href="https://github.com/aalto-speech/AaltoASR/blob/develop/INSTALLATION.md">AaltoASR&#x2F;INSTALLATION.md at develop · aalto-speech&#x2F;AaltoASR (github.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_模拟AI(三)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%A8%A1%E6%8B%9FAI%E5%8A%9F%E8%83%BD/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%A8%A1%E6%8B%9FAI%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="一、AI模拟功能需求"><a href="#一、AI模拟功能需求" class="headerlink" title="一、AI模拟功能需求"></a>一、AI模拟功能需求</h1><h2 id="1-功能概述"><a href="#1-功能概述" class="headerlink" title="1 功能概述"></a><strong>1</strong> 功能概述</h2><p>模拟AI进行语音对话，实现语音控制软件进行交互功能。</p><h2 id="2-详细说明"><a href="#2-详细说明" class="headerlink" title="2 详细说明"></a><strong>2</strong> 详细说明</h2><p>自定义语音助手名称，类似小爱、小度等。（数据库存储）</p><h3 id="2-1-语音助手功能"><a href="#2-1-语音助手功能" class="headerlink" title="2.1 语音助手功能"></a>2.1 <strong>语音助手功能</strong></h3><ol><li><p>软件启动后，默认启动识别功能</p></li><li><p>识别到呼唤助手名称，语音播报进行回复（我在）</p></li><li><p>识别到口呼常用语后，根据内容进行语音回复或进行内容播报</p></li></ol><h3 id="2-2-设计说明"><a href="#2-2-设计说明" class="headerlink" title="2.2 设计说明"></a>2.2 <strong>设计说明</strong></h3><h4 id="2-2-1-数据库"><a href="#2-2-1-数据库" class="headerlink" title="2.2.1 数据库"></a>2.2.1 数据库</h4><ul><li><p>口呼常用语存储本地数据库，包括语音助手的名称</p></li><li><p>回复的内容存储本地数据库</p></li></ul><h4 id="2-2-2-交互实现"><a href="#2-2-2-交互实现" class="headerlink" title="2.2.2 交互实现"></a>2.2.2 交互实现</h4><ul><li><p>识别到内容与数据库中第一条一致，语音回复数据库第一条内容 <strong>我在</strong></p></li><li><p>识别到内容与数据库中其它内容一致，语音回复数据库中对应ID的内容</p></li></ul><h1 id="二、数据库内容"><a href="#二、数据库内容" class="headerlink" title="二、数据库内容"></a>二、数据库内容</h1><table><thead><tr><th>识别数据库内容</th><th></th><th>回复数据库内容</th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>内容</td><td></td><td>序号</td><td>内容</td></tr><tr><td>0</td><td>小度小度</td><td></td><td>0</td><td>我在</td></tr><tr><td>1</td><td>调车白灯-8</td><td></td><td>1</td><td>调车白灯</td></tr><tr><td>2</td><td>负载断开</td><td></td><td>2</td><td>负载断开</td></tr><tr><td>3</td><td>进路开通 8</td><td></td><td>3</td><td>进路开通</td></tr><tr><td>4</td><td>母线重联、负载断开</td><td></td><td>4</td><td>母线重联、负载断开</td></tr><tr><td>5</td><td>注意进站</td><td></td><td>5</td><td>注意进站</td></tr><tr><td>6</td><td>开左侧门</td><td></td><td>6</td><td>开左侧门</td></tr><tr><td>7</td><td>欢迎您乘坐5号线列车</td><td></td><td>7</td><td>欢迎您乘坐5号线列车</td></tr><tr><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td><td></td><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td></tr><tr><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td><td></td><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td></tr><tr><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td><td></td><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td></tr><tr><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td><td></td><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td></tr><tr><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td><td></td><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td></tr><tr><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td><td></td><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td></tr></tbody></table><h1 id="三、数据库实现"><a href="#三、数据库实现" class="headerlink" title="三、数据库实现"></a>三、数据库实现</h1><h2 id="1、启动mysql"><a href="#1、启动mysql" class="headerlink" title="1、启动mysql"></a>1、启动mysql</h2><p>用户密码：还是我的常用密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="comment">--version</span></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql<span class="number">-5.7</span><span class="number">.24</span><span class="operator">-</span>winx64\bin\mysql.exe  Ver <span class="number">14.14</span> Distrib <span class="number">5.7</span><span class="number">.24</span>, <span class="keyword">for</span> Win64 (x86_64)</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> net <span class="keyword">start</span> mysql</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG <span class="number">2182</span> 以获得更多的帮助。</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h2 id="2、MySQL-数据库配置与插入中文数据"><a href="#2、MySQL-数据库配置与插入中文数据" class="headerlink" title="2、MySQL 数据库配置与插入中文数据"></a>2、MySQL 数据库配置与插入中文数据</h2><p>在 MySQL 中，插入中文数据需要确保数据库和表的字符集设置为支持中文的字符集（如 utf8mb4）。以下是创建数据库和表结构以及插入中文数据的正确方法。</p><h3 id="1-创建数据库和表结构"><a href="#1-创建数据库和表结构" class="headerlink" title="1. 创建数据库和表结构"></a>1. 创建数据库和表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库并设置字符集</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE VoiceAssistant <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用创建的数据库</span></span><br><span class="line">USE VoiceAssistant;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建识别内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> RecognizeContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建回复内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ReplyContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入识别内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> RecognizeContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小度小度&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入回复内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ReplyContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;我在&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="语音播报"><a href="#语音播报" class="headerlink" title="语音播报"></a>语音播报</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Windows TTS进行语音播报</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span> </span>&#123;</span><br><span class="line">    ISpVoice* pVoice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>)))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    HRESULT hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span> **)&amp;pVoice);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr)) &#123;</span><br><span class="line">        <span class="function">std::wstring <span class="title">wtext</span><span class="params">(text.begin(), text.end())</span></span>;</span><br><span class="line">        hr = pVoice-&gt;<span class="built_in">Speak</span>(wtext.<span class="built_in">c_str</span>(), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        pVoice-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        pVoice = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、初始语言识别代码"><a href="#四、初始语言识别代码" class="headerlink" title="四、初始语言识别代码"></a>四、初始语言识别代码</h1><p>将应用pocketsphinx,portaudio技术的语言识别代码替换到新项目AIVoiceAssistant中，作为项目修改的原始代码</p><p>代码主要在dlg.g，dlg.cpp，以及项目配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">VC++目录 的 包含目录</span><br><span class="line">D:\DevelopmentTools\vcpkg\packages\portaudio_x64-windows\include</span><br><span class="line">D:\ASR\pocketsphinx\include</span><br><span class="line">D:\ASR\sphinxbase\include\win32</span><br><span class="line">D:\ASR\sphinxbase\include</span><br><span class="line"></span><br><span class="line">VC++目录的库目录</span><br><span class="line">D:\DevelopmentTools\vcpkg\packages\portaudio_x64-windows\lib</span><br><span class="line">D:\ASR\pocketsphinx\bin\Debug\x64</span><br><span class="line">D:\ASR\sphinxbase\bin\Debug\x64</span><br><span class="line"></span><br><span class="line">链接器输入的附加依赖项</span><br><span class="line">sphinxbase.lib</span><br><span class="line">pocketsphinx.lib</span><br><span class="line">portaudio.lib</span><br><span class="line"></span><br><span class="line">链接器常规的附加库目录</span><br><span class="line">D:\DevelopmentTools\vcpkg\packages\portaudio_x64-windows\lib</span><br><span class="line">D:\ASR\pocketsphinx\bin\Debug\x64</span><br><span class="line">D:\ASR\sphinxbase\bin\Debug\x64</span><br></pre></td></tr></table></figure><p>还需要将sphinxbase.dll，pocketsphinx.dll，portaudio.dll复制文件放在代码路径下（存放编写代码的文件夹中）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.h: 头文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含必要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;portaudio.h&gt;</span>       <span class="comment">// PortAudio 库头文件，用于音频输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pocketsphinx.h&gt;</span>    <span class="comment">// PocketSphinx 库头文件，用于语音识别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/ad.h&gt;</span>   <span class="comment">// SphinxBase 库头文件，用于音频录制</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/err.h&gt;</span>  <span class="comment">// SphinxBase 库头文件，用于错误处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>           <span class="comment">// 文件操作头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>            <span class="comment">// 字符串处理头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>               <span class="comment">// 集合容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlstr.h&gt;</span>          <span class="comment">// ATL 字符串类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>            <span class="comment">// 线程库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>            <span class="comment">// 向量容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>         <span class="comment">// 算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span>            <span class="comment">// 本地化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span>           <span class="comment">// 编码转换头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>          <span class="comment">// 输入输出流头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_ID 999 <span class="comment">// 定义定时器 ID</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAIVoiceAssistantDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_AIVOICEASSISTANT_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;<span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HICON m_hIcon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的消息映射函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnDestroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>; <span class="comment">// 定时器处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::vector&lt;int16&gt; m_audioBuffer;   <span class="comment">// 用于存储音频数据</span></span><br><span class="line"><span class="type">bool</span> m_bListening = <span class="literal">false</span>;<span class="comment">// 语音识别信号</span></span><br><span class="line"><span class="type">cmd_ln_t</span>* m_config = <span class="literal">nullptr</span>;<span class="comment">// 配置参数指针</span></span><br><span class="line"><span class="type">ps_decoder_t</span>* m_ps = <span class="literal">nullptr</span>;<span class="comment">// PocketSphinx 解码器指针</span></span><br><span class="line"><span class="type">ad_rec_t</span>* m_ad = <span class="literal">nullptr</span>;<span class="comment">// 音频录制指针</span></span><br><span class="line">uint8 utt_started = FALSE;<span class="comment">// 标志是否开始录制</span></span><br><span class="line"></span><br><span class="line">PaStream* m_stream = <span class="literal">nullptr</span>;<span class="comment">// PortAudio 流指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RecordAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessRecordedAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span>;</span><br><span class="line"><span class="function">CString <span class="title">ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::thread m_thread; <span class="comment">// 用于音频录制和处理的线程</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistant.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistantDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048) <span class="comment">// 调整缓冲区大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;</span><br><span class="line"><span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 双声道转单声道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CAIVoiceAssistantDlg::<span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_AIVOICEASSISTANT_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAIVoiceAssistantDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStart)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStop)</span><br><span class="line"><span class="built_in">ON_WM_DESTROY</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CAIVoiceAssistantDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CAIVoiceAssistantDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 清空音频缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PortAudio</span></span><br><span class="line">PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频流参数</span></span><br><span class="line">PaStreamParameters inputParameters;</span><br><span class="line">inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line"><span class="keyword">if</span> (inputParameters.device == paNoDevice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 双声道</span></span><br><span class="line">inputParameters.sampleFormat = paInt16; <span class="comment">// 16 位整数</span></span><br><span class="line">inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开音频流</span></span><br><span class="line">err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">&amp;m_stream,</span><br><span class="line">&amp;inputParameters,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line"><span class="number">48000</span>, <span class="comment">// 采样率</span></span><br><span class="line"><span class="number">2048</span>, <span class="comment">// 缓冲区大小</span></span><br><span class="line">paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有回调</span></span><br><span class="line"><span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to open PortAudio stream: %s&quot;</span>), <span class="built_in">Pa_GetErrorText</span>(err));</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动音频流</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标志以启动录音</span></span><br><span class="line">m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动录音线程</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CAIVoiceAssistantDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();  <span class="comment">// 分离线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line"><span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"><span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m_bListening)</span><br><span class="line">&#123;</span><br><span class="line">PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line"><span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单声道数据添加到缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止音频流</span></span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CAIVoiceAssistantDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to open audio file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;int16&gt; <span class="title">audioData</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioData.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No audio data read from file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, audioData.<span class="built_in">data</span>(), audioData.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(int16), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString result = <span class="built_in">CString</span>(hyp);</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、连接MYSQL数据库"><a href="#五、连接MYSQL数据库" class="headerlink" title="五、连接MYSQL数据库"></a>五、连接MYSQL数据库</h1><p><a href="https://blog.csdn.net/qq_31762741/article/details/115044657">Visual Studio 2019连接MySQL数据库详细教程_visual studio服务器资源管理器 数据连接-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;password&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出查询结果</span></span><br><span class="line"><span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line"><span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;NULL value detected&quot;</span>));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><h3 id="1、找不到mysql-h"><a href="#1、找不到mysql-h" class="headerlink" title="1、找不到mysql.h"></a>1、找不到mysql.h</h3><p>解决方案：将mysql的include路径和lib路径设置在项目属性中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\include</span><br><span class="line"></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\lib</span><br><span class="line"></span><br><span class="line">链接器找到libmysql.lib,添加进去即可</span><br></pre></td></tr></table></figure><h3 id="2、mysql查找的数据是？乱码"><a href="#2、mysql查找的数据是？乱码" class="headerlink" title="2、mysql查找的数据是？乱码"></a>2、mysql查找的数据是？乱码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集为utf8mb4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，对得到的字符还要转换为宽字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br></pre></td></tr></table></figure><h1 id="六、制作关键字字库"><a href="#六、制作关键字字库" class="headerlink" title="六、制作关键字字库"></a>六、制作关键字字库</h1><p>新建关键字文件ai.txt，输入若干关键词，每行一个关键词。注意这个关键字文件要求utf-8编码，无BOM头，\n换行，因此最好在Linux下面编辑。用UE等高级编辑器也可以。</p><p>使用在线lm工具<br> <a href="http://www.speech.cs.cmu.edu/tools/lmtool-new.html">http://www.speech.cs.cmu.edu/tools/lmtool-new.html</a></p><p>将keyword.txt上传上去，会生成一堆.dic .lm .vocab等文件。直接下载.tgz的整合文件，解压缩，里面有用的只有.dic和.lm文件。由于lmtool不识别中文，因此.dic文件是空的。需要自己手动添加注音</p><p>到官网下载普通话的完整hmm模型 zh_broadcastnews_16k_ptm256_8000.tar.bz2 和完整的字典 zh_broadcastnews_utf8.dic<br> [<a href="https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/Mandarin/]">https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/Mandarin/]</a>(<a href="https://sourceforge.net/projects/cmusphinx/files/Acoustic">https://sourceforge.net/projects/cmusphinx/files/Acoustic</a> and Language Models&#x2F;Mandarin&#x2F;)</p><p>参照完整的字典 zh_broadcastnews_utf8.dic，对lmtool生成的.dic文件进行注音，例如</p><p>哈密瓜 h a m i g ua</p><p>有些名词zh_broadcastnews_utf8.dic里面没有，需要自己一个个字拼起来，例如山竹没有，但是有山和竹的拼音</p><p>北山 b ei sh an<br> 成竹 ch eng zh u</p><p>则<br> 山竹 sh an zh u</p><p>拼音还是比较好办的</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1、关键字太长"><a href="#1、关键字太长" class="headerlink" title="1、关键字太长"></a>1、关键字太长</h3><p>在 PocketSphinx 中，关键字过长可能导致识别问题，因为默认情况下，PocketSphinx 对每个单词的字符数有一个限制（通常是 34 个字符）。</p><p>针对关键字太长的问题，采用划分长句子，应用模糊匹配的方法去寻找mysql中的句子</p><h1 id="七、语音识别结果处理"><a href="#七、语音识别结果处理" class="headerlink" title="七、语音识别结果处理"></a>七、语音识别结果处理</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::processRecognitionResult</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;password&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>)) <span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用LIKE进行模糊匹配</span></span><br><span class="line">std::string query = <span class="string">&quot;SELECT id FROM RecognizeContent WHERE content LIKE &#x27;%&quot;</span> + recognizedText + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line">id = std::<span class="built_in">stoi</span>(row[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(id);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将UTF-8字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试输出</span></span><br><span class="line"><span class="comment">//AfxMessageBox(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将CString转换为std::string</span></span><br><span class="line"><span class="function">CT2CA <span class="title">pszConvertedAnsiString</span><span class="params">(result)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">replyContent</span><span class="params">(pszConvertedAnsiString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用speak函数</span></span><br><span class="line"><span class="built_in">speak</span>(replyContent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="八、语音播报"><a href="#八、语音播报" class="headerlink" title="八、语音播报"></a>八、语音播报</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Windows TTS进行语音播报</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ISpVoice* pVoice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HRESULT hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 使用MultiByteToWideChar将std::string转换为std::wstring</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> slength = (<span class="type">int</span>)text.<span class="built_in">length</span>() + <span class="number">1</span>;</span><br><span class="line">len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function">std::wstring <span class="title">wtext</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, &amp;wtext[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出调试信息</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(wtext.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">hr = pVoice-&gt;<span class="built_in">Speak</span>(wtext.<span class="built_in">c_str</span>(), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">pVoice-&gt;<span class="built_in">Release</span>();</span><br><span class="line">pVoice = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>识别率低，无法控制识别的文本</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.h: 头文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含必要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;portaudio.h&gt;</span>       <span class="comment">// PortAudio 库头文件，用于音频输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pocketsphinx.h&gt;</span>    <span class="comment">// PocketSphinx 库头文件，用于语音识别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/ad.h&gt;</span>   <span class="comment">// SphinxBase 库头文件，用于音频录制</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/err.h&gt;</span>  <span class="comment">// SphinxBase 库头文件，用于错误处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>           <span class="comment">// 文件操作头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>            <span class="comment">// 字符串处理头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>               <span class="comment">// 集合容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlstr.h&gt;</span>          <span class="comment">// ATL 字符串类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>            <span class="comment">// 线程库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>            <span class="comment">// 向量容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>         <span class="comment">// 算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span>            <span class="comment">// 本地化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span>           <span class="comment">// 编码转换头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>          <span class="comment">// 输入输出流头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_ID 999 <span class="comment">// 定义定时器 ID</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAIVoiceAssistantDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_AIVOICEASSISTANT_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;<span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HICON m_hIcon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的消息映射函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnDestroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>; <span class="comment">// 定时器处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::vector&lt;int16&gt; m_audioBuffer;   <span class="comment">// 用于存储音频数据</span></span><br><span class="line"><span class="type">bool</span> m_bListening = <span class="literal">false</span>;<span class="comment">// 语音识别信号</span></span><br><span class="line"><span class="type">cmd_ln_t</span>* m_config = <span class="literal">nullptr</span>;<span class="comment">// 配置参数指针</span></span><br><span class="line"><span class="type">ps_decoder_t</span>* m_ps = <span class="literal">nullptr</span>;<span class="comment">// PocketSphinx 解码器指针</span></span><br><span class="line"><span class="type">ad_rec_t</span>* m_ad = <span class="literal">nullptr</span>;<span class="comment">// 音频录制指针</span></span><br><span class="line">uint8 utt_started = FALSE;<span class="comment">// 标志是否开始录制</span></span><br><span class="line"></span><br><span class="line">PaStream* m_stream = <span class="literal">nullptr</span>;<span class="comment">// PortAudio 流指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RecordAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessRecordedAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span>;</span><br><span class="line"><span class="function">CString <span class="title">ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::thread m_thread; <span class="comment">// 用于音频录制和处理的线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectToDatabase</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processRecognitionResult</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistant.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistantDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048) <span class="comment">// 调整缓冲区大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;</span><br><span class="line"><span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 双声道转单声道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CAIVoiceAssistantDlg::<span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_AIVOICEASSISTANT_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="comment">//&quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">//&quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;,</span></span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\ai3.lm&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\ai3.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//connectToDatabase();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAIVoiceAssistantDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStart)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStop)</span><br><span class="line"><span class="built_in">ON_WM_DESTROY</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CAIVoiceAssistantDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CAIVoiceAssistantDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 清空音频缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PortAudio</span></span><br><span class="line">PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频流参数</span></span><br><span class="line">PaStreamParameters inputParameters;</span><br><span class="line">inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line"><span class="keyword">if</span> (inputParameters.device == paNoDevice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 双声道</span></span><br><span class="line">inputParameters.sampleFormat = paInt16; <span class="comment">// 16 位整数</span></span><br><span class="line">inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开音频流</span></span><br><span class="line">err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">&amp;m_stream,</span><br><span class="line">&amp;inputParameters,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line"><span class="number">48000</span>, <span class="comment">// 采样率</span></span><br><span class="line"><span class="number">2048</span>, <span class="comment">// 缓冲区大小</span></span><br><span class="line">paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有回调</span></span><br><span class="line"><span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动音频流</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标志以启动录音</span></span><br><span class="line">m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动录音线程</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CAIVoiceAssistantDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();  <span class="comment">// 分离线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line"><span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps); <span class="comment">// 开始新的语音识别</span></span><br><span class="line"><span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m_bListening)</span><br><span class="line">&#123;</span><br><span class="line">PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line"><span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单声道数据添加到缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps); <span class="comment">// 结束当前的语音识别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止音频流</span></span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">processRecognitionResult</span>(hyp);</span><br><span class="line">hyp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CAIVoiceAssistantDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to open audio file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;int16&gt; <span class="title">audioData</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioData.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No audio data read from file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, audioData.<span class="built_in">data</span>(), audioData.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(int16), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString result = <span class="built_in">CString</span>(hyp);</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------- 数据库连接 ----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::processRecognitionResult</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>)) <span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用LIKE进行模糊匹配</span></span><br><span class="line">std::string query = <span class="string">&quot;SELECT id FROM RecognizeContent WHERE content LIKE &#x27;%&quot;</span> + recognizedText + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line">id = std::<span class="built_in">stoi</span>(row[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(id);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将UTF-8字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试输出</span></span><br><span class="line"><span class="comment">//AfxMessageBox(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将CString转换为std::string</span></span><br><span class="line"><span class="function">CT2CA <span class="title">pszConvertedAnsiString</span><span class="params">(result)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">replyContent</span><span class="params">(pszConvertedAnsiString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用speak函数</span></span><br><span class="line"><span class="built_in">speak</span>(replyContent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Windows TTS进行语音播报</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ISpVoice* pVoice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HRESULT hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 使用MultiByteToWideChar将std::string转换为std::wstring</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> slength = (<span class="type">int</span>)text.<span class="built_in">length</span>() + <span class="number">1</span>;</span><br><span class="line">len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function">std::wstring <span class="title">wtext</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, &amp;wtext[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出调试信息</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(wtext.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">hr = pVoice-&gt;<span class="built_in">Speak</span>(wtext.<span class="built_in">c_str</span>(), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">pVoice-&gt;<span class="built_in">Release</span>();</span><br><span class="line">pVoice = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出查询结果</span></span><br><span class="line"><span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line"><span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;NULL value detected&quot;</span>));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_开发环境搭建(一）</title>
      <link href="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Mac环境下命令方式搭建"><a href="#一、Mac环境下命令方式搭建" class="headerlink" title="一、Mac环境下命令方式搭建"></a>一、Mac环境下命令方式搭建</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install python@3.9</span><br><span class="line"></span><br><span class="line">pip3 install numpy matplotlib opencv_python</span><br><span class="line">// numpy：矩阵相关操作</span><br><span class="line">// matplotlib：图形相关</span><br></pre></td></tr></table></figure><p><img src="/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.assets/image-20240717231410147.png" alt="image-20240717231410147"></p><h1 id="二、Windows命令行搭建环境"><a href="#二、Windows命令行搭建环境" class="headerlink" title="二、Windows命令行搭建环境"></a>二、Windows命令行搭建环境</h1><ul><li>下载并安装python3</li><li>配置python3环境变量</li><li>使用pip命令安装numpy等库</li></ul><ol><li>如果没有安装过python，则从<a href="https://www.python.org/ftp/python/3.7.8/%E6%89%BE%E5%88%B0python-3.7.8-amd64.exe%E4%B8%8B%E8%BD%BDpython3%EF%BC%8C%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E4%B9%9F%E7%B1%BB%E4%BC%BC">https://www.python.org/ftp/python/3.7.8/找到python-3.7.8-amd64.exe下载python3，其他版本也类似</a></li><li>安装之后，在编辑环境变量的系统变量的Path里面添加python路径<br><img src="/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.assets/image-20240717234510993.png" alt="image-20240717234510993"></li><li>python命令可用后，可以执行python -m pip –version查看是否安装了pip命令。pip可以用来安装各种包</li><li>命令行安装python -m pip install numpy matplotlib opencv-python</li><li>如果访问不了外网，可以手动下载文件<a href="https://pypi.org/project%EF%BC%8C%E5%9C%A8%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%8C%85%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E4%BD%BF%E7%94%A8python">https://pypi.org/project，在里面查找缺失的包，然后再使用python</a> -m pip install xxx(下载的名字)</li></ol><p><strong>其他解决方案：</strong></p><p><a href="https://blog.csdn.net/allway2/article/details/120691222">如何在 Windows 上为 Python 安装 OpenCV？_windows python安装opencv-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41627235/article/details/87692748">OpenCV-python安装教程_opencv python安装-CSDN博客</a></p><h1 id="三、Ubuntu-命令行搭建"><a href="#三、Ubuntu-命令行搭建" class="headerlink" title="三、Ubuntu 命令行搭建"></a>三、Ubuntu 命令行搭建</h1><ul><li>apt install python3</li><li>使用pip命令安装numpy、matplotlib和opencv库</li><li>apt install …</li></ul><h1 id="四、Windows-源码下载"><a href="#四、Windows-源码下载" class="headerlink" title="四、Windows 源码下载"></a>四、Windows 源码下载</h1><p><strong>源码编译方式步骤</strong></p><ul><li><h2 id="安装必要的库和工具"><a href="#安装必要的库和工具" class="headerlink" title="安装必要的库和工具"></a>安装必要的库和工具</h2><ul><li><h3 id="安装python3和numpy库"><a href="#安装python3和numpy库" class="headerlink" title="安装python3和numpy库"></a>安装python3和numpy库</h3><ol><li>如果没有安装过python，则从<a href="https://www.python.org/ftp/python/3.7.8/%E6%89%BE%E5%88%B0python-3.7.8-amd64.exe%E4%B8%8B%E8%BD%BDpython3%EF%BC%8C%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E4%B9%9F%E7%B1%BB%E4%BC%BC">https://www.python.org/ftp/python/3.7.8/找到python-3.7.8-amd64.exe下载python3，其他版本也类似</a></li><li>安装VS，社区版即可，下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></li><li>安装 make，下载地址：<a href="https://github.com/Kitware/CMake/releases/download/v3.20.0-rc1/cmake-3.20.0-rc1-windows-x86_64.msi">https://github.com/Kitware/CMake/releases/download/v3.20.0-rc1/cmake-3.20.0-rc1-windows-x86_64.msi</a></li></ol></li><li><h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3></li></ul></li><li><h2 id="下载OpenCV源码"><a href="#下载OpenCV源码" class="headerlink" title="下载OpenCV源码"></a>下载OpenCV源码</h2><ul><li>OpenCV 源码地址: git clone <a href="https://github.com/opencv/opencv.git">https://github.com/opencv/opencv.git</a></li><li>OpenCV-contribue 源码地址：git clone <a href="https://github.com/opencv/opecv_contrib.git">https://github.com/opencv/opecv_contrib.git</a></li></ul></li><li><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li><p>在存放opencv源码目录中创建build目录：mkdir build</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">存放源码目录，如</span><br><span class="line">learnOpenCV</span><br><span class="line">opencv</span><br><span class="line">opencv-contrib</span><br><span class="line">build</span><br></pre></td></tr></table></figure></li><li><p>运行cmake，生成编译脚本</p><ol><li>选择opencv源码目录</li><li>选择编译目录</li><li>选择CPU架构</li><li>增加opencv-contrib选项</li><li>检查编译选项</li><li>生成编译脚本</li></ol><p><img src="/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.assets/image-20240718010011912.png" alt="image-20240718010011912"></p><p><img src="/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.assets/image-20240718010137273.png" alt="image-20240718010137273"></p><p><img src="/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.assets/image-20240718010702210.png" alt="image-20240718010702210"></p></li><li><p>打开opencv工程文件OpenCV.sln</p><ol><li>选择输出版本文件</li><li>进行编译，编译好的文件都在build目录下的install文件夹中</li></ol></li></ol></li></ul><p><img src="/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.assets/image-20240718011322647.png" alt="image-20240718011322647"></p><h1 id="五、Windows-下C-使用OpenCV库"><a href="#五、Windows-下C-使用OpenCV库" class="headerlink" title="五、Windows 下C++使用OpenCV库"></a>五、Windows 下C++使用OpenCV库</h1><h1 id="六、利用工具高效开发OpenCV"><a href="#六、利用工具高效开发OpenCV" class="headerlink" title="六、利用工具高效开发OpenCV"></a>六、利用工具高效开发OpenCV</h1>]]></content>
      
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏</title>
      <link href="/2024/07/07/%E6%94%B6%E8%97%8F/"/>
      <url>/2024/07/07/%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<p>搭建博客：<a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a><br>博客分类：<a href="https://www.jianshu.com/p/e17711e44e00">https://www.jianshu.com/p/e17711e44e00</a></p><p><a href="https://cloud.tencent.com/developer/article/1970544">Hexo + Typora + 开发Hexo插件 解决图片路径不一致-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
