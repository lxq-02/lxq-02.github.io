<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mingw</title>
      <link href="/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/"/>
      <url>/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/</url>
      
        <content type="html"><![CDATA[<h1 id="下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）"><a href="#下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）" class="headerlink" title="下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）"></a>下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）</h1><p><a href="https://blog.csdn.net/jjxcsdn/article/details/123058745">下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> mingw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS</title>
      <link href="/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/"/>
      <url>/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><p><a href="https://blog.csdn.net/qq_53862369/article/details/117295784">Visual Studio 2013下载及其安装_vs2013下载官方下载-CSDN博客</a></p><p><a href="https://blog.csdn.net/YSJ367635984/article/details/104648941">visual studio 2019安装教程（详细的很）_vs2019安装教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_49329264/article/details/132640725">VS2022工具箱消失或者工具箱控件变为灰色不可用解决方案_vs工具箱控件灰色-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhebushibiaoshifu/article/details/132940838">Visual Studio复制、拷贝C++项目与第三方库配置信息到新的项目中_vs如何把项目配置完全添加到另外一个项目-CSDN博客</a></p><h2 id="1-2、VS调试"><a href="#1-2、VS调试" class="headerlink" title="1.2、VS调试"></a>1.2、VS调试</h2><p><a href="https://blog.csdn.net/weixin_74310945/article/details/128998270">https://blog.csdn.net/weixin_74310945/article/details/128998270</a></p><h2 id="1-3、快捷键"><a href="#1-3、快捷键" class="headerlink" title="1.3、快捷键"></a>1.3、快捷键</h2><ul><li>关闭文件：Ctrl + F4</li><li>关闭所有文件： Alt + W + L</li><li>回到上一步：Ctrl + -</li><li>隐藏：Ctrl + M，之后Ctrl + H</li></ul><h2 id="1-4、VS2022配置QT"><a href="#1-4、VS2022配置QT" class="headerlink" title="1.4、VS2022配置QT"></a>1.4、VS2022配置QT</h2><p><a href="https://www.cnblogs.com/W-cats/p/18177801">https://www.cnblogs.com/W-cats/p/18177801</a></p><h1 id="二、报错"><a href="#二、报错" class="headerlink" title="二、报错"></a>二、报错</h1><h2 id="LNK2005"><a href="#LNK2005" class="headerlink" title="LNK2005"></a>LNK2005</h2><p><a href="https://blog.csdn.net/zhanghefu/article/details/116266727">LNK2005错误的原因与解决-CSDN博客</a></p><h2 id="LNK2038"><a href="#LNK2038" class="headerlink" title="LNK2038"></a>LNK2038</h2><p><a href="https://www.cnblogs.com/arxive/p/11220854.html">error LNK2038: 检测到“RuntimeLibrary”的不匹配项: 值“MDd_DynamicDebug”不匹配值“MD_DynamicRelease” - wenglabs - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> VS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora</title>
      <link href="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/"/>
      <url>/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/</url>
      
        <content type="html"><![CDATA[<h1 id="0-Typora"><a href="#0-Typora" class="headerlink" title="0 Typora"></a>0 Typora</h1><p>基础Typora是一款<strong>支持实时预览的Markdown文本编辑器</strong>。它有OS X、Windows、Linux三个平台的版本，且<strong>完全免费。</strong></p><h2 id="0-1-Markdown"><a href="#0-1-Markdown" class="headerlink" title="0.1 Markdown"></a>0.1 Markdown</h2><p>Markdown 是用来编写结构化文档的一种纯文本模式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度 的格式排版。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较收到认可的是 GFM标准，它是由著名代码托管网站 Github 所制定的。 Typora 主要使用的是 GFM 标准。</p><h1 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a>一、基本知识</h1><h2 id="1-0-打字机模式和专注模式"><a href="#1-0-打字机模式和专注模式" class="headerlink" title="1.0 打字机模式和专注模式"></a>1.0 打字机模式和专注模式</h2><p>[打字机模式]使得你所编辑的那一行永远处于屏幕正中。</p><p>[专注模式] 使你正在编辑的哪一行保留颜色，而其他行的字体呈灰色</p><p>你可以在 $视图-专注模式 &#x2F; 打字机模式$ 中勾选使用这两个模式</p><h2 id="1-1-空格和换行"><a href="#1-1-空格和换行" class="headerlink" title="1.1 空格和换行"></a>1.1 空格和换行</h2><p>Typora 在空格与换行部分主要是 使用 CommonMark 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><strong>空格</strong>：在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个  <code>\</code>转义符，或者直接使用 HTML风格的<code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行</strong>：需要说明的是，在 Markdown 语法下，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在Typora 中，你可以通过 <code>shift + Enter</code>完成一次软换行，软换行只在编辑界面可见，当文本导出时换行会省略。</li><li>**硬换行： **你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li></ul><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105094332841.png" alt="image-20211105094332841"></p><h2 id="1-2-emoji-表情"><a href="#1-2-emoji-表情" class="headerlink" title="1.2  emoji 表情"></a>1.2  emoji 表情</h2><p>在 Typora 中，你可以用 <code>:emoji:</code>的形式来打出 emoji，软件会自动给出图形的提示。</p><p>:horse:</p><h2 id="1-3-学术文档编辑器"><a href="#1-3-学术文档编辑器" class="headerlink" title="1.3 学术文档编辑器"></a>1.3 学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p><p><strong>LaTex</strong></p><p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ol><p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 &#96;&#96;&#96;&#96;&#96; 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/51bf2f290592e1ddbadb95765c04f297-1636077212750.png" alt="img"><strong>链接引用与脚注</strong></h3><p>**链接引用 **类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p>**脚注 **在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="  文件系统"></a><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/5f82606e6d89fe1eb24705c4ca6b895d.png" alt="img">  文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。</li></ul><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/ba295f21f0b71646bb36a0517e868ced.png" alt="img"></p><h1 id="二、数字符号"><a href="#二、数字符号" class="headerlink" title="二、数字符号"></a>二、数字符号</h1><h2 id="2-1-上标、下标、求和、括号"><a href="#2-1-上标、下标、求和、括号" class="headerlink" title="2.1 上标、下标、求和、括号"></a>2.1 上标、下标、求和、括号</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>上标</td><td><code>x^2</code>、<code>x^y</code>、<code>e^3</code></td><td>$x^2、x^y、e^3$</td></tr><tr><td>下标</td><td><code>x_0</code>、<code>a_1</code>、<code>T_1</code></td><td>$x_0、a_1、T_1$</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>$\sum$</td></tr><tr><td>求和上下标</td><td>\sum_0^3 、\sum\limits_0^{\infty} 、\sum\limits_{-\infty}^{\infty}</td><td>$\sum_0^3、\sum\limits_0^{\infty}、\sum\limits_{-\infty}^{\infty}$</td></tr><tr><td>中括号</td><td><code>[s(s+1)-(s-1)(s-2)]</code></td><td>$[s(s+1)-(s-1)(s-2)]$</td></tr><tr><td>花括号</td><td><code>\lbrace x-y \rbrace</code></td><td>$\lbrace x-y \rbrace$</td></tr></tbody></table><h2 id="2-2-三角函数、指数、对数"><a href="#2-2-三角函数、指数、对数" class="headerlink" title="2.2 三角函数、指数、对数"></a>2.2 三角函数、指数、对数</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>sin</td><td><code>\sin(x)</code></td><td>$\sin(x)$</td></tr><tr><td>cos</td><td><code>\cos(x)</code></td><td>$\cos(x)$</td></tr><tr><td>tan</td><td><code>\tan(x)</code></td><td>$\tan(x)$</td></tr><tr><td>log</td><td><code>\log_2 10</code></td><td>$\log_2 10$</td></tr><tr><td>ln</td><td><code>\ln2</code></td><td>$\ln2$</td></tr></tbody></table><h2 id="2-3-运算符"><a href="#2-3-运算符" class="headerlink" title="2.3 运算符"></a>2.3 运算符</h2><table><thead><tr><th></th><th><strong>markdown语法（输入在两个$$之间）</strong></th><th><strong>显示</strong></th></tr></thead><tbody><tr><td>乘</td><td><code>\times</code></td><td>$\times$</td></tr><tr><td>除</td><td><code>\div</code></td><td>$\div$</td></tr><tr><td>加减</td><td><code>\pm</code></td><td>$\pm$</td></tr><tr><td>减加</td><td><code>\mp</code></td><td>$\mp$</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>$\sum$</td></tr><tr><td>求积</td><td><code>\prod</code></td><td>$\prod$</td></tr><tr><td>微分</td><td><code>\partial</code></td><td>$\partial$</td></tr><tr><td>积分</td><td><code>\int</code>、<code>\displaystyle\int</code></td><td>$\int$、$\displaystyle\int $</td></tr><tr><td>不等于</td><td><code>\neq</code></td><td>$\neq$</td></tr><tr><td>大于等于</td><td><code>\geq</code></td><td>$\geq$</td></tr><tr><td>小于等于</td><td><code>\leq</code></td><td>$\leq$</td></tr><tr><td>约等于</td><td><code>\approx</code></td><td>$\approx$</td></tr><tr><td>不大于等于</td><td><code>x+y  \ngeq z</code></td><td>$x+y  \ngeq z$</td></tr><tr><td>点乘</td><td><code>a \cdot b</code></td><td>$ a \cdot b$</td></tr><tr><td>星乘</td><td><code>a \ast b</code></td><td>$a \ast b$</td></tr><tr><td>分式</td><td><code>\frac&#123;y&#125;&#123;x&#125;</code>、<code>\frac&#123;1&#125;&#123;x+1&#125;</code></td><td>$\frac{y}{x}、\frac{1}{x+1}$</td></tr></tbody></table><h2 id="2-4-导数，省略号"><a href="#2-4-导数，省略号" class="headerlink" title="2.4 导数，省略号"></a>2.4 导数，省略号</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>无穷</td><td><code>\infty</code></td><td>$\infty$</td></tr><tr><td>矢量</td><td><code>\vec&#123;a&#125;</code></td><td>$\vec{a}$</td></tr><tr><td>一阶导数</td><td><code>\dot&#123;x&#125;</code></td><td>$\dot{x}$</td></tr><tr><td>二阶导数</td><td><code>\ddot&#123;x&#125;</code></td><td>$\ddot{x}$</td></tr><tr><td>算数平均值</td><td><code>\bar&#123;a&#125;</code></td><td>$\bar{a}$</td></tr><tr><td>概率分布</td><td><code>\hat&#123;a&#125;</code></td><td>$\hat{a}$</td></tr><tr><td>虚数 i、j</td><td><code>\imath</code>、<code>\jmath</code></td><td>$\imath$  $\jmath$</td></tr><tr><td>四种省略符号</td><td><code>\ldots</code> <code>\cdots</code> <code>vdots</code> <code>\ddots</code></td><td>$\dots$  $\cdots$  $\vdots$ $\ddots$</td></tr></tbody></table><h2 id="2-5-积分、微分"><a href="#2-5-积分、微分" class="headerlink" title="2.5 积分、微分"></a>2.5 积分、微分</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>平均数运算</td><td><code>\overline&#123;xyz&#125;</code></td><td>$\overline{xyz}$</td></tr><tr><td>开二次方运算</td><td><code>\sqrt&#123;x&#125;</code></td><td>$\sqrt{x}$</td></tr><tr><td>极限运算</td><td><code>\lim^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;y&#125;&#123;x&#125;&#125;</code></td><td>$\lim^{x \to \infty}_{y \to 0}{\frac{y}{x}}$</td></tr><tr><td>求和运算</td><td><code>\sum^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;y&#125;&#123;x&#125;&#125;</code></td><td>$\sum^{x \to \infty}_{y \to 0}{\frac{y}{x}}$</td></tr><tr><td>积分运算</td><td><code>\int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;</code></td><td>$\int^{\infty}_{0}{xdx}$</td></tr><tr><td></td><td><code>\displaystyle \int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;</code></td><td>$\displaystyle \int^{\infty}_{0}{xdx}$</td></tr><tr><td>微分运算</td><td><code>\frac&#123;\partial x&#125;&#123;\partial y&#125;</code></td><td>$\frac{\partial x}{\partial y}$</td></tr></tbody></table><h2 id="2-6-集合运算"><a href="#2-6-集合运算" class="headerlink" title="2.6 集合运算"></a>2.6 集合运算</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>属于</td><td><code>\in</code></td><td>$\in$</td></tr><tr><td>不属于</td><td><code>\notin</code></td><td>$\notin$</td></tr><tr><td>包含于</td><td><code>\subset</code> <code>\supset</code></td><td>$\subset$ $\supset$</td></tr><tr><td>真包含于</td><td><code>\subseteq</code> <code>\supseteq</code></td><td>$\subseteq$ $\supseteq$</td></tr><tr><td>并集</td><td><code>\cup</code></td><td>$\cup$</td></tr><tr><td>交集</td><td><code>\cap</code></td><td>$\cap$</td></tr><tr><td>差集</td><td><code>\setminus</code></td><td>$\setminus$</td></tr><tr><td>同或</td><td><code>\bigodot</code></td><td>$\bigodot$</td></tr><tr><td>同与</td><td><code>\bigotimes</code></td><td>$\bigotimes$</td></tr><tr><td>异或</td><td><code>\bigoplus</code></td><td>$\bigoplus$</td></tr><tr><td>实数集合</td><td><code>\mathbb&#123;R&#125;</code></td><td>$\mathbb{R}$</td></tr><tr><td>自然数集合</td><td><code>\mathbb&#123;Z&#125;</code></td><td>$\mathbb{Z}$</td></tr><tr><td>析取联结词</td><td><code>$\vee$</code></td><td>$\vee$</td></tr><tr><td>合取联结词</td><td><code>$\wedge$</code></td><td>$\wedge$</td></tr><tr><td>蕴涵连接词</td><td><code>$\rightarrow$</code></td><td>$\rightarrow$</td></tr></tbody></table><h2 id="2-7、箭头"><a href="#2-7、箭头" class="headerlink" title="2.7、箭头"></a>2.7、箭头</h2><table><thead><tr><th align="center">Markdown语法</th><th>形状</th></tr></thead><tbody><tr><td align="center"><code>$\uparrow$</code></td><td>$\uparrow$</td></tr><tr><td align="center"><code>$\Uparrow&amp;</code></td><td>$\Uparrow$</td></tr><tr><td align="center"><code>&amp;\downarrow$</code></td><td>$\downarrow$</td></tr><tr><td align="center"><code>$\Downarrow$</code></td><td>$\Downarrow$</td></tr><tr><td align="center"><code>$\leftarrow$</code></td><td>$\leftarrow$</td></tr><tr><td align="center"><code>$\Leftarrow$</code></td><td>$\Leftarrow$</td></tr><tr><td align="center"><code>$\rightarrow$</code></td><td>$\rightarrow$</td></tr><tr><td align="center"><code>$\Rightarrow$</code></td><td>$\Rightarrow$</td></tr><tr><td align="center">$<code>\updownarrow$</code></td><td>$\updownarrow$</td></tr><tr><td align="center">$<code>\Updownarrow$</code></td><td>$\Updownarrow$</td></tr><tr><td align="center"><code>$\leftrightarrow$</code></td><td>$\leftrightarrow$</td></tr><tr><td align="center"><code>$\Leftrightarrow$</code></td><td>$\Leftrightarrow$</td></tr></tbody></table><hr><p>长箭头</p><table><thead><tr><th align="center">MarkDown</th><th>箭头形状</th></tr></thead><tbody><tr><td align="center"><code>$\longleftarrow$</code></td><td>$\longleftarrow$</td></tr><tr><td align="center"><code>$\Longleftarrow$</code></td><td>$\Longleftarrow$</td></tr><tr><td align="center"><code>$\longrightarrow$</code></td><td>$\longrightarrow$</td></tr><tr><td align="center"><code>$\Longrightarrow$</code></td><td>$\Longrightarrow$</td></tr><tr><td align="center"><code>$\longleftrightarrow$</code></td><td>$\longleftrightarrow$</td></tr><tr><td align="center"><code>$\Longleftrightarrow$</code></td><td>$\Longleftrightarrow$</td></tr></tbody></table><hr><p>其他箭头</p><table><thead><tr><th align="center">MarkDown</th><th>箭头形状</th></tr></thead><tbody><tr><td align="center"><code>$\twoheadrightarrow$</code></td><td>$\twoheadrightarrow$</td></tr><tr><td align="center">![\rightarrowtail](Typora文档.assets</td><td>$\rightarrowtail$</td></tr><tr><td align="center"><code>$\looparrowright$</code></td><td>$\looparrowright$</td></tr><tr><td align="center"><code>$\curvearrowright$</code></td><td>$\curvearrowright$</td></tr><tr><td align="center"><code>$\circlearrowright$</code></td><td>$\circlearrowright$</td></tr><tr><td align="center"><code>$\Rsh$</code></td><td>$\Rsh$</td></tr><tr><td align="center"><code>$\multimap$</code></td><td>$\multimap$</td></tr><tr><td align="center"><code>$\leftrightsquigarrow$</code></td><td>$\leftrightsquigarrow$</td></tr><tr><td align="center"><code>$\rightsquigarrow$</code></td><td>$\rightsquigarrow$</td></tr><tr><td align="center"><code>$\leadsto$</code></td><td>$\leadsto$</td></tr><tr><td align="center"><code>$\nearrow$</code></td><td>$\nearrow$</td></tr><tr><td align="center"><code>$\searrow$</code></td><td>$\searrow$</td></tr><tr><td align="center"><code>$\swarrow$</code></td><td>$\swarrow$</td></tr><tr><td align="center"><code>$\nwarrow$</code></td><td>$\nwarrow$</td></tr><tr><td align="center"><code>$\nleftarrow$</code></td><td>$\nleftarrow$</td></tr><tr><td align="center"><code>$\nLeftarrow$</code></td><td>$\nLeftarrow$</td></tr><tr><td align="center"><code>$\nrightarrow$</code></td><td>$\nrightarrow$</td></tr><tr><td align="center"><code>$\nRightarrow$</code></td><td>$\nRightarrow$</td></tr><tr><td align="center"><code>$\nleftrightarrow$</code></td><td>$\nleftrightarrow$</td></tr><tr><td align="center"><code>$\nLeftrightarrow$</code></td><td>$\nLeftrightarrow$</td></tr><tr><td align="center"><code>$\dashrightarrow$</code></td><td>$\dashrightarrow$</td></tr><tr><td align="center"><code>$\dashleftarrow$</code></td><td>$\dashleftarrow$</td></tr><tr><td align="center"><code>$\leftleftarrows$</code></td><td>$\leftleftarrows$</td></tr><tr><td align="center"><code>$\leftrightarrows$</code></td><td>$\leftrightarrows$</td></tr><tr><td align="center"><code>$\Lleftarrow$</code></td><td>$\Lleftarrow$</td></tr><tr><td align="center"><code>$\twoheadleftarrow$</code></td><td>$\twoheadleftarrow$</td></tr><tr><td align="center"><code>$\leftarrowtail</code>$</td><td>$\leftarrowtail$</td></tr><tr><td align="center"><code>$\looparrowleft$</code></td><td>$\looparrowleft$</td></tr><tr><td align="center"><code>$\curvearrowleft$</code></td><td>$\curvearrowleft$</td></tr></tbody></table><hr><table><thead><tr><th align="center">箭头形状</th><th>MarkDown</th></tr></thead><tbody><tr><td align="center"><code>$\circlearrowleft$</code></td><td>$\circlearrowleft$</td></tr><tr><td align="center"><code>$\Lsh$</code></td><td>$\Lsh$</td></tr><tr><td align="center"><code>$\mapsto$</code></td><td>$\mapsto$</td></tr><tr><td align="center"><code>$\hookleftarrow$</code></td><td>$\hookleftarrow$</td></tr><tr><td align="center"><code>$\hookrightarrow</code>$</td><td>$\hookrightarrow$</td></tr><tr><td align="center"><code>$\upharpoonright$</code></td><td>$\upharpoonright$</td></tr><tr><td align="center"><code>$\upharpoonleft$</code></td><td>$\upharpoonleft$</td></tr><tr><td align="center"><code>$\downharpoonright</code>$</td><td>$\downharpoonright$</td></tr><tr><td align="center"><code>$\downharpoonleft</code>$</td><td>$\downharpoonleft$</td></tr><tr><td align="center"><code>$\leftharpoonup$</code></td><td>$\leftharpoonup$</td></tr><tr><td align="center"><code>$\rightharpoonup$</code></td><td>$\rightharpoonup$</td></tr><tr><td align="center"><code>$\rightharpoondown$</code></td><td>$\rightharpoondown$</td></tr><tr><td align="center"><code>$\leftharpoondown$</code></td><td>$\leftharpoondown$</td></tr><tr><td align="center"><code>$\upuparrows$</code></td><td>$\upuparrows$</td></tr><tr><td align="center"><code>$\downdownarrows$</code></td><td>$\downdownarrows$</td></tr><tr><td align="center"><code>$\rightrightarrows$</code></td><td>$\rightrightarrows$</td></tr><tr><td align="center"><code>$\rightleftarrows$</code></td><td>$\rightleftarrows$</td></tr><tr><td align="center"><code>$\leftleftarrows$</code></td><td>$\leftleftarrows$</td></tr><tr><td align="center"><code>$\leftrightarrows$</code></td><td>$\leftrightarrows$</td></tr><tr><td align="center"><code>$\rightleftharpoons$</code></td><td>$\rightleftharpoons$</td></tr><tr><td align="center"><code>$\leftrightharpoons$</code></td><td>$\leftrightharpoons$</td></tr></tbody></table><h2 id="2-8-其他"><a href="#2-8-其他" class="headerlink" title="2.8 其他"></a>2.8 其他</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>加粗</td><td><code>\textbf&#123;Latex&#125;</code></td><td>$\textbf{Latex}$</td></tr><tr><td>波浪号</td><td><code>\sim</code></td><td>$\sim$</td></tr><tr><td></td><td></td><td></td></tr><tr><td>字体变大</td><td><code>\displaystyle</code></td><td>$\displaystyle\frac{x+y}{y+z}$</td></tr><tr><td>下划线</td><td><code>\underline</code></td><td>$\underline{x+y}$</td></tr><tr><td>上大括号</td><td><code>\overbrace&#123;&#125;</code></td><td>$\overbrace{x+y}$</td></tr><tr><td>下大括号</td><td><code>\underbrace&#123;&#125;</code></td><td>$\underbrace{x+y}$</td></tr><tr><td>不是斜体</td><td><code>\rm</code></td><td>$\rm e$</td></tr><tr><td>字母上方或下方加数字</td><td><code>$\mathop&#123;U&#125;^&#123;n&#125;\limits_&#123;i=1&#125;$</code></td><td>$\mathop{U}^{n}\limits_{i&#x3D;1}$</td></tr><tr><td>存在</td><td><code>\exists</code></td><td>$\exists$</td></tr><tr><td>任意</td><td><code>\forall</code></td><td>$\forall$</td></tr></tbody></table><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母（大写）</th><th>markdown语法（输入在两个$$之间）</th><th>字母小写</th><th>markdown语法</th></tr></thead><tbody><tr><td>$A$</td><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>$B$</td><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>\Gamma</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>\Delta</td><td>$\delta$</td><td>\delta</td></tr><tr><td>$E$</td><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>$Z$</td><td>Z</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>$H$</td><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>\Theta</td><td>$\theta$</td><td>\theta</td></tr><tr><td>$I$</td><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>$K$</td><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>\Lambda</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>M</td><td></td><td>$\mu$</td><td>\mu</td></tr><tr><td>$N$</td><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>\Xi</td><td>$\xi$</td><td>\xi</td></tr><tr><td>$O$</td><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>\Pi</td><td>$\pi$</td><td>\pi</td></tr><tr><td>$P$</td><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>\Sigmma</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>$T$</td><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>\Upsilon</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>\Phi</td><td>$\phi$</td><td>\phi</td></tr><tr><td>$X$</td><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>\Psi</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>\Omega</td><td>$\omega$</td><td>\omega</td></tr><tr><td></td><td></td><td>$\varphi$</td><td>\varphi</td></tr></tbody></table><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20220423092649473.png" alt="image-20220423092649473"></p><h1 id="三、-Markdown-LaTex公式"><a href="#三、-Markdown-LaTex公式" class="headerlink" title="三、 Markdown&#x2F;LaTex公式"></a>三、 Markdown&#x2F;LaTex公式</h1><h2 id="3-1-基本函数公式"><a href="#3-1-基本函数公式" class="headerlink" title="3.1 基本函数公式"></a>3.1 基本函数公式</h2><ul><li>行内公式：$\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt$</li></ul><p><code>\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt</code></p><ul><li><p>行间公式<br>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105113339912.png" alt="image-20211105113339912"></p></li><li><p>$y_k &#x3D; \varphi(u_k+v_k)$<br><code>$y_k = \varphi(u_k+v_k)$</code></p></li><li><p>$y(x)&#x3D;x^3+2x^2+x+1$<br><code>$y(x)=x^3+2x^2+x+1$</code></p></li><li><p>$x^{y}&#x3D;(1+{\rm e}^x)^{-2xy}$<br><code>$x^&#123;y&#125;=(1+&#123;\rm e&#125;^x)^&#123;-2xy&#125;$</code></p></li><li><p>$\displaystyle f(n)&#x3D;\sum_{i&#x3D;1}^{n}{n*(n+1)}$<br><code>$\displaystyle f(n)=\sum_&#123;i=1&#125;^&#123;n&#125;&#123;n*(n+1)&#125;$</code></p></li></ul><h2 id="3-2-分段函数"><a href="#3-2-分段函数" class="headerlink" title="3.2 分段函数"></a>3.2 分段函数</h2><ul><li><p>分段函数<br>$$<br>y&#x3D;\begin{cases}<br>2x+1,&amp;x\leq0\<br>x,&amp;x&gt;0<br>\end{cases}<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105114606132.png" alt="image-20211105114606132"></p></li><li><p>齐次方程<br>$$<br>\left<br>{<br>\begin{array}{}<br>a_1x+b_1y+c_1z&#x3D;d_1 \<br>a_2x+b_2y+c_2z&#x3D;d_2 \<br>a_3x+b_3y+c_3z&#x3D;d_3<br>\end{array}<br>\right.<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115235227.png" alt="image-20211105115235227"></p></li></ul><h2 id="3-3-积分"><a href="#3-3-积分" class="headerlink" title="3.3 积分"></a>3.3 积分</h2><ul><li><p>一重积分<br>$$<br>\int_{\theta_1(x)^{\theta_2(x)}}&#x3D;1<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115407660.png" alt="image-20211105115407660"></p></li><li><p>二重积分<br>$$<br>\iint dx dy &#x3D;\sigma<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115458340.png" alt="image-20211105115458340"></p></li><li><p>三重积分<br>$$<br>\iiint dx dydz&#x3D;\nu<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115553987.png" alt="image-20211105115553987"></p></li></ul><h2 id="3-4-微分和偏微分"><a href="#3-4-微分和偏微分" class="headerlink" title="3.4 微分和偏微分"></a>3.4 微分和偏微分</h2><ul><li><p>一阶微分方程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;dy&#125;&#123;dx&#125;+P(x)y = Q(x) \\</span><br><span class="line">\left. \frac&#123;&#123;\rm d&#125;y&#125;&#123;&#123;\rm d&#125;x&#125; \right|_&#123;x=0&#125; =3x+1=1</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115859719.png" alt="image-20211105115859719"></p></li><li><p>二阶微分方程<br>$$y’’+py’+qy&#x3D;f(x)$$<br>$$\frac{d^2y}{dx^2}+p\frac{dy}{dx}+qy&#x3D;f(x)$$</p></li><li><p>偏微分方程<br>$$<br>\frac{\partial u}{\partial t}&#x3D; h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2}+ \frac{\partial^2 u}{\partial z^2}\right)<br>$$</p></li></ul><h2 id="3-5-矩阵和行列式"><a href="#3-5-矩阵和行列式" class="headerlink" title="3.5 矩阵和行列式"></a>3.5 矩阵和行列式</h2><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105120251402.png" alt="image-20211105120251402"></p><ul><li><p>单位矩阵<br>$$\begin{bmatrix}<br>1&amp;0&amp;0\<br>0&amp;1&amp;0\<br>0&amp;0&amp;1\<br>\end{bmatrix}<br>$$</p><p>横省略号：\cdots<br>竖省略号：\vdots<br>斜省略号：\ddots</p></li><li><p><em>m</em> X <em>n</em> 矩阵<br>$$A&#x3D;\begin{bmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{bmatrix}$$</p></li><li><p>行列式<br>$$D&#x3D;\begin{vmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{vmatrix}$$</p></li><li><p>表格</p><p>$$\begin{array}{c|lll}<br>{}&amp;{a}&amp;{b}&amp;{c}\<br>\hline<br>{R_1}&amp;{c}&amp;{b}&amp;{a}\<br>{R_2}&amp;{b}&amp;{c}&amp;{c}\<br>\end{array}$$</p></li><li><p>增广矩阵<br>$$<br>\left[  \begin{array}  {c c | c}<br>1 &amp; 2 &amp; 3 \<br>\hline %插入横线，如果去掉\hline就是增广矩阵<br>4 &amp; 5 &amp; 6<br>\end{array}  \right]<br>$$</p></li></ul><h2 id="3-6-极限"><a href="#3-6-极限" class="headerlink" title="3.6 极限"></a>3.6 极限</h2><p>$$<br>f(n)&#x3D;\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$$<br>$$\frac{1}{\lim_{u \rightarrow \infty}}, \frac{1}{\lim\limits_{u \rightarrow \infty}}<br>$$</p><h2 id="3-7-其他"><a href="#3-7-其他" class="headerlink" title="3.7 其他"></a>3.7 其他</h2><table><thead><tr><th></th><th><strong>markdown语法（输入在两个$$之间）</strong></th><th><strong>显示</strong></th></tr></thead><tbody><tr><td>圆括号（小括号）</td><td>\left( \frac{a}{b} \right )</td><td>$\left(\frac{a}{b}\right)$</td></tr><tr><td>方括号（中括号）</td><td>\left[ \frac{a}{b} \right]</td><td>$\left[\frac{a}{b}\right]$</td></tr><tr><td>角括号</td><td>\left \langle \frac{a}{b} \right \rangle</td><td>$\left \langle \frac{a}{b} \right \rangle$</td></tr><tr><td>取整函数</td><td>\left \lfloor \frac{a}{b} \right \rfloor</td><td>$\left \lfloor \frac{a}{b} \right \rfloor$</td></tr><tr><td>取顶函数</td><td>\left \lceil \frac{c}{d} \right \rceil</td><td>$\left \lceil \frac{c}{d} \right \rceil$</td></tr><tr><td>斜线与反斜线</td><td>\left &#x2F; \frac{a}{b} \right \backslash</td><td>$\left &#x2F; \frac{a}{b} \right \backslash$</td></tr><tr><td>上下箭头</td><td>\left \uparrow \frac{a}{b} \right \downarrow</td><td>$\left \uparrow \frac{a}{b} \right \downarrow$</td></tr><tr><td>混合括号</td><td>\left [ 0,1 \right )</td><td>$\left [ 0,1 \right )$</td></tr><tr><td>空格</td><td><code>&amp;nbsp;&amp;ensp;&amp;emsp;&amp;thinsp;</code></td><td></td></tr><tr><td>左对齐</td><td><code>\begin&#123;array&#125;&#123;l&#125;    \end&#123;array&#125;</code></td><td></td></tr><tr><td>居中对齐</td><td><code>\begin&#123;array&#125;&#123;c&#125;    \end&#123;array&#125;</code></td><td></td></tr><tr><td>右对齐</td><td><code>\begin&#123;array&#125;&#123;r&#125;    \end&#123;array&#125;</code></td><td></td></tr></tbody></table><h2 id="3-8、空格"><a href="#3-8、空格" class="headerlink" title="3.8、空格"></a>3.8、空格</h2><table><thead><tr><th></th><th>markdown语法</th><th>显示</th></tr></thead><tbody><tr><td>两个quad空格</td><td>a \qquad b</td><td>$a \qquad b$</td></tr><tr><td>quad空格</td><td>a \quad b</td><td>$a \quad b$</td></tr><tr><td>大空格</td><td>a \ b</td><td>$ a\ b$</td></tr><tr><td>中等空格</td><td>a ;b</td><td>$a;b$</td></tr><tr><td>小空格</td><td>a , b</td><td>$a,b$</td></tr><tr><td>紧贴</td><td><code>a\! b</code></td><td>$a!b$</td></tr></tbody></table><h1 id="四、Typora优化"><a href="#四、Typora优化" class="headerlink" title="四、Typora优化"></a>四、Typora优化</h1><p><a href="https://zhuanlan.zhihu.com/p/361486179">Typora打造最适合编程笔记的精美主题（浅色版和修改后的深色版），可自行修改喜欢的样式。 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2024/08/22/Git/git/"/>
      <url>/2024/08/22/Git/git/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h1><h2 id="1-1、版本控制器的方式"><a href="#1-1、版本控制器的方式" class="headerlink" title="1.1、版本控制器的方式"></a>1.1、版本控制器的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a、集中式版本控制工具</span><br><span class="line">集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。</span><br><span class="line">svn因为每次存的都是差异 需要的硬盘空间会相对的小一点  可是回滚的速度会很慢</span><br><span class="line">举例：SVN和CVS</span><br><span class="line">优点: </span><br><span class="line">    代码存放在单一的服务器上 便于项目的管理</span><br><span class="line">缺点: </span><br><span class="line">    服务器宕机: 员工写的代码得不到保障</span><br><span class="line">    服务器炸了: 整个项目的历史记录都会丢失</span><br><span class="line">    </span><br><span class="line">b、分布式版本控制工具</span><br><span class="line">分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。</span><br><span class="line">git每次存的都是项目的完整快照 需要的硬盘空间会相对大一点</span><br><span class="line">    (Git团队对代码做了极致的压缩 最终需要的实际空间比svn多不了太多 可是Git的回滚速度极快)</span><br><span class="line">举例：Git</span><br><span class="line">优点:</span><br><span class="line">    完全的分布式</span><br><span class="line">缺点:    </span><br><span class="line">    学习起来比SVN陡峭</span><br></pre></td></tr></table></figure><h2 id="1-2、SVN"><a href="#1-2、SVN" class="headerlink" title="1.2、SVN"></a>1.2、SVN</h2><p><img src="/2024/08/22/Git/git/SVN.png" alt="SVN"></p><h2 id="1-3、Git"><a href="#1-3、Git" class="headerlink" title="1.3、Git"></a>1.3、Git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。</span><br><span class="line">git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line">同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</span><br><span class="line">到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</span><br><span class="line"> 速度</span><br><span class="line"> 简单的设计</span><br><span class="line"> 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</span><br><span class="line"> 完全分布式</span><br><span class="line"> 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/Git/git/Git.png" alt="Git"></p><h2 id="1-4、Git工作流程图"><a href="#1-4、Git工作流程图" class="headerlink" title="1.4、Git工作流程图"></a>1.4、Git工作流程图</h2><p><img src="/2024/08/22/Git/git/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Git工作流程图"></p><p>命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h2 id="1-5、资源"><a href="#1-5、资源" class="headerlink" title="1.5、资源"></a>1.5、资源</h2><ul><li><a href="https://blog.csdn.net/TroyeSivanlp/article/details/121172010">git教程1–如何操作本地仓库（保姆级教程，好上手）_gitlab-ce 本地仓库操作-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_43142509/article/details/123134869#Git_4">使用Git上传项目到GitHub（详细版）-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_41621896/article/details/118569844">gitLab配置ssh-CSDN博客</a></li><li><a href="https://blog.csdn.net/zongzhankui/article/details/78888651">Git提交到多个远程仓库_git怎样提交两个仓库的修改-CSDN博客</a></li><li><a href="https://blog.csdn.net/u011870022/article/details/117883717">windows下git配置github和gitee SSH-Key密钥方便同时将本地分支推送到远程仓库_git ecdsa key-CSDN博客</a></li></ul><h1 id="二、Git环境配置"><a href="#二、Git环境配置" class="headerlink" title="二、Git环境配置"></a>二、Git环境配置</h1><p>常用命令：</p><ul><li><code>ls</code>&#x2F;<code>ll</code> 查看当前目录</li><li><code>cat</code> 查看文件内容</li><li><code>touch</code> 创建文件</li><li><code>vi</code> vi编辑器（使用vi编辑器是为了方便展示效果，学员可以记事本、EditPlus、NotePad++等其它编辑器）</li></ul><h2 id="2-1、下载与安装"><a href="#2-1、下载与安装" class="headerlink" title="2.1、下载与安装"></a>2.1、下载与安装</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="/2024/08/22/Git/git/Git%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85.png" alt="Git下载与安装"></p><p>下载完成后可以得到如下安装文件：</p><p><img src="/2024/08/22/Git/git/Git%E5%AE%89%E8%A3%85%E5%8C%85.png" alt="Git安装包"></p><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录)点击右键，如果能够看到如下两个菜单则说明Git安装成功。</p><p><img src="/2024/08/22/Git/git/Git%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.png" alt="Git右键菜单"></p><p>备注：</p><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><h2 id="2-2、基本配置"><a href="#2-2、基本配置" class="headerlink" title="2.2、基本配置"></a>2.2、基本配置</h2><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “itcast”</span><br><span class="line">git config --global user.email “hello@itcast.cn”</span><br></pre></td></tr></table></figure></li></ol><p>查看配置信息<br><code>git config --global user.name</code><br><code>git config --global user.email</code></p><h2 id="2-3、为常用指令配置别名（可选）"><a href="#2-3、为常用指令配置别名（可选）" class="headerlink" title="2.3、为常用指令配置别名（可选）"></a>2.3、为常用指令配置别名（可选）</h2><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li><p>打开用户目录，创建<code>.bashrc</code>文件<br> 部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行<code>touch ~/.bashrc</code><br> <img src="/2024/08/22/Git/git/%E5%88%9B%E5%BB%BAbashrc.png" alt="创建bashrc"></p></li><li><p>在<code>.bashrc</code>文件中输入如下内容：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span></span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure></li><li><p>打开gitBash，执行<code>source ~/.bashrc</code><br> <img src="/2024/08/22/Git/git/bashrc.png" alt="bashrc"></p></li></ol><h2 id="2-4、解决GitBash乱码问题"><a href="#2-4、解决GitBash乱码问题" class="headerlink" title="2.4、解决GitBash乱码问题"></a>2.4、解决GitBash乱码问题</h2><ol><li><p>打开GitBash执行下面命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure></li><li><p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>文件最后加入下面两行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="三、获取本地仓库"><a href="#三、获取本地仓库" class="headerlink" title="三、获取本地仓库"></a>三、获取本地仓库</h1><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库<br>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库<br>2）进入这个目录中，点击右键打开Git bash窗口<br>3）执行命令<code>git init</code><br>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p><img src="/2024/08/22/Git/git/%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="获取本地仓库"></p><h1 id="四、基础操作指令"><a href="#四、基础操作指令" class="headerlink" title="四、基础操作指令"></a>四、基础操作指令</h1><p>Git工作目录下对于文件的<strong>修改</strong>（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行Git的命令而发生变化。</p><p><img src="/2024/08/22/Git/git/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.png" alt="基础操作指令"></p><p>本章节主要讲解如何使用命令来控制这些状态之间的转换：</p><ol><li>git add (工作区 –&gt; 暂存区)</li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><h2 id="4-1、-查看修改的状态-status"><a href="#4-1、-查看修改的状态-status" class="headerlink" title="4.1、&#x3D;&#x3D;查看修改的状态(status)&#x3D;&#x3D;"></a>4.1、&#x3D;&#x3D;查看修改的状态(status)&#x3D;&#x3D;</h2><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：<code>git status</code></li></ul><h2 id="4-2、-添加工作区到暂存区-add"><a href="#4-2、-添加工作区到暂存区-add" class="headerlink" title="4.2、&#x3D;&#x3D;添加工作区到暂存区(add)&#x3D;&#x3D;"></a>4.2、&#x3D;&#x3D;添加工作区到暂存区(add)&#x3D;&#x3D;</h2><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：<code>git add 单个文件名|通配符</code><ul><li>将所有修改加入暂存区：<code>git add .</code></li></ul></li></ul><h2 id="4-3、-提交暂存区到本地仓库-commit"><a href="#4-3、-提交暂存区到本地仓库-commit" class="headerlink" title="4.3、&#x3D;&#x3D;提交暂存区到本地仓库(commit)&#x3D;&#x3D;"></a>4.3、&#x3D;&#x3D;提交暂存区到本地仓库(commit)&#x3D;&#x3D;</h2><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：<code>git commit -m &#39;注释内容&#39;</code></li></ul><h2 id="4-4、-查看提交日志-log"><a href="#4-4、-查看提交日志-log" class="headerlink" title="4.4、&#x3D;&#x3D;查看提交日志(log)&#x3D;&#x3D;"></a>4.4、&#x3D;&#x3D;查看提交日志(log)&#x3D;&#x3D;</h2><p><strong>在2.3中配置的别名<code>git-log</code>就包含了这些参数，所以后续可以直接使用指令<code>git-log</code></strong></p><ul><li>作用:查看提交记录</li><li>命令形式：<code>git log [option]</code><ul><li>options<ul><li><code>--all</code> 显示所有分支</li><li><code>--pretty=oneline</code> 将提交信息显示为一行</li><li><code>--abbrev-commit</code> 使得输出的commitID更简短</li><li><code>--graph</code> 以图的形式显示</li></ul></li></ul></li></ul><h2 id="4-5、版本回退"><a href="#4-5、版本回退" class="headerlink" title="4.5、版本回退"></a>4.5、版本回退</h2><ul><li>作用：版本切换</li><li>命令形式：<code>git reset --hard commitID</code><ul><li>commitID 可以使用<code>git-log</code>或<code>git log</code>指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li><code>git reflog</code></li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h2 id="4-6、添加文件至忽略列表"><a href="#4-6、添加文件至忽略列表" class="headerlink" title="4.6、添加文件至忽略列表"></a>4.6、添加文件至忽略列表</h2><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为<code> .gitignore</code>的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no .a files</span></span><br><span class="line">*.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">but <span class="keyword">do</span> track lib.a, even though you<span class="string">&#x27;re ignoring .a files above</span></span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only ignore the &#x27;</span>TODO<span class="string">&#x27; file in the current directory, not subdir/TODO</span></span></span><br><span class="line">/TODO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all files in the &#x27;</span>build/<span class="string">&#x27; directory</span></span></span><br><span class="line">build/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore doc/notes.txt, but not doc/server/arch.txt</span></span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all .pdf files in the doc/ directory</span></span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h2 id="4-7、查询"><a href="#4-7、查询" class="headerlink" title="4.7、查询"></a>4.7、查询</h2><p>   git  status   :  查看工作目录中文件的状态(已跟踪(已提交 已暂存 已修改) 未跟踪)<br>   git  diff     :  查看未暂存的修改<br>   git  diff –cache : 查看未提交的暂存<br>   git  log –oneline : 查看提交记录</p><h2 id="练习-基础操作"><a href="#练习-基础操作" class="headerlink" title="练习:基础操作"></a>练习:基础操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################仓库初始化######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录（git_test01）并在目录下打开gitbash</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################创建文件并提交#####################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录下创建文件 file01.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改提交到本地仓库，提交记录内容为：commit 001</span></span><br><span class="line">git commit -m &#x27;commit 001&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################修改文件并提交######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改file01的内容为：count=1</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 将修改提交到本地仓库，提交记录内容为：update file01</span></span></span><br><span class="line">git commit -m &#x27;update file01&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################将最后一次修改还原##################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到倒数第2次提交的commitID</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本回退</span></span><br><span class="line">git reset commitID --hard</span><br></pre></td></tr></table></figure><hr><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h2 id="5-1、查看本地分支"><a href="#5-1、查看本地分支" class="headerlink" title="5.1、查看本地分支"></a>5.1、查看本地分支</h2><ul><li>命令：<code>git branch</code></li></ul><h2 id="5-2、创建本地分支"><a href="#5-2、创建本地分支" class="headerlink" title="5.2、创建本地分支"></a>5.2、创建本地分支</h2><ul><li>命令：<code>git branch 分支名</code></li></ul><h2 id="5-3、切换分支-checkout"><a href="#5-3、切换分支-checkout" class="headerlink" title="5.3、切换分支(checkout)"></a>5.3、切换分支(checkout)</h2><ul><li>命令：<code>git checkout 分支名</code></li></ul><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><ul><li>命令：<code>git checkout -b 分支名</code></li></ul><h2 id="5-4、合并分支-merge"><a href="#5-4、合并分支-merge" class="headerlink" title="5.4、合并分支(merge)"></a>5.4、合并分支(merge)</h2><p>一个分支（合并分支）上的提交可以合并到另一个分支（目标分支）</p><ul><li>需要先切换到目标分支：<code>git checkout 目标分支名</code></li><li>合并命令：<code>git merge 合并分支名</code></li></ul><h2 id="5-5、删除分支"><a href="#5-5、删除分支" class="headerlink" title="5.5、删除分支"></a>5.5、删除分支</h2><p><strong>不能删除当前分支，只能删除其他分支</strong></p><ul><li><code>git branch -d 分支名</code> 删除分支时，需要做各种检查</li><li><code>git branch -D 分支名</code> 不做任何检查，强制删除</li><li>E.g.<br>  <img src="/2024/08/22/Git/git/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png" alt="删除分支"></li></ul><h2 id="5-6、解决冲突"><a href="#5-6、解决冲突" class="headerlink" title="5.6、解决冲突"></a>5.6、解决冲突</h2><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><p>就是哪里合并有问题，你手动更改，再进行提交</p><p>冲突部分的内容处理如下所示：</p><p><img src="/2024/08/22/Git/git/%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86.png" alt="冲突处理.png"></p><h2 id="5-7、开发中分支使用原则与流程"><a href="#5-7、开发中分支使用原则与流程" class="headerlink" title="5.7、开发中分支使用原则与流程"></a>5.7、开发中分支使用原则与流程</h2><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支<br>  线上分支，主分支，中小规模项目作为线上运行的应用对应的分支。</li><li>develop（开发）分支<br>  是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支<br>  从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。</li><li>hotfix&#x2F;xxxx分支，<br>  从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等。</li><li><img src="/2024/08/22/Git/git/%E5%88%86%E6%94%AF.png" alt="分支"></li></ul><h2 id="练习-分支操作"><a href="#练习-分支操作" class="headerlink" title="练习:分支操作"></a>练习:分支操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################创建并切换到dev01分支，在dev01分支提交</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]创建分支dev01</span></span><br><span class="line">git branch dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]切换到dev01</span></span><br><span class="line">git checkout dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]创建文件file02.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file02 on dev&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################切换到master分支，将dev01合并到master分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]合并dev01到master分支</span></span><br><span class="line">git merge dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]查看文件变化(目录下也出现了file02.txt)</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################删除dev01分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]删除dev01分支</span></span><br><span class="line">git branch -d dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br></pre></td></tr></table></figure><hr><h1 id="六、远程仓库"><a href="#六、远程仓库" class="headerlink" title="六、远程仓库"></a>六、远程仓库</h1><h2 id="6-1、-常用的托管服务-远程仓库"><a href="#6-1、-常用的托管服务-远程仓库" class="headerlink" title="6.1、 常用的托管服务[远程仓库]"></a>6.1、 常用的托管服务[远程仓库]</h2><p>​gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub<br>​码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快<br>​GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</p><h2 id="6-2、-注册码云"><a href="#6-2、-注册码云" class="headerlink" title="6.2、 注册码云"></a>6.2、 注册码云</h2><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><p><img src="/2024/08/22/Git/git/%E6%B3%A8%E5%86%8C%E7%A0%81%E4%BA%91.png" alt="注册码云"></p><h2 id="6-3、创建远程仓库"><a href="#6-3、创建远程仓库" class="headerlink" title="6.3、创建远程仓库"></a>6.3、创建远程仓库</h2><p><img src="/2024/08/22/Git/git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="创建远程仓库"></p><p>仓库创建完成后可以看到仓库地址，如下图所示:</p><p><img src="/2024/08/22/Git/git/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="仓库地址"></p><h2 id="6-4、配置SSH公钥"><a href="#6-4、配置SSH公钥" class="headerlink" title="6.4、配置SSH公钥"></a>6.4、配置SSH公钥</h2><ul><li>生成SSH公钥<ul><li><code>ssh-keygen -t rsa</code></li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li><code>cat ~/.ssh/id_rsa.pub</code></li></ul></li><li><img src="/2024/08/22/Git/git/SSH%E5%85%AC%E9%92%A5.png" alt="SSH公钥"></li><li>验证是否配置成功<ul><li><code>ssh -T git@gitee.com</code></li></ul></li></ul></li></ul><h2 id="6-5、操作远程仓库"><a href="#6-5、操作远程仓库" class="headerlink" title="6.5、操作远程仓库"></a>6.5、操作远程仓库</h2><h3 id="6-5-1、添加远程仓库"><a href="#6-5-1、添加远程仓库" class="headerlink" title="6.5.1、添加远程仓库"></a>6.5.1、添加远程仓库</h3><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li><p>命令： <code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code></p><ul><li><p>远端名称，默认是origin，取决于远端服务器设置</p></li><li><p>仓库路径，从远端服务器获取此URL</p></li><li><p>例如：<br>  <code>git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</code><br>  <code>git remote set-url --add origin https://github.com/zkzong/mongodb.git</code><br>  <code>git push origin --all</code></p><p>  <img src="/2024/08/22/Git/git/%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="添加远程仓库"></p></li></ul></li></ul><h3 id="6-5-2、查看远程仓库"><a href="#6-5-2、查看远程仓库" class="headerlink" title="6.5.2、查看远程仓库"></a>6.5.2、查看远程仓库</h3><ul><li>命令：<code>git remote</code><br>  <img src="/2024/08/22/Git/git/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="查看远程仓库"></li><li>查看详细链接：<code>git remote -v</code></li></ul><h3 id="6-5-3、推送到远程仓库"><a href="#6-5-3、推送到远程仓库" class="headerlink" title="6.5.3、推送到远程仓库"></a>6.5.3、推送到远程仓库</h3><ul><li>命令：<code>git push[ -f][ --set-upstream][ 远端名称[ 本地分支名[:远端分支名]]]</code><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支<ul><li><code>git push origin master</code>&#x3D;<code>git push origin master:master</code><br>  <img src="/2024/08/22/Git/git/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95.png" alt="推送到远程仓库-两种写法"></li></ul></li><li><code>-f</code> &#x3D; <code>--force</code> 表示强制覆盖</li><li><code>-u</code> &#x3D; <code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<ul><li><code>git push --set-upstream origin master</code></li></ul></li><li>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。<ul><li><code>git push</code> 将master分支推送到已关联的远端分支。<br>  <img src="/2024/08/22/Git/git/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="推送到远程仓库"></li></ul></li></ul></li></ul><p>查询远程仓库</p><p><img src="/2024/08/22/Git/git/%E6%9F%A5%E8%AF%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="查询远程仓库"></p><h3 id="6-5-4、-本地分支与远程分支的关联关系"><a href="#6-5-4、-本地分支与远程分支的关联关系" class="headerlink" title="6.5.4、 本地分支与远程分支的关联关系"></a>6.5.4、 本地分支与远程分支的关联关系</h3><ul><li>查看关联关系我们可以使用 <code>git branch -vv</code> 命令</li></ul><p><img src="/2024/08/22/Git/git/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="查看本地分支和远程分支的关联关系"></p><h3 id="6-5-5、从远程仓库克隆"><a href="#6-5-5、从远程仓库克隆" class="headerlink" title="6.5.5、从远程仓库克隆"></a>6.5.5、从远程仓库克隆</h3><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: <code>git clone &lt;仓库路径&gt; [本地目录]</code><ul><li>本地目录可以省略，会自动生成一个目录</li></ul></li></ul><p><img src="/2024/08/22/Git/git/%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0.png" alt="克隆远程仓库到本地"></p><h3 id="6-5-6、从远程仓库中抓取和拉取"><a href="#6-5-6、从远程仓库中抓取和拉取" class="headerlink" title="6.5.6、从远程仓库中抓取和拉取"></a>6.5.6、从远程仓库中抓取和拉取</h3><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><ul><li>抓取 命令：<code>git fetch [remote name] [branch name]</code><ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong></li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li>拉取 命令：<code>git pull [remote name] [branch name]</code><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><ol><li>在test01这个本地仓库进行一次提交并推送到远程仓库<br> <img src="/2024/08/22/Git/git/%E5%9C%A8test01%E8%BF%99%E4%B8%AA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="在test01这个本地仓库进行一次提交并推送到远程仓库"></li><li>在另一个仓库将远程提交的代码拉取到本地仓库<br> <img src="/2024/08/22/Git/git/%E5%B0%86%E4%BB%93%E5%BA%93%E9%87%8C%E8%BF%9C%E7%A8%8B%E6%8F%90%E4%BA%A4%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="将仓库里远程提交的代码拉取到本地仓库"></li></ol><h3 id="6-5-7、解决合并冲突"><a href="#6-5-7、解决合并冲突" class="headerlink" title="6.5.7、解决合并冲突"></a>6.5.7、解决合并冲突</h3><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>，如下图所示。</p><p><img src="/2024/08/22/Git/git/%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png" alt="解决远程仓库合并冲突"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong>，在此不再赘述，需要学员自己练习。</p><h3 id="练习-远程仓库操作"><a href="#练习-远程仓库操作" class="headerlink" title="练习:远程仓库操作"></a>练习:远程仓库操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################1-将本地仓库推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]添加远程仓库</span></span><br><span class="line">git remote add origin git@gitee.com/**/**.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span></span><br><span class="line">git push --set-upstream origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################2-将远程仓库克隆到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库克隆到本地git_test02目录下</span></span><br><span class="line">git clone git@gitee.com/**/**.git git_test02</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################3-将本地修改推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]创建文件file03.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支的修改推送到远程仓库</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################4-将远程仓库的修改更新到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]将远程仓库修改再拉取到本地</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件变化(目录下也出现了file03.txt)</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure><h1 id="附-几条铁令"><a href="#附-几条铁令" class="headerlink" title="附:几条铁令"></a>附:几条铁令</h1><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li><li>遇到任何问题都不要删除文件目录，第1时间找老师</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/08/09/MFC/MFC(%E4%B8%80)/"/>
      <url>/2024/08/09/MFC/MFC(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MFC概念和作用"><a href="#一、MFC概念和作用" class="headerlink" title="一、MFC概念和作用"></a>一、MFC概念和作用</h1><ul><li><p>MFC：微软基础类库 （Microsoft  Foundation Class Library），封装了windows应用程序的各种API和相关机制的C++类库</p></li><li><p>总结：</p><ol><li>MFC是一个大的类库</li><li>MFC是一个应用程序框架</li></ol></li><li><p>为什么使用MFC？</p><ul><li>应用提供的框架，可以快速开发</li></ul></li><li><p>MFC常用的头文件</p><ul><li>afx.h-将各种MFC头文件包含在内</li><li>afxwin.h-包含了各种MFC窗口类。包含afx.h和windows.h</li><li>afxext.h-提供了扩展窗口类的支持，例如工具栏</li></ul></li></ul><h1 id="二、空win32程序模板"><a href="#二、空win32程序模板" class="headerlink" title="二、空win32程序模板"></a>二、空win32程序模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口过程函数声明</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序入口点</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义窗口类名</span></span><br><span class="line">    <span class="type">static</span> TCHAR szAppName[] = <span class="built_in">TEXT</span>(<span class="string">&quot;HelloWin&quot;</span>);</span><br><span class="line">    HWND hwnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    WNDCLASS wndclass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口类属性</span></span><br><span class="line">    wndclass.style = CS_HREDRAW | CS_VREDRAW; <span class="comment">// 水平和垂直重绘</span></span><br><span class="line">    wndclass.lpfnWndProc = WndProc; <span class="comment">// 指向窗口过程函数的指针</span></span><br><span class="line">    wndclass.cbClsExtra = <span class="number">0</span>; <span class="comment">// 类附加内存</span></span><br><span class="line">    wndclass.cbWndExtra = <span class="number">0</span>; <span class="comment">// 窗口附加内存</span></span><br><span class="line">    wndclass.hInstance = hInstance; <span class="comment">// 当前实例句柄</span></span><br><span class="line">    wndclass.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>, IDI_APPLICATION); <span class="comment">// 加载默认应用程序图标</span></span><br><span class="line">    wndclass.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_ARROW); <span class="comment">// 加载箭头光标</span></span><br><span class="line">    wndclass.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH); <span class="comment">// 设置背景颜色为白色</span></span><br><span class="line">    wndclass.lpszMenuName = <span class="literal">NULL</span>; <span class="comment">// 无菜单</span></span><br><span class="line">    wndclass.lpszClassName = szAppName; <span class="comment">// 窗口类名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------- 以下为 窗口类的注册 --------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">RegisterClass</span>(&amp;wndclass))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;This program requires Windows NT!&quot;</span>), szAppName, MB_ICONERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------- 创建窗口 --------------------------</span></span><br><span class="line">    hwnd = <span class="built_in">CreateWindow</span>(szAppName, <span class="comment">// 窗口类名</span></span><br><span class="line">        <span class="built_in">TEXT</span>(<span class="string">&quot;The Hello Program&quot;</span>), <span class="comment">// 窗口标题</span></span><br><span class="line">        WS_OVERLAPPEDWINDOW, <span class="comment">// 窗口样式</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始水平位置</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始垂直位置</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始宽度</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始高度</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 父窗口句柄</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 菜单句柄</span></span><br><span class="line">        hInstance, <span class="comment">// 当前实例句柄</span></span><br><span class="line">        <span class="literal">NULL</span>); <span class="comment">// 窗口创建数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------- 显示窗口 ------------------------</span></span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwnd, iCmdShow);</span><br><span class="line">    <span class="comment">// ---------------------- 绘制用户区 ---------------------------</span></span><br><span class="line">    <span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------- 消息循环 -----------------------------------</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg); <span class="comment">// 翻译消息</span></span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg); <span class="comment">// 分发消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg.wParam; <span class="comment">// 返回消息的wParam值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------- 以下为窗口函数WndProc--------------------------------</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hdc;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    RECT rect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="comment">// 创建窗口时播放声音</span></span><br><span class="line">        <span class="built_in">PlaySound</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;hellowin.wav&quot;</span>), <span class="literal">NULL</span>, SND_FILENAME | SND_ASYNC);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        <span class="comment">// 绘制窗口内容</span></span><br><span class="line">        hdc = <span class="built_in">BeginPaint</span>(hwnd, &amp;ps);</span><br><span class="line">        <span class="built_in">GetClientRect</span>(hwnd, &amp;rect); <span class="comment">// 获取客户区矩形</span></span><br><span class="line">        <span class="built_in">DrawText</span>(hdc, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello, Windows 98!&quot;</span>), <span class="number">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER); <span class="comment">// 绘制文本</span></span><br><span class="line">        <span class="built_in">EndPaint</span>(hwnd, &amp;ps);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="comment">// 销毁窗口时退出消息循环</span></span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认窗口过程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、加载bmp文件"><a href="#三、加载bmp文件" class="headerlink" title="三、加载bmp文件"></a>三、加载bmp文件</h1><p>bmp文件是MFC中使用的位图，用来显示图片</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：LoadBitmapFromFile</span></span><br><span class="line"><span class="comment">// 说明：从文件加载一个位图，并返回该位图的句柄</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">//   - HINSTANCE hInstance: 当前应用程序实例的句柄</span></span><br><span class="line"><span class="comment">//   - LPCTSTR lpszName: 包含位图文件路径的字符串</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">//   - 如果成功，返回加载的位图的句柄</span></span><br><span class="line"><span class="comment">//   - 如果失败，返回NULL</span></span><br><span class="line"><span class="function">HBITMAP <span class="title">LoadBitmapFromFile</span><span class="params">(HINSTANCE hInstance, LPCTSTR lpszName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个变量 hBitmap 并初始化为 NULL，用于存储加载的位图句柄</span></span><br><span class="line">    HBITMAP hBitmap = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 LoadImage 函数从文件加载位图</span></span><br><span class="line">    hBitmap = (HBITMAP)<span class="built_in">LoadImage</span>(</span><br><span class="line">        hInstance,  <span class="comment">// 当前应用程序实例的句柄</span></span><br><span class="line">        lpszName,   <span class="comment">// 位图文件路径</span></span><br><span class="line">        IMAGE_BITMAP,  <span class="comment">// 指明要加载的是位图</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,  <span class="comment">// 位图的宽度和高度，0 表示使用文件的原始大小</span></span><br><span class="line">        LR_LOADFROMFILE | LR_CREATEDIBSECTION  <span class="comment">// 从文件加载图像并创建一个 DIB 节</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 LoadImage 是否成功加载了位图</span></span><br><span class="line">    <span class="keyword">if</span> (hBitmap == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 hBitmap 仍然是 NULL，表示加载失败</span></span><br><span class="line">        <span class="comment">// 在这里添加错误处理代码，例如：</span></span><br><span class="line">        <span class="comment">// MessageBox(NULL, TEXT(&quot;Failed to load bitmap&quot;), TEXT(&quot;Error&quot;), MB_ICONERROR);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回加载的位图句柄</span></span><br><span class="line">    <span class="keyword">return</span> hBitmap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、更改文本框数据"><a href="#四、更改文本框数据" class="headerlink" title="四、更改文本框数据"></a>四、更改文本框数据</h1><p>这是一个按钮控件，通过点击按钮，更改文本数据</p><ol><li>使用CString定义一个字符串</li><li>使用Format 设置格式和内容</li><li>使用SetDlgItemText将字符串和控件练习起来</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnTractionMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">m_iTractionMax = m_iControlMH;</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;电位值：%d&quot;</span>), m_iTractionMax);</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_TRACTION_MAX, strTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、读取文件"><a href="#五、读取文件" class="headerlink" title="五、读取文件"></a>五、读取文件</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取司控器信息配置文件函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::ReadControllerInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义用于存储文件路径的缓冲区</span></span><br><span class="line">    TCHAR strFilePath[MAX_PATH];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前工作目录并存储到缓冲区中</span></span><br><span class="line">    <span class="built_in">GetCurrentDirectory</span>(MAX_PATH, strFilePath);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将文件名 &quot;controller.ini&quot; 拼接到当前工作目录路径后面</span></span><br><span class="line">    <span class="built_in">wcscat_s</span>(strFilePath, <span class="built_in">TEXT</span>(<span class="string">&quot;\\controller.ini&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 &quot;controller.ini&quot; 文件的 &quot;Controller&quot; 节读取 &quot;TractionMax&quot; 键的值</span></span><br><span class="line">    <span class="comment">// 如果未找到该键，则返回默认值 0</span></span><br><span class="line">    m_iTractionMax = <span class="built_in">GetPrivateProfileInt</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Controller&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;TractionMax&quot;</span>), <span class="number">0</span>, strFilePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义临时字符串变量用于格式化显示值</span></span><br><span class="line">    CString strTemp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将读取到的 &quot;TractionMax&quot; 值格式化为字符串并存储在 strTemp 中</span></span><br><span class="line">    strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;电位值：%d&quot;</span>), m_iTractionMax);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将格式化后的字符串显示在对话框控件上，控件的ID为 IDC_TRACTION_MAX</span></span><br><span class="line">    <span class="built_in">SetDlgItemText</span>(IDC_TRACTION_MAX, strTemp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、写入文件"><a href="#六、写入文件" class="headerlink" title="六、写入文件"></a>六、写入文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">TCHAR strFilePath[MAX_PATH];</span><br><span class="line"><span class="built_in">GetCurrentDirectory</span>(MAX_PATH, strFilePath);</span><br><span class="line"><span class="built_in">wcscat_s</span>(strFilePath, <span class="built_in">TEXT</span>(<span class="string">&quot;\\controller.ini&quot;</span>));</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>), m_iTractionMax);</span><br><span class="line"><span class="built_in">WritePrivateProfileString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Controller&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;TractionMax&quot;</span>), strTemp, strFilePath);</span><br><span class="line">    <span class="comment">// 这里创建[Controller]，并在它下面创建TractionMax</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是为空情况下自动创建的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Controller]</span><br><span class="line">TractionMax=0</span><br><span class="line">TractionMin=5</span><br><span class="line">BreakMin=2010</span><br><span class="line">BreakMax=4000</span><br></pre></td></tr></table></figure><p>这是节点之后，更新的</p><p>其中的 # 和 ；是注释，自动跳过，没有影响</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>司控器设置</span><br><span class="line"></span><br><span class="line">[Controller]</span><br><span class="line">TractionMax =0</span><br><span class="line">;司控器最大牵引位</span><br><span class="line">TractionMin =5</span><br><span class="line">;司控器最小牵引位</span><br><span class="line">BreakMin =2010</span><br><span class="line">;司控器最小制动位</span><br><span class="line">BreakMax =4000</span><br><span class="line">;司控器最大制动位</span><br></pre></td></tr></table></figure><h1 id="七、创建子窗口"><a href="#七、创建子窗口" class="headerlink" title="七、创建子窗口"></a>七、创建子窗口</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnViewSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">m_pDlgSend-&gt;<span class="built_in">ShowWindow</span>(SW_NORMAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建主窗口类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMainDlg.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMainDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CChildDialog* m_pChildDlg; <span class="comment">// 指向子窗口的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMainDlg.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMainDlg::OnBnClickedBtnCreateChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_pChildDlg == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pChildDlg = <span class="keyword">new</span> <span class="built_in">CChildDialog</span>(<span class="keyword">this</span>); <span class="comment">// 创建子对话框对象</span></span><br><span class="line">        m_pChildDlg-&gt;<span class="built_in">Create</span>(IDD_CHILD_DIALOG, <span class="keyword">this</span>); <span class="comment">// 创建子对话框</span></span><br><span class="line">        m_pChildDlg-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW); <span class="comment">// 显示子对话框</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建子窗口类</p></li><li><p>添加对话框资源<br>确保在资源文件中添加了 <code>IDD_MAIN_DIALOG</code>（主对话框）和 <code>IDD_CHILD_DIALOG</code>（子对话框）的对话框资源，并在主对话框中添加一个按钮，其 ID 设置为 <code>IDC_BTN_CREATE_CHILD</code>，用来创建和显示子对话框。</p></li></ol><h1 id="八、添加列表控件"><a href="#八、添加列表控件" class="headerlink" title="八、添加列表控件"></a>八、添加列表控件</h1><h4 id="设置列表控件样式和列头"><a href="#设置列表控件样式和列头" class="headerlink" title="设置列表控件样式和列头"></a>设置列表控件样式和列头</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CDlgSend::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialog::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置列表控件的扩展样式，包括全行选中、网格线、头部拖放和单行选择</span></span><br><span class="line">    DWORD dwExListStyle = m_listSend.<span class="built_in">GetExtendedStyle</span>() | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP | LVS_EX_SINGLEROW;</span><br><span class="line">    m_listSend.<span class="built_in">SetExtendedStyle</span>(dwExListStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义列头的标题和宽度</span></span><br><span class="line">    CString strListHead[] = &#123; <span class="built_in">TEXT</span>(<span class="string">&quot;ID&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Name&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Value&quot;</span>) &#125;;</span><br><span class="line">    <span class="type">int</span> nListWidth[] = &#123; <span class="number">50</span>, <span class="number">580</span>, <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加列头到列表控件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(nListWidth) / <span class="built_in">sizeof</span>(<span class="type">int</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m_listSend.<span class="built_in">InsertColumn</span>(i, strListHead[i], LVCFMT_LEFT, nListWidth[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充列表控件的数据</span></span><br><span class="line">    <span class="built_in">FillListSend</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器，每隔100毫秒执行一次</span></span><br><span class="line">    <span class="built_in">SetTimer</span>(IDT_TIMER_SEND, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">    <span class="comment">// 异常:  OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDlgSend::FillListSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_listSend.<span class="built_in">DeleteAllItems</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(strSend)/<span class="built_in">sizeof</span>(strSend[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line">m_listSend.<span class="built_in">InsertItem</span>(i, <span class="built_in">TEXT</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>), i + <span class="number">1</span>);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">0</span>, strTemp);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">1</span>, strSend[i]);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">2</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;0&quot;</span>));</span><br><span class="line"></span><br><span class="line">m_listSend.<span class="built_in">SetItemData</span>(i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h4><ol><li><p>**设置列表控件样式 (<code>LVS_EX_</code> 开头的扩展样式)**：</p><ul><li><code>LVS_EX_FULLROWSELECT</code>：允许整行选择。</li><li><code>LVS_EX_GRIDLINES</code>：显示网格线。</li><li><code>LVS_EX_HEADERDRAGDROP</code>：允许头部拖放。</li><li><code>LVS_EX_SINGLEROW</code>：只允许选择单行。</li><li>这些样式通过按位或运算符 <code>|</code> 结合到 <code>dwExListStyle</code> 中，然后通过 <code>m_listSend.SetExtendedStyle(dwExListStyle);</code> 应用到列表控件。</li></ul></li><li><p><strong>定义和添加列头</strong>：</p><ul><li><code>CString strListHead[]</code> 定义了列头的标题。</li><li><code>int nListWidth[]</code> 定义了每列的宽度。</li><li>通过 <code>m_listSend.InsertColumn(i, strListHead[i], LVCFMT_LEFT, nListWidth[i], -1);</code> 将每个标题和对应的宽度添加到列表控件中。</li></ul></li><li><p><strong>填充列表控件数据</strong>：</p><ul><li><code>FillListSend();</code> 函数用于填充列表控件的数据。这个函数可能会从数据源获取数据，并将数据插入到列表控件的行中。</li></ul></li><li><p><strong>设置定时器</strong>：</p><ul><li><code>SetTimer(IDT_TIMER_SEND, 100, NULL);</code> 设置了一个定时器，每隔100毫秒触发一次定时器消息。这通常用于执行定时任务，如周期性地更新列表数据或其他界面操作。</li></ul></li><li><p><strong>返回值</strong>：</p><ul><li>函数最后返回 <code>TRUE</code>，除非将焦点设置到某个控件，否则应该返回 <code>TRUE</code>。在 MFC 对话框中，通常是 <code>TRUE</code>，除非你有特定的需求返回 <code>FALSE</code>。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 <code>CDlgSend::OnInitDialog()</code> 函数中，你初始化了 <code>m_listSend</code> 列表控件的样式、列头和数据。这些操作确保了列表控件的外观和行为符合预期，并且设置了定时器以便于定时执行任务。如果需要进一步的解释或有其他问题，请随时告诉我！</p><h1 id="九、套接字"><a href="#九、套接字" class="headerlink" title="九、套接字"></a>九、套接字</h1><p>这个套接字通讯是在你的程序，与电路板之间进行服务的，发送给电路板使用的是sendto()函数，需要注意，发送信息的DO数据，需要nMsg和nID都定义好，才可以发送给对方</p><p>你的代码展示了一个在 MFC 应用程序中初始化和关闭服务器端套接字的过程。以下是对这段代码的详细解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::InitSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WORD wVersionRequested;<span class="comment">// 存储请求的Winsock版本</span></span><br><span class="line">WSADATA wsaData;<span class="comment">// 接受Winsock的详细信息</span></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载套接字库 1.1版本</span></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化库，获取的信息保存到wsaData中</span></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Load winsock failed!\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">1</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();<span class="comment">// 清理资源</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建套接字 </span></span><br><span class="line"><span class="comment">// AF_INET IPv4协议</span></span><br><span class="line"><span class="comment">// SOCK_DGRAM: 使用数据报套接字UDP</span></span><br><span class="line"><span class="comment">// 0:使用默认协议UDP</span></span><br><span class="line"><span class="comment">// 返回套接字描述符</span></span><br><span class="line">m_sockServer[i] = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (m_sockServer[i] == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Create socket failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> strPcIP[MAX_PATH];</span><br><span class="line">hostent* pHost;</span><br><span class="line"><span class="built_in">gethostname</span>(strPcIP, MAX_PATH); <span class="comment">//获得主机名</span></span><br><span class="line">pHost = <span class="built_in">gethostbyname</span>(strPcIP); <span class="comment">//获得主机结构</span></span><br><span class="line"></span><br><span class="line">m_addrServer[i].sin_addr.S_un.S_addr = (*(<span class="keyword">struct</span> in_addr *)pHost-&gt;h_addr_list[<span class="number">0</span>]).S_un.S_addr; <span class="comment">//本地IP地址</span></span><br><span class="line">m_addrServer[i].sin_family = AF_INET;</span><br><span class="line">m_addrServer[i].sin_port = <span class="built_in">htons</span>(m_myModuleInfo[i].nModulePcPort); <span class="comment">//本地端口号</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> strIP[MAX_PATH];</span><br><span class="line"><span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, m_myModuleInfo[i].strModuleIP, <span class="number">-1</span>, strIP, MAX_PATH, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">m_addrClient[i].sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(strIP); <span class="comment">//模块IP地址</span></span><br><span class="line">m_addrClient[i].sin_family = AF_INET;</span><br><span class="line">m_addrClient[i].sin_port = <span class="built_in">htons</span>(m_myModuleInfo[i].nModulePort); <span class="comment">//模块端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(m_sockServer[i], (SOCKADDR*)&amp;m_addrServer[i], <span class="built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Bind socket failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAAsyncSelect</span>(m_sockServer[i], <span class="keyword">this</span>-&gt;m_hWnd, WM_SOCKET, FD_READ | FD_WRITE) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;WSAAsyncSelect failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束服务器端套接字函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::DestroySocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_iModuleNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更清晰地理解这个过程，我们可以看看UDP套接字通信的基本步骤：</p><ol><li><p><strong>创建套接字</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_sockSrv[<span class="number">0</span>] = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>设置客户端地址</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m_addrClient[<span class="number">0</span>].sin_family = AF_INET;</span><br><span class="line">m_addrClient[<span class="number">0</span>].sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">m_addrClient[<span class="number">0</span>].sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;client_ip_address&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>发送数据</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sendto</span>(m_sockSrv[<span class="number">0</span>], (<span class="type">char</span>*)&amp;data, <span class="built_in">sizeof</span>(data), <span class="number">0</span>, (SOCKADDR*)&amp;m_addrClient[<span class="number">0</span>], <span class="built_in">sizeof</span>(SOCK</span><br></pre></td></tr></table></figure></li></ol><p>在这个套接字消息响应函数中，处理了来自套接字的不同消息类型。让我们逐步分析这个函数的具体作用和逻辑：</p><h3 id="套接字接收代码详细解释："><a href="#套接字接收代码详细解释：" class="headerlink" title="套接字接收代码详细解释："></a>套接字接收代码详细解释：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">CInterfaceDlg::OnSocket</span><span class="params">(WPARAM wParam, LPARAM lParam)</span> <span class="comment">// 套接字响应，获取DI信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYDATA mdRecv[<span class="number">2</span>];<span class="comment">//每次接收两次数据 长度为0x0D*2</span></span><br><span class="line">SOCKADDR_IN addrTemp;</span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">WSAGETSELECTEVENT</span>(lParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> FD_READ:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mdRecv, <span class="number">0</span>, <span class="built_in">sizeof</span>(mdRecv));</span><br><span class="line"><span class="built_in">recvfrom</span>((SOCKET)wParam, (<span class="type">char</span>*)mdRecv, <span class="built_in">sizeof</span>(mdRecv), <span class="number">0</span>, (SOCKADDR*)&amp;addrTemp, &amp;nLen);</span><br><span class="line"><span class="comment">// 获取远程IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 获取远程IP地址和端口号</span></span><br><span class="line"><span class="comment">//CString strIP;</span></span><br><span class="line"><span class="comment">//strIP.Format(_T(&quot;%d.%d.%d.%d&quot;),</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b1,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b2,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b3,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b4);</span></span><br><span class="line"><span class="comment">//UINT nPort = ntohs(addrTemp.sin_port);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 显示远程IP地址和端口号</span></span><br><span class="line"><span class="comment">//CString strMsg;</span></span><br><span class="line"><span class="comment">//strMsg.Format(_T(&quot;远程IP: %s\n远程端口: %d&quot;), strIP, nPort);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(strMsg);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_iModuleNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_sockServer[i] == (SOCKET)wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nMsg = mdRecv[j].myByteData.nMsg &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nID = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; COM_ID_NUM; k++)</span><br><span class="line">&#123;</span><br><span class="line">nID = nID &lt;&lt; <span class="number">8</span>;</span><br><span class="line">nID = nID + (mdRecv[j].myByteData.nID[k] &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nMsg == COM_MSG &amp;&amp; nID == COM_DI)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_mdModuleDI[i], &amp;mdRecv[j], <span class="built_in">sizeof</span>(MYDATA));</span><br><span class="line"><span class="comment">// 检查和调试信息</span></span><br><span class="line"><span class="comment">//CString strDebug;</span></span><br><span class="line"><span class="comment">//strDebug.Format(_T(&quot;匹配的DI数据: nMsg = %d, nID = %d, bt_00 = %d, bt_01 = %d&quot;),</span></span><br><span class="line"><span class="comment">//nMsg, nID,</span></span><br><span class="line"><span class="comment">//m_mdModuleDI[i].myBitData.bt_00,</span></span><br><span class="line"><span class="comment">//m_mdModuleDI[i].myBitData.bt_01);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(strDebug);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> FD_WRITE:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码逻辑："><a href="#代码逻辑：" class="headerlink" title="代码逻辑："></a>代码逻辑：</h3><ol><li><p><strong>FD_READ</strong>: 当接收到FD_READ事件时，表示有数据可以读取。</p><ul><li>使用<code>recvfrom</code>从套接字读取数据到<code>chRecv</code>数组中。</li><li>检查数据前缀是否为<code>0x88</code>，如果是则解析ID，并根据ID检查是否为<code>0x00000060</code>。</li><li>如果ID匹配，从数据中提取按钮状态到<code>nBtn</code>数组中。</li><li>再次检查数据中的另一段（从索引13开始），重复上述步骤。</li></ul></li><li><p><strong>数据处理</strong>:</p><ul><li>遍历所有模块的套接字，找到与当前套接字匹配的模块。</li><li>对接收到的两段数据（<code>mdRecv</code>数组中的数据）进行处理：<ul><li>提取消息和ID。</li><li>根据消息和ID，决定将数据复制到<code>m_mdModuleDI</code>或<code>m_mdModuleAI</code>中，或处理其他类型的数据。</li></ul></li></ul></li><li><p><strong>FD_WRITE</strong>: 当接收到FD_WRITE事件时，表示套接字可以写入数据。此处未进行任何操作。</p></li><li><p><strong>默认处理</strong>: 对于其他未处理的事件类型，未进行任何操作。</p></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><p><strong>ID的计算</strong>：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nID = (chRecv[<span class="number">1</span>] &lt;&lt; <span class="number">24</span>) + (chRecv[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (chRecv[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) + chRecv[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p> ID的计算方式需要使用括号确保操作顺序正确，否则可能导致计算结果不正确。</p></li><li><p><strong>消息类型的处理</strong>：</p><ul><li>确保对每种消息类型和ID的处理逻辑正确。</li><li>对于未知消息类型或ID，可以考虑增加日志记录或错误处理。</li></ul></li><li><p><strong>内存操作</strong>：</p><ul><li>使用<code>memcpy</code>时，确保源和目标内存区域大小匹配，防止缓冲区溢出或内存损坏。</li></ul></li></ol><p>这个函数主要用于处理从套接字接收到的数据，并将解析后的数据存储到相应的模块结构中。</p><h2 id="程序发送数据到电路板"><a href="#程序发送数据到电路板" class="headerlink" title="程序发送数据到电路板"></a>程序发送数据到电路板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::UpdateDataRecv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m_mdModuleDO[0].myBitData.bt_00 = m_dataRecv.bRisepanto; //升弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_00 = <span class="number">0</span>; <span class="comment">//升弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_01 = m_dataRecv.bDNPanto;<span class="comment">//降弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_02 = m_dataRecv.bRiseMode;<span class="comment">//升级模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印目标 IP 和端口号</span></span><br><span class="line"><span class="comment">//CString ipAddr(inet_ntoa(m_addrClient[0].sin_addr));</span></span><br><span class="line"><span class="comment">//CString port;</span></span><br><span class="line"><span class="comment">//port.Format(TEXT(&quot;%d&quot;), ntohs(m_addrClient[0].sin_port));</span></span><br><span class="line"><span class="comment">//CString msg;</span></span><br><span class="line"><span class="comment">//msg.Format(TEXT(&quot;Sending to IP: %s, Port: %s&quot;), ipAddr, port);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(msg);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="built_in">sendto</span>(m_sockServer[<span class="number">0</span>], (<span class="type">char</span>*)&amp;m_mdModuleDO[<span class="number">0</span>], <span class="built_in">sizeof</span>(MYDATA), <span class="number">0</span>, (SOCKADDR*)&amp;m_addrClient[<span class="number">0</span>], <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，DO数据需要设置标志字段，直接发送是没办法收到的</p><h1 id="十、编辑框和按钮"><a href="#十、编辑框和按钮" class="headerlink" title="十、编辑框和按钮"></a>十、编辑框和按钮</h1><p>1、添加编辑框控件和按钮，然后更改ID和Caption</p><p><img src="/2024/08/09/MFC/MFC(%E4%B8%80)/image-20240716135319855.png" alt="image-20240716135319855"></p><p>2、编辑框添加成员变量，用来保存输入的编辑框信息<br><img src="/2024/08/09/MFC/MFC(%E4%B8%80)/image-20240716135443062.png" alt="image-20240716135443062"></p><p>添加之后，Dlg.h会多出变量定义，Dlg.cpp会将变量和控件绑定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dlg.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDlg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dlg.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTextToSpeechDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、设置编辑框默认文本，在OnInitDialog()中设置初始文本或水印文字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CTextToSpeechDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//m_edtText.SetWindowTextW(_T(&quot;请输入&quot;));</span></span><br><span class="line">m_edtText.<span class="built_in">SetCueBanner</span>(_T(<span class="string">&quot;请输入&quot;</span>));<span class="comment">// 设置水印文字，点击时自动消失</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、双击按钮，系统会自动初始化按钮触发的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTextToSpeechDlg::OnBnClickedTranfer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CString strText;</span><br><span class="line">m_edtText.<span class="built_in">GetWindowText</span>(strText);<span class="comment">// 获取编辑框的输入</span></span><br><span class="line">m_edtText.<span class="built_in">SetCueBanner</span>(_T(<span class="string">&quot;请再次输入&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 CString 格式化字符串，检测是否得到编辑框信息</span></span><br><span class="line">CString message;</span><br><span class="line">message.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), strText);</span><br><span class="line"><span class="built_in">MessageBox</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QT_基础(一)</title>
      <link href="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
      <url>/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="一、QT概述"><a href="#一、QT概述" class="headerlink" title="一、QT概述"></a>一、QT概述</h1><h2 id="1-1、介绍"><a href="#1-1、介绍" class="headerlink" title="1.1、介绍"></a>1.1、介绍</h2><ul><li>跨平台的图形用户界面应用程序框架</li><li>面向对象</li><li>可以扩展</li></ul><h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h2><ol><li>跨平台</li><li>接口简单，容易上手</li><li>简化了内存回收</li></ol><h2 id="1-3、版本"><a href="#1-3、版本" class="headerlink" title="1.3、版本"></a>1.3、版本</h2><ul><li>商业版</li><li>开源版</li></ul><h2 id="1-4、历史"><a href="#1-4、历史" class="headerlink" title="1.4、历史"></a>1.4、历史</h2><ul><li>1991年，奇趣科技</li><li>1996年，进入商业领域， 成功案例：Linux的桌面环境</li></ul><h2 id="1-5、下载"><a href="#1-5、下载" class="headerlink" title="1.5、下载"></a>1.5、下载</h2><p>官方下载地址：<a href="http://download.qt.io/archive/qt/">http://download.qt.io/archive/qt/</a> </p><p>清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/online_installers/">Index of &#x2F;qt&#x2F;development_releases&#x2F;online_installers&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>下载教程（先在powershell输入第11条命令）：<a href="https://blog.csdn.net/qq_40296728/article/details/131917751">QT下载安装教程_qt安装教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_40296728/category_12531577.html">QT_在巴厘岛冲浪的阿k的博客-CSDN博客</a></p><h2 id="1-6、成功案例"><a href="#1-6、成功案例" class="headerlink" title="1.6、成功案例"></a>1.6、成功案例</h2><ul><li>Linux桌面环境KDE</li><li>WPS Office办公软件</li></ul><h2 id="1-7、问题汇总"><a href="#1-7、问题汇总" class="headerlink" title="1.7、问题汇总"></a>1.7、问题汇总</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240822141901547.png" alt="image-20240822141901547"></p><h1 id="二、新建项目"><a href="#二、新建项目" class="headerlink" title="二、新建项目"></a>二、新建项目</h1><h2 id="2-1、新建"><a href="#2-1、新建" class="headerlink" title="2.1、新建"></a>2.1、新建</h2><p>点击新建项目(open project)，选择Qt Widgets Application，它会提供一个包含主窗口的项目</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805101610765.png" alt="image-20240805101610765"></p><h2 id="2-2、Location"><a href="#2-2、Location" class="headerlink" title="2.2、Location"></a>2.2、Location</h2><p>选择项目名称和保存路径，注意都不可以包含中文和空格</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805102541909.png" alt="image-20240805102541909"></p><h2 id="2-3、构建系统"><a href="#2-3、构建系统" class="headerlink" title="2.3、构建系统"></a>2.3、构建系统</h2><p><a href="https://blog.csdn.net/secondtonone1/article/details/137644031">QT系列教程(2) 创建项目和编译_qt构建系统选哪个-CSDN博客</a></p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805103945902.png" alt="image-20240805103945902"></p><h2 id="2-4、Details"><a href="#2-4、Details" class="headerlink" title="2.4、Details"></a>2.4、Details</h2><p>QWidget是父类，空窗口，可以直接使用ui拖动进行设计</p><p>QMainWindow（窗口）,QDialog都是子类。QDialog是对话框。</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805104342958.png" alt="image-20240805104342958"></p><h2 id="2-5、Translation"><a href="#2-5、Translation" class="headerlink" title="2.5、Translation"></a>2.5、Translation</h2><p>翻译语言选择：无</p><h2 id="2-6、构建套件"><a href="#2-6、构建套件" class="headerlink" title="2.6、构建套件"></a>2.6、构建套件</h2><p>构建套件：</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805104619462.png" alt="image-20240805104619462"></p><h2 id="2-7、汇总"><a href="#2-7、汇总" class="headerlink" title="2.7、汇总"></a>2.7、汇总</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805104639477.png" alt="image-20240805104639477"></p><p>.pro 工程文件，类似VS中的.sln，可以双击打开文件</p><p>main.cpp 程序入口</p><p>mywidget.cpp,mywidget.h是窗口文件</p><h2 id="2-8、结果"><a href="#2-8、结果" class="headerlink" title="2.8、结果"></a>2.8、结果</h2><p>点击完成之后，获得项目</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805105338326.png" alt="image-20240805105338326"></p><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span> <span class="comment">// 包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main程序入口</span></span><br><span class="line"><span class="comment">// argc命令行变量的数量</span></span><br><span class="line"><span class="comment">// argv 命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a 应用程序对象，在Qt中，应用程序对象，有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 窗口对象 myWidget父类 -&gt; QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">// 窗口对象，默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让应用程序对象进入消息循环</span></span><br><span class="line">    <span class="comment">// 让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、项目文件"><a href="#三、项目文件" class="headerlink" title="三、项目文件"></a>三、项目文件</h1><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240822141620385.png" alt="image-20240822141620385"></p><h2 id="3-1、-pro文件"><a href="#3-1、-pro文件" class="headerlink" title="3.1、.pro文件"></a>3.1、.pro文件</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80" alt="Qt5 模块">&#x2F;Qt5 模块.png)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QT       += core guiQt包含的模块</span><br><span class="line"></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets<span class="comment">// 大于4版本以上，包含Qt的widgets模块</span></span><br><span class="line"></span><br><span class="line">CONFIG += c+<span class="number">+17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过取消注释来禁用所有在QT6.0之前已弃用的API</span></span><br><span class="line"># You can make your code fail to compile <span class="keyword">if</span> it uses deprecated APIs.</span><br><span class="line"># In order to <span class="keyword">do</span> so, uncomment the following line.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=<span class="number">0x060000</span>    <span class="meta"># disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line">SOURCES += \<span class="comment">// 源文件</span></span><br><span class="line">    main.cpp \</span><br><span class="line">    mywidget.cpp</span><br><span class="line"></span><br><span class="line">HEADERS += \<span class="comment">// 头文件</span></span><br><span class="line">    mywidget.h</span><br><span class="line"></span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">qnx: target.path = /tmp/$$&#123;TARGET&#125;/bin</span><br><span class="line"><span class="keyword">else</span>: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span><br><span class="line">!<span class="built_in">isEmpty</span>(target.path): INSTALLS += target</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2、main-cpp"><a href="#3-2、main-cpp" class="headerlink" title="3.2、main.cpp"></a>3.2、main.cpp</h2><p>项目的开始文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span> <span class="comment">// 包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main程序入口</span></span><br><span class="line"><span class="comment">// argc命令行变量的数量</span></span><br><span class="line"><span class="comment">// argv 命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a 应用程序对象，在Qt中，应用程序对象，有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 窗口对象 myWidget父类 -&gt; QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">// 窗口对象，默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让应用程序对象进入消息循环</span></span><br><span class="line">    <span class="comment">// 让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3、-h文件"><a href="#3-3、-h文件" class="headerlink" title="3.3、.h文件"></a>3.3、.h文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span>  <span class="comment">// 包含头文件 QWidget 窗口类</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT    <span class="comment">// Q_OBJECT宏，允许类中使用信号和槽的机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);    <span class="comment">// 构造函数</span></span><br><span class="line">    ~<span class="built_in">myWidget</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4、-cpp文件"><a href="#3-4、-cpp文件" class="headerlink" title="3.4、.cpp文件"></a>3.4、.cpp文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助文档</span></span><br><span class="line"><span class="comment">// 第一种方式 F1</span></span><br><span class="line"><span class="comment">// 第二种 左侧按钮</span></span><br><span class="line"><span class="comment">// 第三种 assistant.exe E:\Qt\6.6.3\mingw_64\bin</span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5、快捷键"><a href="#3-5、快捷键" class="headerlink" title="3.5、快捷键"></a>3.5、快捷键</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快捷键</span></span><br><span class="line"><span class="comment">// 注释 Ctrl + /</span></span><br><span class="line"><span class="comment">// 运行 ctrl + r</span></span><br><span class="line"><span class="comment">// 编译 ctrl + b</span></span><br><span class="line"><span class="comment">// 字体缩放 ctrl + 鼠标滚轮</span></span><br><span class="line"><span class="comment">// 查找 ctrl + f</span></span><br><span class="line"><span class="comment">// 整行移动 ctrl + shift + ↑或者↓</span></span><br><span class="line"><span class="comment">// 帮助文档 F1</span></span><br><span class="line"><span class="comment">// 自动对齐 ctrl + i</span></span><br><span class="line"><span class="comment">// 同名之间的.h 和 .cpp切换 F4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_基础(三)-窗口与布局</title>
      <link href="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/"/>
      <url>/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="七、QMainWindow"><a href="#七、QMainWindow" class="headerlink" title="七、QMainWindow"></a>七、QMainWindow</h1><p>​QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)、一个状态栏(status bar)及一个中心部件(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps1-1722905784198.jpg" alt="img"></p><h2 id="7-1-菜单栏"><a href="#7-1-菜单栏" class="headerlink" title="7.1 菜单栏"></a>7.1 菜单栏</h2><p>最多有一个</p><p>引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>QMenuBar * bar &#x3D; MenuBar();</li><li>setMenuBar( bar ) </li><li>QMenu * fileMenu &#x3D; bar -&gt; addMenu(“文件”)  创建菜单</li><li>QAction * newAction &#x3D;  fileMenu -&gt;addAction(“新建”); 创建菜单项</li><li>添加分割线 fileMenu-&gt;addSeparator();</li></ol><h2 id="7-2-工具栏"><a href="#7-2-工具栏" class="headerlink" title="7.2 工具栏"></a>7.2 工具栏</h2><p>可以有多个</p><ol><li>QToolBar * toolbar &#x3D; new QToolBar(this);</li><li>addToolBar( 默认停靠区域， toolbar );  Qt::LeftToolBarArea</li><li>设置  后期停靠区域，设置浮动，设置移动</li><li>添加菜单项 或者添加 小控件</li></ol><h2 id="7-3-状态栏"><a href="#7-3-状态栏" class="headerlink" title="7.3 状态栏"></a>7.3 状态栏</h2><p>最多一个</p><p>1.3.1 QStatusBar * stBar &#x3D; statusBar();</p><p>1.3.2 设置到窗口中 setStatusBar(stBar);</p><p>1.3.3  stBar-&gt;addWidget(label);放左侧信息</p><p>1.3.4  stBar-&gt;addPermanentWidget(label2); 放右侧信息</p><h2 id="7-4-铆接部件"><a href="#7-4-铆接部件" class="headerlink" title="7.4 铆接部件"></a>7.4 铆接部件</h2><p>浮动窗口  可以多个</p><ol><li>QDockWidget </li><li>addDockWidget( 默认停靠区域，浮动窗口指针)</li><li>设置后期停靠区域</li></ol><h2 id="7-5-设置核心部件"><a href="#7-5-设置核心部件" class="headerlink" title="7.5 设置核心部件"></a>7.5 设置核心部件</h2><p>  只能一个</p><ol><li>setCentralWidget(edit);</li></ol><h2 id="7-6、资源文件"><a href="#7-6、资源文件" class="headerlink" title="7.6、资源文件"></a>7.6、资源文件</h2><p>1.1 将图片文件 拷贝到项目位置下</p><p>1.2 右键项目-&gt;添加新文件 –&gt;  Qt - &gt; Qt recourse File  - &gt;给资源文件起名</p><p>1.3 res 生成  res.qrc  </p><p>1.4 open in editor  编辑资源</p><p>1.5 添加前缀  添加文件</p><p>1.6 使用  “ : + 前缀名 + 文件名 ”</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/image-20240806100528590.png" alt="image-20240806100528590"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ui-&gt;actionnew-&gt;setIcon(QIcon(&quot;F:\\QT\\05_QtSource\\Image\\Luffy.png&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用添加Qt资源 &quot;: +前缀名 +文件名&quot;</span></span><br><span class="line">    ui-&gt;actionnew-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/Image/Luffy.png&quot;</span>));</span><br><span class="line">    ui-&gt;actionopen-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/Image/LuffyQ.png&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、对话框"><a href="#八、对话框" class="headerlink" title="八、对话框"></a>八、对话框</h1><h2 id="8-1-分类-："><a href="#8-1-分类-：" class="headerlink" title="8.1 分类 ："></a>8.1 分类 ：</h2><ol><li>模态对话框  不可以对其他窗口进行操作 阻塞<ol><li>QDialog  dlg(this)</li><li>dlg.exec();</li></ol></li><li>非模态对话框  可以对其他窗口进行操作<ol><li>防止一闪而过 创建到堆区</li><li>QDialog * dlg &#x3D; new QDialog(this)</li><li>dlg-&gt;show();</li><li>dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose); &#x2F;&#x2F;55号 属性</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击新建按钮，弹出一个对话框</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;actionnew, &amp;QAction::triggered,[=]()&#123;</span><br><span class="line">    <span class="comment">// 对话框 两种分类</span></span><br><span class="line">    <span class="comment">// 模态对话框（不可以对其他窗口进行操作）阻塞</span></span><br><span class="line">    <span class="comment">// 非模态对话框（可以对其他窗口进行操作）</span></span><br><span class="line">    <span class="comment">// QDialog dlg(this);</span></span><br><span class="line">    <span class="comment">// dlg.resize(200, 100);</span></span><br><span class="line">    <span class="comment">// dlg.exec();</span></span><br><span class="line">    <span class="comment">// qDebug() &lt;&lt; &quot;模态对话框弹出了&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非模态对话框</span></span><br><span class="line">    QDialog * dlg2 = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">    dlg2-&gt;<span class="built_in">resize</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">    dlg2-&gt;<span class="built_in">show</span>();</span><br><span class="line">    dlg2-&gt;<span class="built_in">setAttribute</span>(Qt::WA_DeleteOnClose);   <span class="comment">// 55号属性</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;非模态对话框弹出了&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8-2-标准对话框-–-消息对话框"><a href="#8-2-标准对话框-–-消息对话框" class="headerlink" title="8.2 标准对话框 –  消息对话框"></a>8.2 标准对话框 –  消息对话框</h2><p>1.2.1 QMessageBox 静态成员函数  创建对话框</p><p>1.2.2 错误、信息、提问、警告</p><p>1.2.3 参数1  父亲 参数2  标题  参数3  显示内容 参数4  按键类型  参数5 默认关联回车按键</p><p>1.2.4 返回值 也是StandardButton类型，利用返回值判断用户的输入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew, &amp;QAction::triggered,[=]()&#123;</span><br><span class="line">        <span class="comment">// 消息对话框</span></span><br><span class="line">        <span class="comment">// 错误对话框</span></span><br><span class="line">        <span class="comment">//QMessageBox::critical(this, &quot;critical&quot;, &quot;错误&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 信息对话框</span></span><br><span class="line">        <span class="comment">//QMessageBox::information(this, &quot;info&quot;, &quot;信息&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提问对话框</span></span><br><span class="line">        <span class="comment">// 参数1：父亲</span></span><br><span class="line">        <span class="comment">// 参数2：标题</span></span><br><span class="line">        <span class="comment">// 参数3：提示内容</span></span><br><span class="line">        <span class="comment">// 参数4：按键类型</span></span><br><span class="line">        <span class="comment">// 参数5：默认关联回车按键</span></span><br><span class="line">        <span class="comment">// if (QMessageBox::Save == QMessageBox::question(this, &quot;ques&quot;,&quot;提问&quot;, QMessageBox::Save | QMessageBox::Cancel))</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;选择的是保存&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;选择的是取消&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 警告对话框</span></span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;警告&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-其他标准对话框"><a href="#8-3-其他标准对话框" class="headerlink" title="8.3 其他标准对话框"></a>8.3 其他标准对话框</h2><ul><li>颜色对话框  QColorDialog：：getColor </li><li>文件对话框  QFileDialog：：getOpenFileName(父亲，标题，默认路径，过滤文件)</li><li>字体对话框  QFontDialog：：getFont</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QColorDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFontDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew, &amp;QAction::triggered,[=]()&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 其他标准对话框</span></span><br><span class="line">        <span class="comment">// 颜色对话框</span></span><br><span class="line">        <span class="comment">// QColor color = QColorDialog::getColor(QColor(255, 0, 0));</span></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;r = &quot; &lt;&lt; color.red() &lt;&lt; &quot; g = &quot; &lt;&lt; color.green() &lt;&lt; &quot; b = &quot; &lt;&lt; color.blue();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件对话框</span></span><br><span class="line">        <span class="comment">// 参数1 父亲</span></span><br><span class="line">        <span class="comment">// 参数2 标题</span></span><br><span class="line">        <span class="comment">// 参数3 默认打开路径</span></span><br><span class="line">        <span class="comment">// 参数4 过滤文件格式</span></span><br><span class="line">        <span class="comment">// 返回值是 选取的路径</span></span><br><span class="line">        <span class="comment">// QString str = QFileDialog::getOpenFileName(this, &quot;打开&quot;, &quot;C:\\Users\\Administrator\\Desktop&quot;, &quot;(*.txt)&quot;);</span></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; str;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体对话框</span></span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        QFont font = QFontDialog::<span class="built_in">getFont</span>(&amp;flag, <span class="built_in">QFont</span>(<span class="string">&quot;华文彩云&quot;</span>, <span class="number">36</span>));</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;字体：&quot;</span> &lt;&lt; font.<span class="built_in">family</span>().<span class="built_in">toUtf8</span>().<span class="built_in">data</span>() &lt;&lt; <span class="string">&quot; 字号：&quot;</span> &lt;&lt; font.<span class="built_in">pointSize</span>() &lt;&lt; <span class="string">&quot; 是否加粗：&quot;</span> &lt;&lt; font.<span class="built_in">bold</span>() &lt;&lt; <span class="string">&quot; 是否倾斜：&quot;</span> &lt;&lt; font.<span class="built_in">italic</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、布局管理器"><a href="#九、布局管理器" class="headerlink" title="九、布局管理器"></a>九、布局管理器</h1><p>​所谓 GUI 界面，归根结底，就是一堆组件的叠加。我们创建一个窗口，把按钮放上面，把图标放上面，这样就成了一个界面。在放置时，组件的位置尤其重要。我们必须要指定组件放在哪里，以便窗口能够按照我们需要的方式进行渲染。这就涉及到组件定位的机制。</p><p><strong>Qt 提供了两种组件定位机制：绝对定位和布局定位。</strong></p><p>​绝对定位就是一种最原始的定位方法：给出这个组件的坐标和长宽值。</p><p>​这样，Qt 就知道该把组件放在哪里以及如何设置组件的大小。但是这样做带来的一个问题是，如果用户改变了窗口大小，比如点击最大化按钮或者使用鼠标拖动窗口边缘，采用绝对定位的组件是不会有任何响应的。这也很自然，因为你并没有告诉 Qt，在窗口变化时，组件是否要更新自己以及如何更新。或者，还有更简单的方法：禁止用户改变窗口大小。但这总不是长远之计。</p><p>​布局定位：你只要把组件放入某一种布局，布局由专门的布局管理器进行管理。当需要调整大小或者位置的时候，Qt 使用对应的布局管理器进行调整。</p><p>布局定位完美的解决了使用绝对定位的缺陷。</p><p>Qt 提供的布局中以下三种是我们最常用的：</p><ul><li>QHBoxLayout：按照水平方向从左到右布局；</li><li>QVBoxLayout：按照竖直方向从上到下布局；</li><li>QGridLayout：在一个网格中进行布局，类似于 HTML 的 table；</li></ul><h2 id="9-1-系统提供的布局控件"><a href="#9-1-系统提供的布局控件" class="headerlink" title="9.1 系统提供的布局控件"></a><strong>9.1 系统提供的布局控件</strong></h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps2.jpg" alt="img"> </p><p>这4个为系统给我们提供的布局的控件，但是使用起来不是非常的灵活，这里就不详细介绍了。</p><h2 id="9-2-利用widget做布局"><a href="#9-2-利用widget做布局" class="headerlink" title="9.2 利用widget做布局"></a><strong>9.2 利用widget做布局</strong></h2><p>第二种布局方式是利用控件里的widget来做布局，在Containers中</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps3.jpg" alt="img"> </p><p>在widget中的控件可以进行水平、垂直、栅格布局等操作，比较灵活。</p><p>再布局的同时我们需要灵活运用弹簧的特性让我们的布局更加的美观，下面是一个登陆窗口，利用widget可以搭建出如下登陆界面：</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps4.jpg" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_基础(二)-控件、信号量和槽</title>
      <link href="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
      <url>/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="四、基本控件"><a href="#四、基本控件" class="headerlink" title="四、基本控件"></a>四、基本控件</h1><p><strong>窗口操作</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重置窗口的大小</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">// 设置固定的窗口大小</span></span><br><span class="line"><span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置窗口标题</span></span><br><span class="line"><span class="built_in">setWindowTitle</span>(<span class="string">&quot;第一个窗口&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4-1、按钮控件"><a href="#4-1、按钮控件" class="headerlink" title="4.1、按钮控件"></a>4.1、按钮控件</h2><p>​一个按钮其实就是一个QPushButton类下的对象，如果只是创建出对象，是无法显示到窗口中的，所以我们需要依赖一个父窗口，也就是指定一个父亲利用setParent函数即可，如果想设置按钮上显示的文字利用setText，移动按钮位置用move</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">// 按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">// btn-&gt;show();    // show以顶层方式弹出窗口控件</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);<span class="comment">// 让btn 依赖在myWidget窗口中</span></span><br><span class="line"></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;第一个按钮&quot;</span>);<span class="comment">// 显示文本</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个按钮，并指定父类 按照控件的大小创建窗口</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;第二个按钮&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动btn2按钮</span></span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 按钮也可以设置大小</span></span><br><span class="line">    btn2-&gt;<span class="built_in">resize</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Qt中的坐标系</p><ul><li>左上角为 0 ， 0 点</li><li>x以右为正方向</li><li>y以下为正方向</li></ul><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/wps1.jpg" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn-&gt;<span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);<span class="comment">// 设置坐标为（100， 100）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2、QLabel控件"><a href="#4-2、QLabel控件" class="headerlink" title="4.2、QLabel控件"></a><strong>4.2、QLabel控件</strong></h2><p>QLabel是我们最常用的控件之一，其功能很强大，我们可以用来显示文本，图片和动画等。</p><h3 id="4-2-1、显示文字"><a href="#4-2-1、显示文字" class="headerlink" title="4.2.1、显示文字"></a>4.2.1、显示文字</h3><p>通过QLabel类的setText函数设置显示的内容:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span><span class="title">setText</span><span class="params">(<span class="type">const</span> QString &amp;)</span></span></span><br></pre></td></tr></table></figure><ul><li>可以显示普通文本字符串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QLable *label = <span class="keyword">new</span> QLable;</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setText</span>(“Hello, World!”);</span><br></pre></td></tr></table></figure><ul><li><p>显示中文</p><ul><li><p>避免中文乱码，可以使用QStringLiteral</p></li><li><pre><code class="cpp">QString str = QStringLiteral(&quot;正在发送信息.......&quot;);label-&gt;setText(str);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 中文字体也可以进行丰富，使用`QFont`设置格式，也可以使用 `setStyleSheet` 设置格式</span><br><span class="line"></span><br><span class="line">- ```cpp</span><br><span class="line">  QFont font;</span><br><span class="line">  font.setFamily(&quot;Microsoft YaHei UI&quot;);  // 设置字体为宋体</span><br><span class="line">  font.setPointSize(20);     // 设置字体大小</span><br><span class="line">  </span><br><span class="line">  QLabel * safeInfo = new QLable;</span><br><span class="line">  safeInfo-&gt;setText(str);</span><br><span class="line">  safeInfo-&gt;setFont(font);</span><br><span class="line">  safeInfo-&gt;setStyleSheet(&quot;color: red;&quot;);// 字体为中文</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>可以显示HTML格式的字符串</p><ul><li>比如显示一个链接:</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setText</span>(<span class="string">&quot;&lt;h1&gt;&lt;a href=\&quot;https://www.baidu.com\&quot;&gt;百度一下&lt;/a&gt;&lt;/h1&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setOpenExternalLinks</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>​其中setOpenExternalLinks()函数是用来设置用户点击链接之后是否自动打开链接，如果参数指定为true则会自动打开。</p><h3 id="4-2-2、显示图片"><a href="#4-2-2、显示图片" class="headerlink" title="4.2.2、显示图片"></a>4.2.2、显示图片</h3><ul><li><p>可以使用QLabel的成员函数setPixmap设置图片</p><ul><li><pre><code class="cpp">voidsetPixmap(const QPixmap &amp;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 流程为：</span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    // 首先定义QPixmap对象</span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    </span><br><span class="line">    // 然后加载图片</span><br><span class="line">    pixmap.load(&quot;:/Image/boat.jpg&quot;);</span><br><span class="line">    </span><br><span class="line">    // 最后将图片设置到QLabel中</span><br><span class="line">    QLabel *label = new QLabel;</span><br><span class="line">    label.setPixmap(pixmap);</span><br></pre></td></tr></table></figure>-</code></pre></li></ul></li><li><p>也可以使用setStyleSheet的方式设置图片</p><ul><li><pre><code class="cpp">QLabel * label = new QLabel;label-&gt;setStyleSheet(&quot;background-image: url(:/image/warningRed.png);&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.2.3、显示动画</span><br><span class="line"></span><br><span class="line">可以使用QLabel 的成员函数setMovie加载动画，可以播放gif格式的文件</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">voidsetMovie(QMovie * movie)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>首先定义QMovied对象，并初始化:</p><ul><li><pre><code class="cpp">QMovie *movie = new QMovie(&quot;:/Mario.gif&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 播放加载的动画：</span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    movie-&gt;start();</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>将动画设置到QLabel中：</p><ul><li><pre><code class="cpp">QLabel *label = new QLabel；label-&gt;setMovie(movie);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">## **4.3 QLineEdit**</span><br><span class="line"></span><br><span class="line">Qt提供的单行文本编辑框。</span><br><span class="line"></span><br><span class="line">### 4.3.1、设置/获取内容</span><br><span class="line"></span><br><span class="line">-   获取编辑框内容使用text（），函数声明如下：</span><br><span class="line">    -   `QStringtext() const`</span><br><span class="line">-   设置编辑框内容</span><br><span class="line">    -   `voidsetText(const QString &amp;)`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.3.2、设置显示模式</span><br><span class="line"></span><br><span class="line">使用QLineEdit类的setEchoMode () 函数设置文本的显示模式,</span><br><span class="line"></span><br><span class="line">函数声明:`voidsetEchoMode(EchoMode mode)`</span><br><span class="line"></span><br><span class="line">EchoMode是一个枚举类型,一共定义了四种显示模式:</span><br><span class="line"></span><br><span class="line">1.  QLineEdit::Normal 模式显示方式，按照输入的内容显示。</span><br><span class="line">2.  QLineEdit::NoEcho不显示任何内容，此模式下无法看到用户的输入。</span><br><span class="line">3.  QLineEdit::Password密码模式，输入的字符会根据平台转换为特殊字符。</span><br><span class="line">4.  QLineEdit::PasswordEchoOnEdit编辑时显示字符否则显示字符作为密码。</span><br><span class="line"></span><br><span class="line">另外，我们再使用QLineEdit显示文本的时候，希望在左侧留出一段空白的区域，那么，就可以使用QLineEdit给我们提供的setTextMargins函数：</span><br><span class="line"></span><br><span class="line">`void setTextMargins(int left, int top, int right, int bottom)`</span><br><span class="line"></span><br><span class="line">用此函数可以指定显示的文本与输入框上下左右边界的间隔的像素数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## **4.4 自定义控件**</span><br><span class="line"></span><br><span class="line">自定义一个控件SmallWidget，可以作为独立的窗口显示,也可以作为一个控件来使用：</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps5.jpg) </span><br><span class="line"></span><br><span class="line">打开Qt的.ui文件,因为SmallWidget是派生自Qwidget类,所以需要在ui文件中先放入一个QWidget控件, 然后再上边鼠标右键</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps6.jpg) </span><br><span class="line"></span><br><span class="line">弹出提升窗口部件对话框</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps7.jpg) </span><br><span class="line"></span><br><span class="line">添加要提升的类的名字,然后选择 添加 </span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps8.jpg) </span><br><span class="line"></span><br><span class="line">添加之后,类名会显示到上边的列表框中,然后单击提升按钮,完成操作.</span><br><span class="line"></span><br><span class="line">我们可以看到, 这个窗口对应的类从原来的QWidget变成了SmallWidget</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps9.jpg) </span><br><span class="line"></span><br><span class="line">再次运行程序,这个widget_3中就能显示出我们自定义的窗口了.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**操作流程：**</span><br><span class="line"></span><br><span class="line">1.  添加新文件 Qt-&gt;设计师界面类 ，得到（.h，.cpp，.ui）</span><br><span class="line">2.  .ui中设计QSpinBox和QSlider两个控件</span><br><span class="line">3.  Widget中使用自定义控件，拖拽一个Widget，点击”提升为“，点击“提升”</span><br><span class="line">4.  实现功能，改变数字，滑动条跟着移动</span><br><span class="line"></span><br><span class="line">在使用Qt的ui文件搭建界面的时候，工具栏栏中只为我们提供了标准的窗口控件，如果我们想使用自定义控件怎么办？</span><br><span class="line"></span><br><span class="line">例如：我们从QWidget派生出一个类SmallWidget，实现了一个自定义窗口，可以在自定义窗口使用ui设计界面，然后通过信号量和槽进行设置相关的逻辑</span><br><span class="line"></span><br><span class="line"> ```cpp</span><br><span class="line">#include &lt;QWidget&gt;</span><br><span class="line"></span><br><span class="line">namespace Ui &#123;</span><br><span class="line">class smallWidget;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class smallWidget : public QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    explicit smallWidget(QWidget *parent = nullptr);</span><br><span class="line">    ~smallWidget();</span><br><span class="line"></span><br><span class="line">    // 设置数字</span><br><span class="line">    void setNum(int num);</span><br><span class="line">    // 获取数字</span><br><span class="line">    int getNum();</span><br><span class="line">private:</span><br><span class="line">    Ui::smallWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // SMALLWIDGET_H</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;smallwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_smallwidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">smallWidget::<span class="built_in">smallWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::smallWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// QSpinBox移动，QSlider跟着移动</span></span><br><span class="line">    <span class="comment">// 定义一个函数指针，指向QSpinBox::valueChanged(int)信号</span></span><br><span class="line">    <span class="comment">// 这样做是为了处理函数重载，因为valueChanged有int和QString两个版本</span></span><br><span class="line">    <span class="built_in">void</span> (QSpinBox:: * spSignal)(<span class="type">int</span>) = &amp;QSpinBox::valueChanged;</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;spinBox, spSignal, ui-&gt;horizontalSlider, &amp;QSlider::setValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// QSlider滑动 QSpinxBox跟着改变</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;horizontalSlider, &amp;QSlider::valueChanged, ui-&gt;spinBox, &amp;QSpinBox::setValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">smallWidget::~<span class="built_in">smallWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数字</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">smallWidget::setNum</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;spinBox-&gt;<span class="built_in">setValue</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">smallWidget::getNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ui-&gt;spinBox-&gt;<span class="built_in">value</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后在widget类中使用这个自定义控件，可以通过ui指向对应的自定义控件的槽函数</p><p>注意：使用ui绘图时，不要使用widget嵌入widget，因为可能控制不了内部widget的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击获取 获取控件当前的值</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btn_get, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; ui-&gt;widget_2-&gt;<span class="built_in">getNum</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置到一半</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btn_set, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        ui-&gt;widget_2-&gt;<span class="built_in">setNum</span>(<span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-5、常用控件"><a href="#4-5、常用控件" class="headerlink" title="4.5、常用控件"></a>4.5、常用控件</h2><h3 id="4-5-1、按钮组"><a href="#4-5-1、按钮组" class="headerlink" title="4.5.1、按钮组"></a>4.5.1、按钮组</h3><ul><li><p>QPushButton  常用按钮 </p></li><li><p>QToolButton  工具按钮  用于显示图片，如图想显示文字，修改风格：toolButtonStyle ， 凸起风格autoRaise</p><ul><li><pre><code class="cpp">QToolButton *toolButton = new QToolButton(this);toolButton-&gt;setText(&quot;Tool Button&quot;);toolButton-&gt;setIcon(QIcon(&quot;:/icons/tool.png&quot;));  // 设置图标toolButton-&gt;setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  // 显示文字在图标下方toolButton-&gt;setAutoRaise(true);  // 设置凸起风格// 连接信号与槽connect(toolButton, &amp;QToolButton::clicked, this, &amp;MainWindow::handleToolButtonClick);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- radioButton  单选按钮，设置默认 ui-&gt;rBtnMan-&gt;setChecked(true); </span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    QRadioButton *rBtnMan = new QRadioButton(&quot;Man&quot;, this);</span><br><span class="line">    QRadioButton *rBtnWoman = new QRadioButton(&quot;Woman&quot;, this);</span><br><span class="line">    rBtnMan-&gt;setChecked(true);  // 设置默认选中</span><br><span class="line">    </span><br><span class="line">    // 连接信号与槽</span><br><span class="line">    connect(rBtnMan, &amp;QRadioButton::toggled, this, &amp;MainWindow::handleRadioButtonToggled);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>checkbox多选按钮，监听状态，2 选中  1 半选 0 未选中</p><ul><li><pre><code class="cpp">QCheckBox *checkBox = new QCheckBox(&quot;Option&quot;, this);// 设置默认状态（可选）checkBox-&gt;setCheckState(Qt::PartiallyChecked);// 连接信号与槽connect(checkBox, &amp;QCheckBox::stateChanged, this, &amp;MainWindow::handleCheckBoxStateChanged);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4.5.2、QListWidget 列表容器</span><br><span class="line"></span><br><span class="line">- QListWidgetItem * item 一行内容 </span><br><span class="line"></span><br><span class="line">- ui-&gt;listWidget -&gt;addItem ( item )</span><br><span class="line"></span><br><span class="line">- 设置居中方式item-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">- 可以利用addItems一次性添加整个诗内容</span><br><span class="line"></span><br><span class="line">- 两种方式添加语句</span><br><span class="line"></span><br><span class="line">- ```cpp</span><br><span class="line">  Widget::Widget(QWidget *parent)</span><br><span class="line">      : QWidget(parent)</span><br><span class="line">      , ui(new Ui::Widget)</span><br><span class="line">  &#123;</span><br><span class="line">      ui-&gt;setupUi(this);</span><br><span class="line">  </span><br><span class="line">      // 利用listWidget写诗</span><br><span class="line">      QListWidgetItem * item = new QListWidgetItem(&quot;锄禾日当午&quot;);</span><br><span class="line">      item-&gt;setTextAlignment(Qt::AlignCenter);</span><br><span class="line">      // 将一行诗放入到listWidget控件中</span><br><span class="line">      ui-&gt;listWidget-&gt;addItem(item);</span><br><span class="line">  </span><br><span class="line">      // QStringList List&lt;String&gt;</span><br><span class="line">      QStringList list;</span><br><span class="line">      list &lt;&lt; &quot;锄禾日当午&quot; &lt;&lt; &quot;汗滴禾下土&quot; &lt;&lt; &quot;谁知盘中餐&quot; &lt;&lt; &quot;粒粒皆辛苦&quot;;</span><br><span class="line">      ui-&gt;listWidget-&gt;addItems(list);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="4-5-3、QTreeWidget-树控件"><a href="#4-5-3、QTreeWidget-树控件" class="headerlink" title="4.5.3、QTreeWidget 树控件"></a>4.5.3、QTreeWidget 树控件</h3><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/image-20240806142429779.png" alt="image-20240806142429779"></p><ul><li><p>设置头  </p><ul><li>ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt; “英雄”&lt;&lt; “英雄介绍”);</li></ul></li><li><p>创建根节点</p><ul><li>QTreeWidgetItem * liItem &#x3D; new QTreeWidgetItem(QStringList()&lt;&lt; “力量”);</li></ul></li><li><p>添加根节点 到 树控件上</p><ul><li>ui-&gt;treeWidget-&gt;addTopLevelItem(liItem);</li></ul></li><li><p>添加子节点</p></li><li><p>liItem-&gt;addChild(l1);</p></li><li><pre><code class="cpp">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    // treeWidget树控件的使用    // 设置水平头    ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList() &lt;&lt; &quot;英雄&quot; &lt;&lt; &quot;英雄简介&quot;);    QTreeWidgetItem * liItem = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;力量&quot;);    QTreeWidgetItem * minItem = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;敏捷&quot;);    QTreeWidgetItem * zhiItem = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;智慧&quot;);    // 加载顶层节点    ui-&gt;treeWidget-&gt;addTopLevelItem(liItem);    ui-&gt;treeWidget-&gt;addTopLevelItem(minItem);    ui-&gt;treeWidget-&gt;addTopLevelItem(zhiItem);    // 追加子节点    QStringList heroL1;    heroL1 &lt;&lt; &quot;钢背猪&quot; &lt;&lt; &quot;前排坦克能在吸收伤害的同时造成可观的范围输出&quot;;    QTreeWidgetItem * li = new QTreeWidgetItem(heroL1);    liItem-&gt;addChild(li);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4.5.4、QTableWidget 表格控件</span><br><span class="line"></span><br><span class="line">![image-20240806144019566](Qt_基础(二)/image-20240806144019566.png)</span><br><span class="line"></span><br><span class="line">- 设置列数 </span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setColumnCount(3);</span><br><span class="line"></span><br><span class="line">- 设置水平表头</span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;&quot;姓名&quot;&lt;&lt; &quot;性别&quot;&lt;&lt; &quot;年龄&quot;);</span><br><span class="line"></span><br><span class="line">- 设置行数 </span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setRowCount(5);</span><br><span class="line"></span><br><span class="line">- 设置正文</span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setItem(0,0, new QTableWidgetItem(&quot;亚瑟&quot;));</span><br><span class="line"></span><br><span class="line">- ```cpp</span><br><span class="line">  Widget::Widget(QWidget *parent)</span><br><span class="line">      : QWidget(parent)</span><br><span class="line">      , ui(new Ui::Widget)</span><br><span class="line">  &#123;</span><br><span class="line">      ui-&gt;setupUi(this);</span><br><span class="line">  </span><br><span class="line">      // TableWidget控件</span><br><span class="line">      // 设置列数</span><br><span class="line">      ui-&gt;tableWidget-&gt;setColumnCount(3);</span><br><span class="line">      // 设置水平表头</span><br><span class="line">      ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList() &lt;&lt;&quot;姓名&quot; &lt;&lt; &quot;性别&quot; &lt;&lt; &quot;年龄&quot;);</span><br><span class="line">      // 设置行数</span><br><span class="line">      ui-&gt;tableWidget-&gt;setRowCount(5);</span><br><span class="line">  </span><br><span class="line">      // 设置正文</span><br><span class="line">      // ui-&gt;tableWidget-&gt;setItem(0, 0, new QTableWidgetItem(&quot;亚瑟&quot;));</span><br><span class="line">      QStringList nameList;</span><br><span class="line">      nameList &lt;&lt; &quot;亚瑟&quot; &lt;&lt; &quot;赵云&quot; &lt;&lt; &quot;张飞&quot; &lt;&lt; &quot;关羽&quot; &lt;&lt; &quot;花木兰&quot;;</span><br><span class="line">  </span><br><span class="line">      QList&lt;QString&gt; sexList;</span><br><span class="line">      sexList &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;女&quot; ;</span><br><span class="line">      for (int i = 0; i &lt; 5; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          int col = 0;</span><br><span class="line">          ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(nameList[i]));</span><br><span class="line">          ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(sexList.at(i)));</span><br><span class="line">          // int 转    QString</span><br><span class="line">          ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(QString::number(i+18)));</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="4-5-5、其他控件介绍"><a href="#4-5-5、其他控件介绍" class="headerlink" title="4.5.5、其他控件介绍"></a>4.5.5、其他控件介绍</h3><ul><li><p>stackedWidget  栈控件</p><ul><li>ui-&gt;stackedWidget-&gt;setCurrentIndex(1);</li></ul></li><li><p>下拉框</p><ul><li>ui-&gt;comboBox-&gt;addItem(“奔驰”);</li></ul></li></ul><h1 id="五、对象树"><a href="#五、对象树" class="headerlink" title="五、对象树"></a>五、对象树</h1><p>当创建的对象在堆区时候，如果指定的父类是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，系统会自动将对象放入对象树中。</p><p>一定程度上简化了内存回收机制</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/Qt%E5%AF%B9%E8%B1%A1%E6%A0%91.png" alt="Qt对象树"></p><p>这个MyPushButton是myWidget的子类，它得到了myWidget的this指针，构造是从父类一直向子类来构造，析构是子类析构，然后向父类析构，但是。这个结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我的按钮类构造调用</span><br><span class="line">~myWidget的析构调用</span><br><span class="line">我的按钮类析构</span><br></pre></td></tr></table></figure><p>也没有错，它是从上往下开始调用，到mywidget的析构时，它是先执行里面的操作，然后查看是否有它的子类，再跑到MyPushButton的析构，直到确定没有子类了，才开始释放资源</p><p>也就是说执行操作和释放资源不是同步的，它是先从上往下执行操作，再从下往上释放资源</p><p><strong>父类</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">// 按钮控件的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mypushbutton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">// 让btn 对依赖在myWidget窗口中</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个自己的按钮对象</span></span><br><span class="line">    MyPushButton * myBtn = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">    myBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;我自己的按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">    myBtn-&gt;<span class="built_in">move</span>(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">    myBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>); <span class="comment">// 设置到对象树中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;~myWidget的析构调用&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>派生类</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPushButton</span> : <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyPushButton</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyPushButton</span>();</span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYPUSHBUTTON_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mypushbutton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyPushButton::<span class="built_in">MyPushButton</span>(QWidget *parent)</span><br><span class="line">    : QPushButton&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我的按钮类构造调用&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPushButton::~<span class="built_in">MyPushButton</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我的按钮类析构&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、信号量和槽"><a href="#六、信号量和槽" class="headerlink" title="六、信号量和槽"></a>六、信号量和槽</h1><h2 id="6-1、系统提供的信号和槽"><a href="#6-1、系统提供的信号和槽" class="headerlink" title="6.1、系统提供的信号和槽"></a>6.1、系统提供的信号和槽</h2><p>连接函数 connect</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：点击按钮，关闭窗口</span></span><br><span class="line"><span class="comment">// 参数1：信号的发送者</span></span><br><span class="line"><span class="comment">// 参数2：发送的信号(函数的地址）</span></span><br><span class="line"><span class="comment">// 参数3：信号的接收者</span></span><br><span class="line"><span class="comment">// 参数4：处理的槽函数，信号的槽（函数的地址）</span></span><br><span class="line"><span class="comment">// connect(myBtn, &amp;MyPushButton::clicked, this, &amp;myWidget::close);</span></span><br><span class="line"><span class="built_in">connect</span>(myBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><p>实现了松散耦合，信号和实现没有固定的关系，是connect联系起来的</p><h2 id="6-2、自定义信号和槽"><a href="#6-2、自定义信号和槽" class="headerlink" title="6.2、自定义信号和槽"></a>6.2、自定义信号和槽</h2><ul><li><p>自定义信号和槽</p><ul><li>自定义信号<ul><li>写到 signals下</li><li>返回 void</li><li>需要声明，不需要实现</li><li>可以有参数，可以重载</li></ul></li><li>自定义槽函数<ul><li>返回void</li><li>需要声明 ，也需要实现</li><li>可以有参数 ，可以重载</li><li>写到 public slot下 或者public 或者全局函数</li></ul></li></ul></li><li><p>触发自定义的信号</p><ul><li>emit 自定义信号</li></ul></li></ul><p><strong>案例</strong>-下课后，老师触发饿了信号，学生响应信号，请客吃饭</p><p><strong>老师类，定义信号</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// 自定义信号 写到signals下</span></span><br><span class="line">    <span class="comment">// 返回值是void，只需要声明，不需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Hungry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>学生类，定义槽函数和实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 早期Qt版本，必须要写道public slots，高级版本可以写道public或者全局下</span></span><br><span class="line">    <span class="comment">// 返回值void， 需要声明，也需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以发生重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>widget窗口类，连接信号和槽，调用</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    Teacher * zt;</span><br><span class="line">    Student * st;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">classIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher 类 老师类</span></span><br><span class="line"><span class="comment">// Student 类 学生类</span></span><br><span class="line"><span class="comment">// 下课后，老师会触发一个信号，饿了，学生响应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老师饿了 学生请客的连接</span></span><br><span class="line">    <span class="built_in">connect</span>(zt, &amp;Teacher::Hungry, st, &amp;Student::treat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 下课函数，调用后 触发老师饿了的信号</span></span><br><span class="line">    emit zt-&gt;<span class="built_in">Hungry</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3、自定义信号和槽出现重载"><a href="#6-3、自定义信号和槽出现重载" class="headerlink" title="6.3、自定义信号和槽出现重载"></a>6.3、自定义信号和槽出现重载</h2><ol><li>需要利用函数指针 明确指向函数的地址</li><li>void( Teacher:: * tSignal )( QString ) &#x3D; &amp;Teacher::hungry;</li><li>QString 转成  char *   <ol><li>.toUtf8() 转为 QByteArray</li><li>.data() 转为 Char *信号可以连接信号</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Teacher 类 老师类</span></span><br><span class="line"><span class="comment">// Student 类 学生类</span></span><br><span class="line"><span class="comment">// 下课后，老师会触发一个信号，饿了，学生响应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老师饿了 学生请客的连接</span></span><br><span class="line">    <span class="comment">// connect(zt, &amp;Teacher::Hungry, st, &amp;Student::treat);</span></span><br><span class="line">    <span class="comment">// 连接带参数的信号和槽</span></span><br><span class="line">    <span class="comment">// 函数 -》 地址</span></span><br><span class="line">    <span class="comment">// 函数指针 -》 函数地址</span></span><br><span class="line">    <span class="built_in">void</span> (Teacher:: *teacherSignal)(QString) = &amp;Teacher::Hungry;</span><br><span class="line">    <span class="built_in">void</span> (Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt, teacherSignal, st, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 下课函数，调用后 触发老师饿了的信号</span></span><br><span class="line">    <span class="comment">// emit zt-&gt;Hungry();</span></span><br><span class="line">    emit zt-&gt;<span class="built_in">Hungry</span>(<span class="string">&quot;宫保鸡丁&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 早期Qt版本，必须要写道public slots，高级版本可以写道public或者全局下</span></span><br><span class="line">    <span class="comment">// 返回值void， 需要声明，也需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以发生重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">(QString foodName)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">(QString foodName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// QString -&gt; char*</span></span><br><span class="line">    <span class="comment">// 先转成QByteArray (.toUtf8) 再转char *（.data）</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭，老师要吃：&quot;</span> &lt;&lt; foodName.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// 自定义信号 写到signals下</span></span><br><span class="line">    <span class="comment">// 返回值是void，只需要声明，不需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Hungry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Hungry</span><span class="params">(QString foodName)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-4、扩展"><a href="#6-4、扩展" class="headerlink" title="6.4、扩展"></a>6.4、扩展</h2><ol><li>信号可以连接信号</li><li>一个信号可以连接多个槽函数</li><li>多个信号 可以连接 同一个槽函数</li><li>信号和槽函数的参数类型 必须一一对应</li><li>信号和槽的参数个数 是不是要一致？ 信号的参数个数 可以多于槽函数的参数个数</li></ol><p>断开信号  disconnect</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老师饿了 学生请客的连接</span></span><br><span class="line">    <span class="comment">// connect(zt, &amp;Teacher::Hungry, st, &amp;Student::treat);</span></span><br><span class="line">    <span class="comment">// 连接带参数的信号和槽</span></span><br><span class="line">    <span class="comment">// 函数 -》 地址</span></span><br><span class="line">    <span class="comment">// 函数指针 -》 函数地址</span></span><br><span class="line">    <span class="built_in">void</span> (Teacher:: *teacherSignal)(QString) = &amp;Teacher::Hungry;</span><br><span class="line">    <span class="built_in">void</span> (Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt, teacherSignal, st, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击一个 下课的按钮，再触发下课</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;下课&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 充值窗口大小</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击按钮，触发下课</span></span><br><span class="line">    <span class="comment">// connect(btn, &amp;QPushButton::clicked, this, &amp;Widget::classIsOver);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参信号和槽连接</span></span><br><span class="line">    <span class="built_in">void</span> (Teacher:: *teacherSignal2)(<span class="type">void</span>) = &amp;Teacher::Hungry;</span><br><span class="line">    <span class="built_in">void</span> (Student:: *studentSlot2)(<span class="type">void</span>) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt, teacherSignal2, st, studentSlot2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号连接信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, zt, teacherSignal2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 断开信号</span></span><br><span class="line">    <span class="built_in">disconnect</span>(zt, teacherSignal2, st, studentSlot2);</span><br></pre></td></tr></table></figure><h2 id="6-5、Qt4版本以前的信号和槽连接方式"><a href="#6-5、Qt4版本以前的信号和槽连接方式" class="headerlink" title="6.5、Qt4版本以前的信号和槽连接方式"></a>6.5、Qt4版本以前的信号和槽连接方式</h2><p>发送的信号SIGNAL（信号）</p><p>槽函数SLOT(槽函数)</p><p>缺点：类型不做检测</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参信号和槽连接</span></span><br><span class="line"><span class="built_in">void</span> (Teacher:: *teacherSignal2)(<span class="type">void</span>) = &amp;Teacher::Hungry;</span><br><span class="line"><span class="comment">//void (Student:: *studentSlot2)(void) = &amp;Student::treat;</span></span><br><span class="line"><span class="comment">//connect(zt, teacherSignal2, st, studentSlot2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号连接信号</span></span><br><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, zt, teacherSignal2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开信号</span></span><br><span class="line"><span class="comment">//disconnect(zt, teacherSignal2, st, studentSlot2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Qt4版本以前的信号和槽连接方式</span></span><br><span class="line"><span class="comment">// 利用Qt4信号槽 连接无参版本</span></span><br><span class="line"><span class="comment">// Qt4版本 底层SIGNAL(&quot;Hungry&quot;)，是根据字符串匹配的，所以不需要看参数</span></span><br><span class="line"><span class="built_in">connect</span>(zt, <span class="built_in">SIGNAL</span>(<span class="built_in">Hungry</span>()), st, <span class="built_in">SLOT</span>(<span class="built_in">treat</span>()));</span><br><span class="line"><span class="comment">// Qt4版本有点：参数直观 缺点：类型不做检测</span></span><br><span class="line"><span class="comment">// Qt5以上 支持Qt4的版本写法，反之不支持</span></span><br></pre></td></tr></table></figure><h2 id="6-6、Lambda表达式"><a href="#6-6、Lambda表达式" class="headerlink" title="6.6、Lambda表达式"></a>6.6、Lambda表达式</h2><p>QT5.4之后支持lambda表达式</p><p>QT5.4之前需要在.pro中添加<code>CONFIG += C++11</code></p><ul><li><p>Lambda表达式</p><ul><li>[]标识符  匿名函数 </li><li>&#x3D; 值传递</li><li>&amp; 引用传递</li></ul></li><li><p>() 参数 </p></li><li><p>{} 实现体</p></li><li><p>mutable 修饰 值传递变量 ，可以修改拷贝出的数据，改变不了本体</p></li><li><p>返回值<code> []() -&gt;int &#123;&#125;</code></p></li></ul><p>lambda表达式 最常用<code>[=]()&#123;&#125;</code></p><h2 id="6-7、Notes"><a href="#6-7、Notes" class="headerlink" title="6.7、Notes"></a>6.7、Notes</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C" alt="Qt信号和槽 ">&#x2F;Qt信号和槽 .png)</p>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_基础(五)-绘图和文件操作</title>
      <link href="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/"/>
      <url>/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h1 id="十一、绘图和绘图设备"><a href="#十一、绘图和绘图设备" class="headerlink" title="十一、绘图和绘图设备"></a>十一、绘图和绘图设备</h1><h2 id="11-1、QPainter-绘图"><a href="#11-1、QPainter-绘图" class="headerlink" title="11.1、QPainter 绘图"></a>11.1、QPainter 绘图</h2><p>1.1 绘图事件  void paintEvent()</p><p>1.2 声明一个画家对象  QPainter  painter(this)  this指定绘图设备</p><p>1.3 画线、画圆、画矩形、画文字</p><p>1.4 设置画笔 QPen  设置画笔宽度 、风格</p><p>1.5 设置画刷 QBrush 设置画刷 风格</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 实例化画家对象 this指定的是绘图的设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="comment">// 设置画笔的宽度</span></span><br><span class="line">    pen.<span class="built_in">setWidth</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 设置画笔的风格</span></span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line">    <span class="comment">// 让画家使用这个笔</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画刷</span></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">(Qt::cyan)</span></span>;</span><br><span class="line">    <span class="comment">// 设置画刷风格</span></span><br><span class="line">    brush.<span class="built_in">setStyle</span>(Qt::Dense7Pattern);</span><br><span class="line">    <span class="comment">// 让画家使用画刷</span></span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画线</span></span><br><span class="line">    painter.<span class="built_in">drawLine</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画圆 椭圆</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>), <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="built_in">QPoint</span>(<span class="number">40</span>, <span class="number">40</span>), <span class="built_in">QPoint</span>(<span class="number">80</span>, <span class="number">80</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画文字</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(<span class="number">10</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>), <span class="string">&quot;好好学习天天向上&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/image-20240807101324349.png" alt="image-20240807101324349"></p><h2 id="11-2、-QPainter高级设置"><a href="#11-2、-QPainter高级设置" class="headerlink" title="11.2、 QPainter高级设置"></a>11.2、 QPainter高级设置</h2><ul><li><p>抗锯齿 效率低</p><ul><li>painter.setRenderHint(QPainter::Antialiasing);</li></ul></li><li><p>对画家进行移动</p><ul><li>painter.translate(100,0);</li><li>保存状态 save</li><li>还原状态 restore</li></ul></li><li><p>如果想手动调用绘图事件 利用update</p></li><li><p>利用画家画图片 painter.drawPixmap( x，y，QPixmap(  路飞) )</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------高级设置-----------------------------</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="comment">// painter.drawEllipse(QPoint(100, 50), 50, 50);</span></span><br><span class="line">    <span class="comment">// // 设置 抗锯齿能力</span></span><br><span class="line">    <span class="comment">// painter.setRenderHint(QPainter::Antialiasing);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.drawEllipse(QPoint(200, 50), 50, 50);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动画家</span></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存画家状态</span></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还原画家保存状态</span></span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击移动按钮，移动图片</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="comment">// 如果要手动调用绘图事件， 用update更新</span></span><br><span class="line">        <span class="built_in">update</span>();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//----------------------利用画家 画资源图片------------------</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    posX += <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果超出屏幕，从0开始</span></span><br><span class="line">    <span class="keyword">if</span> (posX &gt; <span class="keyword">this</span>-&gt;<span class="built_in">width</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        posX = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(posX, <span class="number">0</span>, <span class="built_in">QPixmap</span>(<span class="string">&quot;:/Image/Luffy.png&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-3、-QPaintDevice绘图设备"><a href="#11-3、-QPaintDevice绘图设备" class="headerlink" title="11.3、 QPaintDevice绘图设备"></a>11.3、 QPaintDevice绘图设备</h2><ul><li><p>QPixmap QImage  QBitmap(黑白色) QPicture  QWidget</p></li><li><p>QPixmap 对不同平台做了显示的优化</p><ul><li><p>QPixmap pix( 300,300)</p></li><li><p>pix.fill( 填充颜色 )</p></li><li><p>利用画家 往pix上画画  QPainter painter( &amp; pix)</p></li><li><p>保存  pix.save( “路径”)</p></li><li><pre><code class="cpp">#include &lt;QPixmap&gt;#include &lt;QPainter&gt;#include &lt;QImage&gt;#include &lt;QPicture&gt;Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    // // Pixmap绘图设备 专门为平台做了显示的优化    // QPixmap pix(300, 300);    // // 填充颜色    // pix.fill(Qt::white);    // // 声明画家    // QPainter painter(&amp;pix);    // painter.setPen(QPen(Qt::green));    // painter.drawEllipse(QPoint(150,150), 100, 100);    // // 保存    // pix.save(&quot;F:\\pix.png&quot;);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line">- Qimage 可以对像素进行访问</span><br><span class="line"></span><br><span class="line">  - 使用和QPixmap差不多 QImage img(300,300,**QImage::Format_RGB32**);</span><br><span class="line"></span><br><span class="line">  - 其他流程和QPixmap一样</span><br><span class="line"></span><br><span class="line">  - 可以对像素进行修改 img.setPixel(i,j,value);</span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    #include &quot;widget.h&quot;</span><br><span class="line">    #include &quot;ui_widget.h&quot;</span><br><span class="line">    #include &lt;QPixmap&gt;</span><br><span class="line">    #include &lt;QPainter&gt;</span><br><span class="line">    #include &lt;QImage&gt;</span><br><span class="line">    #include &lt;QPicture&gt;</span><br><span class="line">    </span><br><span class="line">    Widget::Widget(QWidget *parent)</span><br><span class="line">        : QWidget(parent)</span><br><span class="line">        , ui(new Ui::Widget)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;setupUi(this);</span><br><span class="line">    </span><br><span class="line">        // QImage 绘图设备 可以对像素进行访问</span><br><span class="line">        QImage img(300, 300, QImage::Format_RGB32);</span><br><span class="line">        img.fill(Qt::white);</span><br><span class="line">    </span><br><span class="line">        QPainter painter(&amp;img);</span><br><span class="line">        painter.setPen(QPen(Qt::blue));</span><br><span class="line">        painter.drawEllipse(QPoint(150,150), 100, 100);</span><br><span class="line">    </span><br><span class="line">        // 保存</span><br><span class="line">        img.save(&quot;F:\\img.png&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Widget::~Widget()</span><br><span class="line">    &#123;</span><br><span class="line">        delete ui;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 绘图事件</span><br><span class="line">    void Widget::paintEvent(QPaintEvent *)</span><br><span class="line">    &#123;</span><br><span class="line">        QPainter painter(this);</span><br><span class="line">    </span><br><span class="line">        // 利用QImage 对像素进行修改</span><br><span class="line">        QImage img;</span><br><span class="line">        img.load(&quot;:/Image/Luffy.png&quot;);</span><br><span class="line">    </span><br><span class="line">        // 修改像素点</span><br><span class="line">        for (int i = 50; i &lt; 100; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 50; j &lt; 100; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                QRgb value = qRgb(255, 0, 0);</span><br><span class="line">                img.setPixel(i, j, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        painter.drawImage(0, 0, img);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li><li></li></ul></li><li><p>QPicture  记录和重现 绘图指令</p><ul><li><p>QPicture pic</p></li><li><p>painter.begin(&amp;pic);</p></li><li><p>保存 pic.save( 任意后缀名 )</p></li><li><p>重现 利用画家可以重现painter.drawPicture(0,0,pic);</p></li><li><pre><code class="cpp">#include &quot;widget.h&quot;#include &quot;ui_widget.h&quot;#include &lt;QPixmap&gt;#include &lt;QPainter&gt;#include &lt;QImage&gt;#include &lt;QPicture&gt;Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    // QPicture 绘图设备 可以记录和重现绘图指令    QPicture pic;    QPainter painter;    painter.begin(&amp;pic);    // 开始往pic上画    painter.setPen(QPen(Qt::cyan));    painter.drawEllipse(QPoint(150, 150), 100, 150);    painter.end();  // 结束画画    // 保存到磁盘    pic.save(&quot;F:\\pic.zt&quot;);&#125;Widget::~Widget()&#123;    delete ui;&#125;// 绘图事件void Widget::paintEvent(QPaintEvent *)&#123;    // 重现QPicture的绘图指令    QPainter painter(this);    QPicture pic;    pic.load(&quot;F:\\pic.zt&quot;);    painter.drawPicture(0, 0, pic);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 十二、文件系统</span><br><span class="line"></span><br><span class="line">## 12.1、 QFile 对文件进行读写操作</span><br><span class="line"></span><br><span class="line">-   QFile进行读写操作</span><br><span class="line">    -   QFile file( path 文件路径)</span><br><span class="line">    -   读</span><br><span class="line">        -   file.open(打开方式) QIODevice::readOnly</span><br><span class="line">        -   全部读取  file.readAll()  按行读  file.readLine()  atend()判断是否读到文件尾</span><br><span class="line">        -   默认支持编码格式 utf-8</span><br><span class="line">        -   利用编码格式类 指定格式 QTextCodeC </span><br><span class="line">            -   [QT6中QTextcodec头文件找不到的解决方法_C 语言_脚本之家 (jb51.net)](https://www.jb51.net/article/275365.htm)</span><br><span class="line">            -   QTextCodec * codec = QTextCodec::codecForName(&quot;gbk&quot;);</span><br><span class="line">            -   //ui-&gt;textEdit-&gt;setText( codec-&gt;toUnicode(array)  );</span><br><span class="line">        -   文件对象关闭 close</span><br><span class="line">    -   写</span><br><span class="line">        -   file.open( QIODevice::writeOnly  / Append)</span><br><span class="line">        -   file.write(内容)</span><br><span class="line">        -   file.close 关闭</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">#include &quot;widget.h&quot;</span><br><span class="line">#include &quot;ui_widget.h&quot;</span><br><span class="line">#include &lt;QFileDialog&gt;</span><br><span class="line">#include &lt;QFile&gt;</span><br><span class="line">#include &lt;QTextCodec&gt;</span><br><span class="line"></span><br><span class="line">Widget::Widget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">    , ui(new Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line"></span><br><span class="line">    // 点击选取文件的按钮，弹出对话框</span><br><span class="line">    connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line"></span><br><span class="line">        QString path = QFileDialog::getOpenFileName(this, &quot;打开文件&quot;, &quot;C:\\Users\\Administrator\\Desktop&quot;);</span><br><span class="line">        // 将路径放入到lineEdit中</span><br><span class="line">        ui-&gt;lineEdit-&gt;setText(path);</span><br><span class="line"></span><br><span class="line">        // 编码格式类</span><br><span class="line">        //QTextCodec * codec = QTextCodec::codecForName(&quot;gbk&quot;);</span><br><span class="line"></span><br><span class="line">        // 读取内容 放入到textEdit中</span><br><span class="line">        // QFile默认支持的格式是utf-8</span><br><span class="line">        QFile file(path);   // 参数就是读取文件的路径</span><br><span class="line">        // 设置打开方式</span><br><span class="line">        file.open(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line">        // QByteArray array = file.readAll();</span><br><span class="line"></span><br><span class="line">        QByteArray array;</span><br><span class="line">        while (!file.atEnd())</span><br><span class="line">        &#123;</span><br><span class="line">            array += file.readLine();     // 按行读</span><br><span class="line">        &#125;</span><br><span class="line">        // 将读取到的数据 放入到textEdit中</span><br><span class="line">        ui-&gt;textEdit-&gt;setText(array);</span><br><span class="line">        // ui-&gt;textEdit-&gt;setText(codec-&gt;toUnicode((array)));</span><br><span class="line"></span><br><span class="line">        // 对文件对象进行关闭</span><br><span class="line">        file.close();</span><br><span class="line"></span><br><span class="line">        // 进行写入</span><br><span class="line">        file.open(QIODevice::Append);   // 用追加的方式进行写</span><br><span class="line">        file.write(&quot;aaaaaaa&quot;);</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="12-2、QFileInfo-读取文件信息"><a href="#12-2、QFileInfo-读取文件信息" class="headerlink" title="12.2、QFileInfo 读取文件信息"></a>12.2、QFileInfo 读取文件信息</h2><ul><li>QFileInfo info(路径)</li><li>qDebug() &lt;&lt; “大小：” &lt;&lt; info.size() &lt;&lt; “ 后缀名：” &lt;&lt; <strong>info.suffix()</strong> &lt;&lt; “ 文件名称：”&lt;&lt;info.fileName() &lt;&lt; “ 文件路径：”&lt;&lt; info.filePath();</li><li>qDebug() &lt;&lt; “创建日期：” &lt;&lt; info.created().toString(“yyyy&#x2F;MM&#x2F;dd hh:mm:ss”);</li><li>qDebug() &lt;&lt; “最后修改日期：”&lt;&lt;info.lastModified().toString(“yyyy-MM-dd hh:mm:ss”);</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextCodec&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击选取文件的按钮，弹出对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line"></span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;C:\\Users\\Administrator\\Desktop&quot;</span>);</span><br><span class="line">        <span class="comment">// 将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// QFileInfo 文件消息类</span></span><br><span class="line">        QFileInfo <span class="built_in">info</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;大小：&quot;</span> &lt;&lt; info.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; 后缀名：&quot;</span> &lt;&lt; info.<span class="built_in">suffix</span>() &lt;&lt; <span class="string">&quot; 文件名称:&quot;</span> &lt;&lt; info.<span class="built_in">fileName</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、资源"><a href="#十三、资源" class="headerlink" title="十三、资源"></a>十三、资源</h1><ul><li>视频：<a href="https://www.bilibili.com/video/BV1g4411H78N">传智播客《QT从入门到实战完整版》</a></li><li>官方文档：<a href="https://doc.qt.io/">QT官方文档</a>，可以说是十分齐全，可以从<a href="https://doc.qt.io/qt-6/gettingstarted.html">Get Started</a>开始了解一下基本概念，然后按模块看<a href="https://doc.qt.io/all-topics.html">All Topics</a>中的内容，还可以看一下具体的<a href="https://doc.qt.io/qt-6/reference-overview.html">编程API</a>，这样学习相对系统。</li><li>文件代码：<a href="https://github.com/lxq-02/qt_learn">https://github.com/lxq-02/qt_learn</a></li><li><a href="https://www.xinbaoku.com/qt/">Qt教程，Qt5编程入门教程（非常详细） (xinbaoku.com)</a></li><li><a href="https://www.w3cschool.cn/learnroadqt/tufx1j3q.html">Qt 学习之路_w3cschool</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_基础(四)</title>
      <link href="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E5%9B%9B)/"/>
      <url>/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="十、Qt消息机制和事件"><a href="#十、Qt消息机制和事件" class="headerlink" title="十、Qt消息机制和事件"></a>十、Qt消息机制和事件</h1><h2 id="10-1、Qt中的事件"><a href="#10-1、Qt中的事件" class="headerlink" title="10.1、Qt中的事件"></a>10.1、Qt中的事件</h2><ul><li><p>鼠标事件</p><ul><li>鼠标进入事件  enterEvent</li><li>鼠标离开事件  leaveEvent</li><li>鼠标按下  mousePressEvent ( QMouseEvent  ev)</li><li>鼠标释放  mouseReleaseEvent</li><li>鼠标移动  mouseMoveEvent<ul><li>ev-&gt;x() x坐标  ev-&gt;y() y坐标</li><li>ev-&gt;button() 可以判断所有按键 Qt::LeftButton  Qt::RightButton</li><li>ev-&gt;buttons()判断组合按键  判断move时候的左右键  结合 &amp; 操作符</li></ul></li></ul></li><li><p>格式化字符串  QString( “ %1  %2 ” ).arg( 111 ).arg(222)</p></li><li><p>设置鼠标追踪  setMouseTracking(true);</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylabel.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">myLabel::<span class="built_in">myLabel</span>(QWidget *parent)</span><br><span class="line">    : QLabel&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置鼠标追踪状态</span></span><br><span class="line">    <span class="built_in">setMouseTracking</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标进入事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::enterEvent</span><span class="params">(QEnterEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//qDebug() &lt;&lt; &quot;鼠标进入了&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标离开事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::leaveEvent</span><span class="params">(QEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//qDebug() &lt;&lt; &quot;鼠标离开了&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标移动</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当鼠标左键按下 提示信息</span></span><br><span class="line">    <span class="comment">//if (ev-&gt;buttons() &amp; Qt::LeftButton)</span></span><br><span class="line">    &#123;</span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标移动了x = %1 y = %2 globalx = %3 globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标按下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当鼠标左键按下 提示信息</span></span><br><span class="line">    <span class="comment">//if (ev-&gt;button() == Qt::LeftButton)</span></span><br><span class="line">    &#123;</span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标按下了x = %1 y = %2 globalx = %3 globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标释放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myLabel::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当鼠标左键按下 提示信息</span></span><br><span class="line">    <span class="comment">//if (ev-&gt;button() == Qt::LeftButton)</span></span><br><span class="line">    &#123;</span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标释放了x = %1 y = %2 globalx = %3 globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-2、-定时器1"><a href="#10-2、-定时器1" class="headerlink" title="10.2、 定时器1"></a>10.2、 定时器1</h2><p>2.1 利用事件 void  timerEvent ( QTimerEvent * ev)</p><p>2.2 启动定时器 startTimer( 1000) 毫秒单位</p><p>2.3 timerEvent 的返回值是定时器的唯一标示  可以和ev-&gt;timerId 做比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动定时器</span></span><br><span class="line">    id1 = <span class="built_in">startTimer</span>(<span class="number">1000</span>);    <span class="comment">// 参数1 间隔 单位 间隔</span></span><br><span class="line"></span><br><span class="line">    id2 = <span class="built_in">startTimer</span>(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写定时器事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">timerId</span>() == id1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// label_2每隔1秒+1</span></span><br><span class="line">        ui-&gt;label_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ev-&gt;<span class="built_in">timerId</span>() == id2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// label3 每隔2秒 + 1</span></span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num2 = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// label_3每隔1秒+1</span></span><br><span class="line">        ui-&gt;label_3-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num2++));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-3、-定时器2"><a href="#10-3、-定时器2" class="headerlink" title="10.3、 定时器2"></a>10.3、 定时器2</h2><p>3.1 利用定时器类 QTimer</p><p>3.2 创建定时器对象 QTimer * timer &#x3D; new QTimer(this)</p><p>3.3 启动定时器  timer-&gt;start(毫秒)</p><p>3.4 每隔一定毫秒，发送信号  timeout  ,进行监听</p><p>3.5 暂停  timer-&gt;stop</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器第二种方式</span></span><br><span class="line">    QTimer * timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 启动定时器</span></span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, [=]()&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// label_4每隔0.5秒+1</span></span><br><span class="line">        ui-&gt;label_4-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击暂停按钮，实现定时器停止</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btn, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        timer-&gt;<span class="built_in">stop</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4、-event事件"><a href="#10-4、-event事件" class="headerlink" title="10.4、 event事件"></a>10.4、 event事件</h2><p>4.1 用途：用于事件的分发</p><p>4.2 也可以做拦截操作，不建议</p><p>4.3 bool event( QEvent * e); </p><p>4.4 返回值 如果是true 代表用户处理这个事件，不向下分发了</p><p>4.5 e-&gt;type() &#x3D;&#x3D; 鼠标按下 …</p><p>这个代码似乎有问题，没拦截成功</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过event事件分发器 拦截 鼠标按下事件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myLabel::event</span><span class="params">(QEvent * e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果是鼠标按下，在event事件分发中做拦截操作</span></span><br><span class="line">    <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonPress || e-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonDblClick)</span><br><span class="line">    &#123;</span><br><span class="line">        QMouseEvent * ev = <span class="built_in">static_cast</span>&lt;QMouseEvent*&gt;(e);</span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标   按下了x = %1 y = %2 globalx = %3 globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他事件 交给父类处理 默认处理</span></span><br><span class="line">    <span class="keyword">return</span> QLabel::<span class="built_in">event</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5、-事件过滤器"><a href="#10-5、-事件过滤器" class="headerlink" title="10.5、 事件过滤器"></a>10.5、 事件过滤器</h2><ol><li>在程序将时间分发到事件分发器前，可以利用过滤器做拦截</li><li>步骤<ol><li>给控件安装事件过滤器</li><li>重写 eventFilter函数 （obj ， ev）</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给label1安装事件过滤器</span></span><br><span class="line">    <span class="comment">// 步骤1,安装事件过滤器</span></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">installEventFilter</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 步骤2 重写 eventfilter事件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写事件过滤器的事件</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Widget::eventFilter</span><span class="params">(QObject * obj, QEvent * e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == ui-&gt;label)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonPress)</span><br><span class="line">        &#123;</span><br><span class="line">            QMouseEvent * ev = <span class="built_in">static_cast</span>&lt;QMouseEvent*&gt;(e);</span><br><span class="line">            QString str = <span class="built_in">QString</span>(<span class="string">&quot;事件过滤器中，鼠标按下了x = %1 y = %2 globalx = %3 globaly = %4&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalX</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">globalY</span>());</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; str;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他默认处理</span></span><br><span class="line">    <span class="keyword">return</span> QWidget::<span class="built_in">eventFilter</span>(obj, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_项目(七)-WBoard</title>
      <link href="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/"/>
      <url>/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/</url>
      
        <content type="html"><![CDATA[<h1 id="WBoard"><a href="#WBoard" class="headerlink" title="WBoard"></a>WBoard</h1><p>WBoard 是一款在 Windows 平台基于 VS+Qt 开发的一款开放源码的白板教学软件，主要用于学校和大学的交互式电子白板。 它既</p><p>可以与交互式白板一起使用，也可以在双屏幕场景中通过笔、平板显示器和光束进行使用。 主要有演示板、网页、文档和桌面四大界</p><p>面。</p><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a><strong>编译环境</strong></h2><h3 id="编译器安装"><a href="#编译器安装" class="headerlink" title="编译器安装"></a><strong>编译器安装</strong></h3><p>1.安装 Visual Studio: VS2017 及以上 Qt: Qt5</p><p>2.Visual Studio 官网下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p><p>3.Qt5.15.2 下载地址:<a href="https://download.qt.io/official_releases/online_installers/">https://download.qt.io/official_releases/online_installers/</a></p><p>4.Visual Studio 配置 Qt 教程博客:<a href="https://blog.csdn.net/u014552102/article/details/118346113">vs2019 + Qt5.15.2 开发环境搭建_vsaddin-msvc2019-2.7.0.vsix 下载-CSDN 博客</a></p><p>我使用的是VS2022和Qt5.15.2（最好不要用Qt6，很多组件没有了）</p><h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a><strong>配置项目</strong></h3><p>1.下载项目并打开项目工程文件（.sln）,并配置 Qt 编译环境</p><p>开源项目地址：<a href="https://github.com/sining1989/WBoard">https://github.com/sining1989/WBoard</a></p><p>项目文档借鉴B站UP主“程序员老秦”，可以在B站中练习Up主获得更多资料：<a href="https://www.bilibili.com/video/BV1dz421q7ER/?vd_source=695686cb62584e20424f907662063474">C++Qt项目推荐，简历黄金项目_哔哩哔哩_bilibili</a></p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812141303403.png" alt="image-20240812141303403"></p><p>2.选择 Qt 构建项目并选择 Qt 项目设置</p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812141350200.png" alt="image-20240812141350200"></p><ol start="3"><li>查看 Qt 模块，是否含有以下模块，如没有去 Qt 安装目录找到 MaintenanceTool.exe 安装缺失模块并安装，详细安装步骤参考</li></ol><p>文献：<a href="https://www.cnblogs.com/lisongzzx/p/13861430.html">解决 “Project ERROR: Unknown module(s) in QT: webengine”以及“Your MaintenanceTool appears to be older than 3.0.2. .” 的办法 - The_Reborn - 博客园 (cnblogs.com)</a></p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812141624695.png" alt="image-20240812141624695"></p><p>4.检查 Qt Version 配置与项目属性是否一致。</p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812141644864.png" alt="image-20240812141644864"></p><p>5.编译程序完成之后配置依赖，找到项目文件中的三方库 ThirdParty 文件夹，找到依赖动态库 quazipd.dll，再将 quazipd.dll 放在可执行程序下（.exe目录中）。</p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812141741174.png" alt="image-20240812141741174"></p><p>6、程序完成</p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/68747470733a2f2f692e6c6f6c692e6e65742f323032312f30392f30392f4a6a544f634572514c7332473739662e706e67.png" alt="演示版.jpg"></p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/68747470733a2f2f692e6c6f6c692e6e65742f323032312f30392f30392f4b705a6a77504a62335872554579392e706e67.png" alt="网页.jpg"></p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/68747470733a2f2f692e6c6f6c692e6e65742f323032312f30392f30392f4a627670595545424963586f694f682e706e67.png" alt="文档.jpg"></p><h1 id="项目模块解读"><a href="#项目模块解读" class="headerlink" title="项目模块解读"></a>项目模块解读</h1><h2 id="图形管理模块"><a href="#图形管理模块" class="headerlink" title="图形管理模块"></a>图形管理模块</h2><p>图形管理模由图形动作、图形场景、图形形状、操作委托组成。</p><p>1.图形动作管理：负责管理和控制图形对象的各种动作，例如图形的创建、移动、缩放、旋转、删除等基本操作，以及更复杂的动画效果、交互动作的设置与执行</p><p>2.图形场景管理：主要对写字板项目中的图形展示场景进行管理。包括场景的布局设置、背景颜色与样式的定义、不同图形元素在场景中的层次与排列顺序管理，以及对场景视图的缩放、平移、旋转等操作的控制。</p><p>3.图形形状管理：专注于对图形的形状进行创建、编辑和管理。涵盖了基本图形（如矩形、圆形、三角形等）的绘制与参数设置，自定义图形的绘制工具与功能，对已绘制图形的形状修改（如顶点编辑、曲线调整等），以及图形的填充、描边样式的设置与管理。</p><p>4.图形操作委托(代理)：用于处理图形操作的任务分配与权限管理。当用户发起图形操作请求时，操作委托机制会根据预设的规则和权限，将操作任务分配给相应的处理模块或组件。同时，还负责监控和管理操作的执行过程，处理可能出现的错误与异常情况，确保图形操作的安全性和稳定性。</p><h3 id="图形动作管理"><a href="#图形动作管理" class="headerlink" title="图形动作管理"></a>图形动作管理</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812163201141.png" alt="image-20240812163201141"></p><p>WBGraphicsItemActions:改基类主要用于处理图形项的各种操作和动作,定义了图形项操作的基本接口,声明了纯虚函数play用于执行操作、save用于保存操作相关的数据、actionRemoved用于处理操作被移除的情况,对应代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WBGraphicsItemAction</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WBGraphicsItemAction</span>(eWBGraphicsItemLinkType linkType,QObject* parent = <span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">play</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QStringList <span class="title">save</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">actionRemoved</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QString <span class="title">path</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    <span class="function">eWBGraphicsItemLinkType <span class="title">linkType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mLinkType;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    eWBGraphicsItemLinkType mLinkType;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>WBGraphicsItemPlayAudioAction</code>:是用于播放音频的图形项操作类,存储了音频文件的路径、媒体播放器对象等,实现了<code>play</code>方法来播放音频,实现了<code>save</code>方法来保存相关数据,定义了<code>onSourceHide</code>槽函数，可能用于处理音频源隐藏的情况。</p><p><code>WBGraphicsItemMoveToPageAction</code>:是用于移动到特定页面的图形项操作类。包含了移动页面的操作类型（如移动到首页、末页、上一页、下一页或指定页）和目标页面的索引,实现了<code>play</code>方法来执行移动操作,实现了<code>save</code>方法来保存相关信息。</p><p><code>WBGraphicsItemLinkToWebPageAction</code>:是用于链接到网页的图形项操作类。</p><p>存储了链接的网页URL。实现了<code>play</code>方法来执行打开网页的操作。实现了<code>save</code>方法来保存链接相关的数据。</p><h3 id="图形场景管理"><a href="#图形场景管理" class="headerlink" title="图形场景管理"></a>图形场景管理</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812164917169.png" alt="image-20240812164917169"></p><p>WBCoreGraphicsScene:该类是对<code>QGraphicsScene</code>的扩展,在QGraphicsScene的基础上增加接口来&#96;对图形项进行添加删除管</p><p>理和场景修改状态的跟踪功能&#96;，接口如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WBCoreGraphicsScene</span> : <span class="keyword">public</span> QGraphicsScene</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">WBCoreGraphicsScene</span>(QObject * parent = <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">WBCoreGraphicsScene</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">addItem</span><span class="params">(QGraphicsItem* item)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">removeItem</span><span class="params">(QGraphicsItem* item, <span class="type">bool</span> forceDelete = <span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">deleteItem</span><span class="params">(QGraphicsItem* item)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">removeItemFromDeletion</span><span class="params">(QGraphicsItem* item)</span></span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">addItemToDeletion</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isModified</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mIsModified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">setModified</span><span class="params">(<span class="type">bool</span> pModified)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            mIsModified = pModified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        QSet&lt;QGraphicsItem*&gt; mItemsToDelete;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> mIsModified;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>WBGraphicsScene:是一个自定义的图形场景类，具有丰富的功能用于<code>管理图形项</code>、<code>处理输入事件、执行绘制操作</code>等。</p><p>1.提供了多种方法用于管理<code>撤销/重做栈的状态,清除场景内容（如项目、注释等）</code>、处理输入设备的操作（按下、移动、释放。</p><p>2.添加和移除图形项等方法,<code>能够创建和添加各种类型的图形项</code>，如小部件、媒体、SVG图像、文本、组等,并且提供了一些方法用于</p><p>处理背景对象的设置和获取，以及对<code>图形项进行缩放、适应文档大小</code>等操作。</p><p>3.包含一些与绘制相关的方法，如<code>画线、画弧、画曲线</code>等，并能<code>处理橡皮擦、指针、标记圆</code>等的绘制,还能支持获取场景的视图状态、</p><p>设置渲染质量、获取依赖项、处理选择框的更新等。</p><h3 id="图形形状管理"><a href="#图形形状管理" class="headerlink" title="图形形状管理"></a>图形形状管理</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812165347876.png" alt="image-20240812165347876"></p><p>WBAbstractDrawRuler:这个抽象类为具体的绘制尺子类提供了基本的框架和一些通用的操作，子类需要实现特定于场景和旋转等操</p><p>作的细节。定义了一些虚函数，如<code>StartLine</code>、<code>DrawLine</code>、<code>EndLine</code>，用于开始、绘制和结束线条。<code>paint</code>方法用于绘制</p><p>操作。包含一些纯虚函数，如<code>scene</code>、<code>rotateAroundCenter</code>等，需要子类具体实现。有一些保护成员变量用于控制显示、存储</p><p>SVG项、比例等信息。定义了一系列的辅助函数用于获取不同的光标、颜色、字体等。包含一些静态常量用于颜色、边距、角度单位</p><p>等的定义，具体定义如下图。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WBAbstractDrawRuler</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WBAbstractDrawRuler</span>();</span><br><span class="line">    ~<span class="built_in">WBAbstractDrawRuler</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">create</span><span class="params">(QGraphicsItem&amp; item)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">StartLine</span><span class="params">(<span class="type">const</span> QPointF&amp; position, qreal width)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DrawLine</span><span class="params">(<span class="type">const</span> QPointF&amp; position, qreal width)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">EndLine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> WBGraphicsScene* <span class="title">scene</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">rotateAroundCenter</span><span class="params">(qreal angle)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QPointF <span class="title">rotationCenter</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QRectF <span class="title">closeButtonRect</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">paintGraduations</span><span class="params">(QPainter *painter)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> mShowButtons;</span><br><span class="line">    QGraphicsSvgItem* mCloseSvgItem;</span><br><span class="line">    qreal mAntiScaleRatio;</span><br><span class="line"></span><br><span class="line">    QPointF startDrawPosition;</span><br><span class="line"></span><br><span class="line">    <span class="function">QCursor <span class="title">moveCursor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">QCursor <span class="title">rotateCursor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">QCursor <span class="title">closeCursor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">QCursor <span class="title">drawRulerLineCursor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QColor  <span class="title">drawColor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">QColor  <span class="title">middleFillColor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">QColor  <span class="title">edgeFillColor</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">QFont   <span class="title">font</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QColor sLightBackgroundEdgeFillColor;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QColor sLightBackgroundMiddleFillColor;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QColor sLightBackgroundDrawColor;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QColor sDarkBackgroundEdgeFillColor;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QColor sDarkBackgroundMiddleFillColor;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> QColor sDarkBackgroundDrawColor;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> sLeftEdgeMargin;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> sDegreeToQtAngleUnit;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> sRotationRadius;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> sFillTransparency;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> sDrawTransparency;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> sRoundingRadius;</span><br><span class="line">    qreal sPixelsPerCentimeter;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WBGraphicsTriangle:用于在图形场景中创建和操作三角形图形项，能够处理各种交互操作、方向设置、绘制细节等，并具有复制和</p><p>自定义属性的功能。</p><p>1.重写了一系列图形项相关的方法，如绘制（<code>paint</code>）、形状计算（<code>shape</code>）、鼠标事件处理（<code>mousePressEvent</code>等）、旋转相</p><p>关方法等。</p><p>2.包含了一些私有方法用于计算内部的点、变换、游标更新、边界框等。定义了一些私有成员变量来存储状态、方向、SVG项、点的</p><p>坐标等。定义了一些常量用于控制图形的默认值和一些尺寸限制。</p><p>WBGraphicsRuler:用于在图形场景中创建和操作一个尺子图形项，能够响应各种交互事件并进行相应的绘制和状态更新。</p><p>1.重写了一些方法来<code>处理线条的起始、绘制和结束</code>，以及各种图形项相关的<code>事件处理方法（如鼠标事件、悬停事件）和绘制方法</code>。</p><p>2.包含一些私有成员变量来表示状态（如是否正在调整大小、旋转）和一些SVG项、游标等。定义了一些私有方法用于内部的绘制</p><p>和操作，如填充背景、绘制旋转中心、更新调整大小的游标等。</p><p>3.定义了一些常量用于控制默认矩形和一些长度限制。</p><p>WBGraphicsProtractor:用在图形场景中创建和操作一个量角器图形项，能够处理各种交互操作并进行相应的绘制和状态更新。</p><p>重写了多种图形项相关的方法，包括绘制（<code>paint</code>）、处理图形项变化（<code>itemChange</code>）、鼠标事（<code>mousePressEvent</code>、</p><p><code>mouseMoveEvent</code>、<code>mouseReleaseEvent</code>等）以及形状计算（<code>shape</code>、<code>boundingRect</code>）等。</p><p>2.包含一些私有方法用于处理内部的绘制细节（如绘制按钮、角度标记）、确定工具类型、计算反缩放等。</p><p>3.定义了一些私有成员变量来存储工具状态、角度值、缩放因子、SVG项等。包含一些常量用于控制绘制的透明度和默认的矩形范围。</p><h3 id="图形操作委托"><a href="#图形操作委托" class="headerlink" title="图形操作委托"></a>图形操作委托</h3><h4 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h4><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170412309.png" alt="image-20240812170412309" style="zoom:200%;"><p>WBGraphicsItemDelegate:主要用于处理图形项的委托操作和相关控制,充当了图形项的代理，负责处理与图形项相关的各种交互操</p><p>作、状态管理和控制元素的显示与操作。</p><p>1.提供了一系列方法用于创建、释放和显示控制元素，处理各种鼠标、键盘和悬停事件，处理图形项的变化，执行撤销操作，以及处</p><p>理图形项的锁定、显示隐藏、复制、顺序调整等操作。</p><p>2.包含了一些信号，用于通知显示状态和锁定状态的改变。公共槽函数用于执行移除、显示菜单、显示隐藏、锁定、复制、调整顺序、</p><p>处理缩放变化等操作。</p><p>3.保护方法用于构建和释放按钮、装饰菜单、更新菜单动作状态，以及处理递归的显示隐藏和锁定操作。私有方法用于更新框架、按</p><p>钮和相关数据。</p><p>3.成员变量用于存储被委托的图形项、各种按钮、菜单、框架、变换信息、标志、拖放相关的数据等。</p><p>WBGraphicsWidgetItemDelegate:是<code>WBGraphicsItemDelegate</code>的派生类，专门用于处理<code>WBGraphicsWidgetItem</code>的委托</p><p>操作,<code>WBGraphicsWidgetItem</code>提供了特定的委托操作，包括菜单装饰、操作状态更新、移除处理以及特定的操作响应。</p><p><code>decorateMenu</code>：用于为相关菜单添加特定于小部件的操作选项。</p><p>2.<code>updateMenuActionState</code>：用于更新菜单中操作的状态（例如是否可用、是否选中等）。</p><p>3.<code>remove</code>：处理小部件的移除操作，可能考虑是否支持撤销。</p><p>WBGraphicsTextItemDelegate:是<code>WBGraphicsItemDelegate</code>的派生类，专门用于处理<code>WBGraphicsTextItem</code>的委托操作。</p><p><code>WBGraphicsTextItem</code>提供了更具体和定制化的委托操作，包括与文本编辑相关的各种功能和交互处理。</p><p>1.提供了判断文本是否可编辑、缩放文本大小、重新着色等方法。</p><p>2.重写了<code>itemChange</code>方法以处理图形项的变化。实现了创建控件、处理槽函数（如内容改变、设置可编辑性、移除等）。</p><p>3.保护方法用于装饰菜单、更新菜单动作状态、释放按钮以及处理鼠标和键盘事件。&gt;3.私有方法和成员变量用于处理字体选择、颜色</p><p>选择、文本大小调整、对齐按钮状态更新、处理选择数据、创建默认字体等操作。</p><p>WBGraphicsMediaItemDelegate:是<code>WBGraphicsItemDelegate</code>的派生类，用于处理<code>WBGraphicsMediaItem</code>的委托操作。</p><p><code>WBGraphicsMediaItem</code>提供了委托操作，包括处理鼠标事件、媒体状态变化、操作按钮的构建和响应，以及工具栏的显示和隐藏</p><p>控制。</p><p>1.公共槽函数：<code>toggleMute</code>：用于切换静音状态。<code>updateTicker</code>：可能用于更新时间显示。<code>showHide</code>：显示或隐藏相关</p><p>元素。<code>mediaStatusChanged</code>和<code>mediaStateChanged</code>：用于响应媒体的状态变化。</p><p>2.保护槽函数：<code>remove</code>：执行移除操作。<code>togglePlayPause</code>：切换播放&#x2F;暂停状态。<code>updatePlayPauseState</code>：更新播放&#x2F;暂停</p><p>的状态显示。<code>totalTimeChanged</code>：当总时间改变时进行处理。<code>hideToolBar</code>：隐藏工具栏。</p><p>3.保护方法<code>buildButtons</code>用于构建相关的按钮。</p><p>4.成员变量：<code>mPlayPauseButton</code>、<code>mStopButton</code>、<code>mMuteButton</code>：与播放&#x2F;暂停、停止、静音操作相关的按钮。</p><p><code>mMediaControl</code>：可能用于媒体控制的相关组件。</p><p><code>m_iToolBarShowingInterval</code>：工具栏显示的时间间隔。</p><p><code>mToolBarShowTimer</code>：工具栏显示的定时器。</p><p>5.私有槽函数：<code>freeze</code>：处理小部件的冻结操作。<code>pin</code>：可能用于执行将小部件固定或类似的操作。</p><p>WBGraphicsGroupContainerItemDelegate:类是WBGraphicsItemDelegate的派生类，用于处理<code>WBGraphicsGroupContainerItem</code>的委托操作。<code>WBGraphicsGroupContainerItem</code>提供了特定的委托操作，包括菜单装饰、按</p><p>钮管理和鼠标事件处理，以及实现了销毁分组的功能。</p><p><code>decorateMenu</code>用于装饰相关的菜单。<code>buildButtons</code>用于构建特定的按钮。<code>freeButtons</code>用于释放按钮相关的资源。重写了鼠标事件处理方法，用于处理在分组容器上的鼠标操作。destroyGroup<code>可能用于执行销毁分组的操作。</code>mDestroyGroupButton&#96;用于存储与销毁分组操作相关的按钮</p><p>WBGraphicsCurtainItemDelegate:用于为<code>WBGraphicsCurtainItem</code>提供特定的事件处理和操作逻辑。</p><h4 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h4><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170549132.png" alt="image-20240812170549132"></p><h4 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h4><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170625634.png" alt="image-20240812170625634"></p><h2 id="窗口管理模块"><a href="#窗口管理模块" class="headerlink" title="窗口管理模块"></a>窗口管理模块</h2><h3 id="窗口面板"><a href="#窗口面板" class="headerlink" title="窗口面板"></a>窗口面板</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170702827.png" alt="image-20240812170702827"></p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170718954.png" alt="image-20240812170718954"></p><h3 id="窗口调色板"><a href="#窗口调色板" class="headerlink" title="窗口调色板"></a>窗口调色板</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170730187.png" alt="image-20240812170730187"></p><h3 id="编辑控件"><a href="#编辑控件" class="headerlink" title="编辑控件"></a>编辑控件</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170740043.png" alt="image-20240812170740043"></p><h2 id="文档管理模块"><a href="#文档管理模块" class="headerlink" title="文档管理模块"></a>文档管理模块</h2><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170807700.png" alt="image-20240812170807700"></p><h3 id="文档导出"><a href="#文档导出" class="headerlink" title="文档导出"></a>文档导出</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170823986.png" alt="image-20240812170823986"></p><h3 id="文档加载"><a href="#文档加载" class="headerlink" title="文档加载"></a>文档加载</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170840915.png" alt="image-20240812170840915"></p><h2 id="动作响应管理"><a href="#动作响应管理" class="headerlink" title="动作响应管理"></a>动作响应管理</h2><h3 id="撤回操作"><a href="#撤回操作" class="headerlink" title="撤回操作"></a>撤回操作</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170916443.png" alt="image-20240812170916443"></p><h3 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170926642.png" alt="image-20240812170926642"></p><h2 id="偏好设置与文档操作接口"><a href="#偏好设置与文档操作接口" class="headerlink" title="偏好设置与文档操作接口"></a>偏好设置与文档操作接口</h2><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170936707.png" alt="image-20240812170936707"></p><h2 id="网络模块"><a href="#网络模块" class="headerlink" title="网络模块"></a>网络模块</h2><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812170945386.png" alt="image-20240812170945386"></p><hr><h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><p>WBoard项目使用典型的<code>MVC设计模式</code>作为软件开发中的架构模式。</p><ul><li><p>Model（模型）：</p><ul><li>负责处理数据和业务逻辑。</li><li>包含数据的存储、检索、更新和验证等操作。</li></ul></li><li><p>View（视图）：</p><ul><li>负责数据的展示和用户交互界面。</li><li>它以用户友好的方式呈现Model中的数据。</li></ul></li><li><p>Controller（控制器）：</p><ul><li>作为Model和View之间的桥梁。</li><li>接收用户的输入请求，处理请求并调用相应的Model方法进行数据操作，然后选择合适的View来呈现结果。</li></ul></li></ul><h2 id="程序运行流程"><a href="#程序运行流程" class="headerlink" title="程序运行流程"></a>程序运行流程</h2><ol><li>项目入口点，从 main函数 进入之后，创建 <code>WBApplication</code> 实例，通过<code>WBApplication</code>实例对象初始化主程序。</li><li><code>WBApplication</code>初始化期间会创建<code>WBMainWindow</code>主窗口开始进行子窗口布局，初始化视图(View)层，再依次创建控制层对象(Controller)<code>WBBoardController</code>、<code>WBWebController</code>、<code>WBPreferencesController</code>、<code>WBApplicationController</code>、<code>WBDocumentController</code>分别控制程序面板、网页面板、偏好设置面板、应用主程序、文档管理。</li><li>创建完成之后，会在<code>控制层中创建模型层(Model)来进行数据管理</code>，处理模型数据<code>通过代理模式更新视图</code>。如下图所示。</li></ol><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812143121539.png" alt="image-20240812143121539"></p><h2 id="程序主控制器及数据模型"><a href="#程序主控制器及数据模型" class="headerlink" title="程序主控制器及数据模型"></a>程序主控制器及数据模型</h2><h3 id="一、白板控制器"><a href="#一、白板控制器" class="headerlink" title="一、白板控制器"></a>一、白板控制器</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812145353312.png" alt="image-20240812145353312"></p><h3 id="二、网页控制器"><a href="#二、网页控制器" class="headerlink" title="二、网页控制器"></a>二、网页控制器</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812145403310.png" alt="image-20240812145403310"></p><h3 id="三、偏好设置控制器"><a href="#三、偏好设置控制器" class="headerlink" title="三、偏好设置控制器"></a>三、偏好设置控制器</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812145413031.png" alt="image-20240812145413031"></p><h3 id="四、文档管理器"><a href="#四、文档管理器" class="headerlink" title="四、文档管理器"></a>四、文档管理器</h3><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812145423135.png" alt="image-20240812145423135"></p><h2 id="项目亮点"><a href="#项目亮点" class="headerlink" title="项目亮点"></a>项目亮点</h2><p><strong>MVC架构</strong></p><p><img src="/2024/08/08/Qt/Qt_%E9%A1%B9%E7%9B%AE(%E4%B8%83)/image-20240812145502334.png" alt="image-20240812145502334"></p><p>程序怎么更新数据模型，直接调用？回调函数？观察者模式？消息队列？</p><p>答案是：WBoard通过代理模型进行模型数据更新。通过代理更新数据模型具有以下几个显著的好处：</p><ul><li><p><strong>解耦和封装</strong>：</p><ul><li>代理将数据更新的逻辑与数据模型的核心逻辑分离，减少了直接对模型的依赖，增强了系统的封装性。</li></ul></li><li><p><strong>增强安全性</strong>：</p><ul><li>代理可以对更新操作进行额外的权限检查和访问控制，防止未经授权的访问和修改。</li></ul></li><li><p><strong>统一的更新接口</strong>：</p><ul><li>为不同的数据源或更新方式提供了统一的接口，便于管理和维护。</li></ul></li><li><p><strong>可扩展性</strong>：</p><ul><li>当需要添加新的更新规则、处理逻辑或支持新的数据来源时，只需修改代理的实现，而无需改动数据模型本身。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT_案例(六)-翻金币</title>
      <link href="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/"/>
      <url>/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h1><p>​翻金币项目是一款经典的益智类游戏，我们需要将金币都翻成同色，才视为胜利。首先，开始界面如下：</p><p>​<img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps1.jpg" alt="img"></p><p>点击start按钮，进入下层界面，选择关卡：</p><p>​<img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps2.jpg" alt="img"></p><p>在这里我们设立了20个关卡供玩家选择，假设我们点击了第1关，界面如下：</p><p>​<img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps3.jpg" alt="img"></p><p>如果想要赢取胜利，我们需要点击上图中红色方框选取的区域，翻动其上下左右的金币，然后当所有金币都变为金色，视为胜利，胜利界面如下：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps4.jpg" alt="img"> </p><h1 id="二、项目基本配置"><a href="#二、项目基本配置" class="headerlink" title="二、项目基本配置"></a>二、项目基本配置</h1><h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><p>打开Qt-Creator，创建项目：注意名称不要包含空格和回车，路径不要有中文</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps5.jpg" alt="img"> </p><p>类信息中，选择基类为QMainWindow，类名称为 MainScene，代表着主场景。</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps6.jpg" alt="img"> </p><p>点击完成，创建出项目：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps7.jpg" alt="img"> </p><p>创建的项目结构如下：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps8.jpg" alt="img"> </p><h2 id="2-2-添加资源"><a href="#2-2-添加资源" class="headerlink" title="2.2 添加资源"></a>2.2 添加资源</h2><p>将资源添加到当前项目下</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240807142308380.png" alt="image-20240807142308380"></p><p>然后创建.qrc文件</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps10.jpg" alt="img"> </p><p>进入编辑模式，添加前缀 “&#x2F;” ，添加文件</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps11.jpg" alt="img"> </p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps12.jpg" alt="img"> </p><p>将所有资源文件进行添加</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps13.jpg" alt="img"> </p><p>至此将所有需要的资源添加到了本项目中。</p><h1 id="三、主场景"><a href="#三、主场景" class="headerlink" title="三、主场景"></a>三、主场景</h1><h2 id="3-1-设置游戏主场景配置"><a href="#3-1-设置游戏主场景配置" class="headerlink" title="3.1 设置游戏主场景配置"></a>3.1 设置游戏主场景配置</h2><p>点击mainscene.ui文件，设计其菜单栏如下：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps14.jpg" alt="img"> </p><p>设计“退出”菜单项，objectName为 actionQuit，  text 为 退出；</p><p>移除自带的工具栏与状态栏</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps15.jpg" alt="img"> </p><p>回到MainScene.cpp文件，进入构造函数中，进行场景的基本配置，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MainScene::<span class="built_in">MainScene</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainScene)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置固定的大小</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(<span class="number">320</span>, <span class="number">588</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置应用图片</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowIcon</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/res/Coin0001.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口标题</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;老帮主带你翻金币&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如图：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps16.jpg" alt="img"> </p><p>实现点击开始，退出游戏功能，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MainScene::<span class="built_in">MainScene</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainScene)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击退出，退出程序</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionQuit, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-设置背景图片"><a href="#3-2-设置背景图片" class="headerlink" title="3.2 设置背景图片"></a>3.2 设置背景图片</h2><p>重写MainScene的PaintEvent事件，并添加一下代码，绘制背景图片</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPixmap&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainScene::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建画家，指定绘图设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建QPixmap对象</span></span><br><span class="line">    QPixmap pix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载图片</span></span><br><span class="line">    pix.<span class="built_in">load</span>(<span class="string">&quot;:/res/PlayLevelSceneBg.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制背景图</span></span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>(), pix);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载标题</span></span><br><span class="line">    pix.<span class="built_in">load</span>(<span class="string">&quot;:/res/Title.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缩放照片</span></span><br><span class="line">    pix = pix.<span class="built_in">scaled</span>(pix.<span class="built_in">width</span>() * <span class="number">0.5</span>, pix.<span class="built_in">height</span>() * <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制标题</span></span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">10</span>, <span class="number">30</span>, pix.<span class="built_in">width</span>(), pix.<span class="built_in">height</span>(), pix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果如图：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps17.jpg" alt="img"> </p><h2 id="3-3-创建开始按钮"><a href="#3-3-创建开始按钮" class="headerlink" title="3.3 创建开始按钮"></a>3.3 创建开始按钮</h2><p>开始按钮点击后有弹跳效果，这个效果是我们利用自定义控件实现的（QPushButton不会自带这类特效），我们可以自己封装出一个按钮控件，来实现这些效果。</p><p>​创建MyPushButton，继承与QPushButton</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps18.jpg" alt="img"> </p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps19.jpg" alt="img"> </p><p>点击完成。</p><p>修改MyPushButton的父类</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps20.jpg" alt="img"> </p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240807144645840.png" alt="image-20240807144645840"></p><p>提供MyPushButton的构造的重载版本，可以让MyPushButton提供正常显示的图片以及按下后显示的图片</p><p>代码如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPushButton</span> : <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyPushButton</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// normalImg 正常显示的图片</span></span><br><span class="line">    <span class="comment">// pressImg 按下后显示的图片，默认为空</span></span><br><span class="line">    <span class="built_in">MyPushButton</span>(QString normalImg, QString pressImg = <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QString normalImgPath;  <span class="comment">// 默认显示图片路径</span></span><br><span class="line">    QString pressedImgPath; <span class="comment">// 按下后显示图片路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYPUSHBUTTON_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现的重载版本MyPushButton构造函数代码如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">MyPushButton::<span class="built_in">MyPushButton</span>(QString normalImg, QString pressImg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;normalImgPath = normalImg;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pressedImgPath = pressImg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建QPixmap对象</span></span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    <span class="comment">// 判断是否能够正常加载显示的图片，若不能提示失败</span></span><br><span class="line">    <span class="type">bool</span> ret = pixmap.<span class="built_in">load</span>(normalImgPath);</span><br><span class="line">    <span class="keyword">if</span> (!ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; normalImg &lt;&lt; <span class="string">&quot;加载图片失败&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置图片的固定尺寸</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置不规则图片的样式表</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置图标</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIcon</span>(pixmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置图标大小</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回到MainScene的构造函数中，创建开始按钮</p><p>&#x2F;&#x2F;创建开始按钮</p><p>  MyPushButton * startBtn &#x3D; new MyPushButton(“:&#x2F;res&#x2F;MenuSceneStartButton.png”);</p><p>  startBtn-&gt;setParent(this);</p><p>  startBtn-&gt;move(this-&gt;width()*0.5-startBtn-&gt;width()*0.5,this-&gt;height()*0.7);</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MainScene::<span class="built_in">MainScene</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainScene)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建开始按钮</span></span><br><span class="line">    MyPushButton * startBtn = <span class="keyword">new</span> <span class="built_in">MyPushButton</span>(<span class="string">&quot;:/res/MenuSceneStartButton.png&quot;</span>);</span><br><span class="line">    startBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    startBtn-&gt;<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;<span class="built_in">width</span>() * <span class="number">0.5</span> - startBtn-&gt;<span class="built_in">width</span>() * <span class="number">0.5</span>, <span class="keyword">this</span>-&gt;<span class="built_in">height</span>() * <span class="number">0.7</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如图：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps21.jpg" alt="img"> </p><p>不规则的开始按钮添加完成。</p><h2 id="3-4-开始按钮跳跃特效实现"><a href="#3-4-开始按钮跳跃特效实现" class="headerlink" title="3.4 开始按钮跳跃特效实现"></a>3.4 开始按钮跳跃特效实现</h2><p>连接信号槽，监听开始按钮点击</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听点击事件，执行特效</span></span><br><span class="line"><span class="built_in">connect</span>(startBtn, &amp;MyPushButton::clicked, [=]()&#123;</span><br><span class="line">    startBtn-&gt;<span class="built_in">zoom1</span>();  <span class="comment">// 向下跳跃</span></span><br><span class="line">    startBtn-&gt;<span class="built_in">zoom2</span>();  <span class="comment">// 向上跳跃</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>zoom1与zoom2 为MyPushButton中扩展的特效代码，具体如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPushButton::zoom1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建动画对象</span></span><br><span class="line">    QPropertyAnimation * animation1 = <span class="keyword">new</span> <span class="built_in">QPropertyAnimation</span>(<span class="keyword">this</span>, <span class="string">&quot;geometry&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置事件间隔，单位毫秒</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setDuration</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">// 设置起始位置</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setStartValue</span>(<span class="built_in">QRect</span>(<span class="keyword">this</span>-&gt;<span class="built_in">x</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">y</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>()));</span><br><span class="line">    <span class="comment">// 创建结束位置</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setEndValue</span>(<span class="built_in">QRect</span>(<span class="keyword">this</span>-&gt;<span class="built_in">x</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">y</span>() + <span class="number">10</span>, <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>()));</span><br><span class="line">    <span class="comment">// 设置缓和曲线,QEasingCurve::OutBounce为弹跳效果</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setEasingCurve</span>(QEasingCurve::OutBounce);</span><br><span class="line">    <span class="comment">// 开始执行动画</span></span><br><span class="line">    animation1-&gt;<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPushButton::zoom2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建动画对象</span></span><br><span class="line">    QPropertyAnimation * animation1 = <span class="keyword">new</span> <span class="built_in">QPropertyAnimation</span>(<span class="keyword">this</span>, <span class="string">&quot;geometry&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置事件间隔，单位毫秒</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setDuration</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">// 设置起始位置</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setStartValue</span>(<span class="built_in">QRect</span>(<span class="keyword">this</span>-&gt;<span class="built_in">x</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">y</span>()<span class="number">+10</span>, <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>()));</span><br><span class="line">    <span class="comment">// 创建结束位置</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setEndValue</span>(<span class="built_in">QRect</span>(<span class="keyword">this</span>-&gt;<span class="built_in">x</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">y</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>()));</span><br><span class="line">    <span class="comment">// 设置缓和曲线,QEasingCurve::OutBounce为弹跳效果</span></span><br><span class="line">    animation1-&gt;<span class="built_in">setEasingCurve</span>(QEasingCurve::OutBounce);</span><br><span class="line">    <span class="comment">// 开始执行动画</span></span><br><span class="line">    animation1-&gt;<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行代码，点击按钮，测试弹跳效果。</p><h2 id="3-5-创建选择关卡场景"><a href="#3-5-创建选择关卡场景" class="headerlink" title="3.5 创建选择关卡场景"></a>3.5 创建选择关卡场景</h2><p>点击开始按钮后，进入选择关卡场景。</p><p>首先我们先创建选择关卡场景，添加新的C++文件</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps22.jpg" alt="img"> </p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps23.jpg" alt="img"> </p><p>类名为ChooseLevelScene 选择基类为QMainWindow，点击下一步，然后点击完成。</p><h2 id="3-6-点击开始按钮进入选择关卡场景"><a href="#3-6-点击开始按钮进入选择关卡场景" class="headerlink" title="3.6 点击开始按钮进入选择关卡场景"></a>3.6 点击开始按钮进入选择关卡场景</h2><p>目前点击主场景的开始按钮，只有弹跳特效，但是我们还需要有功能上的实现，特效结束后，我们应该进入选择关卡场景</p><p>​</p><p>​在MainScene.h中 保存ChooseScene选择关卡场景对象</p><p>​在zoom1和zoom2特效后，延时0.5秒，进入选择关卡场景，代码如下</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mypushbutton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chooselevelscene.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainScene::<span class="built_in">MainScene</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainScene)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 选择关卡场景</span></span><br><span class="line">    ChooseLevelScene * chooseScene = <span class="keyword">new</span> ChooseLevelScene;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听点击事件，执行特效</span></span><br><span class="line">    <span class="built_in">connect</span>(startBtn, &amp;MyPushButton::clicked, [=]()&#123;</span><br><span class="line">        startBtn-&gt;<span class="built_in">zoom1</span>();  <span class="comment">// 向下跳跃</span></span><br><span class="line">        startBtn-&gt;<span class="built_in">zoom2</span>();  <span class="comment">// 向上跳跃</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 延时0.5秒后，进入选择场景</span></span><br><span class="line">        QTimer::<span class="built_in">singleShot</span>(<span class="number">500</span>, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">            chooseScene-&gt;<span class="built_in">show</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps24.jpg" alt="img"> </p><p>测试点击开始，执行特效后延时0.5秒进入选择关卡场景</p><h1 id="四、选择关卡场景"><a href="#四、选择关卡场景" class="headerlink" title="四、选择关卡场景"></a>四、选择关卡场景</h1><h2 id="4-1-场景基本设置"><a href="#4-1-场景基本设置" class="headerlink" title="4.1 场景基本设置"></a>4.1 场景基本设置</h2><p>​选择关卡构造函数如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chooselevelscene.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QAction&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"></span><br><span class="line">ChooseLevelScene::<span class="built_in">ChooseLevelScene</span>(QWidget *parent)</span><br><span class="line">    : QMainWindow&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置固定的大小</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(<span class="number">320</span>, <span class="number">588</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置图标</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowIcon</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/res/Coin0001.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口标题</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;选择关卡&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建菜单栏</span></span><br><span class="line">    QMenuBar * bar = <span class="keyword">this</span>-&gt;<span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setMenuBar</span>(bar);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建开始菜单</span></span><br><span class="line">    QMenu * startMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建按钮菜单项</span></span><br><span class="line">    QAction * quitAction = startMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;推出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击退出，退出游戏</span></span><br><span class="line">    <span class="built_in">connect</span>(quitAction, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F;设置窗口固定大小</p><p>  this-&gt;setFixedSize(320,588);</p><p>  &#x2F;&#x2F;设置图标</p><p>  this-&gt;setWindowIcon(QPixmap(“:&#x2F;res&#x2F;Coin0001.png”));</p><p>  &#x2F;&#x2F;设置标题</p><p>  this-&gt;setWindowTitle(“选择关卡”);</p><p>  &#x2F;&#x2F;创建菜单栏</p><p>  QMenuBar * bar &#x3D; this-&gt;menuBar();</p><p>  this-&gt;setMenuBar(bar);</p><p>  &#x2F;&#x2F;创建开始菜单</p><p>  QMenu * startMenu &#x3D; bar-&gt;addMenu(“开始”);</p><p>  &#x2F;&#x2F;创建按钮菜单项</p><p>  QAction * quitAction &#x3D; startMenu-&gt;addAction(“退出”);</p><p>  &#x2F;&#x2F;点击退出 退出游戏</p><p>  connect(quitAction,&amp;QAction::triggered,<a href>&#x3D;</a>{this-&gt;close();});</p><p>运行效果如图：</p><p>​<img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps25.jpg" alt="img"></p><h2 id="4-2-背景设置"><a href="#4-2-背景设置" class="headerlink" title="4.2 背景设置"></a>4.2 背景设置</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ChooseLevelScene::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    QPixmap pix;</span><br><span class="line">    pix.<span class="built_in">load</span>(<span class="string">&quot;:/res/OtherSceneBg.png&quot;</span>);</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>(), pix);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载标题</span></span><br><span class="line">    pix.<span class="built_in">load</span>(<span class="string">&quot;:/res/Title.png&quot;</span>);</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="keyword">this</span>-&gt;<span class="built_in">width</span>() * <span class="number">0.5</span> - pix.<span class="built_in">width</span>() * <span class="number">0.5</span>, <span class="number">30</span>, pix.<span class="built_in">width</span>(), pix.<span class="built_in">height</span>(), pix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-创建返回按钮"><a href="#4-3-创建返回按钮" class="headerlink" title="4.3 创建返回按钮"></a>4.3 创建返回按钮</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ChooseLevelScene::<span class="built_in">ChooseLevelScene</span>(QWidget *parent)</span><br><span class="line">    : QMainWindow&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 返回按钮</span></span><br><span class="line">    MyPushButton *closeBtn = <span class="keyword">new</span> <span class="built_in">MyPushButton</span>(<span class="string">&quot;:/res/BackButton.png&quot;</span>, <span class="string">&quot;:/res/BackButtonSelected.png&quot;</span>);</span><br><span class="line">    closeBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    closeBtn-&gt;<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;<span class="built_in">width</span>() - closeBtn-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>() - closeBtn-&gt;<span class="built_in">height</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击返回</span></span><br><span class="line">    <span class="built_in">connect</span>(closeBtn, &amp;MyPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;点击了返回按钮&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回按钮是有正常显示图片和点击后显示图片的两种模式，所以我们需要重写MyPushButton中的 MousePressEvent和MouseReleaseEvent</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标点击事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPushButton::mousePressEvent</span><span class="params">(QMouseEvent * e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 传入的按下图片不为空 说明需要有按下状态，切换图片</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pressedImgPath != <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QPixmap pixmap;</span><br><span class="line">        <span class="type">bool</span> ret = pixmap.<span class="built_in">load</span>(pressedImgPath);</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; pressedImgPath &lt;&lt; <span class="string">&quot;加载图片失败!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>());</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setIcon</span>(pixmap);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交给父类执行按下事件</span></span><br><span class="line">    <span class="keyword">return</span> QPushButton::<span class="built_in">mousePressEvent</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标释放事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPushButton::mouseReleaseEvent</span><span class="params">(QMouseEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 传入的按下图片不为空 说明需要有按下状态，切换成初始图片</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pressedImgPath != <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QPixmap pixmap;</span><br><span class="line">        <span class="type">bool</span> ret = pixmap.<span class="built_in">load</span>(normalImgPath);</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; pressedImgPath &lt;&lt; <span class="string">&quot;加载图片失败!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>());</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setIcon</span>(pixmap);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交给父类执行按下事件</span></span><br><span class="line">    <span class="keyword">return</span> QPushButton::<span class="built_in">mouseReleaseEvent</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现返回按钮的功能</strong></p><p>在这里我们点击返回后，延时0.5后隐藏自身，并且发送自定义信号，告诉外界自身已经选择了返回按钮。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ChooseLevelScene::<span class="built_in">ChooseLevelScene</span>(QWidget *parent)</span><br><span class="line">    : QMainWindow&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// 点击返回 发送信号</span></span><br><span class="line">    <span class="built_in">connect</span>(closeBtn, &amp;MyPushButton::clicked, [=]()&#123;</span><br><span class="line">        QTimer::<span class="built_in">singleShot</span>(<span class="number">500</span>, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">            <span class="comment">// 触发自定义信号，关闭自身，该信号写道signals下做声明</span></span><br><span class="line">            emit <span class="keyword">this</span>-&gt;<span class="built_in">chooseSceneBack</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在主场景MainScene中 点击开始按钮显示选择关卡的同时，监听选择关卡的返回按钮消息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MainScene::<span class="built_in">MainScene</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainScene)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 选择窗口的返回按钮功能实现，槽函数</span></span><br><span class="line">    <span class="built_in">connect</span>(chooseScene, &amp;ChooseLevelScene::chooseSceneBack, [=]()&#123;</span><br><span class="line">        chooseScene-&gt;<span class="built_in">hide</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">show</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试主场景与选择关卡场景的切换功能。</p><h2 id="4-4-创建选择关卡按钮"><a href="#4-4-创建选择关卡按钮" class="headerlink" title="4.4 创建选择关卡按钮"></a>4.4 创建选择关卡按钮</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ChooseLevelScene::<span class="built_in">ChooseLevelScene</span>(QWidget *parent)</span><br><span class="line">    : QMainWindow&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建关卡按钮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MyPushButton * menuBtn = <span class="keyword">new</span> <span class="built_in">MyPushButton</span>(<span class="string">&quot;:/res/LevelIcon.png&quot;</span>);</span><br><span class="line">        menuBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">        menuBtn-&gt;<span class="built_in">move</span>(<span class="number">25</span> + (i % <span class="number">4</span>) * <span class="number">70</span>, <span class="number">130</span> + (i/<span class="number">4</span>) * <span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按钮上显示的文字</span></span><br><span class="line">        QLabel * label = <span class="keyword">new</span> QLabel;</span><br><span class="line">        label-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">        label-&gt;<span class="built_in">setFixedSize</span>(menuBtn-&gt;<span class="built_in">width</span>(), menuBtn-&gt;<span class="built_in">height</span>());</span><br><span class="line">        label-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(i<span class="number">+1</span>));</span><br><span class="line">        label-&gt;<span class="built_in">setAlignment</span>(Qt::AlignHCenter |Qt::AlignVCenter);    <span class="comment">// 设置居中</span></span><br><span class="line">        label-&gt;<span class="built_in">move</span>(<span class="number">25</span> + (i % <span class="number">4</span>) * <span class="number">70</span>, <span class="number">130</span> + (i / <span class="number">4</span>) * <span class="number">70</span>);</span><br><span class="line">        label-&gt;<span class="built_in">setAttribute</span>(Qt::WA_TransparentForMouseEvents, <span class="literal">true</span>);    <span class="comment">// 鼠标事件穿透</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如果：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps26.jpg" alt="img"> </p><h2 id="4-5-创建翻金币场景"><a href="#4-5-创建翻金币场景" class="headerlink" title="4.5 创建翻金币场景"></a>4.5 创建翻金币场景</h2><p>点击关卡按钮后，会进入游戏的核心场景，也就是翻金币的场景，首先先创建出该场景的.h和.cpp文件</p><p>创建PlayScene</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps27.jpg" alt="img"> </p><p>点击选择关卡按钮后会跳入到该场景</p><p>建立点击按钮，跳转场景的信号槽连接</p><p>在ChooseLevelScene.h 中声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PlayScene *pScene = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听选择关卡按钮的信号槽</span></span><br><span class="line"><span class="built_in">connect</span>(menuBtn, &amp;MyPushButton::clicked, [=]()&#123;</span><br><span class="line">    <span class="keyword">if</span> (pScene == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">        pScene = <span class="keyword">new</span> <span class="built_in">PlayScene</span>(i + <span class="number">1</span>);</span><br><span class="line">        pScene-&gt;<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;您选择的是第 %1 关&quot;</span>).<span class="built_in">arg</span>(i + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; str;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里pScene &#x3D; new PlayScene(i+1); 将用户所选的关卡号发送给pScene，也就是翻金币场景，当然PlayScene 要提供重载的有参构造版本，来接受这个参数</p><h1 id="五、翻金币场景"><a href="#五、翻金币场景" class="headerlink" title="五、翻金币场景"></a>五、翻金币场景</h1><h2 id="5-1-场景基本设置"><a href="#5-1-场景基本设置" class="headerlink" title="5.1 场景基本设置"></a>5.1 场景基本设置</h2><p>PlayScene.h中 声明成员变量，用于记录当前用户选择的关卡</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PlayScene</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PlayScene</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">PlayScene</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量 记录关卡索引</span></span><br><span class="line">    <span class="type">int</span> levelIndex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>PlayScene.cpp中 初始化该场景配置</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;playscene.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QAction&gt;</span></span></span><br><span class="line"></span><br><span class="line">PlayScene::<span class="built_in">PlayScene</span>(QWidget *parent)</span><br><span class="line">    : QMainWindow&#123;parent&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">PlayScene::<span class="built_in">PlayScene</span>(<span class="type">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;当前关卡为：&quot;</span> &lt;&lt; index;</span><br><span class="line">    <span class="keyword">this</span>-&gt;levelIndex = index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口固定大小</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(<span class="number">320</span>, <span class="number">588</span>);</span><br><span class="line">    <span class="comment">// 设置图标</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowIcon</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/res/Coin0001.png&quot;</span>));</span><br><span class="line">    <span class="comment">// 设置标题</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;翻金币&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建菜单栏</span></span><br><span class="line">    QMenuBar * bar = <span class="keyword">this</span>-&gt;<span class="built_in">menuBar</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setMenuBar</span>(bar);</span><br><span class="line">    <span class="comment">// 创建开始菜单</span></span><br><span class="line">    QMenu * startMenu = bar-&gt;<span class="built_in">addMenu</span>(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建按钮菜单项</span></span><br><span class="line">    QAction * quitAction = startMenu-&gt;<span class="built_in">addAction</span>(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">    <span class="comment">// 点击退出</span></span><br><span class="line">    <span class="built_in">connect</span>(quitAction, &amp;QAction::triggered, [=]()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-2-背景设置"><a href="#5-2-背景设置" class="headerlink" title="5.2 背景设置"></a>5.2 背景设置</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置背景</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlayScene::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 加载背景</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    QPixmap pix;</span><br><span class="line">    pix.<span class="built_in">load</span>(<span class="string">&quot;:/res/PlayLevelSceneBg.png&quot;</span>);</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>(), pix);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载标题</span></span><br><span class="line">    pix.<span class="built_in">load</span>(<span class="string">&quot;:/res/Title.png&quot;</span>);</span><br><span class="line">    pix = pix.<span class="built_in">scaled</span>(pix.<span class="built_in">width</span>() * <span class="number">0.5</span>, pix.<span class="built_in">height</span>() * <span class="number">0.5</span>);</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(<span class="number">10</span>, <span class="number">30</span>, pix.<span class="built_in">width</span>(), pix.<span class="built_in">height</span>(), pix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-返回按钮"><a href="#5-3-返回按钮" class="headerlink" title="5.3 返回按钮"></a>5.3 返回按钮</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回按钮</span></span><br><span class="line">MyPushButton * closeBtn = <span class="keyword">new</span> <span class="built_in">MyPushButton</span>(<span class="string">&quot;:/res/BackButton.png&quot;</span>, <span class="string">&quot;:/res/BackButtonSelected.png&quot;</span>);</span><br><span class="line">closeBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">closeBtn-&gt;<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;<span class="built_in">width</span>() - closeBtn-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">height</span>() - closeBtn-&gt;<span class="built_in">height</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回按钮功能实现</span></span><br><span class="line"><span class="built_in">connect</span>(closeBtn, &amp;MyPushButton::clicked, [=]()&#123;</span><br><span class="line">    QTimer::<span class="built_in">singleShot</span>(<span class="number">500</span>, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">        <span class="comment">// 触发自定义信号，关闭自身，该信号写到signals下做声明</span></span><br><span class="line">        emit <span class="keyword">this</span>-&gt;<span class="built_in">chooseSceneBack</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>在ChooseScene选择关卡场景中，监听PlayScene的返回信号</strong></p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PlayScene的返回按钮监听，删除该Scene并且将指针指向空</span></span><br><span class="line"><span class="built_in">connect</span>(pScene, &amp;PlayScene::chooseSceneBack, [=]()&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">delete</span> pScene;</span><br><span class="line">    pScene = <span class="literal">NULL</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps28.jpg" alt="img"> </p><h2 id="5-4-显示当前关卡"><a href="#5-4-显示当前关卡" class="headerlink" title="5.4 显示当前关卡"></a>5.4 显示当前关卡</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前关卡标题</span></span><br><span class="line">    QLabel * label = <span class="keyword">new</span> QLabel;</span><br><span class="line">    label-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">    QFont font;</span><br><span class="line">    font.<span class="built_in">setFamily</span>(<span class="string">&quot;华文新魏&quot;</span>);</span><br><span class="line">    font.<span class="built_in">setPointSize</span>(<span class="number">20</span>);</span><br><span class="line">    label-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;Level: %1&quot;</span>).<span class="built_in">arg</span>(<span class="keyword">this</span>-&gt;levelIndex);</span><br><span class="line">    label-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">    label-&gt;<span class="built_in">setGeometry</span>(<span class="built_in">QRect</span>(<span class="number">30</span>, <span class="keyword">this</span>-&gt;<span class="built_in">height</span>() - <span class="number">50</span>, <span class="number">120</span>, <span class="number">50</span>));    <span class="comment">// 设置大小和位置</span></span><br></pre></td></tr></table></figure><p>假设我们选择了第15关卡，运行效果如果：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps29.jpg" alt="img"> </p><h2 id="5-5-创建金币背景图片"><a href="#5-5-创建金币背景图片" class="headerlink" title="5.5 创建金币背景图片"></a>5.5 创建金币背景图片</h2> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建金币的背景图片</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 绘制背景图片</span></span><br><span class="line">        QLabel * label = <span class="keyword">new</span> QLabel;</span><br><span class="line">        label-&gt;<span class="built_in">setGeometry</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        label-&gt;<span class="built_in">setPixmap</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/res/BoardNode.png&quot;</span>));</span><br><span class="line">        label-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">        label-&gt;<span class="built_in">move</span>(<span class="number">57</span> + i * <span class="number">50</span>, <span class="number">200</span> + j * <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如图：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps30.jpg" alt="img"> </p><h2 id="5-6-创建金币类"><a href="#5-6-创建金币类" class="headerlink" title="5.6 创建金币类"></a>5.6 创建金币类</h2><p>我们知道，金币是本游戏的核心对象，并且在游戏中可以利用二维数组进行维护，拥有支持点击，翻转特效等特殊性，因此不妨将金币单独封装到一个类中，完成金币所需的所有功能。</p><h3 id="5-6-1-创建金币类-MyCoin"><a href="#5-6-1-创建金币类-MyCoin" class="headerlink" title="5.6.1 创建金币类 MyCoin"></a>5.6.1 创建金币类 MyCoin</h3><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps31.jpg" alt="img"> </p><p>并修改MyCoin的基类为QPushButton</p><h3 id="5-6-2-构造函数"><a href="#5-6-2-构造函数" class="headerlink" title="5.6.2 构造函数"></a>5.6.2 构造函数</h3><p>在资源图片中，我们可以看到，金币翻转的效果原理是多张图片切换而形成的，而以下八张图片中，第一张与最后一张比较特殊，因此我们在给用户看的时候，无非是金币Coin0001或者是银币 Coin0008这两种图。</p><p>​因此我们在创建一个金币对象时候，应该提供一个参数，代表着传入的是金币资源路径还是银币资源路径，根据路径我们创建不同样式的图案。</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps32.jpg" alt="img"> </p><p>​在MyCoin.h中声明：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MyCoin</span>(QString butImg); <span class="comment">// 代表图片路径</span></span><br></pre></td></tr></table></figure><p>​在MyCoin.cpp中进行实现</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MyCoin::<span class="built_in">MyCoin</span>(QString butImg) <span class="comment">// 代表图片路径</span></span><br><span class="line">&#123;</span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    <span class="type">bool</span> ret = pixmap.<span class="built_in">load</span>(butImg);</span><br><span class="line">    <span class="keyword">if</span> (!ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; butImg &lt;&lt; <span class="string">&quot;加载图片失败！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>());</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIcon</span>(pixmap);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-3-测试"><a href="#5-6-3-测试" class="headerlink" title="5.6.3 测试"></a>5.6.3 测试</h3><p>在翻金币场景 PlayScene中，我们测试下封装的金币类是否可用，可以在创建好的金币背景代码后，添加如下代码：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 金币对象</span></span><br><span class="line">MyCoin * coin = <span class="keyword">new</span> <span class="built_in">MyCoin</span>(<span class="string">&quot;:/res/Coin0001.png&quot;</span>);</span><br><span class="line">coin-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">coin-&gt;<span class="built_in">move</span>(<span class="number">59</span> + i * <span class="number">50</span>, <span class="number">204</span> + j * <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>运行效果如图</p><p> <img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps33.jpg" alt="img"> </p><h2 id="5-7-引入关卡数据"><a href="#5-7-引入关卡数据" class="headerlink" title="5.7 引入关卡数据"></a>5.7 引入关卡数据</h2><p>当然上述的测试只是为了让我们知道提供的对外接口可行，但是每个关卡的初始化界面并非如此，因此需要我们引用一个现有的关卡文件，文件中记录了各个关卡的金币排列清空，也就是二维数组的数值。</p><h3 id="5-7-1-添加现有文件dataConfig"><a href="#5-7-1-添加现有文件dataConfig" class="headerlink" title="*5.7.1 添加现有文件dataConfig*"></a><em><strong>*5.7.1 添加现有文件dataConfig*</strong></em></h3><p>首先先将dataConfig.h 和 dataConfig.cpp文件放入到当前项目下：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps34.jpg" alt="img"> </p><h3 id="5-7-2-添加现有文件"><a href="#5-7-2-添加现有文件" class="headerlink" title="5.7.2 添加现有文件"></a>5.7.2 添加现有文件</h3><p>其次在Qt_Creator项目右键，点击添加现有文件</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps35.jpg" alt="img"> </p><h3 id="5-7-3-完成添加"><a href="#5-7-3-完成添加" class="headerlink" title="5.7.3 完成添加"></a>5.7.3 完成添加</h3><p>选择当前项目下的文件，并进行添加</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps36.jpg" alt="img"> </p><h3 id="5-7-4-数据分析"><a href="#5-7-4-数据分析" class="headerlink" title="5.7.4 数据分析"></a>5.7.4 数据分析</h3><p>我们可以看到，其实dataConfig.h中只有一个数据是对外提供的，如下图</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps37.jpg" alt="img"> </p><p>在上图中，QMap&lt;int,QVector&lt;QVector<int>&gt;&gt;mData;都记录着每个关卡中的数据。</int></p><p>其中，int代表对应的关卡 ，也就是QMap中的key值，而value值就是对应的二维数组，我们利用的是 QVector&lt;QVector<int>&gt;来记录着其中的二维数组。</int></p><h3 id="5-7-5-测试关卡数据"><a href="#5-7-5-测试关卡数据" class="headerlink" title="5.7.5 测试关卡数据"></a>5.7.5 测试关卡数据</h3><p>在Main函数可以测试第一关的数据，添加如下代码：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dataConfig config;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印第一关所有信息</span></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; config.mData[<span class="number">1</span>][i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps38.jpg" alt="img"> </p><p>对应着dataConfig.cpp中第一关数据来看，与之匹配成功，以后我们就可以用dataConfig中的数据来对关卡进行初始化了</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps39.jpg" alt="img"> </p><h2 id="5-8-初始化各个关卡"><a href="#5-8-初始化各个关卡" class="headerlink" title="5.8 初始化各个关卡"></a>5.8 初始化各个关卡</h2><p>首先，可以在playScene中声明一个成员变量，用户记录当前关卡的二维数组</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> gameArray[<span class="number">4</span>][<span class="number">4</span>];    <span class="comment">// 二维数组数据</span></span><br></pre></td></tr></table></figure><p>之后，在.cpp文件中，初始化这个二维数组</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化保存游戏数据的二维数组</span></span><br><span class="line">dataConfig config;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        gameArray[i][j] = config.mData[<span class="keyword">this</span>-&gt;levelIndex][i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化成功后，在金币类 也就是MyCoin类中，扩展属性 posX，posY，以及flag</p><p>这三个属性分别代表了，该金币在二维数组中 x的坐标，y的坐标，以及当前的正反标志。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> posX;   <span class="comment">// x坐标</span></span><br><span class="line"><span class="type">int</span> posY;   <span class="comment">// y坐标</span></span><br><span class="line"><span class="type">bool</span> flag;  <span class="comment">// 正反标志</span></span><br></pre></td></tr></table></figure><p>然后完成金币初始化，修改之前PlayScene中对于金币背景的设置，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建金币的背景图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 绘制背景图片</span></span><br><span class="line">            QLabel * label = <span class="keyword">new</span> QLabel;</span><br><span class="line">            label-&gt;<span class="built_in">setGeometry</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">            label-&gt;<span class="built_in">setPixmap</span>(<span class="built_in">QPixmap</span>(<span class="string">&quot;:/res/BoardNode.png&quot;</span>));</span><br><span class="line">            label-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">            label-&gt;<span class="built_in">move</span>(<span class="number">57</span> + i * <span class="number">50</span>, <span class="number">200</span> + j * <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 金币对象</span></span><br><span class="line">            QString img;</span><br><span class="line">            <span class="keyword">if</span> (gameArray[i][j] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                img = <span class="string">&quot;:/res/Coin0001.png&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                img = <span class="string">&quot;:/res/Coin0008.png&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MyCoin * coin = <span class="keyword">new</span> <span class="built_in">MyCoin</span>(img);</span><br><span class="line">            coin-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">            coin-&gt;<span class="built_in">move</span>(<span class="number">59</span> + i * <span class="number">50</span>, <span class="number">204</span> + j * <span class="number">50</span>);</span><br><span class="line">            coin-&gt;posX = i;     <span class="comment">// 记录x坐标</span></span><br><span class="line">            coin-&gt;posY = j;     <span class="comment">// 记录y坐标</span></span><br><span class="line">            coin-&gt;flag = gameArray[i][j];   <span class="comment">// 记录正反标志</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行测试各个关卡初始化，例如第一关效果如图：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps40.jpg" alt="img"> </p><h2 id="5-9-翻金币特效"><a href="#5-9-翻金币特效" class="headerlink" title="5.9 翻金币特效"></a>5.9 翻金币特效</h2><h3 id="5-9-1-MyCoin类扩展属性和行为"><a href="#5-9-1-MyCoin类扩展属性和行为" class="headerlink" title="5.9.1 MyCoin类扩展属性和行为"></a>5.9.1 MyCoin类扩展属性和行为</h3><p> 关卡的初始化完成后，下面就应该点击金币，进行翻转的效果了，那么首先我们先在MyCoin类中创建出该方法。</p><p>在MyCoin.h中声明：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeFlag</span><span class="params">()</span></span>;  <span class="comment">// 改变标志，执行翻转效果</span></span><br><span class="line">QTimer * timer1;    <span class="comment">// 正面翻反面，定时器</span></span><br><span class="line">QTimer * timer2;    <span class="comment">// 反面翻正面，定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> min = <span class="number">1</span>;    <span class="comment">// 最小照片</span></span><br><span class="line"><span class="type">int</span> max = <span class="number">8</span>;    <span class="comment">// 最大照片</span></span><br></pre></td></tr></table></figure><p>MyCoin.cpp中做实现</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyCoin::changeFlag</span><span class="params">()</span>  <span class="comment">// 改变标志，执行翻转效果</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;flag) <span class="comment">// 如果是正面</span></span><br><span class="line">    &#123;</span><br><span class="line">        timer1-&gt;<span class="built_in">start</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">// 如果是反面</span></span><br><span class="line">    &#123;</span><br><span class="line">        timer2-&gt;<span class="built_in">start</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然在构造函数中，记得创建出两个定时器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化定时器</span></span><br><span class="line">timer1 = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">timer2 = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><h3 id="5-9-2-创建特效"><a href="#5-9-2-创建特效" class="headerlink" title="5.9.2 创建特效"></a>5.9.2 创建特效</h3><p>​当我们分别启动两个定时器时，需要在构造函数中做监听操作，并且做出响应，翻转金币，然后再结束定时器。</p><p>​构造函数中 进行下列监听代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听正面翻转的信号槽</span></span><br><span class="line"><span class="built_in">connect</span>(timer1, &amp;QTimer::timeout, [=]()&#123;</span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;:/res/Coin000%1.png&quot;</span>).<span class="built_in">arg</span>(<span class="keyword">this</span>-&gt;min++);</span><br><span class="line">    pixmap.<span class="built_in">load</span>(str);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>());</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIcon</span>(pixmap);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>()));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;min &gt; <span class="keyword">this</span>-&gt;max)  <span class="comment">// 如果大于最大值，重置最小值，并停止定时器</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;min = <span class="number">1</span>;</span><br><span class="line">        timer1-&gt;<span class="built_in">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听反面翻转的信号槽</span></span><br><span class="line"><span class="built_in">connect</span>(timer2, &amp;QTimer::timeout, [=]()&#123;</span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;:/res/Coin000%1.png&quot;</span>).<span class="built_in">arg</span>(<span class="keyword">this</span>-&gt;max--);</span><br><span class="line">    pixmap.<span class="built_in">load</span>(str);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>());</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;QPushButton&#123;border:0px;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIcon</span>(pixmap);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(pixmap.<span class="built_in">width</span>(), pixmap.<span class="built_in">height</span>()));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;max &lt; <span class="keyword">this</span>-&gt;min)  <span class="comment">// 如果小于最小值，重置最大值，并停止定时器</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;max = <span class="number">8</span>;</span><br><span class="line">        timer2-&gt;<span class="built_in">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>测试</strong> </p><p>监听每个按钮的点击效果，并翻转金币</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(coin, &amp;MyCoin::clicked, [=]()&#123;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;点击的位置：x = &quot;</span> &lt;&lt; coin-&gt;posX &lt;&lt; <span class="string">&quot; y = &quot;</span> &lt;&lt; coin-&gt;posY;</span><br><span class="line">    coin-&gt;<span class="built_in">changeFlag</span>();</span><br><span class="line">    gameArray[i][j] = gameArray[i][j] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>; <span class="comment">// 数组内部记录的标志同步修改</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps41.jpg" alt="img"> </p><h3 id="5-9-3-禁用按钮"><a href="#5-9-3-禁用按钮" class="headerlink" title="5.9.3 禁用按钮"></a>5.9.3 禁用按钮</h3><p>此时，确实已经可以执行翻转金币代码了，但是如果快速点击，会在金币还没有执行一个完整动作之后 ，又继续开始新的动画，我们应该在金币做动画期间，禁止再次点击，并在完成动画后，开启点击。</p><p>​在MyCoin类中加入一个标志 isAnimation 代表是否正在做翻转动画，默认isAnimation值为false。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isAnimation = <span class="literal">false</span>;   <span class="comment">// 做翻转动画的标志</span></span><br></pre></td></tr></table></figure><p>在MyCoin做动画期间加入</p><p><code>this-&gt;isAnimation = true;</code></p><p>也就是changeFlag函数中将标志设为true</p><p>加入位置如下：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps42.jpg" alt="img"> </p><p>并且在做完动画时，将标志改为false</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps43.jpg" alt="img"> </p><p>重写按钮的按下事件，判断如果正在执行动画，那么直接return掉，不要执行后续代码。</p><p>代码如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyCoin::mousePressEvent</span><span class="params">(QMouseEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isAnimation)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QPushButton::<span class="built_in">mousePressEvent</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-10-翻周围金币"><a href="#5-10-翻周围金币" class="headerlink" title="5.10 翻周围金币"></a>5.10 翻周围金币</h2><p>将用户点击的周围 上下左右4个金币也进行延时翻转，代码写到监听点击金币下。</p><p>此时我们发现还需要记录住每个按钮的内容，所以我们将所有金币按钮也放到一个二维数组中，在.h中声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyCoin * coinBtn[<span class="number">4</span>][<span class="number">4</span>]; <span class="comment">//金币按钮数组</span></span><br></pre></td></tr></table></figure><p>并且记录每个按钮的位置</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coinBtn[i][j] = coin;</span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps44.jpg" alt="img"> </p><p>延时翻动其他周围金币</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延时翻动其他周围金币</span></span><br><span class="line">QTimer::<span class="built_in">singleShot</span>(<span class="number">300</span>, <span class="keyword">this</span>, [=]()&#123;</span><br><span class="line"><span class="keyword">if</span> (coin-&gt;posX + <span class="number">1</span> &lt;= <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">coinBtn[coin-&gt;posX + <span class="number">1</span>][coin-&gt;posY]-&gt;<span class="built_in">changeFlag</span>();</span><br><span class="line">        gameArray[coin-&gt;posX + <span class="number">1</span>][coin-&gt;posY] = gameArray[coin-&gt;posX + <span class="number">1</span>][coin-&gt;posY] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span> (coin-&gt;posX - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        coinBtn[coin-&gt;posX - <span class="number">1</span>][coin-&gt;posY]-&gt;<span class="built_in">changeFlag</span>();</span><br><span class="line">        gameArray[coin-&gt;posX - <span class="number">1</span>][coin-&gt;posY] = gameArray[coin-&gt;posX - <span class="number">1</span>][coin-&gt;posY] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (coin-&gt;posY + <span class="number">1</span> &lt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        coinBtn[coin-&gt;posX][coin-&gt;posY + <span class="number">1</span>]-&gt;<span class="built_in">changeFlag</span>();</span><br><span class="line">        gameArray[coin-&gt;posX][coin-&gt;posY + <span class="number">1</span>] = gameArray[coin-&gt;posX][coin-&gt;posY + <span class="number">1</span>] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (coin-&gt;posY - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         coinBtn[coin-&gt;posX][coin-&gt;posY - <span class="number">1</span>]-&gt;<span class="built_in">changeFlag</span>();</span><br><span class="line">         gameArray[coin-&gt;posX][coin-&gt;posY - <span class="number">1</span>] = gameArray[coin-&gt;posX][coin-&gt;posY - <span class="number">1</span>] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-11-判断是否胜利"><a href="#5-11-判断是否胜利" class="headerlink" title="5.11 判断是否胜利"></a>5.11 判断是否胜利</h2><p>在playscene.h中加入 isWin标志，代表是否胜利。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> isWin = <span class="literal">true</span>; <span class="comment">//是否胜利</span></span><br></pre></td></tr></table></figure><p>默认设置为true，只要有一个反面的金币，就将该值改为false，视为未成功。</p><p>代码写到延时翻金币后 进行判断</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否胜利</span></span><br><span class="line"> <span class="keyword">this</span>-&gt;isWin = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="keyword">if</span> (coinBtn[i][j]-&gt;flag == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;isWin = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果isWin依然是true，代表胜利了！ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isWin)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;胜利&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-12-胜利图片显示"><a href="#5-12-胜利图片显示" class="headerlink" title="5.12 胜利图片显示"></a>5.12 胜利图片显示</h2><p>将胜利的图片提前创建好，如果胜利触发了，将图片弹下来即可</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 胜利的图片</span></span><br><span class="line">QLabel * winLabel = <span class="keyword">new</span> QLabel;</span><br><span class="line">QPixmap tmpPix;</span><br><span class="line">tmpPix.<span class="built_in">load</span>(<span class="string">&quot;:/res/LevelCompletedDialogBg.png&quot;</span>);</span><br><span class="line">winLabel-&gt;<span class="built_in">setGeometry</span>(<span class="number">0</span>, <span class="number">0</span>, tmpPix.<span class="built_in">width</span>(), tmpPix.<span class="built_in">height</span>());</span><br><span class="line">winLabel-&gt;<span class="built_in">setPixmap</span>(tmpPix);</span><br><span class="line">winLabel-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">winLabel-&gt;<span class="built_in">move</span>((<span class="keyword">this</span>-&gt;<span class="built_in">width</span>() - tmpPix.<span class="built_in">width</span>()) * <span class="number">0.5</span>, -tmpPix.<span class="built_in">height</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果胜利了，将上面的图片移动下来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>-&gt;isWin)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;胜利&quot;</span>;</span><br><span class="line">    QPropertyAnimation * animation1 = <span class="keyword">new</span> <span class="built_in">QPropertyAnimation</span>(winLabel, <span class="string">&quot;geometry&quot;</span>);</span><br><span class="line">    animation1-&gt;<span class="built_in">setDuration</span>(<span class="number">1000</span>);</span><br><span class="line">    animation1-&gt;<span class="built_in">setStartValue</span>(<span class="built_in">QRect</span>(winLabel-&gt;<span class="built_in">x</span>(), winLabel-&gt;<span class="built_in">y</span>(), winLabel-&gt;<span class="built_in">width</span>(), winLabel-&gt;<span class="built_in">height</span>()));</span><br><span class="line">    animation1-&gt;<span class="built_in">setEndValue</span>(<span class="built_in">QRect</span>(winLabel-&gt;<span class="built_in">x</span>(), winLabel-&gt;<span class="built_in">y</span>() + <span class="number">114</span>, winLabel-&gt;<span class="built_in">width</span>(), winLabel-&gt;<span class="built_in">height</span>()));</span><br><span class="line">    animation1-&gt;<span class="built_in">setEasingCurve</span>(QEasingCurve::OutBounce);</span><br><span class="line">    animation1-&gt;<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-13-胜利后禁用按钮"><a href="#5-13-胜利后禁用按钮" class="headerlink" title="5.13 胜利后禁用按钮"></a>5.13 胜利后禁用按钮</h2><p>当胜利后，应该禁用所有按钮的点击状态，可以在每个按钮中加入标志位 isWin，如果isWin为true，MousePressEvent直接return掉即可</p><p>MyCoin中.h里添加：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> notPress = <span class="literal">false</span>; <span class="comment">// false = 能按，true = 不能按</span></span><br></pre></td></tr></table></figure><p>在鼠标按下事件中修改为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyCoin::mousePressEvent</span><span class="params">(QMouseEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;isAnimation || notPress == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> QPushButton::<span class="built_in">mousePressEvent</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用所有按钮点击事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">    coinBtn[i][j]-&gt;notPress = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在点击金币之后，先把所有金币按钮禁用，防止出现还未翻转结束，就点击了别的按钮，造成结果错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮，将所有按钮先都禁用</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        coinBtn[i][j]-&gt;notPress = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>同时，在最后判断是否胜利后，将所有禁用按钮解开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 没有胜利，恢复按钮，所有按钮都可以进行按动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">         coinBtn[i][j]-&gt;notPress = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，胜利后不可以点击任何的金币。</p><h1 id="六、音效添加"><a href="#六、音效添加" class="headerlink" title="六、音效添加"></a>六、音效添加</h1><h2 id="6-1-开始音效"><a href="#6-1-开始音效" class="headerlink" title="6.1 开始音效"></a>6.1 开始音效</h2><p> QT6.3使用的是<code>&lt;QSoundEffect&gt;</code></p><p>在pro文件中添加multimedia组件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += multimedia</span><br></pre></td></tr></table></figure><p>在.cpp文件中编写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建开始时的语音</span></span><br><span class="line">QSoundEffect * startSound = <span class="keyword">new</span> <span class="built_in">QSoundEffect</span>(<span class="keyword">this</span>);</span><br><span class="line">startSound-&gt;<span class="built_in">setSource</span>(QUrl::<span class="built_in">fromLocalFile</span>(<span class="string">&quot;:/res/TapButtonSound.wav&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击开始按钮，播放音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startSound-&gt;<span class="built_in">play</span>(); <span class="comment">//开始音效</span></span><br></pre></td></tr></table></figure><h2 id="6-2-选择关卡音效"><a href="#6-2-选择关卡音效" class="headerlink" title="6.2 选择关卡音效"></a>6.2 选择关卡音效</h2><p>在选择关卡场景中，添加音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择关卡按钮音效</span></span><br><span class="line">QSoundEffect * chooseSound = <span class="keyword">new</span> <span class="built_in">QSoundEffect</span>(<span class="keyword">this</span>);</span><br><span class="line">chooseSound-&gt;<span class="built_in">setSource</span>(QUrl::<span class="built_in">fromLocalFile</span>(<span class="string">&quot;:/res/TapButtonSound.wav&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选中关卡后，播放音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chooseSound-&gt;<span class="built_in">play</span>();</span><br></pre></td></tr></table></figure><h2 id="6-3-返回按钮音效"><a href="#6-3-返回按钮音效" class="headerlink" title="6.3 返回按钮音效"></a>6.3 返回按钮音效</h2><p>在选择关卡场景与翻金币游戏场景中，分别添加返回按钮音效如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回按钮音效</span></span><br><span class="line">    QSoundEffect * backSound = <span class="keyword">new</span> <span class="built_in">QSoundEffect</span>(<span class="keyword">this</span>);</span><br><span class="line">    backSound-&gt;<span class="built_in">setSource</span>(QUrl::<span class="built_in">fromLocalFile</span>(<span class="string">&quot;:/res/BackButtonSound.wav&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分别在点击返回按钮后，播放该音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backSound-&gt;<span class="built_in">play</span>();</span><br></pre></td></tr></table></figure><h2 id="6-4-翻金币与胜利音效"><a href="#6-4-翻金币与胜利音效" class="headerlink" title="6.4 翻金币与胜利音效"></a>6.4 翻金币与胜利音效</h2><p>在PlayScene中添加，翻金币的音效以及 胜利的音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻金币音效</span></span><br><span class="line">QSoundEffect * flipSound = <span class="keyword">new</span> <span class="built_in">QSoundEffect</span>(<span class="keyword">this</span>);</span><br><span class="line">flipSound-&gt;<span class="built_in">setSource</span>(QUrl::<span class="built_in">fromLocalFile</span>(<span class="string">&quot;:/res/ConFlipSound.wav&quot;</span>));</span><br><span class="line"><span class="comment">// 胜利音效</span></span><br><span class="line">QSoundEffect * winSound = <span class="keyword">new</span> <span class="built_in">QSoundEffect</span>(<span class="keyword">this</span>);</span><br><span class="line">winSound-&gt;<span class="built_in">setSource</span>(QUrl::<span class="built_in">fromLocalFile</span>(<span class="string">&quot;:/res/LevelWinSound.wav&quot;</span>));</span><br></pre></td></tr></table></figure><p>在翻金币时播放 翻金币音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flipSound-&gt;<span class="built_in">play</span>();</span><br></pre></td></tr></table></figure><p>胜利时，播放胜利音效</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winSound-&gt;<span class="built_in">play</span>();</span><br></pre></td></tr></table></figure><p>测试音效，使音效正常播放。</p><h1 id="七、优化项目"><a href="#七、优化项目" class="headerlink" title="七、优化项目"></a>七、优化项目</h1><p>当我们移动场景后，如果进入下一个场景，发现场景还在中心位置，如果想设置场景的位置，需要添加如下下图中的代码：</p><p>MainScene中添加：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps45.jpg" alt="img"> </p><p>ChooseScene中添加：</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/wps46.jpg" alt="img"> </p><p>测试切换三个场景的进入与返回都在同一个位置下，优化成功。</p><p>至此，本案例全部制作完成。</p><h1 id="八、项目打包"><a href="#八、项目打包" class="headerlink" title="八、项目打包"></a>八、项目打包</h1><h2 id="8-1、QT自带工具打包"><a href="#8-1、QT自带工具打包" class="headerlink" title="8.1、QT自带工具打包"></a>8.1、QT自带工具打包</h2><p>选择Qt页面左下角，将Debug改为Release</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808151615844.png" alt="image-20240808151615844"></p><p>编译一遍，即可得到release之后的项目文件，在build文件路径中，找到release文件夹，进入release目录</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808151756053.png" alt="image-20240808151756053"></p><p>将其中的.exe复制一份，到另一个路径粘贴进去</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808152425618.png" alt="image-20240808152425618"></p><p>打开此路径的cmd</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808152501155.png" alt="image-20240808152501155"></p><p>找到QT的安装路径，将bin路径保存到系统变量中<br><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808152720780.png" alt="image-20240808152720780"></p><p>使用命令windeployqt CoinFlip.exe，进行打包</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808152926420.png" alt="image-20240808152926420"></p><p>可以看到结束后的文件夹多了很多文件，此时就可以直接发送给另一个人进行直接使用</p><p><img src="/2024/08/08/Qt/%E7%BF%BB%E9%87%91%E5%B8%81%E6%A1%88%E4%BE%8B/image-20240808153105564.png" alt="image-20240808153105564"></p><h2 id="8-2、使用工具打包"><a href="#8-2、使用工具打包" class="headerlink" title="8.2、使用工具打包"></a>8.2、使用工具打包</h2><p><a href="https://blog.csdn.net/signjing/article/details/7855855">nsis安装包（五）_手把手教NIS Edit安装向导的使用_nsis安装包(五)-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_SAPI实现长时间语音识别(五)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/ContinuousSapiASR/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/ContinuousSapiASR/</url>
      
        <content type="html"><![CDATA[<h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>​通过事件驱动和定时器机制实现了长时间语音识别和静音检测。用户点击开始按钮后，程序一直监听用户的语音输入，当用户讲话时实时更新识别结果，并将其与数据库中的数据进行匹配。同时，通过定时器检测长时间静音，并在静音时进行识别结果处理。用户点击停止按钮后，停止所有识别操作。</p><h2 id="1-1、初始化-SAPI"><a href="#1-1、初始化-SAPI" class="headerlink" title="1.1、初始化 SAPI"></a>1.1、初始化 SAPI</h2><p>在程序启动时，初始化 SAPI 相关组件。主要包括创建语音识别器、识别上下文、语法对象，并加载听写语法。同时设置通知事件和输入音频对象。</p><h2 id="1-2、-开始语音识别"><a href="#1-2、-开始语音识别" class="headerlink" title="1.2、 开始语音识别"></a>1.2、 开始语音识别</h2><p>用户点击“开始”按钮时，启动语音识别功能，并设置相关标志位和定时器。定时器用于检测是否有长时间的静音，以便进行语音识别的处理。</p><h2 id="1-3、-处理语音事件"><a href="#1-3、-处理语音事件" class="headerlink" title="1.3、 处理语音事件"></a>1.3、 处理语音事件</h2><p>通过事件驱动机制，当 SAPI 检测到语音输入时，触发 SPEI_RECOGNITION 事件。此时，获取识别结果并更新最后一次讲话的时间。</p><h2 id="1-4、-更新文本并进行处理"><a href="#1-4、-更新文本并进行处理" class="headerlink" title="1.4、 更新文本并进行处理"></a>1.4、 更新文本并进行处理</h2><p>当收到语音识别结果时，更新对话框中的文本框内容。并使用 Levenshtein 距离算法将识别结果与数据库中的数据进行匹配，找出最相似的文本及其 ID。</p><h2 id="1-5、-停止语音识别"><a href="#1-5、-停止语音识别" class="headerlink" title="1.5、 停止语音识别"></a>1.5、 停止语音识别</h2><p>用户点击“停止”按钮时，停止语音识别功能，取消定时器，并重置相关标志位。</p><h3 id="1-6、-定时器检测静音"><a href="#1-6、-定时器检测静音" class="headerlink" title="1.6、 定时器检测静音"></a>1.6、 定时器检测静音</h3><p>定时器定时检查用户是否长时间没有讲话。如果检测到用户静音超过设定的时间（如 5 秒），则调用 <code>PerformRecognition</code> 函数进行语音识别的处理，并更新识别结果。</p><h3 id="1-7、-数据库连接和查询"><a href="#1-7、-数据库连接和查询" class="headerlink" title="1.7、 数据库连接和查询"></a>1.7、 数据库连接和查询</h3><p>程序初始化时，连接到数据库并查询所有识别内容。将查询结果存储在内存中，以便后续的文本匹配使用。</p><h3 id="1-8、-文本相似度匹配"><a href="#1-8、-文本相似度匹配" class="headerlink" title="1.8、 文本相似度匹配"></a>1.8、 文本相似度匹配</h3><p>使用 Levenshtein 距离算法计算识别结果与数据库中每条数据之间的相似度，找出最匹配的文本及其对应的 ID，并显示在对话框中。</p><h1 id="二、具体实现步骤"><a href="#二、具体实现步骤" class="headerlink" title="二、具体实现步骤"></a>二、具体实现步骤</h1><h2 id="2-1、初始化-SAPI-和音频输入"><a href="#2-1、初始化-SAPI-和音频输入" class="headerlink" title="2.1、初始化 SAPI 和音频输入"></a>2.1、初始化 SAPI 和音频输入</h2><p><code>InitializeSAPI</code>函数将会初始化SAPI，配置识别器和音频输入，并设置事件通知以处理识别结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::InitializeSAPI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 COM 库</span></span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建语音识别器实例</span></span><br><span class="line">    hr = m_pRecognizer.<span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognizer: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建识别上下文</span></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;m_pRecoContext);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognition context: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建语法对象</span></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">1</span>, &amp;m_pGrammar);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载听写语法</span></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to load dictation grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将语法设置为非活动状态</span></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set dictation state: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置事件通知句柄</span></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set notify event: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取事件通知句柄</span></span><br><span class="line">    HANDLE hEvent = m_pRecoContext-&gt;<span class="built_in">GetNotifyEventHandle</span>();</span><br><span class="line">    <span class="keyword">if</span> (hEvent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to get event handle.&quot;</span>));</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置对识别事件的兴趣</span></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetInterest</span>(<span class="built_in">SPFEI</span>(SPEI_RECOGNITION), <span class="built_in">SPFEI</span>(SPEI_RECOGNITION));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set interest for recognition events: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建音频输入对象</span></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpMMAudioIn, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpAudio, (<span class="type">void</span>**)&amp;m_cpAudio);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create audio input object: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置音频输入到识别器</span></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">SetInput</span>(m_cpAudio, TRUE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set audio input: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化成功消息</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Initialize SAPI is successful&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、开始按钮"><a href="#2-2、开始按钮" class="headerlink" title="2.2、开始按钮"></a>2.2、开始按钮</h2><p>点击开始按钮，开始进行录音，因为要支持长期识别，可以添加用户讲话状态和讲话时间，来保证合适进行语音识别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 启动语音识别</span></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    m_bUserSpeaking = <span class="literal">false</span>;  <span class="comment">// 初始化用户讲话状态</span></span><br><span class="line">    m_lastSpeechTime = <span class="built_in">GetTickCount</span>(); <span class="comment">// 初始化最后一次讲话时间</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition started.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">1000</span>, <span class="literal">NULL</span>);    <span class="comment">// 启动定时器，间隔 1 s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、定时器识别录音"><a href="#2-3、定时器识别录音" class="headerlink" title="2.3、定时器识别录音"></a>2.3、定时器识别录音</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (nIDEvent)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> TIMER_ID: <span class="comment">// 定时器ID</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间（以毫秒为单位）</span></span><br><span class="line">        DWORD currentTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line">        <span class="comment">// 检查当前时间与最后一次讲话时间的差值是否大于等于5000毫秒（5秒）</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime - m_lastSpeechTime &gt;= <span class="number">5000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果距离上次讲话已经超过5秒，则进行文本处理</span></span><br><span class="line">            <span class="built_in">PerformRecognition</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用基类的OnTimer函数，以确保基类处理其他定时器事件</span></span><br><span class="line">    CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::PerformRecognition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 等待识别上下文中的通知事件，超时时间为1秒</span></span><br><span class="line">    HRESULT hr = m_pRecoContext-&gt;<span class="built_in">WaitForNotifyEvent</span>(<span class="number">1000</span>);  <span class="comment">// 1秒超时</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果等待通知事件失败，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CSpEvent event;</span><br><span class="line">    <span class="comment">// 从识别上下文中获取事件</span></span><br><span class="line">    <span class="keyword">while</span> (event.<span class="built_in">GetFrom</span>(m_pRecoContext) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果事件是识别事件</span></span><br><span class="line">        <span class="keyword">if</span> (event.eEventId == SPEI_RECOGNITION)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取识别结果</span></span><br><span class="line">            ISpRecoResult* pResult = event.<span class="built_in">RecoResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (pResult)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 更新最后一次讲话时间</span></span><br><span class="line">                m_lastSpeechTime = <span class="built_in">GetTickCount</span>(); </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取识别到的文本</span></span><br><span class="line">                LPWSTR pwszText = <span class="literal">nullptr</span>;</span><br><span class="line">                hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, FALSE, &amp;pwszText, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 将识别到的文本包装成CString对象</span></span><br><span class="line">                    CString* pNewText = <span class="keyword">new</span> <span class="built_in">CString</span>(pwszText);</span><br><span class="line">                    <span class="comment">// 发送消息通知主线程更新文本</span></span><br><span class="line">                    <span class="built_in">PostMessage</span>(WM_USER_UPDATE_TEXT, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(pNewText), <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 释放分配的内存</span></span><br><span class="line">                    <span class="built_in">CoTaskMemFree</span>(pwszText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSapiASRDlg, CDialogEx)</span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER_UPDATE_TEXT, &amp;CSapiASRDlg::OnUpdateText)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="function">LRESULT <span class="title">CSapiASRDlg::OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将WPARAM参数转换为CString指针</span></span><br><span class="line">    CString* pNewText = <span class="built_in">reinterpret_cast</span>&lt;CString*&gt;(wParam);</span><br><span class="line">    <span class="keyword">if</span> (pNewText)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置编辑框的文本为新的识别结果</span></span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(*pNewText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将识别结果转换为std::wstring以便于后续处理</span></span><br><span class="line">    <span class="function">std::wstring <span class="title">newText</span><span class="params">((*pNewText).GetString())</span></span>;</span><br><span class="line">    std::wstring bestMatch;</span><br><span class="line">    <span class="type">int</span> bestMatchId = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> minDistance = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数据库中的每一行数据</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row_data : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算识别结果与数据库中每行数据的Levenshtein距离</span></span><br><span class="line">        <span class="type">double</span> distance = <span class="built_in">levenshteinDistance</span>(newText, std::<span class="built_in">wstring</span>(row_data.<span class="built_in">GetString</span>()));</span><br><span class="line">        <span class="comment">// 如果找到更小的距离，则更新最匹配的结果</span></span><br><span class="line">        <span class="keyword">if</span> (distance &lt; minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            bestMatch = row_data.<span class="built_in">GetString</span>();</span><br><span class="line">            bestMatchId = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果的ID输出到ID编辑框</span></span><br><span class="line">    CString idResult;</span><br><span class="line">    idResult.<span class="built_in">Format</span>(_T(<span class="string">&quot;%d&quot;</span>), bestMatchId);</span><br><span class="line">    m_edtIdResult.<span class="built_in">SetWindowText</span>(idResult);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果输出到结果编辑框</span></span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowText</span>(bestMatch.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放分配的内存</span></span><br><span class="line">    <span class="keyword">delete</span> pNewText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4、结束按钮"><a href="#2-4、结束按钮" class="headerlink" title="2.4、结束按钮"></a>2.4、结束按钮</h2><p>如果点击结束按钮，会将定时器关闭，结束语音识别；又需要保证自己最后的录音数据可以被识别，在停止听十七之后再次调用语音识别函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition is not started.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止识别</span></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to stop recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">KillTimer</span>(TIMER_ID);  <span class="comment">// 停止定时器</span></span><br><span class="line">    <span class="built_in">PerformRecognition</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition stopped.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5、Levenshtein距离算法"><a href="#2-5、Levenshtein距离算法" class="headerlink" title="2.5、Levenshtein距离算法"></a>2.5、Levenshtein距离算法</h2><p>以下是带有详细注释的Levenshtein距离算法的实现代码和分析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Levenshtein 距离算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CSapiASRDlg::levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">m</span><span class="params">(s<span class="number">1.</span>size())</span></span>; <span class="comment">// 字符串s1的长度</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">n</span><span class="params">(s<span class="number">2.</span>size())</span></span>; <span class="comment">// 字符串s2的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果s1为空，返回s2的长度</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="comment">// 如果s2为空，返回s1的长度</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个(m+1) x (n+1)的矩阵，用于存储距离</span></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">size_t</span>&gt;&gt; <span class="built_in">matrix</span>(m + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">size_t</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化第一列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= m; ++i) matrix[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="comment">// 初始化第一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt;= n; ++j) matrix[<span class="number">0</span>][j] = j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算矩阵的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果字符相同，代价为0，否则为1</span></span><br><span class="line">            <span class="type">size_t</span> cost = (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 计算删除、插入和替换的代价</span></span><br><span class="line">            <span class="type">size_t</span> deletion = matrix[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> insertion = matrix[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> substitution = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] + cost;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取三者中的最小值</span></span><br><span class="line">            <span class="type">size_t</span> minValue = deletion;</span><br><span class="line">            <span class="keyword">if</span> (insertion &lt; minValue)</span><br><span class="line">                minValue = insertion;</span><br><span class="line">            <span class="keyword">if</span> (substitution &lt; minValue)</span><br><span class="line">                minValue = substitution;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将最小值存储在矩阵中</span></span><br><span class="line">            matrix[i][j] = minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵的右下角值即为Levenshtein距离</span></span><br><span class="line">    <span class="type">size_t</span> distance = matrix[m][n];</span><br><span class="line">    <span class="comment">// 计算长度差异</span></span><br><span class="line">    <span class="type">size_t</span> lengthDifference = std::<span class="built_in">abs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m) - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加长度差异的惩罚项，使用比例因子调整权重</span></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> lengthPenaltyFactor = <span class="number">0.5f</span>; <span class="comment">// 可根据需要调整比例因子</span></span><br><span class="line">    <span class="type">size_t</span> lengthPenalty = <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(lengthDifference * lengthPenaltyFactor);</span><br><span class="line">    distance += lengthPenalty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance; <span class="comment">// 返回最终的距离值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p>​Levenshtein距离算法用于计算两个字符串之间的编辑距离，即将一个字符串转换成另一个字符串所需的最小操作次数。允许的操作包括插入、删除和替换字符。该算法通过动态规划的方式实现，创建一个二维矩阵，其中每个元素表示将字符串的某个前缀转换成另一个字符串的某个前缀的代价。通过依次填充矩阵，最终得到两个字符串的编辑距离。</p><p>​此外，添加了长度差异的惩罚项，以更加公平地比较长度差异较大的字符串。惩罚项的比例因子可以根据具体需求进行调整。</p><h1 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h1><p>Github仓库：<a href="https://github.com/lxq-02/ContinuousSapiASR">lxq-02&#x2F;ContinuousSapiASR (github.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_Pocketsphinx(二)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/Pocketsphinx/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/Pocketsphinx/</url>
      
        <content type="html"><![CDATA[<h1 id="博客："><a href="#博客：" class="headerlink" title="博客："></a>博客：</h1><p>PortAudio:<a href="https://blog.csdn.net/qq_30340349/article/details/131509624">【PortAudio】PortAudio 音频处理库Demo-CSDN博客</a> </p><p>PortAudio:<a href="https://blog.51cto.com/u_4135183/2822776">PortAudio —— 跨平台音频采集API_lyyanziyu的技术博客_51CTO博客</a></p><p>中文模型：[CMU Sphinx - Browse &#x2F;Acoustic and Language Models&#x2F;Mandarin at SourceForge.net](<a href="https://sourceforge.net/projects/cmusphinx/files/Acoustic">https://sourceforge.net/projects/cmusphinx/files/Acoustic</a> and Language Models&#x2F;Mandarin&#x2F;)</p><p>Pocketsphinx源码：<a href="https://github.com/cmusphinx/pocketsphinx/tree/master/">https://github.com/cmusphinx/pocketsphinx/tree/master/</a></p><p>VS2015中编译试用pocketsphinx：<a href="https://www.jianshu.com/p/b0a3690777fc">https://www.jianshu.com/p/b0a3690777fc</a></p><p>window下基于VS，CMUSphinx的中文小词汇量语音识别实例：<a href="https://blog.csdn.net/Anadahoji/article/details/88607261">https://blog.csdn.net/Anadahoji/article/details/88607261</a></p><h1 id="pocketsphinx实现连续大词汇量语音识别"><a href="#pocketsphinx实现连续大词汇量语音识别" class="headerlink" title="pocketsphinx实现连续大词汇量语音识别"></a><a href="https://www.cnblogs.com/yyq745201/p/4633628.html">pocketsphinx实现连续大词汇量语音识别</a></h1><p><a href="https://www.cnblogs.com/huanghuang/archive/2012/08/08/2627747.html">Sphinx应用程序编写 - lovemu - 博客园 (cnblogs.com)</a></p><p>可以简单识别单词，需要设计关键词库</p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// SpeechRecognition_PocketSphinxDlg.h: 头文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含必要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;portaudio.h&gt;</span>       <span class="comment">// PortAudio 库头文件，用于音频输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pocketsphinx.h&gt;</span>    <span class="comment">// PocketSphinx 库头文件，用于语音识别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/ad.h&gt;</span>   <span class="comment">// SphinxBase 库头文件，用于音频录制</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/err.h&gt;</span>  <span class="comment">// SphinxBase 库头文件，用于错误处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>           <span class="comment">// 文件操作头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>            <span class="comment">// 字符串处理头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>               <span class="comment">// 集合容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlstr.h&gt;</span>          <span class="comment">// ATL 字符串类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>            <span class="comment">// 线程库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>            <span class="comment">// 向量容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>         <span class="comment">// 算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span>            <span class="comment">// 本地化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span>           <span class="comment">// 编码转换头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>          <span class="comment">// 输入输出流头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_ID 999 <span class="comment">// 定义定时器 ID</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSpeechRecognitionPocketSphinxDlg 对话框</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSpeechRecognitionPocketSphinxDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CSpeechRecognitionPocketSphinxDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_SPEECHRECOGNITION_POCKETSPHINX_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;<span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HICON m_hIcon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的消息映射函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnDestroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;<span class="comment">// 识别后显示的数据</span></span><br><span class="line"></span><br><span class="line">std::vector&lt;int16&gt; m_audioBuffer;   <span class="comment">// 用于存储音频数据</span></span><br><span class="line"><span class="type">bool</span> m_bListening = <span class="literal">false</span>;<span class="comment">// 语音识别信号</span></span><br><span class="line"><span class="type">cmd_ln_t</span>* m_config = <span class="literal">nullptr</span>;<span class="comment">// 配置参数指针</span></span><br><span class="line"><span class="type">ps_decoder_t</span>* m_ps = <span class="literal">nullptr</span>;<span class="comment">// PocketSphinx 解码器指针</span></span><br><span class="line"><span class="type">ad_rec_t</span>* m_ad = <span class="literal">nullptr</span>;<span class="comment">// 音频录制指针</span></span><br><span class="line">uint8 utt_started = FALSE;<span class="comment">// 标志是否开始录制</span></span><br><span class="line"></span><br><span class="line">PaStream* m_stream = <span class="literal">nullptr</span>;<span class="comment">// PortAudio 流指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RecordAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessRecordedAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span>;</span><br><span class="line"><span class="function">CString <span class="title">ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>; <span class="comment">// 定时器处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::thread m_thread; <span class="comment">// 用于音频录制和处理的线程</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// SpeechRecognition_PocketSphinxDlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SpeechRecognition_PocketSphinx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SpeechRecognition_PocketSphinxDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048) <span class="comment">// 调整缓冲区大小</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* userData)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;</span><br><span class="line"><span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 双声道转单声道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSpeechRecognitionPocketSphinxDlg 对话框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSpeechRecognitionPocketSphinxDlg::<span class="built_in">CSpeechRecognitionPocketSphinxDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_SPEECHRECOGNITION_POCKETSPHINX_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line"></span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSpeechRecognitionPocketSphinxDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStart)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStop)</span><br><span class="line"><span class="built_in">ON_WM_DESTROY</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSpeechRecognitionPocketSphinxDlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CSpeechRecognitionPocketSphinxDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CSpeechRecognitionPocketSphinxDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 清空音频缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PortAudio</span></span><br><span class="line">PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频流参数</span></span><br><span class="line">PaStreamParameters inputParameters;</span><br><span class="line">inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line"><span class="keyword">if</span> (inputParameters.device == paNoDevice) &#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 双声道</span></span><br><span class="line">inputParameters.sampleFormat = paInt16; <span class="comment">// 16 位整数</span></span><br><span class="line">inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开音频流</span></span><br><span class="line">err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">&amp;m_stream,</span><br><span class="line">&amp;inputParameters,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line"><span class="number">48000</span>, <span class="comment">// 采样率</span></span><br><span class="line"><span class="number">2048</span>, <span class="comment">// 缓冲区大小</span></span><br><span class="line">paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有回调</span></span><br><span class="line"><span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to open PortAudio stream: %s&quot;</span>), <span class="built_in">Pa_GetErrorText</span>(err));</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动音频流</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError) &#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标志以启动录音</span></span><br><span class="line">m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动录音线程</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CSpeechRecognitionPocketSphinxDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();  <span class="comment">// 分离线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line"><span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"><span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m_bListening) &#123;</span><br><span class="line">PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line"><span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单声道数据添加到缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止音频流</span></span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CSpeechRecognitionPocketSphinxDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to open audio file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;int16&gt; <span class="title">audioData</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioData.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No audio data read from file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, audioData.<span class="built_in">data</span>(), audioData.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(int16), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString result = <span class="built_in">CString</span>(hyp);</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//void CMFCApplication1Dlg::OnBnClickedButton1()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//std::string filePath = &quot;D:\\ASR\\pocketsphinx\\test\\data\\cards\\001.wav&quot;; // ten of clubs</span></span><br><span class="line"><span class="comment">////std::string filePath = &quot;D:\\ASR\\pocketsphinx\\test\\data\\cards\\test.wav&quot;; // ten of clubs</span></span><br><span class="line"><span class="comment">//ProcessAudioFile(filePath);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h1><h2 id="1、模型初始化"><a href="#1、模型初始化" class="headerlink" title="1、模型初始化"></a>1、模型初始化</h2><p>m_config中文如果不可以初始化成功，可以直接在hmm文件夹中修改参数数据</p><p>pocket默认是单通道的设备，可能和自己的设备不一样，需要设置数据变换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">CSpeechRecognitionPocketSphinxDlg::<span class="built_in">CSpeechRecognitionPocketSphinxDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_SPEECHRECOGNITION_POCKETSPHINX_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line"></span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、PortAudio的使用"><a href="#2、PortAudio的使用" class="headerlink" title="2、PortAudio的使用"></a>2、PortAudio的使用</h2><p>Pocketsphinx直接使用电脑的设备可能造成乱码，如果乱码，可以使用portaudio来录制音频，转换为pocketsphinx适配的音频格式</p><p>需要主义，打开音频流之前，一定要对音频流的参数进行设置，否则报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000                 <span class="comment">// 采样率定义为16000Hz</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048)          <span class="comment">// 每个缓冲区包含2048帧</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数用于处理音频数据</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">    PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">void</span>* userData)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;      <span class="comment">// 输入缓冲区的数据</span></span><br><span class="line">    <span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData; <span class="comment">// 用户数据（单声道缓冲区）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果输入缓冲区为空，继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> paContinue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将双声道音频数据转换为单声道</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">        monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 左右声道相加后取平均值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击事件处理函数，开始录音</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 清空音频缓冲区</span></span><br><span class="line">    m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 PortAudio</span></span><br><span class="line">    PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line">    <span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>)); <span class="comment">// 初始化失败，显示错误消息</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置音频流参数</span></span><br><span class="line">    PaStreamParameters inputParameters;</span><br><span class="line">    inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line">    <span class="keyword">if</span> (inputParameters.device == paNoDevice) &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>)); <span class="comment">// 没有默认输入设备，显示错误消息</span></span><br><span class="line">        <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 设置为双声道</span></span><br><span class="line">    inputParameters.sampleFormat = paInt16; <span class="comment">// 采样格式为16位整数</span></span><br><span class="line">    inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">    inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开音频流</span></span><br><span class="line">    err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">        &amp;m_stream,</span><br><span class="line">        &amp;inputParameters,</span><br><span class="line">        <span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line">        <span class="number">48000</span>, <span class="comment">// 采样率为48000Hz</span></span><br><span class="line">        <span class="number">2048</span>, <span class="comment">// 每个缓冲区2048帧</span></span><br><span class="line">        paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line">        <span class="literal">nullptr</span>, <span class="comment">// 没有回调函数</span></span><br><span class="line">        <span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err != paNoError) &#123;</span><br><span class="line">        CString errorMsg;</span><br><span class="line">        errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to open PortAudio stream: %s&quot;</span>), <span class="built_in">Pa_GetErrorText</span>(err)); <span class="comment">// 打开音频流失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">        <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动音频流</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError) &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>)); <span class="comment">// 启动音频流失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">Pa_CloseStream</span>(m_stream); <span class="comment">// 关闭音频流</span></span><br><span class="line">        <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置标志，表示正在录音</span></span><br><span class="line">    m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示用户录音已经开始</span></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动录音线程</span></span><br><span class="line">    <span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CSpeechRecognitionPocketSphinxDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">    t.<span class="built_in">detach</span>(); <span class="comment">// 分离线程，使其在后台运行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line">    <span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、录音"><a href="#3、录音" class="headerlink" title="3、录音"></a>3、录音</h2><p>注意，读取音频数据失败时，需要进行数据转换，语音识别这些一般是Unicode编码，需要转换，否则报错信息乱码，看不懂；转换为宽多字节可以显示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 开始新的识别单元</span></span><br><span class="line">    <span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓冲区用于存储双声道音频数据</span></span><br><span class="line">    <span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当正在录音时不断读取音频数据</span></span><br><span class="line">    <span class="keyword">while</span> (m_bListening) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从音频流中读取数据到缓冲区</span></span><br><span class="line">        PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line">        <span class="keyword">if</span> (err != paNoError)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 读取音频数据失败，显示错误消息</span></span><br><span class="line">            CString errorMsg;</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line">                <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">                errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line">                <span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将单声道数据添加到音频缓冲区</span></span><br><span class="line">        m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将单声道数据传递给 PocketSphinx 进行处理</span></span><br><span class="line">        <span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束识别单元</span></span><br><span class="line">    <span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止音频流</span></span><br><span class="line">    <span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line">    <span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line">    <span class="built_in">Pa_Terminate</span>(); <span class="comment">// 终止 PortAudio</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、识别"><a href="#4、识别" class="headerlink" title="4、识别"></a>4、识别</h2><p>注意转换音频格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果音频缓冲区为空，提示没有音频数据可处理</span></span><br><span class="line">    <span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保 PocketSphinx 已正确初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!m_ps)</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始新的识别单元</span></span><br><span class="line">    <span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理录制的音频数据</span></span><br><span class="line">    <span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束识别单元</span></span><br><span class="line">    <span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取识别结果</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line">            <span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将识别结果显示在编辑框中</span></span><br><span class="line">            m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转换识别结果失败，提示错误信息</span></span><br><span class="line">            m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 没有检测到结果，提示信息</span></span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从识别结果中提取文本</span></span><br><span class="line"><span class="function">CString <span class="title">CSpeechRecognitionPocketSphinxDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、定时器"><a href="#5、定时器" class="headerlink" title="5、定时器"></a>5、定时器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、结束按钮"><a href="#6、结束按钮" class="headerlink" title="6、结束按钮"></a>6、结束按钮</h2><p>音频数据不要一直循环启动，这样识别很乱，一个开始按钮，一个结束按钮；或者就设置15s的录音时间，然后进行读取录音数据，进行识别信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSpeechRecognitionPocketSphinxDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_查看博客(一)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>cmake下载：<a href="https://blog.csdn.net/didi_ya/article/details/123029415">Windows下CMake的下载与安装详解_cmake下载-CSDN博客</a></p><p>vcpkg</p><p>博客：<a href="https://blog.csdn.net/adminstate/article/details/134966644">vcpkg下载及安装-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_48095841/article/details/135639120">Windows下载安装vcpkg并使用它来安装第三方库（visualstudio）_vcpkg下载-CSDN博客</a></p><p>下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:microsoft/vcpkg.git</span><br><span class="line">cd vcpkg</span><br></pre></td></tr></table></figure><p>引导vcpkg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bootstrap-vcpkg.bat</span><br></pre></td></tr></table></figure><p>添加vcpkg路径到系统PATH</p><p><a href="https://cloud.tencent.com/developer/article/2349643">识别准确率竟如此高，实时语音识别服务-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>AaltoASR:<a href="https://github.com/aalto-speech/AaltoASR/blob/develop/INSTALLATION.md">AaltoASR&#x2F;INSTALLATION.md at develop · aalto-speech&#x2F;AaltoASR (github.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_SAPI实现语音识别(四)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/SAPI/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/SAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SAPI"><a href="#一、SAPI" class="headerlink" title="一、SAPI"></a>一、SAPI</h1><h2 id="SAPI-Speech-Application-Programming-Interface-进行语音识别过程笔记"><a href="#SAPI-Speech-Application-Programming-Interface-进行语音识别过程笔记" class="headerlink" title="SAPI (Speech Application Programming Interface) 进行语音识别过程笔记"></a>SAPI (Speech Application Programming Interface) 进行语音识别过程笔记</h2><p>SAPI 是微软提供的一个接口，用于语音识别和语音合成。以下是使用 SAPI 进行语音识别的过程笔记，包括初始化、配置、启动识别、处理结果等步骤。</p><h2 id="1-初始化-COM-库"><a href="#1-初始化-COM-库" class="headerlink" title="1. 初始化 COM 库"></a>1. 初始化 COM 库</h2><p>在使用 SAPI 之前，必须初始化 COM 库。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理初始化失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建语音识别引擎"><a href="#2-创建语音识别引擎" class="headerlink" title="2. 创建语音识别引擎"></a>2. 创建语音识别引擎</h2><p>创建语音识别引擎的实例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpRecognizer&gt; pRecognizer;</span><br><span class="line">hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpRecognizer, (<span class="type">void</span>**)&amp;pRecognizer);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配置语音识别引擎"><a href="#3-配置语音识别引擎" class="headerlink" title="3. 配置语音识别引擎"></a>3. 配置语音识别引擎</h2><p>设置语音识别引擎的属性，如音频输入设备和语音识别引擎。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpRecoContext&gt; pRecoContext;</span><br><span class="line">hr = pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;pRecoContext);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CComPtr&lt;ISpRecoGrammar&gt; pRecoGrammar;</span><br><span class="line">hr = pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">0</span>, &amp;pRecoGrammar);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载语法</span></span><br><span class="line">hr = pRecoGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理加载语法失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-设置音频输入"><a href="#4-设置音频输入" class="headerlink" title="4. 设置音频输入"></a>4. 设置音频输入</h2><p>选择和配置音频输入设备。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpAudio&gt; pAudio;</span><br><span class="line">hr = <span class="built_in">SpCreateDefaultObjectFromCategoryId</span>(SPCAT_AUDIOIN, &amp;pAudio);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理创建失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr = pRecognizer-&gt;<span class="built_in">SetInput</span>(pAudio, TRUE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置输入失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-启动识别"><a href="#5-启动识别" class="headerlink" title="5. 启动识别"></a>5. 启动识别</h2><p>设置语音识别模式和开始识别过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hr = pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr = pRecoGrammar-&gt;<span class="built_in">SetRuleState</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, SPRS_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置规则状态失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr = pRecognizer-&gt;<span class="built_in">SetRecoState</span>(SPRST_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置识别状态失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-处理识别结果"><a href="#6-处理识别结果" class="headerlink" title="6. 处理识别结果"></a>6. 处理识别结果</h2><p>接收和处理识别结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CComPtr&lt;ISpRecoResult&gt; pResult;</span><br><span class="line">hr = pRecoContext-&gt;<span class="built_in">GetResult</span>(&amp;pResult);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr)) &#123;</span><br><span class="line">    CComBSTR bstrText;</span><br><span class="line">    hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, TRUE, &amp;bstrText, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr)) &#123;</span><br><span class="line">        <span class="function">std::wstring <span class="title">recognizedText</span><span class="params">(bstrText)</span></span>;</span><br><span class="line">        <span class="comment">// 处理识别结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-结束识别"><a href="#7-结束识别" class="headerlink" title="7. 结束识别"></a>7. 结束识别</h2><p>停止识别并释放资源。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hr = pRecognizer-&gt;<span class="built_in">SetRecoState</span>(SPRST_INACTIVE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">    <span class="comment">// 处理设置失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">::<span class="built_in">CoUninitialize</span>();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>初始化 COM 库</strong>: 确保在任何 SAPI 操作之前正确初始化 COM 库，并在操作完成后释放资源。</li><li><strong>创建和配置识别引擎</strong>: 创建语音识别引擎实例，并配置音频输入和语法。</li><li><strong>启动和管理识别过程</strong>: 启动语音识别并处理识别结果。</li><li><strong>资源管理</strong>: 确保在完成操作后正确释放资源。</li></ol><p>这个过程为使用 SAPI 进行语音识别提供了一个基本的框架，你可以根据具体的需求进行扩展和调整。</p><h1 id="二、数据库内容"><a href="#二、数据库内容" class="headerlink" title="二、数据库内容"></a>二、数据库内容</h1><table><thead><tr><th>识别数据库内容</th><th></th><th></th><th>回复数据库内容</th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>内容</td><td></td><td></td><td>序号</td><td>内容</td></tr><tr><td>0</td><td>小度小度</td><td></td><td></td><td>0</td><td>我在</td></tr><tr><td>1</td><td>调车白灯-8</td><td>9</td><td></td><td>1</td><td>调车白灯</td></tr><tr><td>2</td><td>负载断开</td><td>8</td><td></td><td>2</td><td>负载断开</td></tr><tr><td>3</td><td>进路开通 8</td><td>9</td><td></td><td>3</td><td>进路开通</td></tr><tr><td>4</td><td>母线重联、负载断开</td><td></td><td></td><td>4</td><td>母线重联、负载断开</td></tr><tr><td>5</td><td>注意进站</td><td></td><td></td><td>5</td><td>注意进站</td></tr><tr><td>6</td><td>开左侧门</td><td></td><td></td><td>6</td><td>开左侧门</td></tr><tr><td>7</td><td>欢迎您乘坐5号线列车</td><td></td><td></td><td>7</td><td>欢迎您乘坐5号线列车</td></tr><tr><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td><td></td><td></td><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td></tr><tr><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td><td></td><td></td><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td></tr><tr><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td><td></td><td></td><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td></tr><tr><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td><td></td><td></td><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td></tr><tr><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td><td></td><td></td><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td></tr><tr><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td><td></td><td></td><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td></tr></tbody></table><h1 id="三、数据库实现"><a href="#三、数据库实现" class="headerlink" title="三、数据库实现"></a>三、数据库实现</h1><h2 id="1、启动mysql"><a href="#1、启动mysql" class="headerlink" title="1、启动mysql"></a>1、启动mysql</h2><p>用户密码：还是我的常用密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="comment">--version</span></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql<span class="number">-5.7</span><span class="number">.24</span><span class="operator">-</span>winx64\bin\mysql.exe  Ver <span class="number">14.14</span> Distrib <span class="number">5.7</span><span class="number">.24</span>, <span class="keyword">for</span> Win64 (x86_64)</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> net <span class="keyword">start</span> mysql</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG <span class="number">2182</span> 以获得更多的帮助。</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h2 id="2、MySQL-数据库配置与插入中文数据"><a href="#2、MySQL-数据库配置与插入中文数据" class="headerlink" title="2、MySQL 数据库配置与插入中文数据"></a>2、MySQL 数据库配置与插入中文数据</h2><p>在 MySQL 中，插入中文数据需要确保数据库和表的字符集设置为支持中文的字符集（如 utf8mb4）。以下是创建数据库和表结构以及插入中文数据的正确方法。</p><h3 id="1-创建数据库和表结构"><a href="#1-创建数据库和表结构" class="headerlink" title="1. 创建数据库和表结构"></a>1. 创建数据库和表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库并设置字符集</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE VoiceAssistant <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用创建的数据库</span></span><br><span class="line">USE VoiceAssistant;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建识别内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> RecognizeContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建回复内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ReplyContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入识别内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> RecognizeContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小度小度&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入回复内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ReplyContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;我在&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="四、初始化SAPI和释放资源"><a href="#四、初始化SAPI和释放资源" class="headerlink" title="四、初始化SAPI和释放资源"></a>四、初始化SAPI和释放资源</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::InitializeSAPI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer.<span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognizer: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;m_pRecoContext);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognition context: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">1</span>, &amp;m_pGrammar);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to load dictation grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set dictation state: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set notify event: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetInterest</span>(<span class="built_in">SPFEI</span>(SPEI_RECOGNITION), <span class="built_in">SPFEI</span>(SPEI_RECOGNITION));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set interest for recognition events: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpMMAudioIn, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpAudio, (<span class="type">void</span>**)&amp;m_cpAudio);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create audio input object: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">SetInput</span>(m_cpAudio, TRUE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set audio input: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Initialize SAPI is successful&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSapiASRDlg::~<span class="built_in">CSapiASRDlg</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        m_bRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pGrammar)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecoContext)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecoContext.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecognizer)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecognizer.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、开始录音和结束录音"><a href="#五、开始录音和结束录音" class="headerlink" title="五、开始录音和结束录音"></a>五、开始录音和结束录音</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition started.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition is not started.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to stop recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里进行语音识别，并将结果显示在编辑框中</span></span><br><span class="line">    <span class="built_in">PerformRecognition</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition stopped.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、识别语音"><a href="#六、识别语音" class="headerlink" title="六、识别语音"></a>六、识别语音</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::PerformRecognition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pRecoContext-&gt;<span class="built_in">WaitForNotifyEvent</span>(<span class="number">1000</span>);  <span class="comment">// 1-second timeout</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CSpEvent event;</span><br><span class="line">    <span class="keyword">while</span> (event.<span class="built_in">GetFrom</span>(m_pRecoContext) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.eEventId == SPEI_RECOGNITION)</span><br><span class="line">        &#123;</span><br><span class="line">            ISpRecoResult* pResult = event.<span class="built_in">RecoResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (pResult)</span><br><span class="line">            &#123;</span><br><span class="line">                LPWSTR pwszText = <span class="literal">nullptr</span>;</span><br><span class="line">                hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, FALSE, &amp;pwszText, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">                &#123;</span><br><span class="line">                    CString* pNewText = <span class="keyword">new</span> <span class="built_in">CString</span>(pwszText);</span><br><span class="line">                    <span class="built_in">PostMessage</span>(WM_USER_UPDATE_TEXT, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(pNewText), <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">CoTaskMemFree</span>(pwszText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSapiASRDlg, CDialogEx)</span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER_UPDATE_TEXT, &amp;CSapiASRDlg::OnUpdateText)</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_CLEAR, &amp;CSapiASRDlg::OnBnClickedButtonClear)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure><h1 id="七、更新文本"><a href="#七、更新文本" class="headerlink" title="七、更新文本"></a>七、更新文本</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">CSapiASRDlg::OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CString* pNewText = <span class="built_in">reinterpret_cast</span>&lt;CString*&gt;(wParam);</span><br><span class="line">    <span class="keyword">if</span> (pNewText)</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(*pNewText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::wstring <span class="title">newText</span><span class="params">((*pNewText).GetString())</span></span>;</span><br><span class="line">    std::wstring bestMatch;</span><br><span class="line">    <span class="type">int</span> bestMatchId = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> minDistance = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row_data : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> distance = <span class="built_in">levenshteinDistance</span>(newText, std::<span class="built_in">wstring</span>(row_data.<span class="built_in">GetString</span>()));</span><br><span class="line">        <span class="keyword">if</span> (distance &lt; minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            bestMatch = row_data.<span class="built_in">GetString</span>();</span><br><span class="line">            bestMatchId = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果输出到编辑框</span></span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowText</span>(bestMatch.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">//CString content = GetReplyContent(bestMatch.c_str());</span></span><br><span class="line">    CString content = <span class="built_in">GetReplyContentById</span>(bestMatchId);</span><br><span class="line">    m_edtResponse.<span class="built_in">SetWindowTextW</span>(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pNewText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="八、连接MYSQL数据库，获取对照文本"><a href="#八、连接MYSQL数据库，获取对照文本" class="headerlink" title="八、连接MYSQL数据库，获取对照文本"></a>八、连接MYSQL数据库，获取对照文本</h1><p><a href="https://blog.csdn.net/qq_31762741/article/details/115044657">Visual Studio 2019连接MySQL数据库详细教程_visual studio服务器资源管理器 数据连接-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接的字符集</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出查询结果</span></span><br><span class="line">    <span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line">    <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        CString m_data;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                CString errorMsg;</span><br><span class="line">                errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line">                <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 去除最后一个空字符</span></span><br><span class="line">            <span class="keyword">if</span> (!wstr.<span class="built_in">empty</span>() &amp;&amp; wstr.<span class="built_in">back</span>() == <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                wstr.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), wstr.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        m_database.<span class="built_in">push_back</span>(m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放结果集</span></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示查询结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><h3 id="1、找不到mysql-h"><a href="#1、找不到mysql-h" class="headerlink" title="1、找不到mysql.h"></a>1、找不到mysql.h</h3><p>解决方案：将mysql的include路径和lib路径设置在项目属性中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\include</span><br><span class="line"></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\lib</span><br><span class="line"></span><br><span class="line">链接器找到libmysql.lib,添加进去即可</span><br></pre></td></tr></table></figure><h3 id="2、mysql查找的数据是？乱码"><a href="#2、mysql查找的数据是？乱码" class="headerlink" title="2、mysql查找的数据是？乱码"></a>2、mysql查找的数据是？乱码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集为utf8mb4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，对得到的字符还要转换为宽字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br></pre></td></tr></table></figure><h1 id="九、语音识别结果处理"><a href="#九、语音识别结果处理" class="headerlink" title="九、语音识别结果处理"></a>九、语音识别结果处理</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CString <span class="title">CSapiASRDlg::GetReplyContentById</span><span class="params">(<span class="type">int</span> testId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    CString replyContent;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建查询语句</span></span><br><span class="line"></span><br><span class="line">    std::string query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(testId);</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(query.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT content FROM ReplyContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line">            replyContent = wstr.<span class="built_in">c_str</span>();</span><br><span class="line">            <span class="built_in">speak</span>(wstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> replyContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是添加了详细注释的 Levenshtein 距离算法代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CSapiASRDlg::levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取两个字符串的长度</span></span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">m</span><span class="params">(s<span class="number">1.</span>size())</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">n</span><span class="params">(s<span class="number">2.</span>size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果第一个字符串为空，返回第二个字符串的长度</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="comment">// 如果第二个字符串为空，返回第一个字符串的长度</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 (m+1) x (n+1) 的二维矩阵，用于存储计算结果</span></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">size_t</span>&gt;&gt; <span class="built_in">matrix</span>(m + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">size_t</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化第一列，表示将 s1 转换为空字符串的代价</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= m; ++i) matrix[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="comment">// 初始化第一行，表示将空字符串转换为 s2 的代价</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt;= n; ++j) matrix[<span class="number">0</span>][j] = j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算矩阵的其他元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果字符相同，代价为 0，否则代价为 1</span></span><br><span class="line">            <span class="type">size_t</span> cost = (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 计算删除、插入和替换操作的代价</span></span><br><span class="line">            <span class="type">size_t</span> deletion = matrix[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> insertion = matrix[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> substitution = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] + cost;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取三者中的最小值</span></span><br><span class="line">            <span class="type">size_t</span> minValue = deletion;</span><br><span class="line">            <span class="keyword">if</span> (insertion &lt; minValue)</span><br><span class="line">                minValue = insertion;</span><br><span class="line">            <span class="keyword">if</span> (substitution &lt; minValue)</span><br><span class="line">                minValue = substitution;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将计算结果存储在矩阵中</span></span><br><span class="line">            matrix[i][j] = minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终的 Levenshtein 距离</span></span><br><span class="line">    <span class="type">size_t</span> distance = matrix[m][n];</span><br><span class="line">    <span class="comment">// 计算两个字符串长度的差异</span></span><br><span class="line">    <span class="type">size_t</span> lengthDifference = std::<span class="built_in">abs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m) - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加长度差异的惩罚项，使用比例因子调整权重</span></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> lengthPenaltyFactor = <span class="number">0.5f</span>; <span class="comment">// 可根据需要调整比例因子</span></span><br><span class="line">    <span class="type">size_t</span> lengthPenalty = <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(lengthDifference * lengthPenaltyFactor);</span><br><span class="line">    <span class="comment">// 将惩罚项添加到最终距离中</span></span><br><span class="line">    distance += lengthPenalty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最终的距离</span></span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::jaroWinklerDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> len1 = s<span class="number">1.</span><span class="built_in">size</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> len2 = s<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len1 == <span class="number">0</span> || len2 == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义实现 std::max 和 std::min</span></span><br><span class="line">    <span class="keyword">auto</span> customMax = [](<span class="type">size_t</span> a, <span class="type">size_t</span> b) -&gt; <span class="type">size_t</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> customMin = [](<span class="type">size_t</span> a, <span class="type">size_t</span> b) -&gt; <span class="type">size_t</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> matchWindow = <span class="built_in">customMax</span>(len1, len2) / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">s1Matches</span><span class="params">(len1, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">s2Matches</span><span class="params">(len2, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="type">size_t</span> matches = <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> transpositions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find matches</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> start = <span class="built_in">customMax</span>(i &gt; matchWindow ? i - matchWindow : <span class="number">0</span>, <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(<span class="number">0</span>));</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> end = <span class="built_in">customMin</span>(i + matchWindow + <span class="number">1</span>, len2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = start; j &lt; end; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s2Matches[j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s1[i] != s2[j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            s1Matches[i] = <span class="literal">true</span>;</span><br><span class="line">            s2Matches[j] = <span class="literal">true</span>;</span><br><span class="line">            ++matches;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (matches == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len1; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s1Matches[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!s2Matches[k])</span><br><span class="line">            ++k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s1[i] != s2[k])</span><br><span class="line">            ++transpositions;</span><br><span class="line"></span><br><span class="line">        ++k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> jaro = (matches / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(len1) +</span><br><span class="line">        matches / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(len2) +</span><br><span class="line">        (matches - transpositions / <span class="number">2.0f</span>) / <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(matches)) / <span class="number">3.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply Winkler bonus for common prefix</span></span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> prefixLength = <span class="built_in">customMin</span>(<span class="built_in">customMin</span>(len1, len2), <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(<span class="number">4</span>));</span><br><span class="line">    <span class="type">size_t</span> commonPrefix = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (commonPrefix &lt; prefixLength &amp;&amp; s1[commonPrefix] == s2[commonPrefix])</span><br><span class="line">        ++commonPrefix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jaro + <span class="number">0.1f</span> * commonPrefix * (<span class="number">1.0f</span> - jaro);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::cosineSimilarity</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::unordered_map&lt;<span class="type">wchar_t</span>, <span class="type">size_t</span>&gt; freq1, freq2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算频率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : s1)</span><br><span class="line">        ++freq1[c];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : s2)</span><br><span class="line">        ++freq2[c];</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> dotProduct = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="type">float</span> norm1 = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="type">float</span> norm2 = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算点积</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : freq1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> it = freq<span class="number">2.f</span>ind(key);</span><br><span class="line">        <span class="keyword">if</span> (it != freq<span class="number">2.</span><span class="built_in">end</span>())</span><br><span class="line">            dotProduct += value * it-&gt;second;</span><br><span class="line"></span><br><span class="line">        norm1 += value * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算范数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [key, value] : freq2)</span><br><span class="line">        norm2 += value * value;</span><br><span class="line"></span><br><span class="line">    norm1 = std::<span class="built_in">sqrt</span>(norm1);</span><br><span class="line">    norm2 = std::<span class="built_in">sqrt</span>(norm2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理范数为零的情况</span></span><br><span class="line">    <span class="keyword">if</span> (norm1 == <span class="number">0.0f</span> || norm2 == <span class="number">0.0f</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dotProduct / (norm1 * norm2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::jaccardSimilarity</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::unordered_set&lt;<span class="type">wchar_t</span>&gt; <span class="title">set1</span><span class="params">(s<span class="number">1.</span>begin(), s<span class="number">1.</span>end())</span></span>;</span><br><span class="line">    <span class="function">std::unordered_set&lt;<span class="type">wchar_t</span>&gt; <span class="title">set2</span><span class="params">(s<span class="number">2.</span>begin(), s<span class="number">2.</span>end())</span></span>;</span><br><span class="line"></span><br><span class="line">    std::unordered_set&lt;<span class="type">wchar_t</span>&gt; intersection;</span><br><span class="line">    <span class="function">std::unordered_set&lt;<span class="type">wchar_t</span>&gt; <span class="title">unionSet</span><span class="params">(set1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : set2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (set<span class="number">1.f</span>ind(c) != set<span class="number">1.</span><span class="built_in">end</span>())</span><br><span class="line">            intersection.<span class="built_in">insert</span>(c);</span><br><span class="line">        unionSet.<span class="built_in">insert</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unionSet.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(intersection.<span class="built_in">size</span>()) / unionSet.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to compute Sift4 similarity</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::unordered_set&lt;std::wstring&gt; <span class="title">generateCharacterPairs</span><span class="params">(<span class="type">const</span> std::wstring&amp; str)</span> </span>&#123;</span><br><span class="line">    std::unordered_set&lt;std::wstring&gt; pairs;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> pairs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        pairs.<span class="built_in">insert</span>(str.<span class="built_in">substr</span>(i, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pairs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CSapiASRDlg::sift4Similarity</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 生成字符对</span></span><br><span class="line">    <span class="keyword">auto</span> pairs1 = <span class="built_in">generateCharacterPairs</span>(s1);</span><br><span class="line">    <span class="keyword">auto</span> pairs2 = <span class="built_in">generateCharacterPairs</span>(s2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算交集</span></span><br><span class="line">    std::unordered_set&lt;std::wstring&gt; intersection;</span><br><span class="line">    <span class="function">std::unordered_set&lt;std::wstring&gt; <span class="title">unionSet</span><span class="params">(pairs1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : pairs2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pairs<span class="number">1.f</span>ind(pair) != pairs<span class="number">1.</span><span class="built_in">end</span>()) &#123;</span><br><span class="line">            intersection.<span class="built_in">insert</span>(pair);</span><br><span class="line">        &#125;</span><br><span class="line">        unionSet.<span class="built_in">insert</span>(pair);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unionSet.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算相似度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(intersection.<span class="built_in">size</span>()) / unionSet.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><p><strong>字符串长度获取</strong>:</p><ul><li><code>const size_t m(s1.size());</code> 获取第一个字符串的长度。</li><li><code>const size_t n(s2.size());</code> 获取第二个字符串的长度。</li></ul></li><li><p><strong>处理空字符串的情况</strong>:</p><ul><li>如果 <code>s1</code> 为空，返回 <code>s2</code> 的长度。</li><li>如果 <code>s2</code> 为空，返回 <code>s1</code> 的长度。</li></ul></li><li><p><strong>初始化矩阵</strong>:</p><ul><li>创建一个大小为 <code>(m+1) x (n+1)</code> 的二维矩阵 <code>matrix</code>，用于存储中间计算结果。</li><li>初始化第一列和第一行，表示将字符串转换为空字符串或从空字符串转换的代价。</li></ul></li><li><p><strong>填充矩阵</strong>:</p><ul><li>遍历每个字符，计算删除、插入和替换操作的代价，并取三者中的最小值，存储在矩阵中。</li></ul></li><li><p><strong>计算最终的 Levenshtein 距离</strong>:</p><ul><li><code>size_t distance = matrix[m][n];</code> 获取最终的 Levenshtein 距离。</li><li>计算两个字符串长度的差异，并根据比例因子 <code>lengthPenaltyFactor</code> 调整权重，添加到最终距离中。</li></ul></li></ol><p>通过这种方法，可以在计算 Levenshtein 距离时更好地考虑字符串长度的差异，同时避免相同长度字符串都跑到一个去的问题。</p><h1 id="十、语音播报"><a href="#十、语音播报" class="headerlink" title="十、语音播报"></a>十、语音播报</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CComPtr&lt;ISpVoice&gt; pVoice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 COM 库</span></span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 SAPI 语音实例</span></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 朗读文本</span></span><br><span class="line">        hr = pVoice-&gt;<span class="built_in">Speak</span>(text.<span class="built_in">c_str</span>(), SPF_DEFAULT, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十一、数据库账号保存在文件中"><a href="#十一、数据库账号保存在文件中" class="headerlink" title="十一、数据库账号保存在文件中"></a>十一、数据库账号保存在文件中</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置文件函数</span></span><br><span class="line"><span class="function">std::map&lt;std::string, std::string&gt; <span class="title">readConfigFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">    std::map&lt;std::string, std::string&gt; config;</span><br><span class="line">    std::string line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::<span class="built_in">getline</span>(file, line))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> pos = line.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos != std::string::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            std::string key = line.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">            std::string value = line.<span class="built_in">substr</span>(pos + <span class="number">1</span>);</span><br><span class="line">            config[key] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; config = <span class="built_in">readConfigFile</span>(<span class="string">&quot;db_config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = config[<span class="string">&quot;server&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = config[<span class="string">&quot;user&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = config[<span class="string">&quot;password&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = config[<span class="string">&quot;database&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导出数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p VoiceAssistant &gt; VoiceAssistant.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>-u root</code> 指定 MySQL 用户名为 <code>root</code>。</li><li><code>-p</code> 提示输入密码。</li><li><code>VoiceAssistant</code> 是要导出的数据库名称。</li><li><code>&gt; VoiceAssistant.sql</code> 将输出重定向到 <code>VoiceAssistant.sql</code> 文件。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span>  <span class="comment">// 添加 SAPI 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(push)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphelper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span>  <span class="comment">// 添加 atomic 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(pop)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WM_USER_UPDATE_TEXT (WM_USER + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSapiASRDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CSapiASRDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CSapiASRDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; IDD = IDD_SAPIASR_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">afx_msg LRESULT <span class="title">OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PerformRecognition</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">connectToDatabase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span>;</span><br><span class="line">    <span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InitializeSAPI</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">OnRecognition</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    HICON m_hIcon;</span><br><span class="line">    CComPtr&lt;ISpRecognizer&gt; m_pRecognizer;</span><br><span class="line">    CComPtr&lt;ISpRecoContext&gt; m_pRecoContext;</span><br><span class="line">    CComPtr&lt;ISpRecoGrammar&gt; m_pGrammar;</span><br><span class="line">    CComPtr&lt;ISpAudio&gt; m_cpAudio;</span><br><span class="line">    CEdit m_edtText;</span><br><span class="line">    CString m_lastRecognizedText;</span><br><span class="line">    HANDLE m_hThread;</span><br><span class="line">    <span class="type">bool</span> m_bRunning;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;CString&gt; m_database;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CEdit m_edtResult;</span><br><span class="line">    CEdit m_edtIdResult;</span><br><span class="line">    CEdit m_edtResponse;</span><br><span class="line">    CEdit m_edtIdResponse;</span><br><span class="line">    <span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonClear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">GetReplyContent</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span>;</span><br><span class="line">    <span class="function">CString <span class="title">GetReplyContentById</span><span class="params">(<span class="type">int</span> testId)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SapiASR.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SapiASRDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(push)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphelper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(pop)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlbase.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取配置文件函数</span></span><br><span class="line"><span class="function">std::map&lt;std::string, std::string&gt; <span class="title">readConfigFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">    std::map&lt;std::string, std::string&gt; config;</span><br><span class="line">    std::string line;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::<span class="built_in">getline</span>(file, line))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">size_t</span> pos = line.<span class="built_in">find</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos != std::string::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            std::string key = line.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">            std::string value = line.<span class="built_in">substr</span>(pos + <span class="number">1</span>);</span><br><span class="line">            config[key] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WM_USER_UPDATE_TEXT (WM_USER + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line">CSapiASRDlg::<span class="built_in">CSapiASRDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">    : <span class="built_in">CDialogEx</span>(IDD_SAPIASR_DIALOG, pParent),</span><br><span class="line">    <span class="built_in">m_pRecognizer</span>(<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">m_pRecoContext</span>(<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">m_pGrammar</span>(<span class="literal">NULL</span>),</span><br><span class="line">    <span class="built_in">m_bRunning</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">    <span class="built_in">connectToDatabase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_RESULT, m_edtResult);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_RESPONSE, m_edtResponse);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_ID_RESULT, m_edtIdResult);</span><br><span class="line">    <span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_ID_RESPONSE, m_edtIdResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CSapiASRDlg, CDialogEx)</span><br><span class="line">    <span class="built_in">ON_MESSAGE</span>(WM_USER_UPDATE_TEXT, &amp;CSapiASRDlg::OnUpdateText)</span><br><span class="line">    <span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line">    <span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line">    <span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CSapiASRDlg::OnBnClickedButtonStart)</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CSapiASRDlg::OnBnClickedButtonStop)</span><br><span class="line">    <span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_CLEAR, &amp;CSapiASRDlg::OnBnClickedButtonClear)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CSapiASRDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line">    <span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">    CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line">    <span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BOOL bNameValid;</span><br><span class="line">        CString strAboutMenu;</span><br><span class="line">        bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line">        <span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line">        <span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">            pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SetIcon</span>(m_hIcon, TRUE);</span><br><span class="line">    <span class="built_in">SetIcon</span>(m_hIcon, FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitializeSAPI</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">    &#123;</span><br><span class="line">        CAboutDlg dlgAbout;</span><br><span class="line">        dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line">        <span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">        CRect rect;</span><br><span class="line">        <span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line">        <span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HCURSOR <span class="title">CSapiASRDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::InitializeSAPI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer.<span class="built_in">CoCreateInstance</span>(CLSID_SpInprocRecognizer);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognizer: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">CreateRecoContext</span>(&amp;m_pRecoContext);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create recognition context: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">CreateGrammar</span>(<span class="number">1</span>, &amp;m_pGrammar);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">LoadDictation</span>(<span class="literal">NULL</span>, SPLO_STATIC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to load dictation grammar: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set dictation state: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetNotifyWin32Event</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set notify event: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecoContext-&gt;<span class="built_in">SetInterest</span>(<span class="built_in">SPFEI</span>(SPEI_RECOGNITION), <span class="built_in">SPFEI</span>(SPEI_RECOGNITION));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set interest for recognition events: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpMMAudioIn, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpAudio, (<span class="type">void</span>**)&amp;m_cpAudio);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to create audio input object: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hr = m_pRecognizer-&gt;<span class="built_in">SetInput</span>(m_cpAudio, TRUE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CString message;</span><br><span class="line">        message.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to set audio input: 0x%08X&quot;</span>), hr);</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(message);</span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Initialize SAPI is successful&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSapiASRDlg::~<span class="built_in">CSapiASRDlg</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        m_bRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pGrammar)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecoContext)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecoContext.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_pRecognizer)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pRecognizer.<span class="built_in">Release</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition started.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_bRunning)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition is not started.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HRESULT hr = m_pGrammar-&gt;<span class="built_in">SetDictationState</span>(SPRS_INACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to stop recognition.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_bRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里进行语音识别，并将结果显示在编辑框中</span></span><br><span class="line">    <span class="built_in">PerformRecognition</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recognition stopped.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::PerformRecognition</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = m_pRecoContext-&gt;<span class="built_in">WaitForNotifyEvent</span>(<span class="number">1000</span>);  <span class="comment">// 1-second timeout</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CSpEvent event;</span><br><span class="line">    <span class="keyword">while</span> (event.<span class="built_in">GetFrom</span>(m_pRecoContext) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.eEventId == SPEI_RECOGNITION)</span><br><span class="line">        &#123;</span><br><span class="line">            ISpRecoResult* pResult = event.<span class="built_in">RecoResult</span>();</span><br><span class="line">            <span class="keyword">if</span> (pResult)</span><br><span class="line">            &#123;</span><br><span class="line">                LPWSTR pwszText = <span class="literal">nullptr</span>;</span><br><span class="line">                hr = pResult-&gt;<span class="built_in">GetText</span>(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE, FALSE, &amp;pwszText, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">                &#123;</span><br><span class="line">                    CString* pNewText = <span class="keyword">new</span> <span class="built_in">CString</span>(pwszText);</span><br><span class="line">                    <span class="built_in">PostMessage</span>(WM_USER_UPDATE_TEXT, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(pNewText), <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">CoTaskMemFree</span>(pwszText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; config = <span class="built_in">readConfigFile</span>(<span class="string">&quot;db_config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = config[<span class="string">&quot;server&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = config[<span class="string">&quot;user&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = config[<span class="string">&quot;password&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = config[<span class="string">&quot;database&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置连接的字符集</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出查询结果</span></span><br><span class="line">    <span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line">    <span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        CString m_data;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                CString errorMsg;</span><br><span class="line">                errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line">                <span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 去除最后一个空字符</span></span><br><span class="line">            <span class="keyword">if</span> (!wstr.<span class="built_in">empty</span>() &amp;&amp; wstr.<span class="built_in">back</span>() == <span class="string">L&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">                wstr.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_data.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), wstr.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        m_database.<span class="built_in">push_back</span>(m_data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放结果集</span></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//// 显示查询结果</span></span><br><span class="line">    <span class="comment">//for (const auto&amp; row : m_database)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    AfxMessageBox(row);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::OnBnClickedButtonClear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_edtText.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtResponse.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtIdResult.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    m_edtIdResponse.<span class="built_in">SetWindowTextW</span>(_T(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Levenshtein 距离算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CSapiASRDlg::levenshteinDistance</span><span class="params">(<span class="type">const</span> std::wstring&amp; s1, <span class="type">const</span> std::wstring&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">m</span><span class="params">(s<span class="number">1.</span>size())</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">size_t</span> <span class="title">n</span><span class="params">(s<span class="number">2.</span>size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> m;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">size_t</span>&gt;&gt; <span class="built_in">matrix</span>(m + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">size_t</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= m; ++i) matrix[i][<span class="number">0</span>] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt;= n; ++j) matrix[<span class="number">0</span>][j] = j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">size_t</span> cost = (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>]) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> deletion = matrix[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> insertion = matrix[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">size_t</span> substitution = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] + cost;</span><br><span class="line"></span><br><span class="line">            <span class="type">size_t</span> minValue = deletion;</span><br><span class="line">            <span class="keyword">if</span> (insertion &lt; minValue)</span><br><span class="line">                minValue = insertion;</span><br><span class="line">            <span class="keyword">if</span> (substitution &lt; minValue)</span><br><span class="line">                minValue = substitution;</span><br><span class="line"></span><br><span class="line">            matrix[i][j] = minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> distance = matrix[m][n];</span><br><span class="line">    <span class="type">size_t</span> lengthDifference = std::<span class="built_in">abs</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(m) - <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加长度差异的惩罚项，使用比例因子调整权重</span></span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> lengthPenaltyFactor = <span class="number">0.5f</span>; <span class="comment">// 可根据需要调整比例因子</span></span><br><span class="line">    <span class="type">size_t</span> lengthPenalty = <span class="built_in">static_cast</span>&lt;<span class="type">size_t</span>&gt;(lengthDifference * lengthPenaltyFactor);</span><br><span class="line">    distance += lengthPenalty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT <span class="title">CSapiASRDlg::OnUpdateText</span><span class="params">(WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CString* pNewText = <span class="built_in">reinterpret_cast</span>&lt;CString*&gt;(wParam);</span><br><span class="line">    <span class="keyword">if</span> (pNewText)</span><br><span class="line">    &#123;</span><br><span class="line">        m_edtText.<span class="built_in">SetWindowText</span>(*pNewText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::wstring <span class="title">newText</span><span class="params">((*pNewText).GetString())</span></span>;</span><br><span class="line">    std::wstring bestMatch;</span><br><span class="line">    <span class="type">int</span> bestMatchId = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> minDistance = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row_data : m_database)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> distance = <span class="built_in">levenshteinDistance</span>(newText, std::<span class="built_in">wstring</span>(row_data.<span class="built_in">GetString</span>()));</span><br><span class="line">        <span class="comment">//double distance = jaroWinklerDistance(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="comment">//double distance = cosineSimilarity(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="comment">//double distance = jaccardSimilarity(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="comment">//double distance = sift4Similarity(newText, std::wstring(row_data.GetString()));</span></span><br><span class="line">        <span class="keyword">if</span> (distance &lt; minDistance)</span><br><span class="line">        &#123;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">            bestMatch = row_data.<span class="built_in">GetString</span>();</span><br><span class="line">            bestMatchId = i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最相似的结果输出到编辑框</span></span><br><span class="line">    CString idResult;</span><br><span class="line">    idResult.<span class="built_in">Format</span>(_T(<span class="string">&quot;%d&quot;</span>), bestMatchId);</span><br><span class="line">    m_edtIdResult.<span class="built_in">SetWindowText</span>(idResult);</span><br><span class="line">    m_edtResult.<span class="built_in">SetWindowText</span>(bestMatch.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">//CString content = GetReplyContent(bestMatch.c_str());</span></span><br><span class="line">    CString content = <span class="built_in">GetReplyContentById</span>(bestMatchId);</span><br><span class="line">    m_edtIdResponse.<span class="built_in">SetWindowTextW</span>(idResult);</span><br><span class="line">    m_edtResponse.<span class="built_in">SetWindowTextW</span>(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pNewText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CSapiASRDlg::GetReplyContentById</span><span class="params">(<span class="type">int</span> testId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MYSQL* conn;</span><br><span class="line">    MYSQL_RES* res;</span><br><span class="line">    MYSQL_ROW row;</span><br><span class="line">    CString replyContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取配置文件</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt; config = <span class="built_in">readConfigFile</span>(<span class="string">&quot;db_config.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* server = config[<span class="string">&quot;server&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* user = config[<span class="string">&quot;user&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* password = config[<span class="string">&quot;password&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* database = config[<span class="string">&quot;database&quot;</span>].<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">    conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建查询语句</span></span><br><span class="line"></span><br><span class="line">    std::string query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(testId);</span><br><span class="line">    <span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(query.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT content FROM ReplyContent failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line">        <span class="built_in">mysql_close</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> replyContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line">            <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line">            replyContent = wstr.<span class="built_in">c_str</span>();</span><br><span class="line">            <span class="built_in">speak</span>(wstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">    <span class="built_in">mysql_close</span>(conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> replyContent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CSapiASRDlg::speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CComPtr&lt;ISpVoice&gt; pVoice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 COM 库</span></span><br><span class="line">    HRESULT hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 SAPI 语音实例</span></span><br><span class="line">    hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 朗读文本</span></span><br><span class="line">        hr = pVoice-&gt;<span class="built_in">Speak</span>(text.<span class="built_in">c_str</span>(), SPF_DEFAULT, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语音识别_模拟AI(三)</title>
      <link href="/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%A8%A1%E6%8B%9FAI%E5%8A%9F%E8%83%BD/"/>
      <url>/2024/08/04/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/%E6%A8%A1%E6%8B%9FAI%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="一、AI模拟功能需求"><a href="#一、AI模拟功能需求" class="headerlink" title="一、AI模拟功能需求"></a>一、AI模拟功能需求</h1><h2 id="1-功能概述"><a href="#1-功能概述" class="headerlink" title="1 功能概述"></a><strong>1</strong> 功能概述</h2><p>模拟AI进行语音对话，实现语音控制软件进行交互功能。</p><h2 id="2-详细说明"><a href="#2-详细说明" class="headerlink" title="2 详细说明"></a><strong>2</strong> 详细说明</h2><p>自定义语音助手名称，类似小爱、小度等。（数据库存储）</p><h3 id="2-1-语音助手功能"><a href="#2-1-语音助手功能" class="headerlink" title="2.1 语音助手功能"></a>2.1 <strong>语音助手功能</strong></h3><ol><li><p>软件启动后，默认启动识别功能</p></li><li><p>识别到呼唤助手名称，语音播报进行回复（我在）</p></li><li><p>识别到口呼常用语后，根据内容进行语音回复或进行内容播报</p></li></ol><h3 id="2-2-设计说明"><a href="#2-2-设计说明" class="headerlink" title="2.2 设计说明"></a>2.2 <strong>设计说明</strong></h3><h4 id="2-2-1-数据库"><a href="#2-2-1-数据库" class="headerlink" title="2.2.1 数据库"></a>2.2.1 数据库</h4><ul><li><p>口呼常用语存储本地数据库，包括语音助手的名称</p></li><li><p>回复的内容存储本地数据库</p></li></ul><h4 id="2-2-2-交互实现"><a href="#2-2-2-交互实现" class="headerlink" title="2.2.2 交互实现"></a>2.2.2 交互实现</h4><ul><li><p>识别到内容与数据库中第一条一致，语音回复数据库第一条内容 <strong>我在</strong></p></li><li><p>识别到内容与数据库中其它内容一致，语音回复数据库中对应ID的内容</p></li></ul><h1 id="二、数据库内容"><a href="#二、数据库内容" class="headerlink" title="二、数据库内容"></a>二、数据库内容</h1><table><thead><tr><th>识别数据库内容</th><th></th><th>回复数据库内容</th><th></th><th></th></tr></thead><tbody><tr><td>序号</td><td>内容</td><td></td><td>序号</td><td>内容</td></tr><tr><td>0</td><td>小度小度</td><td></td><td>0</td><td>我在</td></tr><tr><td>1</td><td>调车白灯-8</td><td></td><td>1</td><td>调车白灯</td></tr><tr><td>2</td><td>负载断开</td><td></td><td>2</td><td>负载断开</td></tr><tr><td>3</td><td>进路开通 8</td><td></td><td>3</td><td>进路开通</td></tr><tr><td>4</td><td>母线重联、负载断开</td><td></td><td>4</td><td>母线重联、负载断开</td></tr><tr><td>5</td><td>注意进站</td><td></td><td>5</td><td>注意进站</td></tr><tr><td>6</td><td>开左侧门</td><td></td><td>6</td><td>开左侧门</td></tr><tr><td>7</td><td>欢迎您乘坐5号线列车</td><td></td><td>7</td><td>欢迎您乘坐5号线列车</td></tr><tr><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td><td></td><td>8</td><td>列车运行前方是北京站，请下车的乘客做好准备</td></tr><tr><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td><td></td><td>9</td><td>列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见</td></tr><tr><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td><td></td><td>10</td><td>各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作</td></tr><tr><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td><td></td><td>11</td><td>各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作</td></tr><tr><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td><td></td><td>12</td><td>各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作</td></tr><tr><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td><td></td><td>13</td><td>各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解</td></tr></tbody></table><h1 id="三、数据库实现"><a href="#三、数据库实现" class="headerlink" title="三、数据库实现"></a>三、数据库实现</h1><h2 id="1、启动mysql"><a href="#1、启动mysql" class="headerlink" title="1、启动mysql"></a>1、启动mysql</h2><p>用户密码：还是我的常用密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="comment">--version</span></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql<span class="number">-5.7</span><span class="number">.24</span><span class="operator">-</span>winx64\bin\mysql.exe  Ver <span class="number">14.14</span> Distrib <span class="number">5.7</span><span class="number">.24</span>, <span class="keyword">for</span> Win64 (x86_64)</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> net <span class="keyword">start</span> mysql</span><br><span class="line">请求的服务已经启动。</span><br><span class="line"></span><br><span class="line">请键入 NET HELPMSG <span class="number">2182</span> 以获得更多的帮助。</span><br><span class="line"></span><br><span class="line">PS D:\ASR\pocketsphinx<span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h2 id="2、MySQL-数据库配置与插入中文数据"><a href="#2、MySQL-数据库配置与插入中文数据" class="headerlink" title="2、MySQL 数据库配置与插入中文数据"></a>2、MySQL 数据库配置与插入中文数据</h2><p>在 MySQL 中，插入中文数据需要确保数据库和表的字符集设置为支持中文的字符集（如 utf8mb4）。以下是创建数据库和表结构以及插入中文数据的正确方法。</p><h3 id="1-创建数据库和表结构"><a href="#1-创建数据库和表结构" class="headerlink" title="1. 创建数据库和表结构"></a>1. 创建数据库和表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库并设置字符集</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE VoiceAssistant <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用创建的数据库</span></span><br><span class="line">USE VoiceAssistant;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建识别内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> RecognizeContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建回复内容表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ReplyContent (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入识别内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> RecognizeContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;小度小度&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入回复内容</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ReplyContent (content) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;我在&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;调车白灯&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;进路开通&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;母线重联、负载断开&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;注意进站&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;开左侧门&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;欢迎您乘坐5号线列车&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是北京站，请下车的乘客做好准备&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;列车运行前方是本次列车的终点站北京站，请您做好准备。感谢您乘坐本次列车，再见&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客，为保证正点运营，请您不要挤靠车门，以免影响正常发车，谢谢合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车现在关门，上不去车的乘客，请您等候下次列车，谢谢您的支持与合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，现在是高峰时间，乘客较多，请您配合我们抓紧时间上、下车，谢谢您的合作&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;各位乘客您好，列车自动广播系统发生故障，给您带来的不便，敬请谅解&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="语音播报"><a href="#语音播报" class="headerlink" title="语音播报"></a>语音播报</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Windows TTS进行语音播报</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span> </span>&#123;</span><br><span class="line">    ISpVoice* pVoice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>)))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    HRESULT hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span> **)&amp;pVoice);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr)) &#123;</span><br><span class="line">        <span class="function">std::wstring <span class="title">wtext</span><span class="params">(text.begin(), text.end())</span></span>;</span><br><span class="line">        hr = pVoice-&gt;<span class="built_in">Speak</span>(wtext.<span class="built_in">c_str</span>(), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        pVoice-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        pVoice = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、初始语言识别代码"><a href="#四、初始语言识别代码" class="headerlink" title="四、初始语言识别代码"></a>四、初始语言识别代码</h1><p>将应用pocketsphinx,portaudio技术的语言识别代码替换到新项目AIVoiceAssistant中，作为项目修改的原始代码</p><p>代码主要在dlg.g，dlg.cpp，以及项目配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">VC++目录 的 包含目录</span><br><span class="line">D:\DevelopmentTools\vcpkg\packages\portaudio_x64-windows\include</span><br><span class="line">D:\ASR\pocketsphinx\include</span><br><span class="line">D:\ASR\sphinxbase\include\win32</span><br><span class="line">D:\ASR\sphinxbase\include</span><br><span class="line"></span><br><span class="line">VC++目录的库目录</span><br><span class="line">D:\DevelopmentTools\vcpkg\packages\portaudio_x64-windows\lib</span><br><span class="line">D:\ASR\pocketsphinx\bin\Debug\x64</span><br><span class="line">D:\ASR\sphinxbase\bin\Debug\x64</span><br><span class="line"></span><br><span class="line">链接器输入的附加依赖项</span><br><span class="line">sphinxbase.lib</span><br><span class="line">pocketsphinx.lib</span><br><span class="line">portaudio.lib</span><br><span class="line"></span><br><span class="line">链接器常规的附加库目录</span><br><span class="line">D:\DevelopmentTools\vcpkg\packages\portaudio_x64-windows\lib</span><br><span class="line">D:\ASR\pocketsphinx\bin\Debug\x64</span><br><span class="line">D:\ASR\sphinxbase\bin\Debug\x64</span><br></pre></td></tr></table></figure><p>还需要将sphinxbase.dll，pocketsphinx.dll，portaudio.dll复制文件放在代码路径下（存放编写代码的文件夹中）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.h: 头文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含必要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;portaudio.h&gt;</span>       <span class="comment">// PortAudio 库头文件，用于音频输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pocketsphinx.h&gt;</span>    <span class="comment">// PocketSphinx 库头文件，用于语音识别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/ad.h&gt;</span>   <span class="comment">// SphinxBase 库头文件，用于音频录制</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/err.h&gt;</span>  <span class="comment">// SphinxBase 库头文件，用于错误处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>           <span class="comment">// 文件操作头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>            <span class="comment">// 字符串处理头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>               <span class="comment">// 集合容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlstr.h&gt;</span>          <span class="comment">// ATL 字符串类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>            <span class="comment">// 线程库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>            <span class="comment">// 向量容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>         <span class="comment">// 算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span>            <span class="comment">// 本地化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span>           <span class="comment">// 编码转换头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>          <span class="comment">// 输入输出流头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_ID 999 <span class="comment">// 定义定时器 ID</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAIVoiceAssistantDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_AIVOICEASSISTANT_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;<span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HICON m_hIcon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的消息映射函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnDestroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>; <span class="comment">// 定时器处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::vector&lt;int16&gt; m_audioBuffer;   <span class="comment">// 用于存储音频数据</span></span><br><span class="line"><span class="type">bool</span> m_bListening = <span class="literal">false</span>;<span class="comment">// 语音识别信号</span></span><br><span class="line"><span class="type">cmd_ln_t</span>* m_config = <span class="literal">nullptr</span>;<span class="comment">// 配置参数指针</span></span><br><span class="line"><span class="type">ps_decoder_t</span>* m_ps = <span class="literal">nullptr</span>;<span class="comment">// PocketSphinx 解码器指针</span></span><br><span class="line"><span class="type">ad_rec_t</span>* m_ad = <span class="literal">nullptr</span>;<span class="comment">// 音频录制指针</span></span><br><span class="line">uint8 utt_started = FALSE;<span class="comment">// 标志是否开始录制</span></span><br><span class="line"></span><br><span class="line">PaStream* m_stream = <span class="literal">nullptr</span>;<span class="comment">// PortAudio 流指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RecordAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessRecordedAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span>;</span><br><span class="line"><span class="function">CString <span class="title">ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::thread m_thread; <span class="comment">// 用于音频录制和处理的线程</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistant.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistantDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048) <span class="comment">// 调整缓冲区大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;</span><br><span class="line"><span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 双声道转单声道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CAIVoiceAssistantDlg::<span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_AIVOICEASSISTANT_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAIVoiceAssistantDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStart)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStop)</span><br><span class="line"><span class="built_in">ON_WM_DESTROY</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CAIVoiceAssistantDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CAIVoiceAssistantDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 清空音频缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PortAudio</span></span><br><span class="line">PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频流参数</span></span><br><span class="line">PaStreamParameters inputParameters;</span><br><span class="line">inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line"><span class="keyword">if</span> (inputParameters.device == paNoDevice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 双声道</span></span><br><span class="line">inputParameters.sampleFormat = paInt16; <span class="comment">// 16 位整数</span></span><br><span class="line">inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开音频流</span></span><br><span class="line">err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">&amp;m_stream,</span><br><span class="line">&amp;inputParameters,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line"><span class="number">48000</span>, <span class="comment">// 采样率</span></span><br><span class="line"><span class="number">2048</span>, <span class="comment">// 缓冲区大小</span></span><br><span class="line">paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有回调</span></span><br><span class="line"><span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to open PortAudio stream: %s&quot;</span>), <span class="built_in">Pa_GetErrorText</span>(err));</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动音频流</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标志以启动录音</span></span><br><span class="line">m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动录音线程</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CAIVoiceAssistantDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();  <span class="comment">// 分离线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line"><span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"><span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m_bListening)</span><br><span class="line">&#123;</span><br><span class="line">PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line"><span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单声道数据添加到缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止音频流</span></span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CAIVoiceAssistantDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to open audio file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;int16&gt; <span class="title">audioData</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioData.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No audio data read from file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, audioData.<span class="built_in">data</span>(), audioData.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(int16), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString result = <span class="built_in">CString</span>(hyp);</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、连接MYSQL数据库"><a href="#五、连接MYSQL数据库" class="headerlink" title="五、连接MYSQL数据库"></a>五、连接MYSQL数据库</h1><p><a href="https://blog.csdn.net/qq_31762741/article/details/115044657">Visual Studio 2019连接MySQL数据库详细教程_visual studio服务器资源管理器 数据连接-CSDN博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;password&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出查询结果</span></span><br><span class="line"><span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line"><span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;NULL value detected&quot;</span>));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><h3 id="1、找不到mysql-h"><a href="#1、找不到mysql-h" class="headerlink" title="1、找不到mysql.h"></a>1、找不到mysql.h</h3><p>解决方案：将mysql的include路径和lib路径设置在项目属性中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\include</span><br><span class="line"></span><br><span class="line">D:\DevelopmentTools\Mysql\mysql-5.7.24-winx64\lib</span><br><span class="line"></span><br><span class="line">链接器找到libmysql.lib,添加进去即可</span><br></pre></td></tr></table></figure><h3 id="2、mysql查找的数据是？乱码"><a href="#2、mysql查找的数据是？乱码" class="headerlink" title="2、mysql查找的数据是？乱码"></a>2、mysql查找的数据是？乱码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集为utf8mb4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，对得到的字符还要转换为宽字节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br></pre></td></tr></table></figure><h1 id="六、制作关键字字库"><a href="#六、制作关键字字库" class="headerlink" title="六、制作关键字字库"></a>六、制作关键字字库</h1><p>新建关键字文件ai.txt，输入若干关键词，每行一个关键词。注意这个关键字文件要求utf-8编码，无BOM头，\n换行，因此最好在Linux下面编辑。用UE等高级编辑器也可以。</p><p>使用在线lm工具<br> <a href="http://www.speech.cs.cmu.edu/tools/lmtool-new.html">http://www.speech.cs.cmu.edu/tools/lmtool-new.html</a></p><p>将keyword.txt上传上去，会生成一堆.dic .lm .vocab等文件。直接下载.tgz的整合文件，解压缩，里面有用的只有.dic和.lm文件。由于lmtool不识别中文，因此.dic文件是空的。需要自己手动添加注音</p><p>到官网下载普通话的完整hmm模型 zh_broadcastnews_16k_ptm256_8000.tar.bz2 和完整的字典 zh_broadcastnews_utf8.dic<br> [<a href="https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/Mandarin/]">https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/Mandarin/]</a>(<a href="https://sourceforge.net/projects/cmusphinx/files/Acoustic">https://sourceforge.net/projects/cmusphinx/files/Acoustic</a> and Language Models&#x2F;Mandarin&#x2F;)</p><p>参照完整的字典 zh_broadcastnews_utf8.dic，对lmtool生成的.dic文件进行注音，例如</p><p>哈密瓜 h a m i g ua</p><p>有些名词zh_broadcastnews_utf8.dic里面没有，需要自己一个个字拼起来，例如山竹没有，但是有山和竹的拼音</p><p>北山 b ei sh an<br> 成竹 ch eng zh u</p><p>则<br> 山竹 sh an zh u</p><p>拼音还是比较好办的</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="1、关键字太长"><a href="#1、关键字太长" class="headerlink" title="1、关键字太长"></a>1、关键字太长</h3><p>在 PocketSphinx 中，关键字过长可能导致识别问题，因为默认情况下，PocketSphinx 对每个单词的字符数有一个限制（通常是 34 个字符）。</p><p>针对关键字太长的问题，采用划分长句子，应用模糊匹配的方法去寻找mysql中的句子</p><h1 id="七、语音识别结果处理"><a href="#七、语音识别结果处理" class="headerlink" title="七、语音识别结果处理"></a>七、语音识别结果处理</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::processRecognitionResult</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;password&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>)) <span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用LIKE进行模糊匹配</span></span><br><span class="line">std::string query = <span class="string">&quot;SELECT id FROM RecognizeContent WHERE content LIKE &#x27;%&quot;</span> + recognizedText + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line">id = std::<span class="built_in">stoi</span>(row[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(id);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将UTF-8字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试输出</span></span><br><span class="line"><span class="comment">//AfxMessageBox(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将CString转换为std::string</span></span><br><span class="line"><span class="function">CT2CA <span class="title">pszConvertedAnsiString</span><span class="params">(result)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">replyContent</span><span class="params">(pszConvertedAnsiString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用speak函数</span></span><br><span class="line"><span class="built_in">speak</span>(replyContent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="八、语音播报"><a href="#八、语音播报" class="headerlink" title="八、语音播报"></a>八、语音播报</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Windows TTS进行语音播报</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ISpVoice* pVoice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HRESULT hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 使用MultiByteToWideChar将std::string转换为std::wstring</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> slength = (<span class="type">int</span>)text.<span class="built_in">length</span>() + <span class="number">1</span>;</span><br><span class="line">len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function">std::wstring <span class="title">wtext</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, &amp;wtext[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出调试信息</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(wtext.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">hr = pVoice-&gt;<span class="built_in">Speak</span>(wtext.<span class="built_in">c_str</span>(), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">pVoice-&gt;<span class="built_in">Release</span>();</span><br><span class="line">pVoice = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>识别率低，无法控制识别的文本</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.h: 头文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含必要的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;portaudio.h&gt;</span>       <span class="comment">// PortAudio 库头文件，用于音频输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pocketsphinx.h&gt;</span>    <span class="comment">// PocketSphinx 库头文件，用于语音识别</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/ad.h&gt;</span>   <span class="comment">// SphinxBase 库头文件，用于音频录制</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphinxbase/err.h&gt;</span>  <span class="comment">// SphinxBase 库头文件，用于错误处理</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>           <span class="comment">// 文件操作头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>            <span class="comment">// 字符串处理头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span>               <span class="comment">// 集合容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atlstr.h&gt;</span>          <span class="comment">// ATL 字符串类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>            <span class="comment">// 线程库头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>            <span class="comment">// 向量容器头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>         <span class="comment">// 算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span>            <span class="comment">// 本地化头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span>           <span class="comment">// 编码转换头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>          <span class="comment">// 输入输出流头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_ID 999 <span class="comment">// 定义定时器 ID</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAIVoiceAssistantDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent = <span class="literal">nullptr</span>);<span class="comment">// 标准构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_AIVOICEASSISTANT_DIALOG &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;<span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">HICON m_hIcon;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的消息映射函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> BOOL <span class="title">OnInitDialog</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg HCURSOR <span class="title">OnQueryDragIcon</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnDestroy</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnBnClickedButtonStop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span>; <span class="comment">// 定时器处理函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::vector&lt;int16&gt; m_audioBuffer;   <span class="comment">// 用于存储音频数据</span></span><br><span class="line"><span class="type">bool</span> m_bListening = <span class="literal">false</span>;<span class="comment">// 语音识别信号</span></span><br><span class="line"><span class="type">cmd_ln_t</span>* m_config = <span class="literal">nullptr</span>;<span class="comment">// 配置参数指针</span></span><br><span class="line"><span class="type">ps_decoder_t</span>* m_ps = <span class="literal">nullptr</span>;<span class="comment">// PocketSphinx 解码器指针</span></span><br><span class="line"><span class="type">ad_rec_t</span>* m_ad = <span class="literal">nullptr</span>;<span class="comment">// 音频录制指针</span></span><br><span class="line">uint8 utt_started = FALSE;<span class="comment">// 标志是否开始录制</span></span><br><span class="line"></span><br><span class="line">PaStream* m_stream = <span class="literal">nullptr</span>;<span class="comment">// PortAudio 流指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RecordAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessRecordedAudio</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span>;</span><br><span class="line"><span class="function">CString <span class="title">ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::thread m_thread; <span class="comment">// 用于音频录制和处理的线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectToDatabase</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processRecognitionResult</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// AIVoiceAssistantDlg.cpp: 实现文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistant.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AIVoiceAssistantDlg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;afxdialogex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mysql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> new DEBUG_NEW</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PortAudio 参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE 16000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAMES_PER_BUFFER (2048) <span class="comment">// 调整缓冲区大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">paCallback</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* inputBuffer, <span class="type">void</span>* outputBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> framesPerBuffer,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> PaStreamCallbackTimeInfo* timeInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">PaStreamCallbackFlags statusFlags,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span>* in = (<span class="type">float</span>*)inputBuffer;</span><br><span class="line"><span class="type">float</span>* monoBuffer = (<span class="type">float</span>*)userData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inputBuffer == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; framesPerBuffer; ++i) &#123;</span><br><span class="line">monoBuffer[i] = (in[i * <span class="number">2</span>] + in[i * <span class="number">2</span> + <span class="number">1</span>]) * <span class="number">0.5f</span>; <span class="comment">// 双声道转单声道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> paContinue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于应用程序“关于”菜单项的 CAboutDlg 对话框</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAboutDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CAboutDlg</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AFX_DESIGN_TIME</span></span><br><span class="line"><span class="keyword">enum</span> &#123; IDD = IDD_ABOUTBOX &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span>;    <span class="comment">// DDX/DDV 支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CAboutDlg::<span class="built_in">CAboutDlg</span>() : <span class="built_in">CDialogEx</span>(IDD_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAboutDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAboutDlg, CDialogEx)</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 对话框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CAIVoiceAssistantDlg::<span class="built_in">CAIVoiceAssistantDlg</span>(CWnd* pParent <span class="comment">/*=nullptr*/</span>)</span><br><span class="line">: <span class="built_in">CDialogEx</span>(IDD_AIVOICEASSISTANT_DIALOG, pParent)</span><br><span class="line">&#123;</span><br><span class="line">m_hIcon = <span class="built_in">AfxGetApp</span>()-&gt;<span class="built_in">LoadIcon</span>(IDR_MAINFRAME);</span><br><span class="line">m_config = <span class="built_in">cmd_ln_init</span>(<span class="literal">NULL</span>, <span class="built_in">ps_args</span>(), TRUE,</span><br><span class="line"><span class="string">&quot;-hmm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn&quot;</span>,</span><br><span class="line"><span class="comment">//&quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">//&quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\zh-cn.dic&quot;,</span></span><br><span class="line"><span class="string">&quot;-lm&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\ai3.lm&quot;</span>,</span><br><span class="line"><span class="string">&quot;-dict&quot;</span>, <span class="string">&quot;D:\\ASR\\pocketsphinx\\model\\zh-cn\\ai3.dic&quot;</span>,</span><br><span class="line"><span class="comment">/*       &quot;-hmm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-lm&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\en-us.lm.bin&quot;,</span></span><br><span class="line"><span class="comment">   &quot;-dict&quot;, &quot;D:\\ASR\\pocketsphinx\\model\\en-us\\cmudict-en-us.dict&quot;,*/</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_config == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config fail&quot;</span>));</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;1、m_config success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_ps = <span class="built_in">ps_init</span>(m_config);</span><br><span class="line"><span class="keyword">if</span> (m_ps == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps fail&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;2、m_ps success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((m_ad = <span class="built_in">ad_open_dev</span>(<span class="string">&quot;sysdefault&quot;</span>, (<span class="type">int</span>)<span class="number">48000</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Failed to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;3、Success to open audio device&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//connectToDatabase();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 音频设备</span></span><br><span class="line"><span class="keyword">if</span> (m_ad)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ad_close</span>(m_ad);</span><br><span class="line">m_ad = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放解码器</span></span><br><span class="line"><span class="keyword">if</span> (m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ps_free</span>(m_ps);</span><br><span class="line">m_ps = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放配置参数</span></span><br><span class="line"><span class="keyword">if</span> (m_config)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cmd_ln_free_r</span>(m_config);</span><br><span class="line">m_config = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CAIVoiceAssistantDlg, CDialogEx)</span><br><span class="line"><span class="built_in">ON_WM_SYSCOMMAND</span>()</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_QUERYDRAGICON</span>()</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_START, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStart)</span><br><span class="line"><span class="built_in">ON_BN_CLICKED</span>(IDC_BUTTON_STOP, &amp;CAIVoiceAssistantDlg::OnBnClickedButtonStop)</span><br><span class="line"><span class="built_in">ON_WM_DESTROY</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CAIVoiceAssistantDlg 消息处理程序</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">CAIVoiceAssistantDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将“关于...”菜单项添加到系统菜单中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IDM_ABOUTBOX 必须在系统命令范围内。</span></span><br><span class="line"><span class="built_in">ASSERT</span>((IDM_ABOUTBOX &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(IDM_ABOUTBOX &lt; <span class="number">0xF000</span>);</span><br><span class="line"></span><br><span class="line">CMenu* pSysMenu = <span class="built_in">GetSystemMenu</span>(FALSE);</span><br><span class="line"><span class="keyword">if</span> (pSysMenu != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">BOOL bNameValid;</span><br><span class="line">CString strAboutMenu;</span><br><span class="line">bNameValid = strAboutMenu.<span class="built_in">LoadString</span>(IDS_ABOUTBOX);</span><br><span class="line"><span class="built_in">ASSERT</span>(bNameValid);</span><br><span class="line"><span class="keyword">if</span> (!strAboutMenu.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_SEPARATOR);</span><br><span class="line">pSysMenu-&gt;<span class="built_in">AppendMenu</span>(MF_STRING, IDM_ABOUTBOX, strAboutMenu);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动</span></span><br><span class="line"><span class="comment">//  执行此操作</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, TRUE);<span class="comment">// 设置大图标</span></span><br><span class="line"><span class="built_in">SetIcon</span>(m_hIcon, FALSE);<span class="comment">// 设置小图标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加额外的初始化代码</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnSysCommand</span><span class="params">(UINT nID, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((nID &amp; <span class="number">0xFFF0</span>) == IDM_ABOUTBOX)</span><br><span class="line">&#123;</span><br><span class="line">CAboutDlg dlgAbout;</span><br><span class="line">dlgAbout.<span class="built_in">DoModal</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnSysCommand</span>(nID, lParam);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果向对话框添加最小化按钮，则需要下面的代码</span></span><br><span class="line"><span class="comment">//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，</span></span><br><span class="line"><span class="comment">//  这将由框架自动完成。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsIconic</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>; <span class="comment">// 用于绘制的设备上下文</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SendMessage</span>(WM_ICONERASEBKGND, <span class="built_in">reinterpret_cast</span>&lt;WPARAM&gt;(dc.<span class="built_in">GetSafeHdc</span>()), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使图标在工作区矩形中居中</span></span><br><span class="line"><span class="type">int</span> cxIcon = <span class="built_in">GetSystemMetrics</span>(SM_CXICON);</span><br><span class="line"><span class="type">int</span> cyIcon = <span class="built_in">GetSystemMetrics</span>(SM_CYICON);</span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"><span class="type">int</span> x = (rect.<span class="built_in">Width</span>() - cxIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> y = (rect.<span class="built_in">Height</span>() - cyIcon + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图标</span></span><br><span class="line">dc.<span class="built_in">DrawIcon</span>(x, y, m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">CDialogEx::<span class="built_in">OnPaint</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当用户拖动最小化窗口时系统调用此函数取得光标</span></span><br><span class="line"><span class="comment">//显示。</span></span><br><span class="line"><span class="function">HCURSOR <span class="title">CAIVoiceAssistantDlg::OnQueryDragIcon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;HCURSOR&gt;(m_hIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStart</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 清空音频缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 PortAudio</span></span><br><span class="line">PaError err = <span class="built_in">Pa_Initialize</span>();</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize PortAudio.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频流参数</span></span><br><span class="line">PaStreamParameters inputParameters;</span><br><span class="line">inputParameters.device = <span class="built_in">Pa_GetDefaultInputDevice</span>(); <span class="comment">// 获取默认输入设备</span></span><br><span class="line"><span class="keyword">if</span> (inputParameters.device == paNoDevice)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No default input device.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inputParameters.channelCount = <span class="number">2</span>; <span class="comment">// 双声道</span></span><br><span class="line">inputParameters.sampleFormat = paInt16; <span class="comment">// 16 位整数</span></span><br><span class="line">inputParameters.suggestedLatency = <span class="built_in">Pa_GetDeviceInfo</span>(inputParameters.device)-&gt;defaultLowInputLatency;</span><br><span class="line">inputParameters.hostApiSpecificStreamInfo = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开音频流</span></span><br><span class="line">err = <span class="built_in">Pa_OpenStream</span>(</span><br><span class="line">&amp;m_stream,</span><br><span class="line">&amp;inputParameters,</span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有输出</span></span><br><span class="line"><span class="number">48000</span>, <span class="comment">// 采样率</span></span><br><span class="line"><span class="number">2048</span>, <span class="comment">// 缓冲区大小</span></span><br><span class="line">paClipOff, <span class="comment">// 禁用剪切</span></span><br><span class="line"><span class="literal">nullptr</span>, <span class="comment">// 没有回调</span></span><br><span class="line"><span class="literal">nullptr</span>  <span class="comment">// 没有用户数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动音频流</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Pa_StartStream</span>(m_stream) != paNoError)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to start PortAudio stream.&quot;</span>));</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标志以启动录音</span></span><br><span class="line">m_bListening = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording started. Please speak now...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动录音线程</span></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(&amp;CAIVoiceAssistantDlg::RecordAudio, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">t.<span class="built_in">detach</span>();  <span class="comment">// 分离线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器，在15秒后停止录音</span></span><br><span class="line"><span class="built_in">SetTimer</span>(TIMER_ID, <span class="number">15000</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnBnClickedButtonStop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 PortAudio 流</span></span><br><span class="line"><span class="keyword">if</span> (m_stream)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示用户停止录音</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Recording stopped. Processing data...&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::RecordAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps); <span class="comment">// 开始新的语音识别</span></span><br><span class="line"><span class="type">int16_t</span> stereoBuffer[<span class="number">2048</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m_bListening)</span><br><span class="line">&#123;</span><br><span class="line">PaError err = <span class="built_in">Pa_ReadStream</span>(m_stream, stereoBuffer, <span class="number">2048</span>);</span><br><span class="line"><span class="keyword">if</span> (err != paNoError)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">WCHAR* wcsErrorText = <span class="keyword">new</span> WCHAR[len];</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">Pa_GetErrorText</span>(err), <span class="number">-1</span>, wcsErrorText, len);</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;Failed to read audio: %s&quot;</span>), wcsErrorText);</span><br><span class="line"><span class="keyword">delete</span>[] wcsErrorText;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">errorMsg = _T(<span class="string">&quot;Failed to read audio: Unknown error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将双声道数据转换为单声道数据，并添加到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int16_t</span>&gt; <span class="title">monoBuffer</span><span class="params">(<span class="number">2048</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">monoBuffer[i] = (stereoBuffer[i * <span class="number">2</span>] + stereoBuffer[i * <span class="number">2</span> + <span class="number">1</span>]) / <span class="number">2</span>; <span class="comment">// 简单平均以获得单声道数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将单声道数据添加到缓冲区</span></span><br><span class="line">m_audioBuffer.<span class="built_in">insert</span>(m_audioBuffer.<span class="built_in">end</span>(), monoBuffer.<span class="built_in">begin</span>(), monoBuffer.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, monoBuffer.<span class="built_in">data</span>(), monoBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps); <span class="comment">// 结束当前的语音识别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止音频流</span></span><br><span class="line"><span class="built_in">Pa_StopStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_CloseStream</span>(m_stream);</span><br><span class="line"><span class="built_in">Pa_Terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessRecordedAudio</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m_audioBuffer.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No audio data to process.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, m_audioBuffer.<span class="built_in">data</span>(), m_audioBuffer.<span class="built_in">size</span>(), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, hyp, <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">processRecognitionResult</span>(hyp);</span><br><span class="line">hyp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;Failed to convert recognition result.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nIDEvent == TIMER_ID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">m_bListening = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理录音数据</span></span><br><span class="line"><span class="built_in">ProcessRecordedAudio</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">KillTimer</span>(TIMER_ID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CDialogEx::<span class="built_in">OnTimer</span>(nIDEvent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">CString <span class="title">CAIVoiceAssistantDlg::ExtractTextFromHyp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* hyp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">CString</span>(hyp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::ProcessAudioFile</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">file</span><span class="params">(filePath, std::ios::binary)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to open audio file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容到缓冲区</span></span><br><span class="line"><span class="function">std::vector&lt;int16&gt; <span class="title">audioData</span><span class="params">((std::istreambuf_iterator&lt;<span class="type">char</span>&gt;(file)), std::istreambuf_iterator&lt;<span class="type">char</span>&gt;())</span></span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (audioData.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No audio data read from file.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 PocketSphinx 正确初始化</span></span><br><span class="line"><span class="keyword">if</span> (!m_ps)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;PocketSphinx not initialized.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始语音识别</span></span><br><span class="line"><span class="built_in">ps_start_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理音频数据</span></span><br><span class="line"><span class="built_in">ps_process_raw</span>(m_ps, audioData.<span class="built_in">data</span>(), audioData.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(int16), FALSE, FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语音识别</span></span><br><span class="line"><span class="built_in">ps_end_utt</span>(m_ps);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* hyp = <span class="built_in">ps_get_hyp</span>(m_ps, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hyp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString result = <span class="built_in">CString</span>(hyp);</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m_edtText.<span class="built_in">SetWindowText</span>(_T(<span class="string">&quot;No result detected&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------- 数据库连接 ----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::processRecognitionResult</span><span class="params">(<span class="type">const</span> std::string&amp; recognizedText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>)) <span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用LIKE进行模糊匹配</span></span><br><span class="line">std::string query = <span class="string">&quot;SELECT id FROM RecognizeContent WHERE content LIKE &#x27;%&quot;</span> + recognizedText + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> id = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line">id = std::<span class="built_in">stoi</span>(row[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">query = <span class="string">&quot;SELECT content FROM ReplyContent WHERE id = &quot;</span> + std::<span class="built_in">to_string</span>(id);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, query.<span class="built_in">c_str</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将UTF-8字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[<span class="number">0</span>], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试输出</span></span><br><span class="line"><span class="comment">//AfxMessageBox(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将CString转换为std::string</span></span><br><span class="line"><span class="function">CT2CA <span class="title">pszConvertedAnsiString</span><span class="params">(result)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">replyContent</span><span class="params">(pszConvertedAnsiString)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用speak函数</span></span><br><span class="line"><span class="built_in">speak</span>(replyContent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to convert reply content to wide string.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;No matching content found.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Windows TTS进行语音播报</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::speak</span><span class="params">(<span class="type">const</span> std::string&amp; text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ISpVoice* pVoice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to initialize COM library.&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HRESULT hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">SUCCEEDED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 使用MultiByteToWideChar将std::string转换为std::wstring</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">int</span> slength = (<span class="type">int</span>)text.<span class="built_in">length</span>() + <span class="number">1</span>;</span><br><span class="line">len = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function">std::wstring <span class="title">wtext</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, text.<span class="built_in">c_str</span>(), slength, &amp;wtext[<span class="number">0</span>], len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出调试信息</span></span><br><span class="line"><span class="built_in">AfxMessageBox</span>(<span class="built_in">CString</span>(wtext.<span class="built_in">c_str</span>()));</span><br><span class="line"></span><br><span class="line">hr = pVoice-&gt;<span class="built_in">Speak</span>(wtext.<span class="built_in">c_str</span>(), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Speak failed.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">pVoice-&gt;<span class="built_in">Release</span>();</span><br><span class="line">pVoice = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;Failed to create voice instance.&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAIVoiceAssistantDlg::connectToDatabase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL* conn;</span><br><span class="line">MYSQL_RES* res;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* server = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;13525681378.Ll&quot;</span>; <span class="comment">// 请替换为您的 MySQL 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* database = <span class="string">&quot;VoiceAssistant&quot;</span>;</span><br><span class="line"></span><br><span class="line">conn = <span class="built_in">mysql_init</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(conn, server, user, password, database, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_real_connect() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_set_character_set</span>(conn, <span class="string">&quot;utf8mb4&quot;</span>))<span class="comment">// 设置连接的字符集</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_set_character_set() failed&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql is utf8mb4&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mysql_query</span>(conn, <span class="string">&quot;SELECT * FROM RecognizeContent&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;SELECT * FROM RecognizeContent success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">mysql_store_result</span>(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() failed&quot;</span>));</span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;mysql_store_result() success&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出查询结果</span></span><br><span class="line"><span class="type">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(res);</span><br><span class="line"><span class="keyword">while</span> ((row = <span class="built_in">mysql_fetch_row</span>(res)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_fields; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row[i] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(_T(<span class="string">&quot;NULL value detected&quot;</span>));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 UTF-8 编码的字符串转换为宽字符字符串</span></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">CString errorMsg;</span><br><span class="line">errorMsg.<span class="built_in">Format</span>(_T(<span class="string">&quot;MultiByteToWideChar failed with error code: %d&quot;</span>), <span class="built_in">GetLastError</span>());</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(errorMsg);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::wstring <span class="title">wstr</span><span class="params">(len, <span class="string">L&#x27;\0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="number">0</span>, row[i], <span class="number">-1</span>, &amp;wstr[<span class="number">0</span>], len);</span><br><span class="line"><span class="function">CString <span class="title">result</span><span class="params">(wstr.c_str())</span></span>;</span><br><span class="line"><span class="built_in">AfxMessageBox</span>(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放结果集</span></span><br><span class="line"><span class="built_in">mysql_free_result</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="built_in">mysql_close</span>(conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_开发环境搭建(一）</title>
      <link href="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/"/>
      <url>/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Mac环境下命令方式搭建"><a href="#一、Mac环境下命令方式搭建" class="headerlink" title="一、Mac环境下命令方式搭建"></a>一、Mac环境下命令方式搭建</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install python@3.9</span><br><span class="line"></span><br><span class="line">pip3 install numpy matplotlib opencv_python</span><br><span class="line">// numpy：矩阵相关操作</span><br><span class="line">// matplotlib：图形相关</span><br></pre></td></tr></table></figure><p><img src="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/image-20240717231410147-17231264469961.png" alt="image-20240717231410147"></p><h1 id="二、Windows命令行搭建环境"><a href="#二、Windows命令行搭建环境" class="headerlink" title="二、Windows命令行搭建环境"></a>二、Windows命令行搭建环境</h1><ul><li>下载并安装python3</li><li>配置python3环境变量</li><li>使用pip命令安装numpy等库</li></ul><ol><li>如果没有安装过python，则从<a href="https://www.python.org/ftp/python/3.7.8/%E6%89%BE%E5%88%B0python-3.7.8-amd64.exe%E4%B8%8B%E8%BD%BDpython3%EF%BC%8C%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E4%B9%9F%E7%B1%BB%E4%BC%BC">https://www.python.org/ftp/python/3.7.8/找到python-3.7.8-amd64.exe下载python3，其他版本也类似</a></li><li>安装之后，在编辑环境变量的系统变量的Path里面添加python路径<br><img src="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/image-20240717234510993-17231264469962.png" alt="image-20240717234510993"></li><li>python命令可用后，可以执行python -m pip –version查看是否安装了pip命令。pip可以用来安装各种包</li><li>命令行安装python -m pip install numpy matplotlib opencv-python</li><li>如果访问不了外网，可以手动下载文件<a href="https://pypi.org/project%EF%BC%8C%E5%9C%A8%E9%87%8C%E9%9D%A2%E6%9F%A5%E6%89%BE%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%8C%85%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E4%BD%BF%E7%94%A8python">https://pypi.org/project，在里面查找缺失的包，然后再使用python</a> -m pip install xxx(下载的名字)</li></ol><p><strong>其他解决方案：</strong></p><p><a href="https://blog.csdn.net/allway2/article/details/120691222">如何在 Windows 上为 Python 安装 OpenCV？_windows python安装opencv-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_41627235/article/details/87692748">OpenCV-python安装教程_opencv python安装-CSDN博客</a></p><h1 id="三、Ubuntu-命令行搭建"><a href="#三、Ubuntu-命令行搭建" class="headerlink" title="三、Ubuntu 命令行搭建"></a>三、Ubuntu 命令行搭建</h1><ul><li>apt install python3</li><li>使用pip命令安装numpy、matplotlib和opencv库</li><li>apt install …</li></ul><h1 id="四、Windows-源码下载"><a href="#四、Windows-源码下载" class="headerlink" title="四、Windows 源码下载"></a>四、Windows 源码下载</h1><p><strong>源码编译方式步骤</strong></p><ul><li><h2 id="安装必要的库和工具"><a href="#安装必要的库和工具" class="headerlink" title="安装必要的库和工具"></a>安装必要的库和工具</h2><ul><li><h3 id="安装python3和numpy库"><a href="#安装python3和numpy库" class="headerlink" title="安装python3和numpy库"></a>安装python3和numpy库</h3><ol><li>如果没有安装过python，则从<a href="https://www.python.org/ftp/python/3.7.8/%E6%89%BE%E5%88%B0python-3.7.8-amd64.exe%E4%B8%8B%E8%BD%BDpython3%EF%BC%8C%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%AC%E4%B9%9F%E7%B1%BB%E4%BC%BC">https://www.python.org/ftp/python/3.7.8/找到python-3.7.8-amd64.exe下载python3，其他版本也类似</a></li><li>安装VS，社区版即可，下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></li><li>安装 make，下载地址：<a href="https://github.com/Kitware/CMake/releases/download/v3.20.0-rc1/cmake-3.20.0-rc1-windows-x86_64.msi">https://github.com/Kitware/CMake/releases/download/v3.20.0-rc1/cmake-3.20.0-rc1-windows-x86_64.msi</a></li></ol></li><li><h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3></li></ul></li><li><h2 id="下载OpenCV源码"><a href="#下载OpenCV源码" class="headerlink" title="下载OpenCV源码"></a>下载OpenCV源码</h2><ul><li>OpenCV 源码地址: git clone <a href="https://github.com/opencv/opencv.git">https://github.com/opencv/opencv.git</a></li><li>OpenCV-contribue 源码地址：git clone <a href="https://github.com/opencv/opecv_contrib.git">https://github.com/opencv/opecv_contrib.git</a></li></ul></li><li><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li><p>在存放opencv源码目录中创建build目录：mkdir build</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">存放源码目录，如</span><br><span class="line">learnOpenCV</span><br><span class="line">opencv</span><br><span class="line">opencv-contrib</span><br><span class="line">build</span><br></pre></td></tr></table></figure></li><li><p>运行cmake，生成编译脚本</p><ol><li>选择opencv源码目录</li><li>选择编译目录</li><li>选择CPU架构</li><li>增加opencv-contrib选项</li><li>检查编译选项</li><li>生成编译脚本</li></ol><p><img src="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/image-20240718010011912-17231264469963.png" alt="image-20240718010011912"></p><p><img src="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/image-20240718010137273-17231264469964.png" alt="image-20240718010137273"></p><p><img src="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/image-20240718010702210-17231264469965.png" alt="image-20240718010702210"></p></li><li><p>打开opencv工程文件OpenCV.sln</p><ol><li>选择输出版本文件</li><li>进行编译，编译好的文件都在build目录下的install文件夹中</li></ol></li></ol></li></ul><p><img src="/2024/07/18/OpenCV/OpenCV_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E4%B8%80)/image-20240718011322647-17231264469966.png" alt="image-20240718011322647"></p><h1 id="五、Windows-下C-使用OpenCV库"><a href="#五、Windows-下C-使用OpenCV库" class="headerlink" title="五、Windows 下C++使用OpenCV库"></a>五、Windows 下C++使用OpenCV库</h1><h1 id="六、利用工具高效开发OpenCV"><a href="#六、利用工具高效开发OpenCV" class="headerlink" title="六、利用工具高效开发OpenCV"></a>六、利用工具高效开发OpenCV</h1>]]></content>
      
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收藏</title>
      <link href="/2024/07/07/%E6%94%B6%E8%97%8F/"/>
      <url>/2024/07/07/%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<p>搭建博客：<a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a><br>博客分类：<a href="https://www.jianshu.com/p/e17711e44e00">https://www.jianshu.com/p/e17711e44e00</a></p><p><a href="https://cloud.tencent.com/developer/article/1970544">Hexo + Typora + 开发Hexo插件 解决图片路径不一致-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h1 id="优化博客"><a href="#优化博客" class="headerlink" title="优化博客"></a>优化博客</h1><ul><li><p>解决图片不显示的问题</p><ol><li><p>要添加图片，先npm install 一个hexo-asset-image的依赖</p><ul><li><pre><code class="shell">npm install https://github.com/CodeFalling/hexo-asset-image --save<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  2. 把_config.yml中的post_asset_folder设为true，这里是获得一个同名的文件夹，保存图片</span><br><span class="line"></span><br><span class="line">     - 我之前用md文档是默认设置”复制图片到 ./$&#123;filename&#125;.assets 文件夹</span><br><span class="line">     - 改为复制到指定路径 ./$&#123;filename&#125;</span><br><span class="line">     - 然后将之前的文件复制一遍，其中保存的图片信息就自动更改到了新文件夹中，删除之前的文件</span><br><span class="line">     - 命令行输入</span><br><span class="line">       - hexo clean</span><br><span class="line">       - hexo g</span><br><span class="line">       - hexo d </span><br><span class="line">       - 刷新网站，即可看到图片</span><br><span class="line"></span><br><span class="line"># 将Git仓库作为博客的资源文件</span><br><span class="line"></span><br><span class="line">1. **添加子模块**：</span><br><span class="line"></span><br><span class="line">   - 首先，添加子模块：</span><br><span class="line"></span><br><span class="line">     ```bash</span><br><span class="line">     git submodule add git仓库地址 source/_posts/Blogs</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><ul><li>这会将 <code>Blogs</code> 仓库的内容克隆 <code>source/_posts/Blogs</code> 目录中。</li></ul></li></ul><ol start="2"><li><p>**配置 <code>.gitignore</code>**：</p><ul><li><p>在 Blog 仓库中编辑 <code>.gitignore</code></p><p> 文件，添加要忽略的规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plaintext复制代码# 忽略子模块中的特定文件夹或文件</span><br><span class="line">source/_posts/Blogs/ignore_this_folder/</span><br><span class="line">source/_posts/Blogs/ignore_this_file.md</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>确认并提交更改</strong>：</p><ul><li><p>确认 <code>.gitignore</code> 设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>提交 <code>.gitignore</code></p><p> 更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash复制代码git add .gitignore</span><br><span class="line">git commit -m &quot;Update .gitignore to ignore certain submodule files&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. <strong>说明</strong></h3><ul><li><strong>添加子模块后的配置</strong>：子模块被添加到父仓库后，你才能具体设置 <code>.gitignore</code> 文件来忽略子模块中的某些内容。这是因为在添加子模块之前，父仓库的 <code>.gitignore</code> 文件中不会存在子模块的目录结构。</li><li><strong>子模块管理</strong>：子模块在 <code>.gitignore</code> 中的设置仅影响父仓库（<code>Blog</code>），不会影响子模块（<code>Blogs</code>）。子模块仍会在其自身的 Git 仓库中正常管理和更新。</li></ul><p>如果你按照这些步骤进行操作，你将能够有效地管理和忽略子模块中的内容。如果有其他问题或需要进一步的帮助，请随时告诉我！</p><p>了解了，你的 <code>Blog</code> 仓库（用于 Hexo + Next 博客）和 <code>Blogs</code> 仓库（用于存放 Markdown 文档）的远程地址都是 GitHub。下面是具体操作步骤，以确保你理解如何处理 <code>.gitignore</code> 和提交的地址：</p><h3 id="1-提交-gitignore-到-Blog-仓库"><a href="#1-提交-gitignore-到-Blog-仓库" class="headerlink" title="1. 提交 .gitignore 到 Blog 仓库"></a>1. <strong>提交 <code>.gitignore</code> 到 <code>Blog</code> 仓库</strong></h3><p><code>Blog</code> 仓库是你用 Hexo + Next 搭建博客的地方。<code>Blog</code> 的 <code>.gitignore</code> 文件的更改应当提交到这个仓库中。这个仓库的远程地址是 <code>git@github.com:lxq-02/lxq-02.github.io.git</code>。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p><strong>检查 <code>.gitignore</code> 文件</strong>：</p><ul><li>确保 <code>.gitignore</code> 文件中包含了你想忽略的子模块文件夹或文件路径。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/Blogs/ignore_this_folder/</span><br><span class="line">source/_posts/Blogs/ignore_this_file.md</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>将 <code>.gitignore</code> 文件的更改添加到 <code>Blog</code> 仓库</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/Blog</span><br><span class="line">git add .gitignore</span><br><span class="line">git commit -m <span class="string">&quot;Update .gitignore to ignore certain submodule files&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这将把 <code>.gitignore</code> 的更改推送到 <code>Blog</code> 仓库的 <code>master</code> 分支。</p></li></ol><h3 id="2-提交和更新-Blogs-子模块"><a href="#2-提交和更新-Blogs-子模块" class="headerlink" title="2. 提交和更新 Blogs 子模块"></a>2. <strong>提交和更新 <code>Blogs</code> 子模块</strong></h3><p><code>Blogs</code> 是一个子模块，它独立于 <code>Blog</code> 仓库管理。你在 <code>Blogs</code> 中的更改（如 Markdown 文件的更改）需要推送到 <code>Blogs</code> 仓库，但不涉及 <code>.gitignore</code> 的管理。</p><h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p><strong>在 <code>Blogs</code> 中进行更改</strong>：</p><ul><li>例如，修改或添加 Markdown 文件。</li></ul></li><li><p><strong>提交和推送 <code>Blogs</code> 的更改</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/Blogs</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Update blog content&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-更新子模块"><a href="#3-更新子模块" class="headerlink" title="3. 更新子模块"></a>3. <strong>更新子模块</strong></h3><p>在 <code>Blog</code> 中更新子模块以获取 <code>Blogs</code> 中的最新内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/Blog</span><br><span class="line">git submodule update --remote</span><br><span class="line">git add <span class="built_in">source</span>/_posts/Blogs</span><br><span class="line">git commit -m <span class="string">&quot;Update Blogs submodule to latest commit&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="4-使用-Hexo-更新和部署博客"><a href="#4-使用-Hexo-更新和部署博客" class="headerlink" title="4. 使用 Hexo 更新和部署博客"></a>4. <strong>使用 Hexo 更新和部署博客</strong></h3><p>在 <code>Blog</code> 仓库中，使用 Hexo 更新博客内容并部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d/Blog</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p><strong><code>Blog</code> 仓库</strong>（<code>lxq-02.github.io</code>）：</p><ul><li><code>.gitignore</code> 文件的更改需要提交到这里。</li><li>用 Hexo 命令生成和部署博客内容。</li></ul></li><li><p><strong><code>Blogs</code> 仓库</strong>：</p><ul><li>只用于存储 Markdown 文件，子模块的更改在 <code>Blogs</code> 仓库中提交和推送。</li></ul></li></ul><p>如果还有其他问题或需要进一步的帮助，请告诉我！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CIR</title>
      <link href="/2024/07/07/CIR/CIR/"/>
      <url>/2024/07/07/CIR/CIR/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>研发</th><th>CIR初版开发</th><th>8月25日</th><th>根据需求说明书完成基础界面与通讯功能</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h1><p>使用：</p><p>VS2022</p><p>QT5.15.2</p><p><img src="/2024/07/07/CIR/CIR/image-20240813112624374.png" alt="image-20240813112624374"></p><h1 id="二、仿真界面开发"><a href="#二、仿真界面开发" class="headerlink" title="二、仿真界面开发"></a>二、仿真界面开发</h1><p>仿真界面分为两部分，一部分为窗口显示区域，一部分为模拟按钮区域。</p><p>将两部分分别设置为自定义控件，然后分别设置界面内容和响应操作。</p><p>软件启动后默认带外侧按键，主界面黑屏。</p><p>竖屏MMI分辨率768*1024，主界面640 * 480.</p><p>主界面640*480 ViewWidget</p><p>按钮界面（768 * 480） ButtonWidget</p><p><img src="/2024/07/07/CIR/CIR/image-20240814160522265.png" alt="image-20240814160522265"></p><h1 id="三、ButtonWidget开发"><a href="#三、ButtonWidget开发" class="headerlink" title="三、ButtonWidget开发"></a>三、ButtonWidget开发</h1><p><a href="https://blog.csdn.net/qq_43376782/article/details/130478962">【五一创作】VS+Qt主界面内嵌自定义控件的四种方法以及不同自定义控件数据交互_qt交互控件-CSDN博客</a></p><p>ButtonWidget为主要包含下面的按钮，我分为了几类：</p><ol><li>上方8个功能按钮</li><li>左侧比较重要的几个按钮</li><li>中间包含列尾控制和数字的15个按钮</li><li>右侧的各种按钮</li></ol><p>按钮为QPushButton，保存在vector容器中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;QPushButton*&gt; m_topButtons;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createTopButtons</span><span class="params">(<span class="type">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;QPushButton*&gt; m_leftButtons;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createLeftButtons</span><span class="params">(<span class="type">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;QPushButton*&gt; m_midButtons;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createMidButtons</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;QPushButton*&gt; m_rightButtons;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createRightButtons</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-1、上方按钮"><a href="#3-1、上方按钮" class="headerlink" title="3.1、上方按钮"></a>3.1、上方按钮</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ButtonWidget::createTopButtons</span><span class="params">(<span class="type">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m_btnWidth = <span class="number">75</span>;</span><br><span class="line"><span class="type">int</span> m_btnHeight = <span class="number">75</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">44</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">QPushButton* button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">button-&gt;<span class="built_in">setGeometry</span>(x, y, m_btnWidth, m_btnHeight);</span><br><span class="line">button-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(i + <span class="number">1</span>)); <span class="comment">// 设置按钮文本为按钮编号</span></span><br><span class="line">button-&gt;<span class="built_in">setStyleSheet</span>(</span><br><span class="line"><span class="string">&quot;QPushButton &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #f0f0f0;&quot;</span>  <span class="comment">// 基础背景颜色</span></span><br><span class="line"><span class="string">&quot;color: black;&quot;</span>  <span class="comment">// 按钮文字颜色</span></span><br><span class="line"><span class="string">&quot;border: 2px solid #d0d0d0;&quot;</span>  <span class="comment">// 按钮边框颜色</span></span><br><span class="line"><span class="string">&quot;border-radius: 10px;&quot;</span>  <span class="comment">// 按钮圆角</span></span><br><span class="line"><span class="string">&quot;font-size: 16px;&quot;</span>  <span class="comment">// 按钮文字大小</span></span><br><span class="line"><span class="string">&quot;padding: 5px;&quot;</span>  <span class="comment">// 按钮内边距</span></span><br><span class="line"><span class="string">&quot;box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);&quot;</span>  <span class="comment">// 按钮阴影</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:hover &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #e0e0e0;&quot;</span>  <span class="comment">// 鼠标悬停时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:pressed &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #d0d0d0;&quot;</span>  <span class="comment">// 按钮按下时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">m_topButtons.<span class="built_in">push_back</span>(button);</span><br><span class="line">x += <span class="number">85</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2、左侧按钮"><a href="#3-2、左侧按钮" class="headerlink" title="3.2、左侧按钮"></a>3.2、左侧按钮</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ButtonWidget::createLeftButtons</span><span class="params">(<span class="type">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m_btnWidth = <span class="number">90</span>;</span><br><span class="line"><span class="type">int</span> m_btnHeight = <span class="number">80</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">70</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标签文本</span></span><br><span class="line">QStringList labelTexts = &#123;</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;列尾\n排风&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;紧急\n呼叫&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;报警&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;主控&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;没看清&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">QPushButton* button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">QString</span>(<span class="string">&quot;Button %1&quot;</span>).<span class="built_in">arg</span>(i + <span class="number">1</span>), <span class="keyword">this</span>);</span><br><span class="line">button-&gt;<span class="built_in">setGeometry</span>(x, y, m_btnWidth, m_btnHeight);</span><br><span class="line">button-&gt;<span class="built_in">setText</span>(labelTexts[i]);</span><br><span class="line">button-&gt;<span class="built_in">setStyleSheet</span>(</span><br><span class="line"><span class="string">&quot;QPushButton &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: red;&quot;</span>  <span class="comment">// 基础背景颜色</span></span><br><span class="line"><span class="string">&quot;color: white;&quot;</span>  <span class="comment">// 按钮文字颜色</span></span><br><span class="line"><span class="string">&quot;border: 2px solid #880000;&quot;</span>  <span class="comment">// 按钮边框颜色</span></span><br><span class="line"><span class="string">&quot;border-radius: 10px;&quot;</span>  <span class="comment">// 按钮圆角</span></span><br><span class="line"><span class="string">&quot;font-size: 16px;&quot;</span>  <span class="comment">// 按钮文字大小</span></span><br><span class="line"><span class="string">&quot;padding: 5px;&quot;</span>  <span class="comment">// 按钮内边距</span></span><br><span class="line"><span class="string">&quot;box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);&quot;</span>  <span class="comment">// 按钮阴影</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:hover &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #ff6666;&quot;</span>  <span class="comment">// 鼠标悬停时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:pressed &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #cc0000;&quot;</span>  <span class="comment">// 按钮按下时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line">);</span><br><span class="line">m_leftButtons.<span class="built_in">push_back</span>(button);</span><br><span class="line"></span><br><span class="line">y += <span class="number">85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x += <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt; count; i++)</span><br><span class="line">&#123;</span><br><span class="line">QPushButton* button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">QString</span>(<span class="string">&quot;Button %1&quot;</span>).<span class="built_in">arg</span>(i + <span class="number">1</span>), <span class="keyword">this</span>);</span><br><span class="line">button-&gt;<span class="built_in">setGeometry</span>(x, y, <span class="number">75</span>, <span class="number">75</span>);</span><br><span class="line">button-&gt;<span class="built_in">setText</span>(labelTexts[i]);</span><br><span class="line">button-&gt;<span class="built_in">setStyleSheet</span>(</span><br><span class="line"><span class="string">&quot;QPushButton &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: black;&quot;</span>  <span class="comment">// 基础背景颜色</span></span><br><span class="line"><span class="string">&quot;color: white;&quot;</span>  <span class="comment">// 按钮文字颜色</span></span><br><span class="line"><span class="string">&quot;border: 2px solid #555555;&quot;</span>  <span class="comment">// 按钮边框颜色</span></span><br><span class="line"><span class="string">&quot;border-radius: 10px;&quot;</span>  <span class="comment">// 按钮圆角</span></span><br><span class="line"><span class="string">&quot;font-size: 16px;&quot;</span>  <span class="comment">// 按钮文字大小</span></span><br><span class="line"><span class="string">&quot;padding: 5px;&quot;</span>  <span class="comment">// 按钮内边距</span></span><br><span class="line"><span class="string">&quot;box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);&quot;</span>  <span class="comment">// 按钮阴影</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:hover &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #444444;&quot;</span>  <span class="comment">// 鼠标悬停时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:pressed &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #222222;&quot;</span>  <span class="comment">// 按钮按下时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line">);</span><br><span class="line">m_leftButtons.<span class="built_in">push_back</span>(button);</span><br><span class="line"></span><br><span class="line">y += <span class="number">80</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、中间按钮"><a href="#3-3、中间按钮" class="headerlink" title="3.3、中间按钮"></a>3.3、中间按钮</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ButtonWidget::createMidButtons</span><span class="params">()</span><span class="comment">// 创建中间的按钮</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m_btnWidth = <span class="number">75</span>;</span><br><span class="line"><span class="type">int</span> m_btnHeight = <span class="number">75</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标签文本</span></span><br><span class="line">QStringList labelTexts = &#123;</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;列尾\n消号&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;紧急\n确认&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;风压\n查询&quot;</span>),</span><br><span class="line"> <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;#&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">QPushButton* button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(labelTexts[i*<span class="number">3</span> + j], <span class="keyword">this</span>);</span><br><span class="line">button-&gt;<span class="built_in">setGeometry</span>(x, y, m_btnWidth, m_btnHeight);</span><br><span class="line">button-&gt;<span class="built_in">setStyleSheet</span>(</span><br><span class="line"><span class="string">&quot;QPushButton &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: white;&quot;</span>  <span class="comment">// 基础背景颜色</span></span><br><span class="line"><span class="string">&quot;color: black;&quot;</span>  <span class="comment">// 按钮文字颜色</span></span><br><span class="line"><span class="string">&quot;border: 2px solid #d0d0d0;&quot;</span>  <span class="comment">// 按钮边框颜色</span></span><br><span class="line"><span class="string">&quot;border-radius: 10px;&quot;</span>  <span class="comment">// 按钮圆角</span></span><br><span class="line"><span class="string">&quot;font-size: 17px;&quot;</span>  <span class="comment">// 按钮文字大小</span></span><br><span class="line"><span class="string">&quot;padding: 5px;&quot;</span>  <span class="comment">// 按钮内边距</span></span><br><span class="line"><span class="string">&quot;box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);&quot;</span>  <span class="comment">// 按钮阴影</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:hover &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #f0f0f0;&quot;</span>  <span class="comment">// 鼠标悬停时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:pressed &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #e0e0e0;&quot;</span>  <span class="comment">// 按钮按下时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line">);</span><br><span class="line">m_midButtons.<span class="built_in">push_back</span>(button);</span><br><span class="line"></span><br><span class="line">x += <span class="number">90</span>;</span><br><span class="line">&#125;</span><br><span class="line">y += <span class="number">80</span>;</span><br><span class="line">x = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4、右侧按钮"><a href="#3-4、右侧按钮" class="headerlink" title="3.4、右侧按钮"></a>3.4、右侧按钮</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ButtonWidget::createRightButtons</span><span class="params">()</span><span class="comment">// 创建右边的按钮</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> m_btnWidth = <span class="number">75</span>;</span><br><span class="line"><span class="type">int</span> m_btnHeight = <span class="number">75</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">500</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置标签文本</span></span><br><span class="line">QStringList labelTexts = &#123;</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;呼叫&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;切换&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;挂断&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;设置&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;↑&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;界面&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;←&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;确认\n签收&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;→&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;查询&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;↓&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;回格&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;打印&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;调车\n请求&quot;</span>),</span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">QPushButton* button = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(labelTexts[i*<span class="number">3</span> + j], <span class="keyword">this</span>);</span><br><span class="line">button-&gt;<span class="built_in">setGeometry</span>(x, y, m_btnWidth, m_btnHeight);</span><br><span class="line">button-&gt;<span class="built_in">setStyleSheet</span>(</span><br><span class="line"><span class="string">&quot;QPushButton &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: white;&quot;</span>  <span class="comment">// 基础背景颜色</span></span><br><span class="line"><span class="string">&quot;color: black;&quot;</span>  <span class="comment">// 按钮文字颜色</span></span><br><span class="line"><span class="string">&quot;border: 2px solid #d0d0d0;&quot;</span>  <span class="comment">// 按钮边框颜色</span></span><br><span class="line"><span class="string">&quot;border-radius: 10px;&quot;</span>  <span class="comment">// 按钮圆角</span></span><br><span class="line"><span class="string">&quot;font-size: 17px;&quot;</span>  <span class="comment">// 按钮文字大小</span></span><br><span class="line"><span class="string">&quot;padding: 5px;&quot;</span>  <span class="comment">// 按钮内边距</span></span><br><span class="line"><span class="string">&quot;box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);&quot;</span>  <span class="comment">// 按钮阴影</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:hover &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #f0f0f0;&quot;</span>  <span class="comment">// 鼠标悬停时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;QPushButton:pressed &#123;&quot;</span></span><br><span class="line"><span class="string">&quot;background-color: #e0e0e0;&quot;</span>  <span class="comment">// 按钮按下时的背景颜色</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span></span><br><span class="line">);</span><br><span class="line">m_rightButtons.<span class="built_in">push_back</span>(button);</span><br><span class="line"></span><br><span class="line">x += <span class="number">85</span>;</span><br><span class="line">&#125;</span><br><span class="line">y += <span class="number">80</span>;</span><br><span class="line">x = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、主界面"><a href="#四、主界面" class="headerlink" title="四、主界面"></a>四、主界面</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ViewWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPixmap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFrame&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFontDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ViewWidget::<span class="built_in">ViewWidget</span>(QWidget *parent)</span><br><span class="line">: <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    ui.<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建主布局</span></span><br><span class="line">    QVBoxLayout* mainLayout = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建并设置6个显示区域</span></span><br><span class="line">    QWidget* basicWidget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    basicWidget-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">80</span>);</span><br><span class="line">    basicWidget-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: url(:/image/backgroundimage.png);&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建标签并设置文本和样式</span></span><br><span class="line">    QLabel* trainNumlabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(basicWidget);</span><br><span class="line">    QString str = str.<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;车次号：&quot;</span>);</span><br><span class="line">    trainNumlabel-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">    QFont font;</span><br><span class="line">    font.<span class="built_in">setFamily</span>(<span class="string">&quot;Microsoft YaHei UI&quot;</span>);  <span class="comment">// 设置字体为宋体</span></span><br><span class="line">    font.<span class="built_in">setPointSize</span>(<span class="number">17</span>);     <span class="comment">// 设置字体大小</span></span><br><span class="line">    trainNumlabel-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">    trainNumlabel-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;color: white;&quot;</span>);</span><br><span class="line">    trainNumlabel-&gt;<span class="built_in">setGeometry</span>(<span class="number">110</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>);  <span class="comment">// 设置 QLabel 的位置和大小</span></span><br><span class="line"></span><br><span class="line">    QLabel* locoNumLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(basicWidget);</span><br><span class="line">    str = str.<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;机车号：&quot;</span>);</span><br><span class="line">    locoNumLabel-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">    locoNumLabel-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">    locoNumLabel-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;color: white;&quot;</span>);</span><br><span class="line">    locoNumLabel-&gt;<span class="built_in">setGeometry</span>(<span class="number">300</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    QWidget* endOfTrainStatusWidget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    endOfTrainStatusWidget-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">80</span>);</span><br><span class="line">    endOfTrainStatusWidget-&gt;<span class="built_in">move</span>(<span class="number">0</span>, <span class="number">80</span>);</span><br><span class="line">    endOfTrainStatusWidget-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: url(:/image/backgroundimage1.png);&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建标签并设置文本和样式</span></span><br><span class="line">    QLabel* endOfTrainStatuslabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(endOfTrainStatusWidget);</span><br><span class="line">    str = str.<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;列尾状态：&quot;</span>);</span><br><span class="line">    endOfTrainStatuslabel-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">    endOfTrainStatuslabel-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">    endOfTrainStatuslabel-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;color: black;&quot;</span>);</span><br><span class="line">    endOfTrainStatuslabel-&gt;<span class="built_in">setGeometry</span>(<span class="number">80</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>);  <span class="comment">// 设置 QLabel 的位置和大小</span></span><br><span class="line"></span><br><span class="line">    QLabel* endOfPressLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(endOfTrainStatusWidget);</span><br><span class="line">    str = str.<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;尾部风压：&quot;</span>);</span><br><span class="line">    endOfPressLabel-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">    endOfPressLabel-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">    endOfPressLabel-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;color: black;&quot;</span>);</span><br><span class="line">    endOfPressLabel-&gt;<span class="built_in">setGeometry</span>(<span class="number">320</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    QWidget* safeWidget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    safeWidget-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">120</span>);</span><br><span class="line">    safeWidget-&gt;<span class="built_in">move</span>(<span class="number">0</span>, <span class="number">160</span>);</span><br><span class="line">    safeWidget-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: url(:/image/black.png);&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QWidget* workWidget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    workWidget-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">40</span>);</span><br><span class="line">    workWidget-&gt;<span class="built_in">move</span>(<span class="number">0</span>, <span class="number">280</span>);</span><br><span class="line">    workWidget-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: url(:/image/black.png);&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QWidget* dispatchWidget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    dispatchWidget-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">80</span>);</span><br><span class="line">    dispatchWidget-&gt;<span class="built_in">move</span>(<span class="number">0</span>, <span class="number">320</span>);</span><br><span class="line">    dispatchWidget-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: url(:/image/backgroundimage1.png);&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QWidget* funcKeyWidget = <span class="keyword">new</span> <span class="built_in">QWidget</span>(<span class="keyword">this</span>);</span><br><span class="line">    funcKeyWidget-&gt;<span class="built_in">setFixedSize</span>(<span class="number">640</span>, <span class="number">80</span>);</span><br><span class="line">    funcKeyWidget-&gt;<span class="built_in">move</span>(<span class="number">0</span>, <span class="number">400</span>);</span><br><span class="line">    funcKeyWidget-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;background-image: url(:/image/backgroundimage.png);&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置标签文本</span></span><br><span class="line">    QStringList labelTexts = &#123;</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;第一个&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;调度&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;第三个&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;第四个&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;隧道\n司机&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;隧道\n车站&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;平原\n司机&quot;</span>),</span><br><span class="line">        QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;平原\n车站&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        QLabel* label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(funcKeyWidget);</span><br><span class="line">        label-&gt;<span class="built_in">setText</span>(labelTexts[i]);</span><br><span class="line">        label-&gt;<span class="built_in">setStyleSheet</span>(<span class="string">&quot;color: white; font-size: 23px; border: 2px solid black&quot;</span>);</span><br><span class="line">        label-&gt;<span class="built_in">setGeometry</span>(i * <span class="number">80</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">        label-&gt;<span class="built_in">setMargin</span>(<span class="number">5</span>);</span><br><span class="line">        labels.<span class="built_in">push_back</span>(label);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加显示区域到主布局</span></span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(basicWidget);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(endOfTrainStatusWidget);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(safeWidget);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(workWidget);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(dispatchWidget);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addWidget</span>(funcKeyWidget);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setLayout</span>(mainLayout);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="五、数据通信"><a href="#五、数据通信" class="headerlink" title="五、数据通信"></a>五、数据通信</h1><p>&#x3D;&#x3D;使用SMTNet&#x3D;&#x3D;</p><p>先将SMTNet文件夹放在写代码的文件路径中，然后新建筛选器，将文件导入到VS中</p><p>将config.dat和.dll文件放入写代码的文件路径中，不需要把SMTnet.dll加到链接器中</p><p>将SMTnet.dll放到写代码的文件路径中</p><p>SMTNET是在32位系统下的，切记</p><h1 id="六、文本转语音"><a href="#六、文本转语音" class="headerlink" title="六、文本转语音"></a>六、文本转语音</h1><p>使用的是SAPI，代码如下，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(push)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable: 4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sphelper.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qlogging.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(pop)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VoiceController</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">VoiceController</span>() : <span class="built_in">pVoice</span>(<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化 COM 库</span></span><br><span class="line">        hr = ::<span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Failed to initialize COM library.&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 SAPI 语音实例</span></span><br><span class="line">        hr = <span class="built_in">CoCreateInstance</span>(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_ALL, IID_ISpVoice, (<span class="type">void</span>**)&amp;pVoice);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Failed to create voice instance.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">VoiceController</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pVoice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 停止任何正在进行的朗读</span></span><br><span class="line">            pVoice-&gt;<span class="built_in">Speak</span>(<span class="literal">NULL</span>, SPF_PURGEBEFORESPEAK, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放 COM 库</span></span><br><span class="line">        ::<span class="built_in">CoUninitialize</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(<span class="type">const</span> std::wstring&amp; text)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pVoice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 异步朗读文本</span></span><br><span class="line">            hr = pVoice-&gt;<span class="built_in">Speak</span>(text.<span class="built_in">c_str</span>(), SPF_ASYNC, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Speak failed.&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pVoice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 停止当前的朗读</span></span><br><span class="line">            pVoice-&gt;<span class="built_in">Speak</span>(<span class="literal">NULL</span>, SPF_PURGEBEFORESPEAK, <span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    HRESULT hr;</span><br><span class="line">    CComPtr&lt;ISpVoice&gt; pVoice;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="七、长按按钮3秒运行功能"><a href="#七、长按按钮3秒运行功能" class="headerlink" title="七、长按按钮3秒运行功能"></a>七、长按按钮3秒运行功能</h1><p>首先，创建一个定时器，可以用来检测3秒的时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QTimer* m_pressTimer;   <span class="comment">// 用于检测3秒的定时器</span></span><br><span class="line"><span class="type">bool</span> m_confirmButtonPressed;    <span class="comment">// 用于检测“列尾确认”键是否按下</span></span><br><span class="line"><span class="type">bool</span> m_airDischargeInitiated; <span class="comment">// 用于检测是否已经启动排风</span></span><br><span class="line"><span class="type">bool</span> m_airDischarge = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"> m_pressTimer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"> m_pressTimer-&gt;<span class="built_in">setInterval</span>(<span class="number">3000</span>); <span class="comment">// 3秒</span></span><br></pre></td></tr></table></figure><p>然后，一个按钮控件设置3个槽函数，一个pressed按压，一个released释放，还有一个是定时器超时的槽函数</p><p>按压启动定时器，释放关闭定时器，</p><p>如果按压时间超过3秒，启动定时器超时槽函数，判断功能是否已经实现，如果未实现，实现功能</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::onAirDischargeButtonPressed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_airDischargeInitiated = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动定时器，开始计时</span></span><br><span class="line">    m_pressTimer-&gt;<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::onAirDischargeButtonReleased</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 停止定时器</span></span><br><span class="line">    m_pressTimer-&gt;<span class="built_in">stop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::onPressTimerTimeout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 停止定时器</span></span><br><span class="line">    m_pressTimer-&gt;<span class="built_in">stop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器超时后，如果排风动作还未触发，则触发</span></span><br><span class="line">    <span class="keyword">if</span> (!m_airDischargeInitiated)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">initiateAirDischarge</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、点击按钮之后，5秒内点击确认键"><a href="#八、点击按钮之后，5秒内点击确认键" class="headerlink" title="八、点击按钮之后，5秒内点击确认键"></a>八、点击按钮之后，5秒内点击确认键</h1><p>如果有两个按钮一起点击才可以运行的功能，可以设置筛选器，其实就是给每个按钮的点击设置一个bool变量，如果点击了，bool变量为真，其他的bool变量全部置false；如果按钮绑定实现功能，则在第二个按钮点击时，先判断绑定的按钮是否是true，如果是true，则代表两个按钮是连续点击的，再继续判读是否满足其他实现功能的条件</p><p>例子如下：</p><p>按钮warning 和按钮Confirm是绑定的，如果中间有其他按钮点击了，如按钮Right，则组合按键功能失败</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::handleButtonWarningPressed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setButtonStateFalse</span>();</span><br><span class="line">    m_btnLeft[<span class="number">2</span>] = <span class="literal">true</span>;    <span class="comment">// 按下了“报警”键，等待点击“确认”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::onButtonRight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setButtonStateFalse</span>();<span class="comment">// 没有绑定的按钮的话，自动将所有按钮的bool变量置false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::handleButtonConfirm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 前一次按下了“报警”键</span></span><br><span class="line">    <span class="keyword">if</span> (m_btnLeft[<span class="number">2</span>] == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_warningTriggered &amp;&amp; m_warningConfirmTimer-&gt;<span class="built_in">isActive</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">initiateWarning</span>();</span><br><span class="line">            m_warningConfirmTimer-&gt;<span class="built_in">stop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setButtonStateFalse</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 欣远 </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_基础(一)</title>
      <link href="/2024/07/07/Linux/Linux/"/>
      <url>/2024/07/07/Linux/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><h2 id="1-1、操作系统概述"><a href="#1-1、操作系统概述" class="headerlink" title="1.1、操作系统概述"></a>1.1、操作系统概述</h2><p><strong>操作系统：</strong>软件的一类</p><p><strong>作用：</strong>协助用户调度硬件工作，充当用户和计算机硬件之间的桥梁</p><p>常见的操作系统：</p><p>PC端：Windows、Linux、MacOS</p><p>移动端：Android、IOS、鸿蒙系统</p><h2 id="1-2、初始Linux"><a href="#1-2、初始Linux" class="headerlink" title="1.2、初始Linux"></a>1.2、初始Linux</h2><h3 id="1-2-1-Linux的诞生"><a href="#1-2-1-Linux的诞生" class="headerlink" title="1.2.1 Linux的诞生"></a>1.2.1 Linux的诞生</h3><p>Linux由林纳斯·托瓦兹在1991年创立并发展至今成为服务器操作系统领域的核心系统。</p><h3 id="1-2-2-Linux系统的内核"><a href="#1-2-2-Linux系统的内核" class="headerlink" title="1.2.2 Linux系统的内核"></a>1.2.2 Linux系统的内核</h3><p>内核提供了Linux系统的主要功能，如硬件调度管理的能力。</p><p>Linux内核是免费开源的，任何人都可以查看内核的源代码，甚至是贡献源代码</p><p>网站：<a href="https://www.kernel.org/">https://www.kernel.org</a></p><p><img src="/2024/07/07/Linux/Linux/image-20221207212358655.png" alt="image-20221207212358655"></p><p>比如，播放音乐，无论用户使用自带音乐播放器还是自行安装的第三方播放器</p><p>均是由播放器程序，调用内核提供的相关功能，由内核调用CPU解码、音响发声等</p><h3 id="1-2-3-Linux系统发行版"><a href="#1-2-3-Linux系统发行版" class="headerlink" title="1.2.3 Linux系统发行版"></a>1.2.3 Linux系统发行版</h3><p>内核无法被用户直接使用，需要配合应用程序才能被用户使用。</p><p>在内核之上，封装系统级应用程序，组合在一起就称之为Linux发行版。</p><p>centOS，ubuntu</p><h2 id="1-3、虚拟机介绍"><a href="#1-3、虚拟机介绍" class="headerlink" title="1.3、虚拟机介绍"></a>1.3、虚拟机介绍</h2><p>虚拟机：通过虚拟化技术，在电脑内，虚拟出计算机硬件，并给虚拟的硬件安装操作系统，即可得到一台虚拟的电脑，称之为虚拟机</p><p>使用虚拟机的原因：</p><p>在其他其他系统中配置Linux环境进行学习</p><h2 id="1-4、VMware-WorkStation安装"><a href="#1-4、VMware-WorkStation安装" class="headerlink" title="1.4、VMware WorkStation安装"></a>1.4、VMware WorkStation安装</h2><h3 id="1-4-1、VMware-WorkStation软件"><a href="#1-4-1、VMware-WorkStation软件" class="headerlink" title="1.4.1、VMware WorkStation软件"></a>1.4.1、VMware WorkStation软件</h3><p><strong>虚拟化软件</strong></p><p>通过虚拟化集市，虚拟出计算机的硬件。</p><p><strong>下载地址：</strong><a href="https://www.vmware.com/cn/products/workstation-pro.html">https://www.vmware.com/cn/products/workstation-pro.html</a></p><h3 id="1-4-2、软件的安装"><a href="#1-4-2、软件的安装" class="headerlink" title="1.4.2、软件的安装"></a>1.4.2、软件的安装</h3><p>软件安装完成后，验证一下网络适配器是否正常配置。</p><p>或者通过快捷键：win + r<br>输入ncpa.cpl回车即可打开</p><h2 id="1-5、在VMware上安装Linux"><a href="#1-5、在VMware上安装Linux" class="headerlink" title="1.5、在VMware上安装Linux"></a>1.5、在VMware上安装Linux</h2><h3 id="1-5-1-下载CentOS操作系统"><a href="#1-5-1-下载CentOS操作系统" class="headerlink" title="1.5.1 下载CentOS操作系统"></a>1.5.1 下载CentOS操作系统</h3><p>首先，我们需要下载操作系统的安装文件，本次使用CentOS7.6版本进行学习：<br><a href="https://vault.centos.org/7.6.1810/isos/x86_64/">https://vault.centos.org/7.6.1810/isos/x86_64/</a>   (最后的&#x2F;不要漏掉）</p><p><img src="/2024/07/07/Linux/Linux/image-20221208115950907.png" alt="image-20221208115950907"></p><p>或者直接使用如下链接下载：<br><a href="https://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso">https://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso</a></p><h3 id="1-5-2-在VMware中安装CentOS操作系统"><a href="#1-5-2-在VMware中安装CentOS操作系统" class="headerlink" title="1.5.2 在VMware中安装CentOS操作系统"></a>1.5.2 在VMware中安装CentOS操作系统</h3><p>打开VMware软件</p><p><img src="/2024/07/07/Linux/Linux/image-20221208120052453.png" alt="image-20221208120052453"> </p><p>按照步骤创建虚拟机：</p><p><img src="/2024/07/07/Linux/Linux/image-20221208120138387.png" alt="image-20221208120138387"></p><p>点击完成后，即开启了CentOS系统的安装，耐心等待安装完成即可，后续都是自动化的。</p><p><img src="/2024/07/07/Linux/Linux/image-20221208120153131.png" alt="image-20221208120153131"> </p><p>点击用户名：<br><img src="/2024/07/07/Linux/Linux/image-20221208120206976.png" alt="image-20221208120206976"></p><p>输入密码：</p><p><img src="/2024/07/07/Linux/Linux/image-20221208120214175.png" alt="image-20221208120214175"></p><h2 id="1-6、远程连接Linux系统"><a href="#1-6、远程连接Linux系统" class="headerlink" title="1.6、远程连接Linux系统"></a>1.6、远程连接Linux系统</h2><h3 id="1-6-1-图形化和命令行"><a href="#1-6-1-图形化和命令行" class="headerlink" title="1.6.1 图形化和命令行"></a>1.6.1 图形化和命令行</h3><ul><li>图形化操作是指使用操作系统附带的图形化页面，以图形化的窗口形式获得操作反馈，从而对操作系统进行操作、使用</li><li>命令行操作是指使用各种命令，以文字字符的形式获得操作反馈，从而对操作系统进行操作、使用</li></ul><h3 id="1-6-2-FinalShell"><a href="#1-6-2-FinalShell" class="headerlink" title="1.6.2 FinalShell"></a>1.6.2 FinalShell</h3><p>我们使用VMware可以得到Linux虚拟机，但是在VMware中操作Linux的命令行页面不太方便，主要是：<br>内容的复制、粘贴跨越VMware不方便<br>文件的上传、下载跨越VMware不方便<br>也就是和Linux系统的各类交互，跨越VMware不方便</p><p>我们可以通过第三方软件，FinalShell，远程连接到Linux操作系统之上。<br>并通过FinalShell去操作Linux系统。<br>这样各类操作都会十分的方便。</p><p>FinalShell的下载地址为：<br>Windows:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.exe">http://www.hostbuf.com/downloads/finalshell_install.exe</a><br>Mac:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.pkg">http://www.hostbuf.com/downloads/finalshell_install.pkg</a><br>下载完成后双击打开安装。</p><h3 id="1-6-3-连接到Linux系统"><a href="#1-6-3-连接到Linux系统" class="headerlink" title="1.6.3 连接到Linux系统"></a>1.6.3 连接到Linux系统</h3><p>首先，先查询到Linux系统的IP地址<br><img src="/2024/07/07/Linux/Linux/image-20221208120523327.png" alt="image-20221208120523327"> </p><p>打开Finshell软件，配置到Linux系统的连接（Mac和Windows系统的操作一致，不再分开赘述）<br><img src="/2024/07/07/Linux/Linux/image-20221208120551815.png" alt="image-20221208120551815"> </p><p>按图示配置连接，并点击确定<br><img src="/2024/07/07/Linux/Linux/image-20221208120611311.png" alt="image-20221208120611311"> </p><p><img src="/2024/07/07/Linux/Linux/image-20221208120626447.png" alt="image-20221208120626447"> </p><p><img src="/2024/07/07/Linux/Linux/image-20221208120635094.png" alt="image-20221208120635094"> </p><p>如图，连接成功<br><img src="/2024/07/07/Linux/Linux/image-20221208120705488.png" alt="image-20221208120705488"> </p><p>注意：<br>Linux虚拟机如果重启，有可能，发生IP改变<br>如果改变IP需要在FinalShell中修改连接的IP地址</p><h2 id="1-7、扩展：WSL（Windows-Subsystem-for-Linux）"><a href="#1-7、扩展：WSL（Windows-Subsystem-for-Linux）" class="headerlink" title="1.7、扩展：WSL（Windows Subsystem for Linux）"></a>1.7、扩展：WSL（Windows Subsystem for Linux）</h2><p>WSL：Windows Subsystem for Linux，是用于Windows系统之上的Linux子系统。<br>作用很简单，可以在Windows系统中获得Linux系统环境，并完全直连计算机硬件，无需通过虚拟机虚拟硬件。</p><p>简而言之：<br>Windows10的WSL功能，可以无需单独虚拟一套硬件设备<br>就可以直接使用主机的物理硬件，构建Linux操作系统<br>并不会影响Windows系统本身的运行</p><p>安装：<a href="https://zhuanlan.zhihu.com/p/475462241">Windows 11 安装 WSL2 - 知乎 (zhihu.com)</a></p><h2 id="1-8、快照"><a href="#1-8、快照" class="headerlink" title="1.8、快照"></a>1.8、快照</h2><ol><li>快照有什么作用？<br>快照可以保存虚拟机的状态， 当虚拟机出现问题的时候， 可以通过预先制作的快照恢复到制作时候的状态， 用作备份用。</li><li>VMware Workstation 和 VMware Fusion 都支持制作快照去使用</li></ol><h1 id="二、Linux基础命令"><a href="#二、Linux基础命令" class="headerlink" title="二、Linux基础命令"></a>二、Linux基础命令</h1><h2 id="2-1、Linux的目录结构"><a href="#2-1、Linux的目录结构" class="headerlink" title="2.1、Linux的目录结构"></a>2.1、Linux的目录结构</h2><p><img src="/2024/07/07/Linux/Linux/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="2-2、Linux命令入门"><a href="#2-2、Linux命令入门" class="headerlink" title="2.2、Linux命令入门"></a>2.2、Linux命令入门</h2><h3 id="2-2-1-Linux命令基础"><a href="#2-2-1-Linux命令基础" class="headerlink" title="2.2.1 Linux命令基础"></a>2.2.1 Linux命令基础</h3><ul><li><p><strong>命令：</strong>即Linux操作指令，是系统内置的程序，可以以字符化的形式去使用</p></li><li><p><strong>命令行：</strong>即Linux终端，可以提供字符化的操作页面提供命令行</p></li></ul><p>Linux命令的通用格式</p><p><code>command [-options] [parameter]</code></p><ul><li>命令本体，即命令本身</li><li>可选选项，控制命令的行为细节</li><li>可选参数，控制命令的指向目标</li></ul><h3 id="2-2-2-ls命令入门"><a href="#2-2-2-ls命令入门" class="headerlink" title="2.2.2 ls命令入门"></a>2.2.2 ls命令入门</h3><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件<ul><li>隐藏文件是以<code>.</code>开头的</li></ul></li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221208205542925.png" alt="image-20221208205542925"></p><p><strong>命令的选项组合使用</strong></p><ul><li>命令的选项是可以组合使用的，比如：ls -lah，等同于ls -l -a -h</li></ul><p>HOME目录</p><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="2-3、目录切换指令（cd-pwd"><a href="#2-3、目录切换指令（cd-pwd" class="headerlink" title="2.3、目录切换指令（cd&#x2F;pwd)"></a>2.3、目录切换指令（cd&#x2F;pwd)</h2><h3 id="2-3-1-cd-切换工作目录"><a href="#2-3-1-cd-切换工作目录" class="headerlink" title="2.3.1 cd 切换工作目录"></a>2.3.1 cd 切换工作目录</h3><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>来自英文：Change Directory</p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><p><img src="/2024/07/07/Linux/Linux/image-20221208211409101.png" alt="image-20221208211409101"></p><h3 id="2-3-2-pwd-查看当前工作目录"><a href="#2-3-2-pwd-查看当前工作目录" class="headerlink" title="2.3.2 pwd 查看当前工作目录"></a>2.3.2 pwd 查看当前工作目录</h3><p>功能：展示当前工作目录</p><p>来自英文：Print Work Directory</p><p>语法：<code>pwd</code></p><p><img src="/2024/07/07/Linux/Linux/image-20221208211533134.png" alt="image-20221208211533134"> </p><h3 id="2-3-3-相对路径、绝对路径"><a href="#2-3-3-相对路径、绝对路径" class="headerlink" title="2.3.3 相对路径、绝对路径"></a>2.3.3 相对路径、绝对路径</h3><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h3 id="2-3-4-特殊路径符"><a href="#2-3-4-特殊路径符" class="headerlink" title="2.3.4 特殊路径符"></a>2.3.4 特殊路径符</h3><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="2-4、创建目录指令（mkdir）"><a href="#2-4、创建目录指令（mkdir）" class="headerlink" title="2.4、创建目录指令（mkdir）"></a>2.4、创建目录指令（mkdir）</h2><p>功能：创建文件夹</p><p>来自英文：Make Directory </p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221208214054343.png" alt="image-20221208214054343"> </p><p><img src="/2024/07/07/Linux/Linux/image-20221208214113063.png" alt="image-20221208214113063"> </p><p>注意：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要在HOME外操作<br>涉及到权限问题，HOME外无法成功</p><h2 id="2-5、文件操作指令"><a href="#2-5、文件操作指令" class="headerlink" title="2.5、文件操作指令"></a>2.5、文件操作指令</h2><p>（touch、cat、more、cp、mv）</p><h3 id="2-5-1-touch命令"><a href="#2-5-1-touch命令" class="headerlink" title="2.5.1 touch命令"></a>2.5.1 touch命令</h3><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li><li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221208214659002.png" alt="image-20221208214659002"></p><h3 id="2-5-2-cat命令"><a href="#2-5-2-cat命令" class="headerlink" title="2.5.2 cat命令"></a>2.5.2 cat命令</h3><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li><li>cat是直接将内容全部显示出来</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221208214955238.png" alt="image-20221208214955238"> </p><h3 id="2-5-3-more命令"><a href="#2-5-3-more命令" class="headerlink" title="2.5.3 more命令"></a>2.5.3 more命令</h3><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h3 id="2-5-4-cp命令"><a href="#2-5-4-cp命令" class="headerlink" title="2.5.4 cp命令"></a>2.5.4 cp命令</h3><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h3 id="2-5-5-mv命令"><a href="#2-5-5-mv命令" class="headerlink" title="2.5.5 mv命令"></a>2.5.5 mv命令</h3><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221208220054878.png" alt="image-20221208220054878"> </p><h3 id="2-5-6-rm命令"><a href="#2-5-6-rm命令" class="headerlink" title="2.5.6 rm命令"></a>2.5.6 rm命令</h3><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="2-6、查找命令（which、find）"><a href="#2-6、查找命令（which、find）" class="headerlink" title="2.6、查找命令（which、find）"></a>2.6、查找命令（which、find）</h2><h3 id="2-6-1-which命令"><a href="#2-6-1-which命令" class="headerlink" title="2.6.1 which命令"></a>2.6.1 which命令</h3><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h3 id="2-6-2-find命令"><a href="#2-6-2-find命令" class="headerlink" title="2.6.2 find命令"></a>2.6.2 find命令</h3><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><p>语法：<code>find 起始路径 -size +|-n[KMG]</code><br>+、- 表示大于和小于<br>n表示大小数字<br>kMG表示大小单位，k(小写字母)表示kb，M表示MB，G表示GB</p><p>示例：<br>查找小于10KB的文件： find &#x2F; -size -10k<br>查找大于100MB的文件：find &#x2F; -size +100M<br>查找大于1GB的文件：find &#x2F; -size +1G</p><h3 id="2-6-3-通配符"><a href="#2-6-3-通配符" class="headerlink" title="2.6.3 通配符"></a>2.6.3 通配符</h3><p>被查找文件名，支持使用通配符 * 来做模糊查询。<br>符号* 表示通配符，即匹配任意内容（包含空），示例：<br>test*，表示匹配任何以test开头的内容<br>*test，表示匹配任何以test结尾的内容<br><em>test</em>，表示匹配任何包含test的内容<br>基于通配符的含义，可以结合find命令做文件的模糊查询。</p><h2 id="2-7、grep、wc和管道符"><a href="#2-7、grep、wc和管道符" class="headerlink" title="2.7、grep、wc和管道符"></a>2.7、grep、wc和管道符</h2><h3 id="2-7-1-grep命令"><a href="#2-7-1-grep命令" class="headerlink" title="2.7.1 grep命令"></a>2.7.1 grep命令</h3><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h3 id="2-7-2-wc命令"><a href="#2-7-2-wc命令" class="headerlink" title="2.7.2 wc命令"></a>2.7.2 wc命令</h3><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h3 id="2-7-3-管道符"><a href="#2-7-3-管道符" class="headerlink" title="2.7.3 管道符|"></a>2.7.3 管道符|</h3><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将</p><p> a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="2-8、echo和重定向符"><a href="#2-8、echo和重定向符" class="headerlink" title="2.8、echo和重定向符"></a>2.8、echo和重定向符</h2><h3 id="2-8-1-echo命令"><a href="#2-8-1-echo命令" class="headerlink" title="2.8.1 echo命令"></a>2.8.1 echo命令</h3><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h3 id="2-8-2-反引号"><a href="#2-8-2-反引号" class="headerlink" title="2.8.2 &#96;反引号"></a>2.8.2 &#96;反引号</h3><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h3 id="2-8-3-tail命令"><a href="#2-8-3-tail命令" class="headerlink" title="2.8.3 tail命令"></a>2.8.3 tail命令</h3><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h3 id="2-8-4-head命令"><a href="#2-8-4-head命令" class="headerlink" title="2.8.4 head命令"></a>2.8.4 head命令</h3><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h3 id="2-8-5-重定向符"><a href="#2-8-5-重定向符" class="headerlink" title="2.8.5 重定向符"></a>2.8.5 重定向符</h3><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="2-9、vi编辑器"><a href="#2-9、vi编辑器" class="headerlink" title="2.9、vi编辑器"></a>2.9、vi编辑器</h2><p><img src="/2024/07/07/Linux/Linux/image-20221220160623738.png" alt="image-20221220160623738"></p><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="/2024/07/07/Linux/Linux/20221027215841.png" alt="image-20221027215841573"></p><p><img src="/2024/07/07/Linux/Linux/20221027215846.png" alt="image-20221027215846581"></p><p><img src="/2024/07/07/Linux/Linux/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="/2024/07/07/Linux/Linux/20221027215858.png" alt="image-20221027215858967"></p><h2 id="2-10-命令的选项"><a href="#2-10-命令的选项" class="headerlink" title="2.10 命令的选项"></a>2.10 命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="/2024/07/07/Linux/Linux/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p>man ls，就是查看ls命令的详细手册<br>man cd，就是查看cd命令的详细手册</p><p><img src="/2024/07/07/Linux/Linux/20221027220010.png" alt="image-20221027220009949"></p><p>大多数手册都是全英文的，如果阅读吃力，可以通过重定向符：man ls &gt; ls-man.txt，输出手册到文件<br>然后通过翻译软件翻译内容查看哦</p><h1 id="三、用户和权限"><a href="#三、用户和权限" class="headerlink" title="三、用户和权限"></a>三、用户和权限</h1><h2 id="3-1、root用户"><a href="#3-1、root用户" class="headerlink" title="3.1、root用户"></a>3.1、root用户</h2><h3 id="3-1-1-root用户（超级管理员）"><a href="#3-1-1-root用户（超级管理员）" class="headerlink" title="3.1.1 root用户（超级管理员）"></a>3.1.1 root用户（超级管理员）</h3><p>无论是Windows、MacOS、Linux均采用多用户的管理模式进行权限管理。</p><ul><li>在Linux系统中，拥有最大权限的账户名为：root（超级管理员）</li><li>而在前期，我们一直使用的账户是普通的用户：lixinqian</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221220161459179.png" alt="image-20221220161459179"> </p><h3 id="3-1-2-su和exit指令"><a href="#3-1-2-su和exit指令" class="headerlink" title="3.1.2 su和exit指令"></a>3.1.2 su和exit指令</h3><p>su指令</p><p>作用：账户切换的系统命令，</p><p>来源英文单词：Switch User<br>语法：<code>su [-] [用户名]</code></p><ul><li>符号是可选的，表示是否在切换用户后加载环境变量（后续讲解），建议带上<br>参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root<br>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：ctrl + d</li></ul><p>使用普通用户，切换到其它用户需要输入密码，如切换到root用户<br>使用root用户切换到其它用户，无需密码，可以直接切换</p><h3 id="3-1-3-sudo命令"><a href="#3-1-3-sudo命令" class="headerlink" title="3.1.3 sudo命令"></a>3.1.3 sudo命令</h3><p>在我们得知root密码的时候，可以通过su命令切换到root得到最大权限。<br>但是我们不建议长期使用root用户，避免带来系统损坏。</p><p>我们可以使用sudo命令，为普通的命令授权，临时以root身份执行。</p><p>语法：<code>sudo 其他命令</code><br>在其它命令之前，带上sudo，即可为这一条命令临时赋予root授权</p><p>但是并不是所有的用户，都有权利使用sudo，我们需要为普通用户配置sudo认证</p><p><img src="/2024/07/07/Linux/Linux/image-20221220161727878.png" alt="image-20221220161727878"> </p><h2 id="3-2、用户、用户组管理"><a href="#3-2、用户、用户组管理" class="headerlink" title="3.2、用户、用户组管理"></a>3.2、用户、用户组管理</h2><h3 id="3-2-1-Linux用户管理模式"><a href="#3-2-1-Linux用户管理模式" class="headerlink" title="3.2.1 Linux用户管理模式"></a>3.2.1 Linux用户管理模式</h3><ul><li>Linux可以支持多用户、多用户组、用户加入多个组</li><li>Linux权限管控的单元是用户级别和用户组级别</li></ul><h3 id="3-2-2-用户组管理"><a href="#3-2-2-用户组管理" class="headerlink" title="3.2.2 用户组管理"></a>3.2.2 用户组管理</h3><p>以下命令需root用户执行</p><ul><li>创建用户组<ul><li><code>groupadd 用户组名</code></li></ul></li><li>删除用户组<ul><li><code>groupdel 用户组名</code></li></ul></li></ul><h3 id="3-2-3-用户管理"><a href="#3-2-3-用户管理" class="headerlink" title="3.2.3 用户管理"></a>3.2.3 用户管理</h3><p>以下命令需root用户执行</p><ul><li>创建用户<ul><li><code>useradd [-g -d] 用户名</code></li><li>选项：-g指定用户的组，不指定-g，会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</li><li>选项：-d指定用户HOME路径，不指定，HOME目录默认在：&#x2F;home&#x2F;用户名</li></ul></li><li>删除用户<ul><li><code>userdel [-r] 用户名</code></li><li>选项：-r，删除用户的HOME目录，不使用-r，删除用户时，HOME目录保留</li></ul></li><li>产看用户所属组<ul><li><code>id [用户名]</code></li><li>参数：用户名，被查看的用户，如果不提供则查看自身</li></ul></li><li>修改用户所属组<ul><li><code>usermod -aG 用户组 用户名</code></li><li>将指定用户加入指定用户组</li></ul></li></ul><h3 id="3-2-4-getent"><a href="#3-2-4-getent" class="headerlink" title="3.2.4 getent"></a>3.2.4 getent</h3><p><img src="/2024/07/07/Linux/Linux/image-20221220163811465.png" alt="image-20221220163811465"> </p><p><img src="/2024/07/07/Linux/Linux/image-20221220163820246.png" alt="image-20221220163820246"> </p><h2 id="3-3、查看权限控制"><a href="#3-3、查看权限控制" class="headerlink" title="3.3、查看权限控制"></a>3.3、查看权限控制</h2><h3 id="3-3-1-认知权限信息"><a href="#3-3-1-认知权限信息" class="headerlink" title="3.3.1 认知权限信息"></a>3.3.1 认知权限信息</h3><p>通过ls -l 可以以列表形式查看内容，并显示权限细节<br><img src="/2024/07/07/Linux/Linux/image-20221220165137119.png" alt="image-20221220165137119"></p><p>序号1，表示文件、文件夹的权限控制信息<br>序号2，表示文件、文件夹所属用户<br>序号3，表示文件、文件夹所属用户组</p><p><img src="/2024/07/07/Linux/Linux/image-20221220165215384.png" alt="image-20221220165215384"> </p><h3 id="3-3-2-rwx"><a href="#3-3-2-rwx" class="headerlink" title="3.3.2 rwx"></a>3.3.2 rwx</h3><p>那么，rwx到底代表什么呢？</p><ul><li>r表示读权限</li><li>w表示写权限</li><li>x表示执行权限</li></ul><p>针对文件、文件夹的不同，rwx的含义有细微差别</p><ul><li>r，针对文件可以查看文件内容<ul><li>针对文件夹，可以查看文件夹内容，如ls命令</li></ul></li><li>w，针对文件表示可以修改此文件<ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li>x，针对文件表示可以将文件作为程序执行<ul><li>针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</li></ul></li></ul><h2 id="3-4、修改权限控制"><a href="#3-4、修改权限控制" class="headerlink" title="3.4、修改权限控制"></a>3.4、修改权限控制</h2><h3 id="3-4-1-chmod"><a href="#3-4-1-chmod" class="headerlink" title="3.4.1 chmod"></a>3.4.1 chmod</h3><p>功能：修改文件、文件夹的权限细节</p><p>限制：只能是文件、文件夹的所属用户或root有权修改</p><p>语法：<code>chmod [-R] 权限 文件或文件夹</code></p><p>选项：-R，对文件夹内的全部内容应用同样规则</p><p>示例：</p><ul><li><code>chmod u=rwx,g=rx,o=x hello.txt</code> ，将文件权限修改为：<code>rwxr-x--x</code><ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其它用户权限</li></ul></li><li><code>chmod -R u=rwx,g=rx,o=x test</code>，将文件夹test以及文件夹内全部内容权限设置为：<code>rwxr-x--x</code></li><li>除此之外，还有快捷写法：<code>chmod 751 hello.txt</code></li><li>快捷写法：就是将用户、用户组、其他用户的权限都按照二进制的形式表示</li></ul><h3 id="3-4-2-chown"><a href="#3-4-2-chown" class="headerlink" title="3.4.2 chown"></a>3.4.2 chown</h3><p>功能：修改文件、文件夹的所属用户、组<br>限制，只可root执行<br>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code><br>选项，-R，同chmod，对文件夹内全部内容应用相同规则<br>选项，用户，修改所属用户<br>选项，用户组，修改所属用户组<br>:用于分隔用户和用户组</p><p>示例：<br>chown root hello.txt，将hello.txt所属用户修改为root<br>chown :root hello.txt，将hello.txt所属用户组修改为root<br>chown root:itheima hello.txt，将hello.txt所属用户修改为root，用户组修改为itheima<br>chown -R root test，将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</p><h1 id="四、Linux使用操作"><a href="#四、Linux使用操作" class="headerlink" title="四、Linux使用操作"></a>四、Linux使用操作</h1><h2 id="4-1、快捷键"><a href="#4-1、快捷键" class="headerlink" title="4.1、快捷键"></a>4.1、快捷键</h2><ol><li>ctrl + c 强制停止<ol><li>停止程序</li><li>停止输入错误的命令</li></ol></li><li>ctrl + d 退出登出<ol><li>退出账户登录</li><li>退出某些特定程序的专属页面</li><li>不能退出vi&#x2F;vim</li></ol></li><li>history 查看历史命令</li><li>!命令前缀，自动匹配上一个命令<ol><li><code>!py 自动搜索上面相同前缀的命令</code></li><li><img src="/2024/07/07/Linux/Linux/image-20221222150710168.png" alt="image-20221222150710168"></li></ol></li><li>ctrl + r，搜索历史命令<ol><li><img src="/2024/07/07/Linux/Linux/image-20221222150745830.png" alt="image-20221222150745830"></li><li>如果搜索到的内容是你需要的，那么：<br>回车键可以直接执行<br>键盘左右键，可以得到此命令（不执行）</li></ol></li><li>ctrl + a | e，光标移动到命令开始或结束</li><li>ctrl + ← | →，左右跳单词</li><li>ctrl + l 或 clear命令 清屏</li></ol><h2 id="4-2、软件安装"><a href="#4-2、软件安装" class="headerlink" title="4.2、软件安装"></a>4.2、软件安装</h2><ul><li><p>CentOS系统使用：</p><ul><li>yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</li><li>yum [-y] [install | remove | search] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li><p>Ubuntu系统使用</p><ul><li>apt  [-y] [install | remove | search]软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="4-3、systemctl"><a href="#4-3、systemctl" class="headerlink" title="4.3、systemctl"></a>4.3、systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>系统内置服务均可被systemctl控制<br>第三方软件，如果自动注册了可以被systemctl控制<br>第三方软件，如果没有自动注册，可以手动注册（后续学习</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="4-4、软链接"><a href="#4-4、软链接" class="headerlink" title="4.4、软链接"></a>4.4、软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221222162246791.png" alt="image-20221222162246791"> </p><h2 id="4-5、日期和时区"><a href="#4-5、日期和时区" class="headerlink" title="4.5、日期和时区"></a>4.5、日期和时区</h2><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="/2024/07/07/Linux/Linux/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="/2024/07/07/Linux/Linux/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="/2024/07/07/Linux/Linux/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="/2024/07/07/Linux/Linux/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>修改时区为中国时区</p><p><img src="/2024/07/07/Linux/Linux/20221027220554.png" alt="image-20221027220554654"></p><h3 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h3><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="4-6、IP地址和主机名"><a href="#4-6、IP地址和主机名" class="headerlink" title="4.6、IP地址和主机名"></a>4.6、IP地址和主机名</h2><h3 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h3><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>可以通过主机名找到对应计算机的IP地址，这就是主机名映射（域名解析）<br>先通过系统本地的记录去查找，如果找不到就联网去公开DNS服务器去查找<br>比如，我们在浏览器内打开：<a href="http://www.baidu.com,会打开百度的网址/">www.baidu.com，会打开百度的网址</a><br>其中，<a href="http://www.baidu.com，是百度的网址，我们称之为：域名">www.baidu.com，是百度的网址，我们称之为：域名</a></p><p><img src="/2024/07/07/Linux/Linux/image-20221222173301043.png" alt="image-20221222173301043"> </p><ul><li>先查看本机的记录（私人地址本）<ul><li>Windows看：C:\Windows\System32\drivers\etc\hosts</li><li>Linux看：&#x2F;etc&#x2F;hosts</li></ul></li><li>再联网去DNS服务器（如114.114.114.114，8.8.8.8等）询问</li></ul><h3 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h3><p>当前我们虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的。<br>DHCP：动态获取IP地址，即每次重启设备后都会获取一次，可能导致IP地址频繁变更</p><p>原因1：办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常变化我们就要频繁修改适配很麻烦</p><p>原因2：在刚刚我们配置了虚拟机IP地址和主机名的映射，如果IP频繁更改，我们也需要频繁更新映射关系</p><p>综上所述，我们需要IP地址固定下来，不要变化了。</p><p><img src="/2024/07/07/Linux/Linux/image-20221223103330084.png" alt="image-20221223103330084"></p><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.152.128&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.152.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.152.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-7、网络传输"><a href="#4-7、网络传输" class="headerlink" title="4.7、网络传输"></a>4.7、网络传输</h2><h3 id="4-7-1、下载和网络请求"><a href="#4-7-1、下载和网络请求" class="headerlink" title="4.7.1、下载和网络请求"></a>4.7.1、下载和网络请求</h3><h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="/2024/07/07/Linux/Linux/20221027221129.png" alt="image-20221027221129782"></p><h3 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h3><p><img src="/2024/07/07/Linux/Linux/20221027221149.png" alt="image-20221027221148964"></p><h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><p><img src="/2024/07/07/Linux/Linux/20221027221201.png" alt="image-20221027221201079"></p><p><img src="/2024/07/07/Linux/Linux/20221027221210.png" alt="image-20221027221210518"></p><h3 id="4-7-2、端口"><a href="#4-7-2、端口" class="headerlink" title="4.7.2、端口"></a>4.7.2、端口</h3><p>什么是端口？</p><ul><li><p>端口是指计算机和外部交互的出入口，可以分为物理端口和虚拟端口</p></li><li><p>物理端口：USB、HDMI、DP、VGA、RJ45等</p></li><li><p>虚拟端口：操作系统和外部交互的出入口</p></li></ul><p>IP只能确定计算机，通过端口才能锁定要交互的程序</p><p>端口的划分</p><ul><li><p>公认端口：1~1023，用于系统内置或常用知名软件绑定使用</p></li><li><p>注册端口：1024~49151，用于松散绑定使用（用户自定义）</p></li><li><p>动态端口：49152~65535，用于临时使用（多用于出口）</p></li></ul><p>查看端口占用</p><p>nmap IP地址，查看指定IP的对外暴露端口<br><img src="/2024/07/07/Linux/Linux/20221027221241.png" alt="image-20221027221241123"></p><p>netstat -anp | grep 端口号，查看本机指定端口号的占用情况</p><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><p><img src="/2024/07/07/Linux/Linux/image-20221223110120135.png" alt="image-20221223110120135"></p><h2 id="4-8、进程管理"><a href="#4-8、进程管理" class="headerlink" title="4.8、进程管理"></a>4.8、进程管理</h2><ol><li>什么是进程？</li></ol><p>进程是指程序在操作系统内运行后被注册为系统内的一个进程，并拥有独立的进程ID（进程号）</p><ol start="2"><li>管理进程的命令</li></ol><p>ps -ef 查看进程信息<br><img src="/2024/07/07/Linux/Linux/image-20221223111253580.png" alt="image-20221223111253580"></p><p>ps -ef | grep 关键字 过滤指定关键字进程信息<br><img src="/2024/07/07/Linux/Linux/image-20221223111320996.png" alt="image-20221223111320996"></p><p>kill [-9] 进程号 关闭指定进程号的进程<br><img src="/2024/07/07/Linux/Linux/image-20221223111332360.png" alt="image-20221223111332360"></p><h2 id="4-9、主机状态监控"><a href="#4-9、主机状态监控" class="headerlink" title="4.9、主机状态监控"></a>4.9、主机状态监控</h2><h3 id="4-9-1、系统资源监控top命令"><a href="#4-9-1、系统资源监控top命令" class="headerlink" title="4.9.1、系统资源监控top命令"></a>4.9.1、系统资源监控top命令</h3><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p><img src="/2024/07/07/Linux/Linux/image-20221223145308409.png" alt="image-20221223145308409"> </p><p><img src="/2024/07/07/Linux/Linux/image-20221223145320545.png" alt="image-20221223145320545"> </p><p><img src="/2024/07/07/Linux/Linux/image-20221223145329645.png" alt="image-20221223145329645"> </p><p>可用选项：</p><p><img src="/2024/07/07/Linux/Linux/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="/2024/07/07/Linux/Linux/20221027221354.png" alt="image-20221027221354137"></p><h3 id="4-9-2、磁盘监控"><a href="#4-9-2、磁盘监控" class="headerlink" title="4.9.2、磁盘监控"></a>4.9.2、磁盘监控</h3><p>查看磁盘占用</p><p><img src="/2024/07/07/Linux/Linux/20221027221413.png" alt="image-20221027221413787"></p><h3 id="4-9-3、网络监控"><a href="#4-9-3、网络监控" class="headerlink" title="4.9.3、网络监控"></a>4.9.3、网络监控</h3><p>iostat命令</p><p>查看CPU、磁盘的相关信息</p><p><img src="/2024/07/07/Linux/Linux/20221027221440.png" alt="image-20221027221439990"></p><p><img src="/2024/07/07/Linux/Linux/20221027221514.png" alt="image-20221027221514237"></p><p>sar命令</p><p>查看网络统计</p><p><img src="/2024/07/07/Linux/Linux/20221027221545.png" alt="image-20221027221545822"></p><h2 id="4-10、环境变量"><a href="#4-10、环境变量" class="headerlink" title="4.10、环境变量"></a>4.10、环境变量</h2><h3 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h3><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量是操作系统（Windows、Linux、Mac）在运行的时候，记录的一些关键性信息，用以辅助系统运行。<br>在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</p><p><img src="/2024/07/07/Linux/Linux/image-20221223145453912.png" alt="image-20221223145453912"> </p><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li><li><img src="/2024/07/07/Linux/Linux/image-20221223145535989.png" alt="image-20221223145535989"></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><p><img src="/2024/07/07/Linux/Linux/image-20221223145559821.png" alt="image-20221223145559821"></p><h2 id="4-11、上传、下载"><a href="#4-11、上传、下载" class="headerlink" title="4.11、上传、下载"></a>4.11、上传、下载</h2><p>我们可以通过FinalShell工具，方便的和虚拟机进行数据交换。</p><p>在FinalShell软件的下方窗体中，提供了Linux的文件系统视图，可以方便的：</p><ul><li>浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</li><li>浏览文件系统，找到合适的目录，将本地电脑的文件拓展进入，即可方便的上传数据到Linux中</li></ul><p><img src="/2024/07/07/Linux/Linux/image-20221223150445424.png" alt="image-20221223150445424"></p><p>rz、sz命令</p><p>当然，除了通过FinalShell的下方窗体进行文件的传输以外，也可以通过rz、sz命令进行文件传输。</p><p>rz、sz命令需要安装，可以通过：yum -y install lrzsz，即可安装。</p><ul><li>rz命令，进行上传，语法：直接输入rz即可</li><li><img src="/2024/07/07/Linux/Linux/image-20221223150554747.png" alt="image-20221223150554747"></li><li>sz命令进行下载，语法：sz 要下载的文件</li><li><img src="/2024/07/07/Linux/Linux/image-20221223150610423.png" alt="image-20221223150610423"></li></ul><p>文件会自动下载到桌面的：fsdownload文件夹中。<br>注意，rz、sz命令需要终端软件支持才可正常运行<br>FinalShell、SecureCRT、XShell等常用终端软件均支持此操作</p><h2 id="4-12、压缩解压"><a href="#4-12、压缩解压" class="headerlink" title="4.12、压缩解压"></a>4.12、压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="/2024/07/07/Linux/Linux/20221027221906-167178047054416.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="/2024/07/07/Linux/Linux/20221027221939.png" alt="image-20221027221939899"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="/2024/07/07/Linux/Linux/20221027222512-167178047054822.png" alt="image-20221027222512274"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_基础(二)-系统软件安装</title>
      <link href="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="实战章节：在Linux上部署各类软件"><a href="#实战章节：在Linux上部署各类软件" class="headerlink" title="实战章节：在Linux上部署各类软件"></a>实战章节：在Linux上部署各类软件</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么学习各类软件在Linux上的部署"><a href="#为什么学习各类软件在Linux上的部署" class="headerlink" title="为什么学习各类软件在Linux上的部署"></a>为什么学习各类软件在Linux上的部署</h2><p>在前面，我们学习了许多的Linux命令和高级技巧，这些知识点比较零散，同学们跟随着课程的内容进行练习虽然可以基础掌握这些命令和技巧的使用，但是并没有一些具体的实操能够串联起来这些知识点。</p><p>所以，现在我们设计了各类软件在Linux上部署安装的实战章节，可以让同学们：</p><ul><li>对前面学习的各类操作命令进行复习和练习，从而深度掌握它们</li><li>本章节中演示部署的软件，包含了IT行业各类岗位中所必须使用的，如：Java后台、大数据开发、运维开发、测试、AI等。无论学习Linux后从事什么岗位，这些内容都会给你带来帮助</li></ul><blockquote><p>对于零基础学员，实战课程中所讲解的软件大概率多数大家并不了解。</p><p>所以，课程仅涉及到安装部署，不对软件的使用做详细说明。</p><p>同学们在这个过程中，可能会遇到各种各样的错误，<code>不要怕</code>，解决它，将会给你带来极大的提升。</p></blockquote><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>对于本部分的内容学习，我们设计两个目标：</p><ul><li><p>对于零基础或未从业的学员，不要求深入理解所安装部署的软件是什么，仅仅能够跟随课程成功的将其部署安装并运行成功即可</p><p>在这个过程中，主要锻炼大家对Linux操作系统的熟练度，此乃零基础未从业学员的第一学习目标</p></li><li><p>对于有基础或已从业的学员，本章节讲解的软件涵盖了大多数IT从业者所能接触到的，特别是大数据开发、后端开发两个主流方向，可以作为参考资料，以便在工作中有所帮助。</p></li></ul><p>本章节内的各类软件安装，&#x3D;&#x3D;不强制要求全部学习&#x3D;&#x3D;</p><ol><li>零基础学员，建议全部学习，作为前面学习内容的总结和实战</li><li>IT从业者、有经验学员，可以按需选择，选择工作中需要用到的进行学习</li></ol><blockquote><p>章节内包含的软件并非100%涵盖了IT开发领域中所需要的内容。</p><p>如果您对某些软件的安装有强烈需求，且课程中没有提供教程，可以私信B站：”黑马大数据曹老师”，老师会酌情根据时间安排补充上去哦。</p></blockquote><h2 id="为什么不使用PPT而是使用文档进行授课"><a href="#为什么不使用PPT而是使用文档进行授课" class="headerlink" title="为什么不使用PPT而是使用文档进行授课"></a>为什么不使用PPT而是使用文档进行授课</h2><p>从现在开始，将要进入到Linux的实操阶段，在这个阶段我们将会涉及到非常多的软件部署等操作，涉及到：</p><ul><li>各类命令的使用</li><li>各种过程的结果</li><li>复杂的流程步骤</li><li>等</li></ul><p>这些信息的展示，并不适合于使用PPT作为载体进行授课，所以从现在开始我们将使用操作文档的模式为大家进行讲解。</p><blockquote><p>使用文档模式还有一个好处，除了学习视频以外，拿到课程中使用的操作文档，同样可以作为重要的参考手册进行使用。</p><p>一举两得</p></blockquote><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ol><li>实战章节要求同学们&#x3D;&#x3D;务必全部学习前面的知识点&#x3D;&#x3D;，即：初识Linux、Linux基础命令、Linux权限管理、Linux高阶技巧这4个章节，请勿跳过前面的章节学习实战章节。</li><li>实战章节中会开启多台虚拟机，请尽量确保电脑的内存在：8GB（包含8GB）以上。如内存不足可以扩充内存条或购买阿里云、UCloud等云服务器临时使用（1个月多台低配服务器几十块左右）</li></ol><blockquote><p>对于云平台上购买服务器，可以参阅最后的章节（云服务）</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下面全部的软件安装的相关流程，90%都是取自软件自身的官方网站。</p><p>一个合格的程序员要有良好的信息收集能力哦</p><h1 id="MySQL数据库管理系统安装部署【简单】"><a href="#MySQL数据库管理系统安装部署【简单】" class="headerlink" title="MySQL数据库管理系统安装部署【简单】"></a>MySQL数据库管理系统安装部署【简单】</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。</p><p>MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。</p><p>让我们从MySQL开始，进行实战的Linux软件安装部署。</p><p>本次课程分为2个版本进行安装：</p><ul><li>MySQL 5.7版本安装</li><li>MySQL 8.x版本安装</li></ul><blockquote><p>由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍</p></blockquote><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>MySQL的安装过程中，除了会使用Linux命令外，还会使用到少量的数据库专用的：SQL语句</p><p>对于SQL语句我们并未涉及，所以可以跟随教程的内容，复制粘贴即可</p><p>如对MySQL感兴趣，可以学习BiliBili黑马程序员视频：<a href="https://www.bilibili.com/video/BV1iF411z7Pu">2022新版黑马程序员MySQL知识精讲+mysql实战案例_零基础mysql数据库入门到高级全套教程</a></p><blockquote><p>如有时间，建议可以在学习完Linux系统之后，学习一下MySQL数据库</p><p>无论从事什么方面的开发，Java后端、大数据、AI、前端、Linux运维等，都会要求掌握MySQL数据库的</p><p>可以说，MySQL是IT开发从业者必备的技能了。</p></blockquote><h2 id="MySQL5-7版本在CentOS系统安装"><a href="#MySQL5-7版本在CentOS系统安装" class="headerlink" title="MySQL5.7版本在CentOS系统安装"></a>MySQL5.7版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><p>MySQL的安装我们可以通过前面学习的yum命令进行。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182514.png" alt="image-20221012182514865"></p><blockquote><p>由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：</p><ul><li>导入MySQL仓库的密钥</li><li>配置MySQLQ的yum仓库</li></ul></blockquote></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum module disable mysql</span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182556.png" alt="image-20221012182555420"></p></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182716.png" alt="image-20221012182716598"></p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>主要配置管理员用户root的密码以及配置允许远程登录的权限。</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182744.png" alt="image-20221012182744115"></p></li><li><p>登陆MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012182806.png" alt="image-20221012182805966"></p></li><li><p>修改root用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在MySQL控制台内执行</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 如果你想设置简单密码，需要降低Mysql的密码安全级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW; # 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">4</span>; # 密码长度最低<span class="number">4</span>位即可</span><br><span class="line"></span><br><span class="line"># 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;简单密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root运行远程登录</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 授权root远程登录</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> root@&quot;IP地址&quot; identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;  </span><br><span class="line"># IP地址即允许登陆的IP地址，也可以填写<span class="operator">%</span>，表示允许任何地址</span><br><span class="line"># 密码表示给远程登录独立设置密码，和本地登陆的密码可以不同</span><br><span class="line"></span><br><span class="line"># 刷新权限，生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012183746.png" alt="image-20221012183746802"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL8-0版本在CentOS系统安装"><a href="#MySQL8-0版本在CentOS系统安装" class="headerlink" title="MySQL8.0版本在CentOS系统安装"></a>MySQL8.0版本在CentOS系统安装</h2><blockquote><p>注意：安装操作需要root权限</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql8.x版本 yum库</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>使用yum安装MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum module disable mysql</span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，启动MySQL并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld# 启动</span><br><span class="line">systemctl enable mysqld# 开机自启</span><br></pre></td></tr></table></figure><blockquote><p>MySQL安装完成后，会自动配置为名称叫做：<code>mysqld</code>的服务，可以被systemctl所管理</p></blockquote></li><li><p>检查MySQL的运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>主要修改root密码和允许root远程登录</p><ol><li><p>获取MySQL的初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>登录MySQL数据库系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p，表示使用密码登陆</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure></li><li><p>修改root密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></li><li><p>[扩展]，配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure></li><li><p>允许root远程登录，并设置远程登录密码</p><blockquote><p>默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统</p><p>请注意，允许root远程登录会带来安全风险</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台页面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 退出命令</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 或者通过快捷键退出：ctrl <span class="operator">+</span> d</span><br></pre></td></tr></table></figure></li><li><p>检查端口</p><p>MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 3306</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221012192303.png" alt="image-20221012192303607"></p></li></ol><p>至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。</p><h2 id="MySQL5-7版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL5-7版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL5.7版本在Ubuntu（WSL环境）系统安装"></a>MySQL5.7版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以我们需要额外的步骤才可以安装5.7版本的MySQL</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载apt仓库文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载apt仓库的安装包，Ubuntu的安装包是.deb文件</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094103.png" alt="image-20221016094103315"></p></li><li><p>配置apt仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用dpkg命令安装仓库</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.12-1_all.deb</span><br></pre></td></tr></table></figure><p>弹出框中选择：<code>ubuntu bionic</code> （Ubuntu18.04系统的代号是bionic，选择18.04的版本库用来安装）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094142.png" alt="image-20221016094142343"></p><p>弹出框中选择：<code>MySQL Server &amp; Cluster</code></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094216.png" alt="image-20221016094216377"></p><p>弹出框中选择：<code>mysql-5.7</code></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094254.png" alt="image-20221016094254397"></p><p>最后选择：<code>ok</code></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094306.png" alt="image-20221016094306917"></p></li><li><p>更新apt仓库的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先导入仓库的密钥信息</span></span><br><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新仓库信息</span></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>检查是否成功配置MySQL5.7的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy mysql-server</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094546.png" alt="image-20221016094546943"></p><p>看到如图所示字样，即成功</p></li><li><p>安装MySQL5.7</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用apt安装mysql客户端和mysql服务端</span></span><br><span class="line">apt install -f -y mysql-client=5.7* mysql-community-server=5.7*</span><br></pre></td></tr></table></figure><p>弹出框中输入root密码并选择ok，密码任意，课程中以123456代替</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094941.png" alt="image-20221016094941439"></p><p>再次输入root密码确认</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016094954.png" alt="image-20221016094954505"></p></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095259.png" alt="image-20221016095259172"></p></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095458.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095537.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095621.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101232.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101324.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101404.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101442.png" alt="image-20221016101442459"></p></li></ol></li><li><p>登陆MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入密码即可登陆成功</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101524.png" alt="image-20221016101524498"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h2 id="MySQL8-0版本在Ubuntu（WSL环境）系统安装"><a href="#MySQL8-0版本在Ubuntu（WSL环境）系统安装" class="headerlink" title="MySQL8.0版本在Ubuntu（WSL环境）系统安装"></a>MySQL8.0版本在Ubuntu（WSL环境）系统安装</h2><blockquote><p>课程中配置的WSL环境是最新的Ubuntu22.04版本，这个版本的软件商店内置的MySQL是8.0版本</p><p>所以直接可以通过apt安装即可</p></blockquote><blockquote><p>注意，课程是以WSL获得的Ubuntu操作系统环境。</p><p>如果你通过VMware虚拟机的方式获得了Ubuntu操作系统环境，操作步骤不用担心，和课程中使用WSL环境是&#x3D;&#x3D;完全一致的&#x3D;&#x3D;</p></blockquote><p>安装操作需root权限，你可以：</p><ol><li><p>通过 sudo su -，切换到root用户</p><blockquote><p>课程中选择这种方式操作</p></blockquote></li><li><p>或在每一个命令前，加上sudo，用来临时提升权限</p></li></ol><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><ol><li><p>如果已经安装过MySQL5.7版本，需要卸载仓库信息哦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载MySQL5.7版本</span></span><br><span class="line">apt remove -y mysql-client=5.7* mysql-community-server=5.7*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载5.7的仓库信息</span></span><br><span class="line">dpkg -l | grep mysql | awk &#x27;&#123;print $2&#125;&#x27; | xargs dpkg -P</span><br></pre></td></tr></table></figure></li><li><p>更新apt仓库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure></li><li><p>安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y mysql-server</span><br></pre></td></tr></table></figure></li><li><p>启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start# 启动</span><br><span class="line">/etc/init.d/mysql stop# 停止</span><br><span class="line">/etc/init.d/mysql status# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>登陆MySQL设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行：mysql</span></span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>退出MySQL控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>对MySQL进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令，此命令是MySQL安装后自带的配置程序</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过<span class="built_in">which</span>命令查看到这个自带程序所在的位置</span></span><br><span class="line">root@DESKTOP-Q89USRE:~# which mysql_secure_installation</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><ol><li><p>输入密码：</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095458.png" alt="image-20221016095458755"></p></li><li><p>是否开启密码验证插件，如果需要增强密码安全性，输入<code>y</code>并回车，不需要直接回车（课程中选择直接回车）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095537.png" alt="image-20221016095537716"></p></li><li><p>是否更改root密码，需要输入<code>y</code>回车，不需要直接回车（课程不更改）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016095621.png" alt="image-20221016095621386"></p></li><li><p>是否移除匿名用户，移除输入<code>y</code>回车，不移除直接回车（课程选择移除）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101232.png" alt="image-20221016101232827"></p></li><li><p>是否进制root用户远程登录，禁止输入<code>y</code>回车，不禁止直接回车（课程选择不禁止）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101324.png" alt="image-20221016101324577"></p></li><li><p>是否移除自带的测试数据库，移除输入<code>y</code>回车，不移除直接回车（课程选择不移除）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101404.png" alt="image-20221016101404392"></p></li><li><p>是否刷新权限，刷新输入<code>y</code>回车，不刷新直接回车（课程选择刷新）</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016101442.png" alt="image-20221016101442459"></p></li></ol></li><li><p>重新登陆MySQL（用更改后的密码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221016110414.png" alt="image-20221016110414182"></p></li></ol><p>至此，在Ubuntu上安装MySQL5.7版本成功。</p><h1 id="Tomcat安装部署【简单】"><a href="#Tomcat安装部署【简单】" class="headerlink" title="Tomcat安装部署【简单】"></a>Tomcat安装部署【简单】</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。</p><p>简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。</p><blockquote><p>即让用户开发的WEB应用程序，变成可以被访问的网页。</p></blockquote><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><p>Tomcat的安装非常简单，主要分为2部分：</p><ol><li>安装JDK环境</li><li>解压并安装Tomcat</li></ol><blockquote><p>本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本</p><p>课程中使用的JDK版本是：JDK8u351版本</p></blockquote><h3 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h3><ol><li><p>下载JDK软件</p><p><a href="https://www.oracle.com/java/technologies/downloads">https://www.oracle.com/java/technologies/downloads</a></p><p>在页面下方找到：</p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163411.png" alt="image-20221017163411651" style="zoom: 67%;"><p>下载<code>jdk-8u351-linux-x64.tar.gz</code></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163440.png" alt="image-20221017163440491"></p><p>&#x3D;&#x3D;在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）&#x3D;&#x3D;</p></li><li><p>登陆Linux系统，切换到root用户</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163607.png"></p></li><li><p>通过FinalShell，上传下载好的JDK安装包</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017163706.png" alt="image-20221017163706026"></p></li><li><p>创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：&#x2F;export&#x2F;server 内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>解压缩JDK安装文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>配置JDK的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/jdk1.8.0_351 /export/server/jdk</span><br></pre></td></tr></table></figure></li><li><p>配置JAVA_HOME环境变量，以及将$JAVA_HOME&#x2F;bin文件夹加入PATH环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/profile文件</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>生效环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>配置java执行程序的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除系统自带的java程序</span></span><br><span class="line">rm -f /usr/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接我们自己安装的java程序</span></span><br><span class="line">ln -s /export/server/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li><li><p>执行验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure></li></ol><h3 id="解压并部署Tomcat"><a href="#解压并部署Tomcat" class="headerlink" title="解压并部署Tomcat"></a>解压并部署Tomcat</h3><blockquote><p>Tomcat建议使用非Root用户安装并启动</p><p>可以创建一个用户：tomcat用以部署</p></blockquote><ol><li><p>首先，放行tomcat需要使用的8080端口的外部访问权限</p><blockquote><p>CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部</p><p>所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p><p>放行有2种操作方式：</p><ol><li>关闭防火墙</li><li>配置防火墙规则，放行端口</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭防火墙</span><br><span class="line">systemctl disable firewalld# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行8080端口的外部访问</span></span><br><span class="line">firewall-cmd --add-port=8080/tcp --permanent# --add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span><br><span class="line">firewall-cmd --reload# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure><blockquote><p>方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸</p><p>防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。</p></blockquote></li><li><p>以root用户操作，创建tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">useradd tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，为tomcat用户配置密码</span></span><br><span class="line">passwd tomcat</span><br></pre></td></tr></table></figure></li><li><p>下载Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果出现https相关错误，可以使用--no-check-certificate选项</span></span><br><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>如果Linux内下载过慢，可以复制下载链接在Windows系统中使用迅雷等软件加速下载然后上传到Linux内即可</p><p>或者使用课程资料中提供的安装包</p></blockquote></li><li><p>解压Tomcat安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限</span></span><br><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>创建Tomcat软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作</span></span><br><span class="line">ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat</span><br></pre></td></tr></table></figure></li><li><p>修改tomcat安装目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span></span><br><span class="line">chown -R tomcat:tomcat /export/server/*tomcat*</span><br></pre></td></tr></table></figure></li><li><p>切换到tomcat用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - tomcat</span><br></pre></td></tr></table></figure></li><li><p>启动tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure></li><li><p>tomcat启动在8080端口，可以检查是否正常启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017223814.png" alt="image-20221017223814737"></p></li><li><p>打开浏览器，输入：</p><p><a href="http://centos:8080或http://192.168.88.130:8080">http://centos:8080或http://192.168.88.130:8080</a></p><p>使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221017223915.png" alt="image-20221017223915498"></p></li></ol><p>至此，Tomcat安装配置完成。</p><h1 id="Nginx安装部署【简单】"><a href="#Nginx安装部署【简单】" class="headerlink" title="Nginx安装部署【简单】"></a>Nginx安装部署【简单】</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p><p>同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。</p><p>Nginx在WEB开发领域，基本上也是必备组件之一了。</p><h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><p>Nginx同样需要配置额外的yum仓库，才可以使用yum安装</p><blockquote><p>安装Nginx的操作需要root身份</p></blockquote><ol><li><p>安装yum依赖程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>手动添加，nginx的yum仓库</p><p>yum程序使用的仓库配置文件，存放在：<code>/etc/yum.repo.d</code>内。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件使用vim编辑</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容并保存退出</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=true</span><br></pre></td></tr></table></figure><blockquote><p>通过如上操作，我们手动添加了nginx的yum仓库</p></blockquote></li><li><p>通过yum安装最新稳定版的nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx自动注册了systemctl系统服务</span></span><br><span class="line">systemctl start nginx# 启动</span><br><span class="line">systemctl stop nginx# 停止</span><br><span class="line">systemctl status nginx# 运行状态</span><br><span class="line">systemctl enable nginx# 开机自启</span><br><span class="line">systemctl disable nginx# 关闭开机自启</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙放行</p><p>nginx默认绑定80端口，需要关闭防火墙或放行80端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent# 放行tcp规则下的80端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动后浏览器输入Linux服务器的IP地址或主机名即可访问</p><p><a href="http://192.168.88.130/">http://192.168.88.130</a> 或 <a href="http://centos/">http://centos</a></p><blockquote><p>ps：80端口是访问网站的默认端口，所以后面无需跟随端口号</p><p>显示的指定端口也是可以的比如：</p><ul><li><a href="http://192.168.88.130/">http://192.168.88.130:80</a></li><li><a href="http://centos/">http://centos:80</a></li></ul></blockquote></li></ol><p>至此，Nginx安装配置完成。</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221018143113.png" alt="image-20221018143113053"></p><h1 id="RabbitMQ安装部署【简单】"><a href="#RabbitMQ安装部署【简单】" class="headerlink" title="RabbitMQ安装部署【简单】"></a>RabbitMQ安装部署【简单】</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。</p><p>RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。</p><h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><blockquote><p>rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库</p></blockquote><ol><li><p>准备yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 准备gpgkey密钥</span></span><br><span class="line">rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 准备仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/rabbitmq.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Zero dependency Erlang</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang]</span><br><span class="line">name=rabbitmq_erlang</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_erlang-source]</span><br><span class="line">name=rabbitmq_erlang-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">PackageCloud&#x27;</span>s repository key and RabbitMQ package signing key</span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RabbitMQ server</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"></span><br><span class="line">[rabbitmq_server]</span><br><span class="line">name=rabbitmq_server</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PackageCloud<span class="string">&#x27;s repository key and RabbitMQ package signing key</span></span></span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br><span class="line"></span><br><span class="line">[rabbitmq_server-source]</span><br><span class="line">name=rabbitmq_server-source</span><br><span class="line">baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">metadata_expire=300</span><br></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install erlang rabbitmq-server -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  erlang.x86_64 0:23.3.4.11-1.el7           rabbitmq-server.noarch 0:3.10.0-1.el7</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：rabbitmq-server</span></span><br><span class="line">systemctl enable rabbitmq-server# 开机自启</span><br><span class="line">systemctl disable rabbitmq-server# 关闭开机自启</span><br><span class="line">systemctl start rabbitmq-server# 启动</span><br><span class="line">systemctl stop rabbitmq-server# 关闭</span><br><span class="line">systemctl status rabbitmq-server# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，RabbitMQ使用5672、15672、25672 3个端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行5672 25672端口</span></span><br><span class="line">firewall-cmd --add-port=5672/tcp --permanent# 放行tcp规则下的5672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=15672/tcp --permanent# 放行tcp规则下的15672端口，永久生效</span><br><span class="line">firewall-cmd --add-port=25672/tcp --permanent# 放行tcp规则下的25672端口，永久生效</span><br><span class="line">firewall-cmd --reload# 重新加载防火墙规则</span><br></pre></td></tr></table></figure></li><li><p>启动RabbitMQ的WEB管理控制台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li><li><p>添加admin用户，并赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin &#x27;Itheima66^&#x27;</span><br><span class="line">rabbitmqctl set_permissions -p &quot;/&quot; &quot;admin&quot; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></li><li><p>浏览器打开管理控制台</p><p><a href="http://192.168.88.130:15672/">http://192.168.88.130:15672</a></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221018154824.png" alt="image-20221018154823983"></p></li></ol><p>至此，RabbitMQ已经安装完成了。</p><h1 id="Redis安装部署【简单】"><a href="#Redis安装部署【简单】" class="headerlink" title="Redis安装部署【简单】"></a>Redis安装部署【简单】</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。</p><p>redis的特点就是：<code>快</code>，可以基于内存存储数据并提供超低延迟、超快的检索速度</p><p>一般用于在系统中提供快速缓存的能力。</p><h2 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h2><ol><li><p>配置<code>EPEL</code>仓库</p><blockquote><p>EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line">yum install -y redis</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用systemctl管控，服务名：redis</span></span><br><span class="line">systemctl enable redis# 开机自启</span><br><span class="line">systemctl disable redis# 关闭开机自启</span><br><span class="line">systemctl start redis# 启动</span><br><span class="line">systemctl stop redis# 关闭</span><br><span class="line">systemctl status redis# 查看状态</span><br></pre></td></tr></table></figure></li><li><p>放行防火墙，redis使用端口6379</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1（推荐），关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭</span><br><span class="line">systemctl disable firewalld# 关闭开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2，放行6379端口</span></span><br><span class="line">firewall-cmd --add-port=6379/tcp --permanent# 放行tcp规则下的6379端口，永久生效</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>进入redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行redis-cli</span></span><br><span class="line">[root@centos ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set mykey hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><p>至此，redis安装完成。</p><h1 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p><a href="https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">全文搜索</a>属于最常见的需求，开源的 <a href="https://www.elastic.co/">Elasticsearch</a> （以下简称 es）是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p><p>很多服务中的搜索功能，都是基于es来实现的。</p><h2 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h2><ol><li><p>添加yum仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root执行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入仓库密钥</span></span><br><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加yum源</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span> </span><br><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-7.x]</span><br><span class="line">name=Elasticsearch repository for 7.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/7.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新yum缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>配置es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17行，设置集群名称</span></span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">23行，设置节点名称</span></span><br><span class="line">node.name: node-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">56行，允许外网访问</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">74行，配置集群master节点</span></span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br></pre></td></tr></table></figure></li><li><p>启动es</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start | stop | status | enable | disable elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>浏览器打开：<a href="http://ip:9200/?pretty">http://ip:9200/?pretty</a></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025085432.png" alt="image-20221025085432335"></p></li></ol><h1 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p><p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p><p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h3><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p><p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p><ol><li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行<code>init 0</code>来快速关机）</p></li><li><p>新建文件夹</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104157.png" alt="image-20221025104157628"></p><p>文件夹起名为：<code>虚拟机集群</code></p></li><li><p>克隆</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104131.png" alt="image-20221025104131303"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104312.png" alt="image-20221025104312091"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104329.png" alt="image-20221025104329109"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104345.png" alt="image-20221025104345484"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104414.png" alt="image-20221025104414576"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104427.png" alt="image-20221025104427160"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104432.png" alt="image-20221025104432927"></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104446.png" alt="image-20221025104446044"></p></li><li><p>同样的操作克隆出：node2和node3</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025104825.png" alt="image-20221025104825204"></p></li><li><p>开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改主机名</span></span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改IP地址</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl stop network</span><br><span class="line">systemctl start network</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li><li><p>同样的操作启动node2和node3,</p><p>修改node2主机名为node2，设置ip为192.168.88.132</p><p>修改node2主机名为node3，设置ip为192.168.88.133</p></li><li><p>配置FinalShell，配置连接到node1、node2、node3的连接</p><blockquote><p>为了简单起见，建议配置root用户登录</p></blockquote></li></ol><h3 id="准备主机名映射"><a href="#准备主机名映射" class="headerlink" title="准备主机名映射"></a>准备主机名映射</h3><ol><li><p>在Windows系统中修改hosts文件，填入如下内容：</p><blockquote><p>如果同学们使用MacOS系统，请：</p><ol><li>sudo su -，切换到root</li><li>修改&#x2F;etc&#x2F;hosts文件</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li><li><p>在3台Linux的&#x2F;etc&#x2F;hosts文件中，填入如下内容（&#x3D;&#x3D;3台都要添加&#x3D;&#x3D;）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.131 node1</span><br><span class="line">192.168.88.132 node2</span><br><span class="line">192.168.88.133 node3</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>SSH服务是一种用于远程登录的安全认证协议。</p><p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p><p>SSH服务支持：</p><ol><li>通过账户+密码的认证方式来做用户认证</li><li>通过账户+秘钥文件的方式做用户认证</li></ol><p>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</p><p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p><p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p><h4 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h4><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p><ol><li><p>在每一台机器都执行：<code>ssh-keygen -t rsa -b 4096</code>，一路回车到底即可</p></li><li><p>在每一台机器都执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure></li><li><p>执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通</p></li></ol><h3 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h3><p>后续的大数据集群软件，多数是需要Java运行环境的，所以我们为&#x3D;&#x3D;每一台&#x3D;&#x3D;机器都配置JDK环境。</p><p>JDK配置参阅：<code>Tomcat</code>安装部署环节。</p><h3 id="关闭防火墙和SELinux"><a href="#关闭防火墙和SELinux" class="headerlink" title="关闭防火墙和SELinux"></a>关闭防火墙和SELinux</h3><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p><p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p><p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p><p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，</p><p>&#x3D;&#x3D;在每一台机器都执行&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第七行，SELINUX=enforcing 改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span></span><br></pre></td></tr></table></figure><h3 id="添加快照"><a href="#添加快照" class="headerlink" title="添加快照"></a>添加快照</h3><p>为了避免后续出现问题，在完成上述设置后，为&#x3D;&#x3D;每一台虚拟机&#x3D;&#x3D;都制作快照，留待使用。</p><h2 id="补充命令-scp"><a href="#补充命令-scp" class="headerlink" title="补充命令 - scp"></a>补充命令 - scp</h2><p>后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。</p><p>为了更加方面的互相传输，我们补充一个命令：scp</p><p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p><p>其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。</p><p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">scp [-r] 参数1 参数2</span><br><span class="line">- -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</span><br><span class="line">- 参数1：本机路径 或 远程目标路径</span><br><span class="line">- 参数2：远程目标路径 或 本机路径</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r /export/server/jdk root@node2:/export/server/</span><br><span class="line">将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内</span><br><span class="line">同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">scp -r node2:/export/server/jdk /export/server/</span><br><span class="line">将远程node2的jdk文件夹，复制到本机的/export/server/内</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scp命令的高级用法</span></span><br><span class="line">cd /export/server</span><br><span class="line">scp -r jdk node2:`pwd`/    # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br><span class="line">scp -r jdk node2:$PWD      # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><br></pre></td></tr></table></figure><h1 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p><p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p><h2 id="安装-9"><a href="#安装-9" class="headerlink" title="安装"></a>安装</h2><p>Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。</p><ol><li><p>首先，要确保已经完成了<code>集群化环境前置准备</code>环节的全部内容</p></li><li><p>【node1上操作】下载Zookeeper安装包，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保如下目录存在，不存在就创建</span></span><br><span class="line">mkdir -p /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】创建软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /export/server/zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper数据存储目录</span></span><br><span class="line">dataDir=/export/server/zookeeper/data</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】配置<code>myid</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建Zookeeper的数据目录</span></span><br><span class="line">mkdir /export/server/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 创建文件，并填入1</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件内填入1即可</span></span><br></pre></td></tr></table></figure></li><li><p>【在node2和node3上操作】，创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server</span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】将Zookeeper 复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r apache-zookeeper-3.5.9 node2:`pwd`/</span><br><span class="line">scp -r apache-zookeeper-3.5.9 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【在node2上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为2</span></span><br></pre></td></tr></table></figure></li><li><p>【在node3上操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 创建软链接</span></span><br><span class="line">ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改myid文件</span></span><br><span class="line">vim /export/server/zookeeper/data/myid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改内容为3</span></span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】启动Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动命令</span></span><br><span class="line">/export/server/zookeeper/bin/zkServer.sh start# 启动Zookeeper</span><br></pre></td></tr></table></figure></li><li><p>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果中找到有：QuorumPeerMain 进程即可</span></span><br></pre></td></tr></table></figure></li><li><p>【node1上操作】验证Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/export/server/zookeeper/zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到Zookeeper控制台中后，执行</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如无报错即配置成功</span></span><br></pre></td></tr></table></figure></li></ol><p>至此Zookeeper安装完成</p><h1 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><p>Kafka是一款<code>分布式的、去中心化的、高吞吐低延迟、订阅模式</code>的消息队列系统。</p><p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p><p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p><p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p><h2 id="安装-10"><a href="#安装-10" class="headerlink" title="安装"></a>安装</h2><ol><li><p>确保已经跟随前面的视频，安装并部署了JDK和Zookeeper服务</p><blockquote><p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p></blockquote></li><li><p>【在node1操作】下载并上传Kafka的安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/server# 此文件夹如果不存在需先创建</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】修改Kafka目录内的config目录内的<code>server.properties</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node1:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node1操作】将node1的kafka复制到node2和node3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node2同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node2:`pwd`/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制到node3同名文件夹</span></span><br><span class="line">scp -r kafka_2.12-2.4.1 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【在node2操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node2:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>【在node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka</span><br><span class="line"></span><br><span class="line">cd /export/server/kafka/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定broker的<span class="built_in">id</span></span></span><br><span class="line">broker.id=3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 kafka的绑定监听的地址</span></span><br><span class="line">listeners=PLAINTEXT://node3:9092</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Kafka数据的位置</span></span><br><span class="line">log.dirs=/export/server/kafka/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Zookeeper的三个节点</span></span><br><span class="line">zookeeper.connect=node1:2181,node2:2181,node3:2181</span><br></pre></td></tr></table></figure></li><li><p>启动kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请先确保Zookeeper已经启动了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：【前台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：【后台启动】分别在node1、2、3上执行如下语句</span></span><br><span class="line">nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2&gt;&amp;1 &gt;&gt; /export/server/kafka/kafka-server.log &amp;</span><br></pre></td></tr></table></figure></li><li><p>验证Kafka启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在每一台服务器执行</span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221025174522.png" alt="image-20221025174522487"></p></li></ol><h2 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h2><ol><li>创建测试主题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行，创建一个主题</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test</span><br></pre></td></tr></table></figure><ol start="2"><li>运行测试，请在FinalShell中打开2个node1的终端页面</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开一个终端页面，启动一个模拟的数据生产者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再打开一个新的终端页面，在启动一个模拟的数据消费者</span></span><br><span class="line">/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><h1 id="大数据集群（Hadoop生态）安装部署"><a href="#大数据集群（Hadoop生态）安装部署" class="headerlink" title="大数据集群（Hadoop生态）安装部署"></a>大数据集群（Hadoop生态）安装部署</h1><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><p>1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>2）主要解决，海量数据的存储和海量数据的分析计算问题。</p><p>Hadoop HDFS 提供分布式海量数据存储能力</p><p>Hadoop YARN 提供分布式集群资源管理能力</p><p>Hadoop MapReduce 提供分布式海量数据计算能力</p><h3 id="前置要求-1"><a href="#前置要求-1" class="headerlink" title="前置要求"></a>前置要求</h3><ul><li>请确保完成了集群化环境前置准备章节的内容</li><li>即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作</li></ul><h3 id="Hadoop集群角色"><a href="#Hadoop集群角色" class="headerlink" title="Hadoop集群角色"></a>Hadoop集群角色</h3><p>Hadoop生态体系中总共会出现如下进程角色：</p><ol><li>Hadoop HDFS的管理角色：Namenode进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop HDFS的工作角色：Datanode进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop YARN的管理角色：ResourceManager进程（<code>仅需1个即可（管理者一个就够）</code>）</li><li>Hadoop YARN的工作角色：NodeManager进程（<code>需要多个（工人，越多越好，一个机器启动一个）</code>）</li><li>Hadoop 历史记录服务器角色：HistoryServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Hadoop 代理服务器角色：WebProxyServer进程（<code>仅需1个即可（功能进程无需太多1个足够）</code>）</li><li>Zookeeper的进程：QuorumPeerMain进程（<code>仅需1个即可（Zookeeper的工作者，越多越好）</code>）</li></ol><h3 id="角色和节点分配"><a href="#角色和节点分配" class="headerlink" title="角色和节点分配"></a>角色和节点分配</h3><p>角色分配如下：</p><ol><li>node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain</li><li>node2:Datanode、NodeManager、QuorumPeerMain</li><li>node3:Datanode、NodeManager、QuorumPeerMain</li></ol><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026202935.png" alt="image-20221026202935745"></p><h2 id="安装-11"><a href="#安装-11" class="headerlink" title="安装"></a>安装</h2><h3 id="调整虚拟机内存"><a href="#调整虚拟机内存" class="headerlink" title="调整虚拟机内存"></a>调整虚拟机内存</h3><p>如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序</p><p>为了确保集群的稳定，需要对虚拟机进行内存设置。</p><p>请在VMware中，对：</p><ol><li>node1设置4GB或以上内存</li><li>node2和node3设置2GB或以上内存</li></ol><blockquote><p>大数据的软件本身就是集群化（一堆服务器）一起运行的。</p><p>现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。</p></blockquote><h3 id="Zookeeper集群部署"><a href="#Zookeeper集群部署" class="headerlink" title="Zookeeper集群部署"></a>Zookeeper集群部署</h3><p>略</p><h3 id="Hadoop集群部署"><a href="#Hadoop集群部署" class="headerlink" title="Hadoop集群部署"></a>Hadoop集群部署</h3><ol><li><p>下载Hadoop安装包、解压、配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请确保目录/export/server存在</span></span><br><span class="line">tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 构建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>hadoop-env.sh</code></p><blockquote><p>Hadoop的配置文件要修改的地方很多，请细心</p></blockquote><p>cd 进入到&#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop，文件夹中，配置文件都在这里</p><p>修改hadoop-env.sh文件</p><blockquote><p>此文件是配置一些Hadoop用到的环境变量</p><p>这些是临时变量，在Hadoop运行时有用</p><p>如果要永久生效，需要写到&#x2F;etc&#x2F;profile中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件开头加入：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Java安装路径</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置Hadoop安装路径</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs配置文件路径</span></span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN配置文件路径</span></span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop YARN 日志文件夹</span></span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop hdfs 日志文件夹</span></span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hadoop的使用启动用户配置</span></span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line">export YARN_PROXYSERVER_USER=root</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件：<code>core-site.xml</code></p><p>如下，清空文件，填入如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>hdfs-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>List of permitted DataNodes.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line">export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>mapred-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件的开头加入如下环境变量设置</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br><span class="line">export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span><br><span class="line">export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs</span><br></pre></td></tr></table></figure></li><li><p>配置：<code>yarn-site.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改workers文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全部内容如下</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>分发hadoop到其它机器</p></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在node1执行</span></span><br><span class="line">cd /export/server</span><br><span class="line"></span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br><span class="line">scp -r hadoop-3.3.0 node2:`pwd`/</span><br></pre></td></tr></table></figure><ol start="11"><li><p>在node2、node3执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软链接</span></span><br><span class="line">ln -s /export/server/hadoop-3.3.0 /export/server/hadoop</span><br></pre></td></tr></table></figure></li><li><p>创建所需目录</p><ul><li><p>在node1执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/nn</span><br><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node2执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li><li><p>在node3执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/dn</span><br><span class="line">mkdir -p /data/nm-log</span><br><span class="line">mkdir -p /data/nm-local</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置环境变量</p><p>在node1、node2、node3修改&#x2F;etc&#x2F;profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/export/server/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>执行<code>source /etc/profile</code>生效</p></li><li><p>格式化NameNode，在node1执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><blockquote><p>hadoop这个命令来自于：$HADOOP_HOME&#x2F;bin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦</p></blockquote></li><li><p>启动hadoop的hdfs集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-dfs.sh</span><br></pre></td></tr></table></figure><blockquote><p>start-dfs.sh这个命令来自于：$HADOOP_HOME&#x2F;sbin中的程序</p><p>由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦</p></blockquote></li><li><p>启动hadoop的yarn集群，在node1执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可以执行</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure></li><li><p>启动历史服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li><li><p>启动web代理服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn-daemon.sh start proxyserver</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止将start更换为stop</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="验证Hadoop集群运行情况"><a href="#验证Hadoop集群运行情况" class="headerlink" title="验证Hadoop集群运行情况"></a>验证Hadoop集群运行情况</h4><ol><li><p>在node1、node2、node3上通过jps验证进程是否都启动成功</p></li><li><p>验证HDFS，浏览器打开：<a href="http://node1:9870/">http://node1:9870</a></p><p>创建文件test.txt，随意填入内容，并执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put test.txt /test.txt</span><br><span class="line"></span><br><span class="line">hadoop fs -cat /test.txt</span><br></pre></td></tr></table></figure></li><li><p>验证YARN，浏览器打开：<a href="http://node1:8088/">http://node1:8088</a></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建文件words.txt，填入如下内容</span></span><br><span class="line">itheima itcast hadoop</span><br><span class="line">itheima hadoop hadoop</span><br><span class="line">itheima itcast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件上传到HDFS中</span></span><br><span class="line">hadoop fs -put words.txt /words.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行如下命令验证YARN是否正常</span></span><br><span class="line">hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output</span><br></pre></td></tr></table></figure></li></ol><h1 id="大数据NoSQL数据库HBase集群部署"><a href="#大数据NoSQL数据库HBase集群部署" class="headerlink" title="大数据NoSQL数据库HBase集群部署"></a>大数据NoSQL数据库HBase集群部署</h1><h2 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h2><p>HBase 是一种<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020">分布式</a>、可扩展、支持海量数据存储的 NoSQL 数据库。</p><p>和Redis一样，HBase是一款KeyValue型存储的数据库。</p><p>不过和Redis设计方向不同</p><ul><li>Redis设计为少量数据，超快检索</li><li>HBase设计为海量数据，快速检索</li></ul><p>HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。</p><h2 id="安装-12"><a href="#安装-12" class="headerlink" title="安装"></a>安装</h2><ol><li><p>HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面</p><ul><li>集群化软件前置准备（JDK）</li><li>Zookeeper</li><li>Hadoop</li><li>这些环节的软件安装</li></ul></li><li><p>【node1执行】下载HBase安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-env.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在28行配置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在126行配置：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在任意行，比如26行，添加如下内容：</span></span><br><span class="line">export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/hbase-site.xml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件的全部内容替换成如下内容：</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- HBase数据在HDFS中的存放的路径 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;hdfs://node1:8020/hbase&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper的地址 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;node1,node2,node3&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- ZooKeeper快照的存储位置 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;/export/server/apache-zookeeper-3.6.0-bin/data&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--  V2.1版本，在分布式情况下, 设置为false --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，修改配置文件，修改<code>conf/regionservers</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填入如下内容</span></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】，分发hbase到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /export/server/hbase-2.1.0 node2:/export/server/</span><br><span class="line">scp -r /export/server/hbase-2.1.0 node3:/export/server/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】，配置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/hbase-2.1.0 /export/server/hbase</span><br></pre></td></tr></table></figure></li><li><p>【node1、node2、node3执行】，配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置在/etc/profile内，追加如下两行</span></span><br><span class="line">export HBASE_HOME=/export/server/hbase</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动HBase</p><blockquote><p>请确保：Hadoop HDFS、Zookeeper是已经启动了的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止可使用</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><blockquote><p>由于我们配置了环境变量export PATH&#x3D;$PATH:$HBASE_HOME&#x2F;bin</p><p>start-hbase.sh即在$HBASE_HOME&#x2F;bin内，所以可以无论当前目录在哪，均可直接执行</p></blockquote></li><li><p>验证HBase</p><p>浏览器打开：<a href="http://node1:16010，即可看到HBase的WEB">http://node1:16010，即可看到HBase的WEB</a> UI页面</p></li><li><p>简单测试使用HBase</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建表</span></span><br><span class="line">create &#x27;test&#x27;, &#x27;cf&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入数据</span></span><br><span class="line">put &#x27;test&#x27;, &#x27;rk001&#x27;, &#x27;cf:info&#x27;, &#x27;itheima&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询数据</span></span><br><span class="line">get &#x27;test&#x27;, &#x27;rk001&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扫描表数据</span></span><br><span class="line">scan &#x27;test&#x27;</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Spark环境部署"><a href="#分布式内存计算Spark环境部署" class="headerlink" title="分布式内存计算Spark环境部署"></a>分布式内存计算Spark环境部署</h1><h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h2><p>Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。</p><h2 id="安装-13"><a href="#安装-13" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1执行】下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名</span></span><br><span class="line">cd /export/server/spark/conf</span><br><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">mv slaves.template slaves</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>spark-env.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置JAVA安装目录</span></span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定spark老大Master的IP和提交任务的通信端口</span></span></span><br><span class="line">export SPARK_MASTER_HOST=node1</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】修改配置文件，<code>slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】分发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD</span><br><span class="line">scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3执行】设置软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>【node1执行】启动Spark集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/sbin/start-all.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如需停止，可以</span></span><br><span class="line">/export/server/spark/sbin/stop-all.sh</span><br></pre></td></tr></table></figure></li><li><p>打开Spark监控页面，浏览器打开：<a href="http://node1:8081/">http://node1:8081</a></p></li><li><p>【node1执行】提交测试任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="分布式内存计算Flink环境部署"><a href="#分布式内存计算Flink环境部署" class="headerlink" title="分布式内存计算Flink环境部署"></a>分布式内存计算Flink环境部署</h1><h2 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h2><p>本小节的操作，基于：<code>大数据集群（Hadoop生态）安装部署</code>环节中所构建的Hadoop集群</p><p>如果没有Hadoop集群，请参阅前置内容，部署好环境。</p><h2 id="简介-12"><a href="#简介-12" class="headerlink" title="简介"></a>简介</h2><p>Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。</p><p>Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。</p><p>在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。</p><p>我们将基于前面构建的Hadoop集群，部署Flink Standalone集群</p><p>Spark更加偏向于离线计算而Flink更加偏向于实时计算。</p><h2 id="安装-14"><a href="#安装-14" class="headerlink" title="安装"></a>安装</h2><ol><li><p>【node1操作】下载安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】修改配置文件，<code>conf/flink-conf.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobManager 的IP地址</span></span><br><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># JobManager 的端口号</span></span><br><span class="line"><span class="attr">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"><span class="comment"># JobManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">jobmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># TaskManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">taskmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"><span class="comment"># 每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源</span></span><br><span class="line"><span class="attr">taskmanager.memory.preallocate:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 程序默认并行计算的个数</span></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#JobManager的Web界面的端口（默认：8081）</span></span><br><span class="line"><span class="attr">jobmanager.web.port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，修改配置文件，<code>conf/slaves</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】分发Flink安装包到其它机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server</span><br><span class="line">scp -r flink-1.10.0 node2:`pwd`/</span><br><span class="line">scp -r flink-1.10.0 node3:`pwd`/</span><br></pre></td></tr></table></figure></li><li><p>【node2、node3操作】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置软链接</span></span><br><span class="line">ln -s /export/server/flink-1.10.0 /export/server/flink</span><br></pre></td></tr></table></figure></li><li><p>【node1操作】，启动Flink</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/start-cluster.sh</span><br></pre></td></tr></table></figure></li><li><p>验证Flink启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器打开</span></span><br><span class="line">http://node1:8081</span><br></pre></td></tr></table></figure></li><li><p>提交测试任务</p><p>【node1执行】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure></li></ol><h1 id="运维监控Zabbix部署"><a href="#运维监控Zabbix部署" class="headerlink" title="运维监控Zabbix部署"></a>运维监控Zabbix部署</h1><h2 id="简介-13"><a href="#简介-13" class="headerlink" title="简介"></a>简介</h2><p>Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。</p><p>Zabbix 是一个&#x3D;&#x3D;企业级分布式开源监控解决方案&#x3D;&#x3D;。</p><p>Zabbix 软件能够&#x3D;&#x3D;监控&#x3D;&#x3D;众多网络参数和服务器的&#x3D;&#x3D;健康度、完整性&#x3D;&#x3D;。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。</p><h2 id="安装-15"><a href="#安装-15" class="headerlink" title="安装"></a>安装</h2><blockquote><p> 安装整体步骤:</p></blockquote><ol><li>准备Linux 服务器(虚拟机)</li><li>安装Mysql</li><li>安装zabbix( 包含 server  agent  web)</li><li>配置 mysql, 为zabbix创建表结构</li><li>配置zabbix server</li><li>启动并开启开机自启动</li></ol><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175324.png" alt="1574338996145"></p><h3 id="安装前准备-Mysql"><a href="#安装前准备-Mysql" class="headerlink" title="安装前准备 - Mysql"></a>安装前准备 - Mysql</h3><p>安装ZabbixServer需要先安装好<code>Mysql</code>数据库</p><p>课程使用<code>Mysql 5.7</code></p><p>安装步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Mysql设置开机启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Mysql服务状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改root用户密码</span></span><br><span class="line">mysql -u root -p -h localhost</span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Root!@#$&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你想设置简单密码，需要降低Mysql的密码安全级别</span></span><br><span class="line">set global validate_password_policy=LOW; # 密码安全级别低</span><br><span class="line">set global validate_password_length=4; # 密码长度最低4位即可</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样）</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on *.* to root@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span></span><br></pre></td></tr></table></figure><h3 id="安装Zabbix-Server-和-Zabbix-Agent"><a href="#安装Zabbix-Server-和-Zabbix-Agent" class="headerlink" title="安装Zabbix Server 和 Zabbix Agent"></a>安装Zabbix Server 和 Zabbix Agent</h3><blockquote><p>初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。</p></blockquote><p>打开官网下载页面：<a href="https://www.zabbix.com/download?zabbix=4.0&os_distribution=centos&os_version=7&db=mysql">https://www.zabbix.com/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql</a></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175330.png" alt="1571981197131"></p><p>选择对应的版本，然后再下面官网给出了具体的安装命令，使用<code>rpm</code>和<code>yum</code>来进行安装。</p><p>需要有网络。</p><p><code>以下内容来自官方页面</code></p><h4 id="a-安装Zabbix-yum库"><a href="#a-安装Zabbix-yum库" class="headerlink" title="a. 安装Zabbix yum库"></a>a. 安装Zabbix yum库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/installation/install_from_packages">documentation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><h4 id="b-安装Zabbix-Server、前端、Agent"><a href="#b-安装Zabbix-Server、前端、Agent" class="headerlink" title="b. 安装Zabbix Server、前端、Agent"></a>b. 安装Zabbix Server、前端、Agent</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只需要安装Agent的话</span></span><br><span class="line">yum -y install zabbix-agent</span><br></pre></td></tr></table></figure><h4 id="c-初始化Mysql数据库"><a href="#c-初始化Mysql数据库" class="headerlink" title="c. 初始化Mysql数据库"></a>c. 初始化Mysql数据库</h4><p><a href="https://www.zabbix.com/documentation/4.0/manual/appendix/install/db_scripts">documentation</a></p><blockquote><p>在Mysql中操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Mysql 数据库</span></span><br><span class="line">mysql -uroot -pYourPassword</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者: grant all privileges on zabbix.* to zabbix@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit;</span></span><br></pre></td></tr></table></figure><p>测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。</p><p>Import initial schema and data. You will be prompted to enter your newly created password.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span></span><br></pre></td></tr></table></figure><h4 id="d-为Zabbix-Server配置数据库"><a href="#d-为Zabbix-Server配置数据库" class="headerlink" title="d. 为Zabbix Server配置数据库"></a>d. 为Zabbix Server配置数据库</h4><p>Edit file &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DBPassword=password</span><br><span class="line">DBHost=mysql-host-ip-or-hostname</span><br></pre></td></tr></table></figure><h4 id="e-配置Zabbix的PHP前端"><a href="#e-配置Zabbix的PHP前端" class="headerlink" title="e. 配置Zabbix的PHP前端"></a>e. 配置Zabbix的PHP前端</h4><p>Edit file <code>/etc/httpd/conf.d/zabbix.conf</code>, uncomment and set the right timezone for you.<code># php_value date.timezone Asia/Shanghai</code></p><p>Start Zabbix server and agent processes and make it start at system boot:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server zabbix-agent httpd # 启动、重启</span><br><span class="line">systemctl enable zabbix-server zabbix-agent httpd  # 开机自启</span><br></pre></td></tr></table></figure><p>Now your Zabbix server is up and running!</p><h3 id="配置zabbix-前端（WEB-UI）"><a href="#配置zabbix-前端（WEB-UI）" class="headerlink" title="配置zabbix 前端（WEB UI）"></a>配置zabbix 前端（WEB UI）</h3><p><strong>打开:<code>http://192.168.88.131/zabbix</code></strong></p><p>即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175338.png" alt="1571993951841"></p><p><strong>点击下一步，会检查相应的设置是否都正常</strong></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175341.png" alt="1571994018126"></p><p>如果一切正常，点击下一步。</p><p><strong>配置DB连接</strong></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175344.png" alt="1571994069689"></p><p>按具体情况填写即可</p><p><strong>配置Server细节</strong></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175347.png" alt="1571994111921"></p><p>具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫<code>ITHEIMA-TEST</code></p><p><strong>安装前总结预览</strong></p><p>检查确认没有问题就下一步</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175349.png" alt="1571994206902"></p><p><strong>配置完成</strong></p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175351.png" alt="1571994221531"></p><p><strong>初始管理员账户Admin密码zabbix</strong></p><p>输入账户密码后，就能进入zabbix页面了。</p><p>如下图：</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175354.png" alt="1571994287036"></p><p>现在是一个崭新的zabbix等待我们去探索。</p><h1 id="运维监控Grafana部署"><a href="#运维监控Grafana部署" class="headerlink" title="运维监控Grafana部署"></a>运维监控Grafana部署</h1><h2 id="简介-14"><a href="#简介-14" class="headerlink" title="简介"></a>简介</h2><h2 id="安装-16"><a href="#安装-16" class="headerlink" title="安装"></a>安装</h2><h3 id="部署形式"><a href="#部署形式" class="headerlink" title="部署形式"></a>部署形式</h3><p><code>Grafana</code>支持两种部署形式</p><ol><li>自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.</li><li><code>Grafana</code>官方托管. 无需安装, 在线注册即可得到一个专属于自己的<code>Grafana</code>, 但是要花钱的. 是一种<code>SaaS</code>服务</li></ol><p>我们课程选择方式1</p><h3 id="安装-17"><a href="#安装-17" class="headerlink" title="安装"></a>安装</h3><p><code>Grafana</code>支持常见的绝大多数操作系统, 如<code>windows</code> <code>mac</code> <code>linux</code> 同时也支持部署在<code>docker</code>中.</p><p>大多数情况下, <code>Grafana</code>都是部署在<code>linux</code>服务器之上. 所以本课程也是基于<code>Linux</code>系统来讲解.</p><p>对<code>windows</code> <code>mac</code>系统 或 <code>docker</code>部署有兴趣的同学, 请参考:  <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p><p>我们部署<code>Grafana</code>可以使用<code>YUM</code>来进行部署.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件</span></span><br><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下面的内容复制进去</span></span><br><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后安装</span></span><br><span class="line">yum install grafana</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p><code>grafana-server</code>具有许多配置选项，这些选项可以在<code>.ini</code>配置文件中指定，也可以使用环境变量指定。</p><blockquote><p> <strong>Note.</strong> <code>Grafana </code> needs to be restarted for any configuration changes to take effect. </p></blockquote><h4 id="配置文件注释"><a href="#配置文件注释" class="headerlink" title="配置文件注释"></a>配置文件注释</h4><p><code>;</code>符号在<code>.ini</code>文件中全局表示注释 ()</p><h4 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h4><p>如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:</p><ul><li>默认: <code>$WORKING_DIR/conf/defaults.ini</code></li><li>自定义:<code>$WORKING_DIR/conf/custom.ini</code></li><li>自定义配置文件路径可以被参数<code>--config</code>覆盖</li></ul><blockquote><p>对于<code>YUM</code> <code>RPM</code> 安装的方式, 配置文件在: <code>/etc/grafana/grafana.ini</code></p></blockquote><h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><p>可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GF_&lt;SectionName&gt;_&lt;KeyName&gt;</span><br></pre></td></tr></table></figure><p>其中<code>SectionName</code>是方括号内的文本。一切都应为大写，<code>.</code>应替换为<code>_</code> 例如，给定以下配置设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default section</span></span><br><span class="line">instance_name = <span class="variable">$&#123;HOSTNAME&#125;</span></span><br><span class="line"></span><br><span class="line">[security]</span><br><span class="line">admin_user = admin</span><br><span class="line"></span><br><span class="line">[auth.google]</span><br><span class="line">client_secret = 0ldS3cretKey</span><br></pre></td></tr></table></figure><p>Then you can override them using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GF_DEFAULT_INSTANCE_NAME=my-instance</span><br><span class="line"><span class="built_in">export</span> GF_SECURITY_ADMIN_USER=<span class="literal">true</span><span class="comment"># GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _</span></span><br><span class="line"><span class="built_in">export</span> GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey</span><br></pre></td></tr></table></figure><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p><code>Grafana</code>支持使用<code>Sqlite3</code> <code>Postgresql</code> <code>Mysql</code>这三种数据库作为其<code>元数据</code>的存储.</p><p>我们课程使用<code>Mysql</code>. 和<code>zabbix</code>的元数据mysql共用一个实例</p><p>只需要配置如下内容即可:</p><p><img src="/2024/07/07/Linux/Linux%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/20221026175713.png" alt="1573635500521"></p><p>并登陆mysql, 执行:</p><p><code>create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;</code></p><p>创建<code>Grafana</code>使用的数据库作为元数据存储.</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure><p>浏览器打开：<a href="http://node1:3000/">http://node1:3000</a></p><p>默认账户密码：admin&#x2F;admin</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学</title>
      <link href="/2024/07/07/Math/AdvancedMathematics/"/>
      <url>/2024/07/07/Math/AdvancedMathematics/</url>
      
        <content type="html"><![CDATA[<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><h2 id="1、导数"><a href="#1、导数" class="headerlink" title="1、导数"></a>1、导数</h2><p>$$<br>\arctan(x)&#96;&#x3D;\frac{1}{1+x^2}<br>$$</p><p><img src="/2024/07/07/Math/AdvancedMathematics/v2-d978393a5b2976cf5faed0f273a99025_r.jpg" alt="查看源图像"><br>$$<br>\arcsin(x)&#x3D;\displaystyle\frac{1}{\sqrt{1-x^2}}<br>$$<br><img src="/2024/07/07/Math/AdvancedMathematics/v2-ddc51034ac88aa1d3b700a94991997d2_180x120.jpg"></p><h2 id="2、三角函数"><a href="#2、三角函数" class="headerlink" title="2、三角函数"></a>2、三角函数</h2><p>$$<br>\cos{2x} &#x3D; 1 - 2\sin{x}^2\<br>\int\sin{x}^2 &#x3D; \frac{x}{2} - \frac{1}{4}\sin{2x} + c<br>$$</p><p>素数：质数</p><h1 id="一、函数与极限"><a href="#一、函数与极限" class="headerlink" title="一、函数与极限"></a>一、函数与极限</h1><h2 id="1-1、映射与函数"><a href="#1-1、映射与函数" class="headerlink" title="1.1、映射与函数"></a>1.1、映射与函数</h2><h3 id="1、集合"><a href="#1、集合" class="headerlink" title="1、集合"></a>1、集合</h3><p>集合：A,B,C…X,Y</p><p>元素：a b c … x y</p><p>列举：A &#x3D; {a<sub>0</sub>,a<sub>1</sub>,.. ,a<sub>n</sub>,…}</p><p>描述性：B &#x3D; {x|x具有性质P}</p><p>属于：a &in; A 或 a &notin; A</p><h3 id="2、数集"><a href="#2、数集" class="headerlink" title="2、数集"></a>2、数集</h3><p>N &#x3D; {0,1,2,3…}自然数集</p><p>N<sup>+</sup> &#x3D; {1,2,3,…}正整数集</p><p>Z &#x3D; {…, -2,-1,0,1,2,..}整数集</p><p>Q &#x3D; {x | x &#x3D; $\frac{q}{p}$,q&in; Z, p &in; N<sup>+</sup>,p与q互质}有理数集</p><p>R &#x3D; ($-\infty,+\infty$)实数</p><h3 id="3、区间"><a href="#3、区间" class="headerlink" title="3、区间"></a>3、区间</h3><p>&forall; a,b&in; R, a &lt; b </p><p>有限区间（a,b) &#x3D; {x|a&lt;x&lt;b}区间长度 b-a</p><h3 id="4、邻域"><a href="#4、邻域" class="headerlink" title="4、邻域"></a>4、邻域</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423093013829.png" alt="image-20220423093013829"></p><h2 id="1-2、函数"><a href="#1-2、函数" class="headerlink" title="1.2、函数"></a>1.2、函数</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423093447142.png" alt="image-20220423093447142"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423093521938.png" alt="image-20220423093521938"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423093532385.png" alt="image-20220423093532385"> </p><h3 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h3><p>（1）有界性</p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423093622861.png" alt="image-20220423093622861"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423093742154.png" alt="image-20220423093742154"> </p><p>（2）单调性</p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423094116116.png" alt="image-20220423094116116"> </p><p>（3）奇偶性</p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423094138084.png" alt="image-20220423094138084"> </p><p>（4）周期性</p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423100716467.png" alt="image-20220423100716467"> </p><h3 id="3、反函数"><a href="#3、反函数" class="headerlink" title="3、反函数"></a>3、反函数</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423102726423.png" alt="image-20220423102726423"> </p><h3 id="4、复合函数"><a href="#4、复合函数" class="headerlink" title="4、复合函数"></a>4、复合函数</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423102759347.png" alt="image-20220423102759347"> </p><h3 id="5、基本初等函数"><a href="#5、基本初等函数" class="headerlink" title="5、基本初等函数"></a>5、基本初等函数</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423103112255.png" alt="image-20220423103112255"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423103131208.png" alt="image-20220423103131208"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423103142412.png" alt="image-20220423103142412"> </p><h2 id="1-3、数列的极限"><a href="#1-3、数列的极限" class="headerlink" title="1.3、数列的极限"></a>1.3、数列的极限</h2><h4 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h4><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423103459551.png" alt="image-20220423103459551"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423103917462.png" alt="image-20220423103917462"> </p><h3 id="2、收敛数列的性质"><a href="#2、收敛数列的性质" class="headerlink" title="2、收敛数列的性质"></a>2、收敛数列的性质</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104028686.png" alt="image-20220423104028686"> </p><h2 id="1-4、函数的极限"><a href="#1-4、函数的极限" class="headerlink" title="1.4、函数的极限"></a>1.4、函数的极限</h2><h3 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104714045.png" alt="image-20220423104714045"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104759602.png" alt="image-20220423104759602"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104832466.png" alt="image-20220423104832466"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104852493.png" alt="image-20220423104852493"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104902122.png" alt="image-20220423104902122"> </p><h3 id="2、性质"><a href="#2、性质" class="headerlink" title="2、性质"></a>2、性质</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423104924030.png" alt="image-20220423104924030"> </p><h2 id="1-5、无穷小量与无穷大量"><a href="#1-5、无穷小量与无穷大量" class="headerlink" title="1.5、无穷小量与无穷大量"></a>1.5、无穷小量与无穷大量</h2><h3 id="1、无穷小量"><a href="#1、无穷小量" class="headerlink" title="1、无穷小量"></a>1、无穷小量</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105152184.png" alt="image-20220423105152184"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105201436.png" alt="image-20220423105201436"> </p><h3 id="2、无穷大量"><a href="#2、无穷大量" class="headerlink" title="2、无穷大量"></a>2、无穷大量</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105220746.png" alt="image-20220423105220746"> </p><h3 id="3、关系"><a href="#3、关系" class="headerlink" title="3、关系"></a>3、关系</h3><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105238951.png" alt="image-20220423105238951"> </p><h2 id="1-6、极限的运算法则"><a href="#1-6、极限的运算法则" class="headerlink" title="1.6、极限的运算法则"></a>1.6、极限的运算法则</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105308608.png" alt="image-20220423105308608"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105318481.png" alt="image-20220423105318481"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105329904.png" alt="image-20220423105329904"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105339596.png" alt="image-20220423105339596"> </p><h2 id="1-7、极限存在法则、两个重要极限公式"><a href="#1-7、极限存在法则、两个重要极限公式" class="headerlink" title="1.7、极限存在法则、两个重要极限公式"></a>1.7、极限存在法则、两个重要极限公式</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105712758.png" alt="image-20220423105712758"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105721744.png" alt="image-20220423105721744"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105732453.png" alt="image-20220423105732453"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105741982.png" alt="image-20220423105741982"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105753053.png" alt="image-20220423105753053"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105801472.png" alt="image-20220423105801472"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105811222.png" alt="image-20220423105811222"> </p><h2 id="1-8、两个无穷小量的比较"><a href="#1-8、两个无穷小量的比较" class="headerlink" title="1.8、两个无穷小量的比较"></a>1.8、两个无穷小量的比较</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105831740.png" alt="image-20220423105831740"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105842916.png" alt="image-20220423105842916"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105852686.png" alt="image-20220423105852686"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105906144.png" alt="image-20220423105906144"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105915375.png" alt="image-20220423105915375"> </p><h2 id="1-9、函数的连续性与间断点"><a href="#1-9、函数的连续性与间断点" class="headerlink" title="1.9、函数的连续性与间断点"></a>1.9、函数的连续性与间断点</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105944621.png" alt="image-20220423105944621"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423105956871.png" alt="image-20220423105956871"> </p><p>​<img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110008204.png" alt="image-20220423110008204"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110018323.png" alt="image-20220423110018323"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110031388.png" alt="image-20220423110031388"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110044785.png" alt="image-20220423110044785"> </p><h2 id="1-10、"><a href="#1-10、" class="headerlink" title="1.10、"></a>1.10、</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110104453.png" alt="image-20220423110104453"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110116732.png" alt="image-20220423110116732"> </p><h2 id="1-11、闭区间上连续函数的性质"><a href="#1-11、闭区间上连续函数的性质" class="headerlink" title="1.11、闭区间上连续函数的性质"></a>1.11、闭区间上连续函数的性质</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110143161.png" alt="image-20220423110143161"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423110152814.png" alt="image-20220423110152814"> </p><h1 id="二、导数与微分"><a href="#二、导数与微分" class="headerlink" title="二、导数与微分"></a>二、导数与微分</h1><h2 id="2-1、导数的概念"><a href="#2-1、导数的概念" class="headerlink" title="2.1、导数的概念"></a>2.1、导数的概念</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423113957784.png" alt="image-20220423113957784"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114005987.png" alt="image-20220423114005987"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114021195.png" alt="image-20220423114021195"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114030966.png" alt="image-20220423114030966"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114043358.png" alt="image-20220423114043358"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114054450.png" alt="image-20220423114054450"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114104685.png" alt="image-20220423114104685"> </p><h2 id="2-2、函数的求导法则"><a href="#2-2、函数的求导法则" class="headerlink" title="2.2、函数的求导法则"></a>2.2、函数的求导法则</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114126628.png" alt="image-20220423114126628"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114137715.png" alt="image-20220423114137715"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114146787.png" alt="image-20220423114146787"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114201371.png" alt="image-20220423114201371"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114216686.png" alt="image-20220423114216686"> </p><h2 id="2-3、高阶导数"><a href="#2-3、高阶导数" class="headerlink" title="2.3、高阶导数"></a>2.3、高阶导数</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114233875.png" alt="image-20220423114233875"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114244859.png" alt="image-20220423114244859"> </p><h2 id="2-4、隐函数及由参数方程所确定的函数的导数"><a href="#2-4、隐函数及由参数方程所确定的函数的导数" class="headerlink" title="2.4、隐函数及由参数方程所确定的函数的导数"></a>2.4、隐函数及由参数方程所确定的函数的导数</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114340002.png" alt="image-20220423114340002"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114350406.png" alt="image-20220423114350406"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114359825.png" alt="image-20220423114359825"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114412409.png" alt="image-20220423114412409"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114424819.png" alt="image-20220423114424819"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114436814.png" alt="image-20220423114436814"> </p><h2 id="2-5、函数的微分"><a href="#2-5、函数的微分" class="headerlink" title="2.5、函数的微分"></a>2.5、函数的微分</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114458610.png" alt="image-20220423114458610"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114507054.png" alt="image-20220423114507054"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114514941.png" alt="image-20220423114514941"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114523830.png" alt="image-20220423114523830"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114535294.png" alt="image-20220423114535294"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114543259.png" alt="image-20220423114543259"> </p><h1 id="三、微分中值定理与导数的应用"><a href="#三、微分中值定理与导数的应用" class="headerlink" title="三、微分中值定理与导数的应用"></a>三、微分中值定理与导数的应用</h1><h2 id="3-1、微分中值定理"><a href="#3-1、微分中值定理" class="headerlink" title="3.1、微分中值定理"></a>3.1、微分中值定理</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114623087.png" alt="image-20220423114623087"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114631787.png" alt="image-20220423114631787"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114642316.png" alt="image-20220423114642316"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114652243.png" alt="image-20220423114652243"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114702498.png" alt="image-20220423114702498"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114714243.png" alt="image-20220423114714243"> </p><h2 id="3-2、洛必达法则"><a href="#3-2、洛必达法则" class="headerlink" title="3.2、洛必达法则"></a>3.2、洛必达法则</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114739863.png" alt="image-20220423114739863"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114750254.png" alt="image-20220423114750254"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114801489.png" alt="image-20220423114801489"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114813118.png" alt="image-20220423114813118"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114822670.png" alt="image-20220423114822670"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114834181.png" alt="image-20220423114834181"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114846642.png" alt="image-20220423114846642"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114859353.png" alt="image-20220423114859353"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114909648.png" alt="image-20220423114909648"> </p><h2 id="3-3、泰勒公式"><a href="#3-3、泰勒公式" class="headerlink" title="3.3、泰勒公式"></a>3.3、泰勒公式</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114933045.png" alt="image-20220423114933045"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423114950713.png" alt="image-20220423114950713"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115001117.png" alt="image-20220423115001117"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115016814.png" alt="image-20220423115016814"> </p><h2 id="3-4、函数的单调性与极值"><a href="#3-4、函数的单调性与极值" class="headerlink" title="3.4、函数的单调性与极值"></a>3.4、函数的单调性与极值</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115043141.png" alt="image-20220423115043141"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115054246.png" alt="image-20220423115054246"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115104717.png" alt="image-20220423115104717"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115114742.png" alt="image-20220423115114742"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115125244.png" alt="image-20220423115125244"> </p><h2 id="3-5、函数的凹凸性与拐点"><a href="#3-5、函数的凹凸性与拐点" class="headerlink" title="3.5、函数的凹凸性与拐点"></a>3.5、函数的凹凸性与拐点</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115149217.png" alt="image-20220423115149217"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115200088.png" alt="image-20220423115200088"> </p><h2 id="3-6、函数作图"><a href="#3-6、函数作图" class="headerlink" title="3.6、函数作图"></a>3.6、函数作图</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115222483.png" alt="image-20220423115222483"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115234802.png" alt="image-20220423115234802"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115247345.png" alt="image-20220423115247345"> </p><h1 id="四、不定积分"><a href="#四、不定积分" class="headerlink" title="四、不定积分"></a>四、不定积分</h1><h2 id="4-1、不定积分的概念与性质"><a href="#4-1、不定积分的概念与性质" class="headerlink" title="4.1、不定积分的概念与性质"></a>4.1、不定积分的概念与性质</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115319562.png" alt="image-20220423115319562"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115330721.png" alt="image-20220423115330721"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115341199.png" alt="image-20220423115341199"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115353375.png" alt="image-20220423115353375"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115404090.png" alt="image-20220423115404090"> </p><h2 id="4-2、换元积分法"><a href="#4-2、换元积分法" class="headerlink" title="4.2、换元积分法"></a>4.2、换元积分法</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115423413.png" alt="image-20220423115423413"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115443645.png" alt="image-20220423115443645"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115454717.png" alt="image-20220423115454717"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115506845.png" alt="image-20220423115506845"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115518269.png" alt="image-20220423115518269"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115528677.png" alt="image-20220423115528677"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115539201.png" alt="image-20220423115539201"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115549357.png" alt="image-20220423115549357"> </p><h2 id="4-3、分部积分法"><a href="#4-3、分部积分法" class="headerlink" title="4.3、分部积分法"></a>4.3、分部积分法</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115614236.png" alt="image-20220423115614236"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115626769.png" alt="image-20220423115626769"> </p><h2 id="4-4、有理函数的积分"><a href="#4-4、有理函数的积分" class="headerlink" title="4.4、有理函数的积分"></a>4.4、有理函数的积分</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115653185.png" alt="image-20220423115653185"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115706026.png" alt="image-20220423115706026"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115717622.png" alt="image-20220423115717622"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115727225.png" alt="image-20220423115727225"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115738860.png" alt="image-20220423115738860"> </p><h1 id="五、定积分"><a href="#五、定积分" class="headerlink" title="五、定积分"></a>五、定积分</h1><h2 id="5-1、定积分的概念与性质"><a href="#5-1、定积分的概念与性质" class="headerlink" title="5.1、定积分的概念与性质"></a>5.1、定积分的概念与性质</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115815647.png" alt="image-20220423115815647"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115829453.png" alt="image-20220423115829453"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115840645.png" alt="image-20220423115840645"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115849501.png" alt="image-20220423115849501"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115903710.png" alt="image-20220423115903710"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115915316.png" alt="image-20220423115915316"> </p><h2 id="5-2、微积分学基本公式"><a href="#5-2、微积分学基本公式" class="headerlink" title="5.2、微积分学基本公式"></a>5.2、微积分学基本公式</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115937106.png" alt="image-20220423115937106"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423115950785.png" alt="image-20220423115950785"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120000649.png" alt="image-20220423120000649"> </p><h2 id="5-3、定积分的换元积分法和分部积分法"><a href="#5-3、定积分的换元积分法和分部积分法" class="headerlink" title="5.3、定积分的换元积分法和分部积分法"></a>5.3、定积分的换元积分法和分部积分法</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120035099.png" alt="image-20220423120035099"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120050390.png" alt="image-20220423120050390"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120101657.png" alt="image-20220423120101657"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120113229.png" alt="image-20220423120113229"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120126089.png" alt="image-20220423120126089"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120137586.png" alt="image-20220423120137586"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120147085.png" alt="image-20220423120147085"></p><h2 id="5-4、反常积分"><a href="#5-4、反常积分" class="headerlink" title="5.4、反常积分"></a>5.4、反常积分</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120159726.png" alt="image-20220423120159726"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120210477.png" alt="image-20220423120210477"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120231163.png" alt="image-20220423120231163"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120244177.png" alt="image-20220423120244177"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423120305618.png" alt="image-20220423120305618"> </p><h2 id="5-5、"><a href="#5-5、" class="headerlink" title="5.5、"></a>5.5、</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125156171.png" alt="image-20220423125156171"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125208231.png" alt="image-20220423125208231"> </p><h1 id="六、定积分的应用"><a href="#六、定积分的应用" class="headerlink" title="六、定积分的应用"></a>六、定积分的应用</h1><h2 id="6-1、定积分的元素法"><a href="#6-1、定积分的元素法" class="headerlink" title="6.1、定积分的元素法"></a>6.1、定积分的元素法</h2><h2 id="6-2、定积分在几何上的应用"><a href="#6-2、定积分在几何上的应用" class="headerlink" title="6.2、定积分在几何上的应用"></a>6.2、定积分在几何上的应用</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125426629.png" alt="image-20220423125426629"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125437270.png" alt="image-20220423125437270"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125450129.png" alt="image-20220423125450129"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125535174.png" alt="image-20220423125535174"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125546532.png" alt="image-20220423125546532"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125556691.png" alt="image-20220423125556691"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125606110.png" alt="image-20220423125606110"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125614286.png" alt="image-20220423125614286"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125625238.png" alt="image-20220423125625238"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125632582.png" alt="image-20220423125632582"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125645168.png" alt="image-20220423125645168"> </p><h2 id="6-3、定积分在物理上的应用"><a href="#6-3、定积分在物理上的应用" class="headerlink" title="6.3、定积分在物理上的应用"></a>6.3、定积分在物理上的应用</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125718742.png" alt="image-20220423125718742"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125730197.png" alt="image-20220423125730197"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125739905.png" alt="image-20220423125739905"> </p><h1 id="七、微分方程"><a href="#七、微分方程" class="headerlink" title="七、微分方程"></a>七、微分方程</h1><h2 id="7-1、微分方程的基本概念"><a href="#7-1、微分方程的基本概念" class="headerlink" title="7.1、微分方程的基本概念"></a>7.1、微分方程的基本概念</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125818298.png" alt="image-20220423125818298"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125830376.png" alt="image-20220423125830376"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125842120.png" alt="image-20220423125842120"> </p><h2 id="7-2、可分离变量的微分方程"><a href="#7-2、可分离变量的微分方程" class="headerlink" title="7.2、可分离变量的微分方程"></a>7.2、可分离变量的微分方程</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423125911170.png" alt="image-20220423125911170"> </p><h1 id="八、向量代数与空间解析几何"><a href="#八、向量代数与空间解析几何" class="headerlink" title="八、向量代数与空间解析几何"></a>八、向量代数与空间解析几何</h1><h2 id="8-1、向量及其线性运算"><a href="#8-1、向量及其线性运算" class="headerlink" title="8.1、向量及其线性运算"></a>8.1、向量及其线性运算</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130015035.png" alt="image-20220423130015035"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130027305.png" alt="image-20220423130027305"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130040760.png" alt="image-20220423130040760"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130053100.png" alt="image-20220423130053100"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130103918.png" alt="image-20220423130103918"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130117276.png" alt="image-20220423130117276"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130124341.png" alt="image-20220423130124341"> </p><h2 id="8-2、数量积、向量积、混合积"><a href="#8-2、数量积、向量积、混合积" class="headerlink" title="8.2、数量积、向量积、混合积"></a>8.2、数量积、向量积、混合积</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130158489.png" alt="image-20220423130158489"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130211474.png" alt="image-20220423130211474"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130222108.png" alt="image-20220423130222108"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130230821.png" alt="image-20220423130230821"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130241607.png" alt="image-20220423130241607"> </p><h2 id="8-3、平面及其方程"><a href="#8-3、平面及其方程" class="headerlink" title="8.3、平面及其方程"></a>8.3、平面及其方程</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130303478.png" alt="image-20220423130303478"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130319152.png" alt="image-20220423130319152"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130330569.png" alt="image-20220423130330569"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130341332.png" alt="image-20220423130341332"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130351280.png" alt="image-20220423130351280"> </p><h2 id="8-4、空间直线及其方程"><a href="#8-4、空间直线及其方程" class="headerlink" title="8.4、空间直线及其方程"></a>8.4、空间直线及其方程</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130423159.png" alt="image-20220423130423159"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130437259.png" alt="image-20220423130437259"> </p><h2 id="8-5、曲面及其方程"><a href="#8-5、曲面及其方程" class="headerlink" title="8.5、曲面及其方程"></a>8.5、曲面及其方程</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130458346.png" alt="image-20220423130458346"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130512026.png" alt="image-20220423130512026"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130522717.png" alt="image-20220423130522717"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130537919.png" alt="image-20220423130537919"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130555137.png" alt="image-20220423130555137"> </p><h2 id="8-6、空间曲线及其方程"><a href="#8-6、空间曲线及其方程" class="headerlink" title="8.6、空间曲线及其方程"></a>8.6、空间曲线及其方程</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130622585.png" alt="image-20220423130622585"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130633856.png" alt="image-20220423130633856"> </p><h1 id="九、多元函数的微分法及其应用"><a href="#九、多元函数的微分法及其应用" class="headerlink" title="九、多元函数的微分法及其应用"></a>九、多元函数的微分法及其应用</h1><h2 id="9-1、多元函数的基本概念"><a href="#9-1、多元函数的基本概念" class="headerlink" title="9.1、多元函数的基本概念"></a>9.1、多元函数的基本概念</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130728129.png" alt="image-20220423130728129"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130740617.png" alt="image-20220423130740617"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130755433.png" alt="image-20220423130755433"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130805664.png" alt="image-20220423130805664"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130815029.png" alt="image-20220423130815029"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130824753.png" alt="image-20220423130824753"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130840191.png" alt="image-20220423130840191"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130852414.png" alt="image-20220423130852414"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130907785.png" alt="image-20220423130907785"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130919413.png" alt="image-20220423130919413"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130933142.png" alt="image-20220423130933142"> </p><h2 id="9-2、偏导数"><a href="#9-2、偏导数" class="headerlink" title="9.2、偏导数"></a>9.2、偏导数</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423130957684.png" alt="image-20220423130957684"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131008601.png" alt="image-20220423131008601"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131018822.png" alt="image-20220423131018822"> </p><h2 id="9-3、全微分"><a href="#9-3、全微分" class="headerlink" title="9.3、全微分"></a>9.3、全微分</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131038863.png" alt="image-20220423131038863"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131050778.png" alt="image-20220423131050778"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131103577.png" alt="image-20220423131103577"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131111778.png" alt="image-20220423131111778"> </p><h2 id="9-4、多元复合函数的求导法则"><a href="#9-4、多元复合函数的求导法则" class="headerlink" title="9.4、多元复合函数的求导法则"></a>9.4、多元复合函数的求导法则</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131138335.png" alt="image-20220423131138335"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131149261.png" alt="image-20220423131149261"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131202835.png" alt="image-20220423131202835"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131213589.png" alt="image-20220423131213589"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131223290.png" alt="image-20220423131223290"> </p><h2 id="9-5、隐函数的求导法则"><a href="#9-5、隐函数的求导法则" class="headerlink" title="9.5、隐函数的求导法则"></a>9.5、隐函数的求导法则</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131248845.png" alt="image-20220423131248845"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131301484.png" alt="image-20220423131301484"> </p><h2 id="9-6、多元函数的微分学在几何上的应用"><a href="#9-6、多元函数的微分学在几何上的应用" class="headerlink" title="9.6、多元函数的微分学在几何上的应用"></a>9.6、多元函数的微分学在几何上的应用</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131331990.png" alt="image-20220423131331990"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131342241.png" alt="image-20220423131342241"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131352138.png" alt="image-20220423131352138"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131402360.png" alt="image-20220423131402360"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131414565.png" alt="image-20220423131414565"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131430816.png" alt="image-20220423131430816"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131712202.png" alt="image-20220423131712202"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131721028.png" alt="image-20220423131721028"> </p><h2 id="9-3、方向导数与梯度"><a href="#9-3、方向导数与梯度" class="headerlink" title="9.3、方向导数与梯度"></a>9.3、方向导数与梯度</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131823093.png" alt="image-20220423131823093"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131841090.png" alt="image-20220423131841090"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131848633.png" alt="image-20220423131848633"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131901343.png" alt="image-20220423131901343"> </p><h2 id="多元函数的极值及其求法"><a href="#多元函数的极值及其求法" class="headerlink" title="多元函数的极值及其求法"></a>多元函数的极值及其求法</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423131953726.png" alt="image-20220423131953726"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132003824.png" alt="image-20220423132003824"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132013519.png" alt="image-20220423132013519"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132025868.png" alt="image-20220423132025868"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132037236.png" alt="image-20220423132037236"> </p><h1 id="十、重积分"><a href="#十、重积分" class="headerlink" title="十、重积分"></a>十、重积分</h1><h2 id="10-1、二重积分的概念与性质"><a href="#10-1、二重积分的概念与性质" class="headerlink" title="10.1、二重积分的概念与性质"></a>10.1、二重积分的概念与性质</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132643393.png" alt="image-20220423132643393"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132655669.png" alt="image-20220423132655669"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132711608.png" alt="image-20220423132711608"> </p><h2 id="10-2、二重积分的计算"><a href="#10-2、二重积分的计算" class="headerlink" title="10.2、二重积分的计算"></a>10.2、二重积分的计算</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132745640.png" alt="image-20220423132745640"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132756243.png" alt="image-20220423132756243"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132806708.png" alt="image-20220423132806708"> </p><h2 id="10-3、三重积分"><a href="#10-3、三重积分" class="headerlink" title="10.3、三重积分"></a>10.3、三重积分</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132824165.png" alt="image-20220423132824165"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132834407.png" alt="image-20220423132834407"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132848430.png" alt="image-20220423132848430"> </p><h2 id="10-4、重积分的应用"><a href="#10-4、重积分的应用" class="headerlink" title="10.4、重积分的应用"></a>10.4、重积分的应用</h2><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132907337.png" alt="image-20220423132907337"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132915868.png" alt="image-20220423132915868"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132925123.png" alt="image-20220423132925123"> </p><h1 id="十一、曲线积分与曲面积分"><a href="#十一、曲线积分与曲面积分" class="headerlink" title="十一、曲线积分与曲面积分"></a>十一、曲线积分与曲面积分</h1><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132948298.png" alt="image-20220423132948298"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423132958355.png" alt="image-20220423132958355"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423133007420.png" alt="image-20220423133007420"> </p><p><img src="/2024/07/07/Math/AdvancedMathematics/image-20220423133016074.png" alt="image-20220423133016074"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE</title>
      <link href="/2024/07/07/Java/JavaEE/"/>
      <url>/2024/07/07/Java/JavaEE/</url>
      
        <content type="html"><![CDATA[<p>JavaSE: Java Standard Edition PC机上的软件，C&#x2F;S（客户端单独的软件）</p><p>JavaEE：Java Enterprise Edition企业级结构，B&#x2F;S Browser&#x2F;Server（没有软件，跑页面）</p><p>JavaME：Java Micro Edition移动终端</p><p>Android ： Java</p><h1 id="一、JSP概述"><a href="#一、JSP概述" class="headerlink" title="一、JSP概述"></a>一、JSP概述</h1><p>JSP: Java Server Pages</p><ul><li>给予Java的用于编写动态网页的语法，在Web服务器上运行</li><li>JSP &#x3D; HTML + Java</li></ul><h2 id="1-1-jsp执行过程"><a href="#1-1-jsp执行过程" class="headerlink" title="1.1 jsp执行过程"></a>1.1 jsp执行过程</h2><p>JSP页面的主要成分：</p><ol><li>脚本元素（Scrpting Element）：嵌入Java代码</li><li>指令（Directive）：从整体上控制Servlet的结构</li><li>动作（Action）：引入已有的组件来控制Web容器的行为</li></ol><p>JSP <strong>第一次</strong>执行的过程：</p><p>（1）客户端发送请求（URL地址）（jsp）</p><p>（2）服务器将 JSP 文件翻译为 Java 程序（Servlet）（Java）</p><p>（3）服务器将 Java程序编译为字节码（.class）</p><p>（4）服务器运行字节码（.html）</p><p>（5）服务器将 HTML 代码发送给客户端浏览器</p><p>JSP <strong>第二次</strong>以后执行：</p><p>（1）客户端发送请求（.jsp）</p><p>（2）服务器运行字节码（.html）</p><p>（3）服务器将HTML代码发送给客户端浏览器</p><h2 id="1-2-jsp的几种形式"><a href="#1-2-jsp的几种形式" class="headerlink" title="1.2 jsp的几种形式"></a>1.2 jsp的几种形式</h2><p>1.JSP脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  java  %&gt;</span><br></pre></td></tr></table></figure><p>2.JSP表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式%&gt;</span><br></pre></td></tr></table></figure><p>说明：在表达式的位置直接输出表达式的值</p><p>3.声明标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! 变量、方法、类的声明%&gt;</span><br></pre></td></tr></table></figure><p>说明：用声明标签声明的变量、方法和类的作用范围是整个JSP页面，与位置无关</p><p>原理：JSP 执行时，先执行&lt;%! %&gt;在&lt;% %&gt;和&lt;%&#x3D;%&gt;之前执行</p><p>4.JSP注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="comment">//  %&gt; &lt;%/* */%&gt;</span></span><br></pre></td></tr></table></figure><p>HTML注释<!-- --></p><h3 id="1-2-1-jsp脚本"><a href="#1-2-1-jsp脚本" class="headerlink" title="1.2.1 jsp脚本"></a>1.2.1 jsp脚本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  java  %&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-输出表达式"><a href="#1-2-2-输出表达式" class="headerlink" title="1.2.2 输出表达式"></a>1.2.2 输出表达式</h3><p>&lt;%&#x3D;表达式%&gt;输出表达式的计算结果。表达式中的变量必须是前面已声明过的变量。</p><blockquote><p>注意：%与&#x3D;之间不能有空格，且表达式后面不需要分号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;JSP表达式&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=<span class="string">&quot;#FFFFFF&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123; %&gt;</span><br><span class="line">&lt;H&lt;%=i %&gt;&gt; 你好&lt;/H&lt;%=i %&gt;&gt;</span><br><span class="line">&lt;%&#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-注释"><a href="#1-2-3-注释" class="headerlink" title="1.2.3 注释"></a>1.2.3 注释</h3><p>JSP页面中有两种注释</p><ol><li>输出到客户端的注释，在浏览器查看源码时可以看到<code>&lt;!-comment-&gt;</code></li><li>不输出到客户端在注释：<code>&lt;%--comment--%&gt;</code>，在客户端看不到</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;!-在客户端可以看到的注释-&gt;<span class="comment">//html注释</span></span><br><span class="line">&lt;%--在客户端看不到的注释 --%&gt;</span><br><span class="line">&lt;%<span class="comment">//zai %&gt;</span></span><br><span class="line">&lt;%<span class="comment">/**/ %&gt;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><h3 id="1-2-4-声明变量、方法、类"><a href="#1-2-4-声明变量、方法、类" class="headerlink" title="1.2.4 声明变量、方法、类"></a>1.2.4 声明变量、方法、类</h3><h4 id="1-声明变量"><a href="#1-声明变量" class="headerlink" title="1. 声明变量"></a>1. 声明变量</h4><p><strong>语法：</strong><code>&lt;%! 声明代码 %&gt;</code></p><blockquote><p>注意：JSP声明变量的作用域是<strong>整个页面</strong>。也就是说，在整个页面中都可以访问声明的变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;font size=<span class="number">5</span>&gt;</span><br><span class="line">&lt;% i++; %&gt;</span><br><span class="line">&lt;p&gt;你是第&lt;%=i %&gt;个访问本站的用户&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!<span class="type">int</span> i=<span class="number">0</span>; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-声明方法"><a href="#2-声明方法" class="headerlink" title="2. 声明方法"></a>2. 声明方法</h4><p><strong>语法：</strong><code>&lt;%! 声明代码 %&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!String <span class="title function_">sayHello</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=sayHello() %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：该方法在整个页面有效，但方法内的变量只在该方法内有效</p></blockquote><h4 id="3-声明类"><a href="#3-声明类" class="headerlink" title="3. 声明类"></a>3. 声明类</h4><p><strong>语法：</strong><code>&lt;%! 声明代码 %&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%! <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sayHello</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">boolean</span> county;</span><br><span class="line">sayHello(<span class="type">boolean</span> county)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.county = county;</span><br><span class="line">&#125;</span><br><span class="line">String <span class="title function_">Hello</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (county)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="type">sayHello</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sayHello</span>(<span class="literal">false</span>); %&gt;</span><br><span class="line">&lt;%=a.Hello() %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="1-3-指令"><a href="#1-3-指令" class="headerlink" title="1.3 指令"></a>1.3 指令</h2><p>格式：<code>&lt;%@ 指令名称 属性名=&quot;属性值&quot;...%&gt;</code></p><p>指令名有page、include和taglib三种。taglib指令允许页面使用扩展标记。</p><h3 id="1-3-1-page指令"><a href="#1-3-1-page指令" class="headerlink" title="1.3.1 page指令"></a>1.3.1 page指令</h3><h4 id="1-language属性"><a href="#1-language属性" class="headerlink" title="1. language属性"></a>1. language属性</h4><p><strong>作用：</strong>指明JSP所用的编程语言，因为一定是java语言，所以可以省略</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span>　%&gt;</span><br></pre></td></tr></table></figure><h4 id="2-import属性（-）"><a href="#2-import属性（-）" class="headerlink" title="2. import属性（**）"></a>2. import属性（**）</h4><p><strong>作用：</strong>用来设置JSP页面导入的Java类，相当于Java语言的import语句<br>注意：import属性是Page指令唯一可以多次设置的属性</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.*, java.lang.*&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：包名要用引号括起来，各个包之间用逗号隔开</p></blockquote><h4 id="3-session属性"><a href="#3-session属性" class="headerlink" title="3. session属性"></a>3. session属性</h4><p>作用：指定JSP页面是否支持会话，默认值为true</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page session=<span class="string">&quot;true&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page session=<span class="string">&quot;false&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h4 id="4-errorPage"><a href="#4-errorPage" class="headerlink" title="4. errorPage**"></a>4. errorPage**</h4><p><strong>作用：</strong>当JSP程序发生错误后，用于设置出错页面</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page errorPage=<span class="string">&quot;error.jsp&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--testError.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> errorPage=<span class="string">&quot;error.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;页面错误属性测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%! <span class="type">int</span>[] a =&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; %&gt;</span><br><span class="line">&lt;%=a[<span class="number">3</span>] %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- error.jsp--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;JSP Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;The Page is wrong!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-contentType"><a href="#5-contentType" class="headerlink" title="5. contentType"></a>5. contentType</h4><p><strong>作用：</strong>用于设置JSP页面的内容类型和编码</p><p>内容类型有：text&#x2F;plain、text&#x2F;html（默认类型）、image&#x2F;gif和image&#x2F;jpeg等</p><p>JSP默认的字符编码方式是ISO 8859-1</p><p>代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=utf-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><h4 id="6-isThreadSafe"><a href="#6-isThreadSafe" class="headerlink" title="6. isThreadSafe"></a>6. isThreadSafe</h4><p><strong>作用：</strong>设置JSP文件是否可以多线程使用，默认为true。如果设置为false，一次只能处理一个请求。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--safe.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%! <span class="type">int</span> number=<span class="number">0</span>;<span class="comment">//声明一个方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">countPeople</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>  <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">while</span> (i++ &lt; <span class="number">200000000</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">number++;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">countPeople();<span class="comment">//在程序片段中调用方法</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;P&gt;你是第  &lt;%=number %&gt; 个访问本站的客户。</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-include-指令"><a href="#1-3-2-include-指令" class="headerlink" title="1.3.2 include 指令"></a>1.3.2 include 指令</h3><p>include指令：<br>用于在当前页面包含另外一个页面<br><strong>语法</strong>：<code> &lt;%@ include file=“url”%&gt;</code></p><p>include动作<br>用于在当前页面包含另外一个页面<br>格式：<code>&lt;jsp:include page=“url”/&gt;</code></p><p>include指令和include动作之间的区别<br>include指令（静态包含）：<br>（1）语法格式：&lt;%@ include file&#x3D;“url”%&gt;<br>（2）包含时间：翻译JSP文件到Servlet时<br>（3）逻辑上：统一的</p><p>include动作（动态包含）:<br>（1）语法格式：&lt;jsp:include page&#x3D;“url”&#x2F;&gt;<br>（2）包含时间：运行时<br>（3）逻辑上：独立的</p><p><img src="/2024/07/07/Java/JavaEE/image-20220831163956860.png" alt="image-20220831163956860"></p><h2 id="1-4-动作组件"><a href="#1-4-动作组件" class="headerlink" title="1.4 动作组件"></a>1.4 动作组件</h2><p>动作组件是一些XML语法格式的标记，被用来控制Web容器的行为。</p><p>常见的jsp动作组件有以下几种：</p><ul><li><code>&lt;jsp:include&gt;</code>：在页面被请求时引入一个文件</li><li><code>&lt;jsp:forward&gt;</code>：把请求转到一个新的页面</li><li><code>&lt;jsp:param&gt;</code>：在动作组件中引入参数信息</li><li><code>&lt;jsp:plugin&gt;</code>：执行一个Applet或Bean</li><li><code>&lt;jsp:setProperty&gt;</code>：设置JavaBean的属性</li><li><code>&lt;jsp:getProperty&gt;</code>：输出某个JavaBean的属性</li><li><code>&lt;jsp:useBean&gt;</code>：寻找或者实例化一个JavaBean</li></ul><h3 id="1-5-1-include动作组件"><a href="#1-5-1-include动作组件" class="headerlink" title="1.5.1 include动作组件"></a>1.5.1 include动作组件</h3><p><strong>动作：</strong>把指定文件插入正在生成的页面</p><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;文件名&quot;</span> flush=<span class="string">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-forward动作组件"><a href="#1-5-2-forward动作组件" class="headerlink" title="1.5.2 forward动作组件"></a>1.5.2 forward动作组件</h3><p><strong>作用：</strong>用于将浏览器显示的网页导向至另一个HTML页面或jsp网页，浏览器网址不发生改变</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;网页名称&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--forward.jsp --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">double</span> <span class="variable">i</span> <span class="operator">=</span> Math.random();</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">     %&gt;</span><br><span class="line">    &lt;jsp:forward page=<span class="string">&quot;catalog1.html&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-3-param动作组件"><a href="#1-5-3-param动作组件" class="headerlink" title="1.5.3 param动作组件"></a>1.5.3 param动作组件</h3><p><strong>作用：</strong>用于传递参数信息，必须配合include动作组件或forward动作组件一起使用</p><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:param name=参数名称, value=值 /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>和<code>&lt;jsp:include&gt;</code>一起使用，可以将param中的值传递到include动作组件中</p></blockquote><p><strong>实例：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- param1.jsp--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;向加载文件传递参数实例：&lt;/p&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;add.jsp&quot;</span>&gt;</span><br><span class="line">&lt;jsp:param name=<span class="string">&quot;start&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;</span><br><span class="line">&lt;jsp:param name=<span class="string">&quot;end&quot;</span> value=<span class="string">&quot;100&quot;</span> /&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- add.jsp--%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">String start=request.getParameter(<span class="string">&quot;start&quot;</span>);<span class="comment">//获取值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;end&quot;</span>);<span class="comment">//获取值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> Integer.parseInt(start);</span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> Integer.parseInt(end);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s; i &lt;= e; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;从&lt;%=start %&gt;到&lt;%=end %&gt;的连续和是：</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%=sum %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Java/JavaEE/image-20220928113836648.png" alt="image-20220928113836648"> </p><h3 id="1-5-4-plugin动作组件"><a href="#1-5-4-plugin动作组件" class="headerlink" title="1.5.4 plugin动作组件"></a>1.5.4 plugin动作组件</h3><p><strong>作用：</strong>用来执行一个Applet或Bean</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:plugin type=<span class="string">&quot;bean | applet&quot;</span> code=<span class="string">&quot;classFileName&quot;</span> codebase=<span class="string">&quot;classFileDirectoryName&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="1-5-内置对象"><a href="#1-5-内置对象" class="headerlink" title="1.5 内置对象"></a>1.5 内置对象</h2><p>Servlet API规范了一些接口，这些接口向开发者提供了方便的抽象，这些抽象封装了对象的实现。</p><p>JSP根据Servlet API规范提供了相应的内置对象，开发者不用事先声明就可以使用标准的变量来访问这些对象</p><p>JSP提供了9种内置对象：<code>request、reponse、out、session、application、config、pagecongtext、page、exception</code></p><h3 id="1-5-1-request对象"><a href="#1-5-1-request对象" class="headerlink" title="1.5.1 request对象"></a>1.5.1 request对象</h3><p><strong>作用：</strong>代表来自客户端的请求，封装了用户提交的新信息。</p><p><img src="/2024/07/07/Java/JavaEE/image-20220928092627058.png" alt="image-20220928092627058"> </p><p><img src="/2024/07/07/Java/JavaEE/image-20220928092636556.png" alt="image-20220928092636556"> </p><p><img src="/2024/07/07/Java/JavaEE/image-20220928092807005.png" alt="image-20220928092807005"> </p><p><img src="/2024/07/07/Java/JavaEE/image-20220928092818983.png" alt="image-20220928092818983"> </p><h3 id="4-6-2-response对象"><a href="#4-6-2-response对象" class="headerlink" title="4.6.2 response对象"></a>4.6.2 response对象</h3><p><strong>作用：</strong>向客户端发送数据。response代表的是服务器对客户端的响应。</p><p><img src="/2024/07/07/Java/JavaEE/image-20220928092905741.png" alt="image-20220928092905741"> </p><p>常用的方法：</p><p>（1）addCookie (Cookie cookie):</p><p>（2）header</p><p>（3）setContentType(String )</p><p>（4）sendRedirect(String url)：将请求重新定位到一个新的页面。</p><p>response.sendRedirect()与&lt;jsp:forward &gt;的区别：</p><p>response.sendRedirect()：在客户端浏览器跳转，客户端浏览器能看到地址变化<br>&lt;jsp:forward &gt;在服务器跳转，客户端浏览器不能看到地址变化</p><h3 id="4-6-3-session对象"><a href="#4-6-3-session对象" class="headerlink" title="4.6.3 session对象"></a>4.6.3 session对象</h3><p><strong>同一个浏览器</strong>打开的<strong>同一个服务器下</strong>的<strong>所有页面</strong>共享<strong>同一个Session对象。</strong></p><p><strong>作用</strong>：用于在这些页面之间实现数据共享</p><p>登录成功时，系统将登录成功信息放入session对象中:在每一个其他的页面的顶端，加入验证代码，查看session对象中是否有登录成功标志，如果有，XXXXX，如果没有，YYYY</p><h3 id="4-6-4-application对象"><a href="#4-6-4-application对象" class="headerlink" title="4.6.4 application对象"></a>4.6.4 application对象</h3><p><strong>作用：</strong>代表运行在服务器上的所有Web应用程序，针对所有页面，一旦创建，除非服务器关闭，否则将一直保持下去</p><p>session每次浏览器的访问</p><p><img src="/2024/07/07/Java/JavaEE/image-20220928093125371.png" alt="image-20220928093125371"> </p><h3 id="1-6-5-内置对象的作用范围"><a href="#1-6-5-内置对象的作用范围" class="headerlink" title="1.6.5 内置对象的作用范围"></a>1.6.5 内置对象的作用范围</h3><p>JSP的内置对象一种有四种范围</p><p>（1）page。page范围内的对象仅在<strong>当前JSP页面内</strong>有效</p><p>（2）request。由于采用&#96;&#96;<a href="jsp:forward">jsp:forward</a><code>和</code>response.sendRedirect()&#96;等重定向技术，跳转和包含的页面。在当前request范围内的若干个页面有效</p><p>（3）session。客户端与服务器的交互过程，称为session（会话）。在同一用户的所有页面（用同一浏览器、同一服务器）</p><p>（4）application。部署在服务器上的Web应用程序与所有客户端的交互过程。作用在网站下的所有页面</p><h2 id="1-7-JavaBean"><a href="#1-7-JavaBean" class="headerlink" title="1.7 JavaBean"></a>1.7 JavaBean</h2><p>JavaBean编写规范：</p><ol><li>构造方法：必须提一个无参的构造方法</li><li>set和get方法：<br>对于变量XXX，应提供方法getXxx()和setXxx()<br>getXxx()用于获取变量XXX的值<br>setXxx()用于设置变量XXX的值</li></ol><p>JavaBean组件是一些可移植、可重用，并可以组装到应用程序中的类。</p><p>在JavaBean中封装事务逻辑、数据库操作等，使用JSP调用，如果需要修改，直接修改JavaBean就可以了，不需要对JSP代码进行修改。</p><h4 id="1"><a href="#1" class="headerlink" title="1. &lt;jsp:useBean&gt;"></a>1. <code>&lt;jsp:useBean&gt;</code></h4><p><strong>作用：</strong>声明一个具有一定生存范围及一个唯一id的JavaBean的实例，JSP页面通过id来识别JavaBean，并可通过id.method类似的语句来操作JavaBean。</p><p><strong>语法：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">&quot;对象名&quot;</span> class=<span class="string">&quot;类名&quot;</span> scope=<span class="string">&quot;范围&quot;</span>/&gt;</span><br><span class="line">&lt;% 类名 对象名=<span class="keyword">new</span> 类名() %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="comment">//实例 %&gt;</span></span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;s1&quot;</span> class=<span class="string">&quot;Student&quot;</span> scope=<span class="string">&quot;application&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2. &lt;jsp:getProperty&gt;"></a>2. <code>&lt;jsp:getProperty&gt;</code></h4><p>**作用:**获取属性，用来返回一个已被创建的bean组件的属性值</p><p><strong>语法：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;对象名&quot;</span> property=<span class="string">&quot;属性名&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;s1&quot;</span> property=<span class="string">&quot; name &quot;</span> /&gt;</span><br><span class="line">&lt;%<span class="comment">// 等价于 %&gt;</span></span><br><span class="line">&lt;%=s1.getName&gt;</span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3. &lt;jsp:setProperty&gt;"></a>3. <code>&lt;jsp:setProperty&gt;</code></h4><p><strong>作用：</strong>设定一个已被创建的bean组件的属性值</p><p><strong>语法：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;对象名&quot;</span> property=<span class="string">&quot;属性名&quot;</span> value=<span class="string">&quot;属性值&quot;</span> /&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;对象名&quot;</span> property=<span class="string">&quot;属性名&quot;</span> param=<span class="string">&quot;参数值&quot;</span> /&gt;</span><br><span class="line">&lt;% <span class="comment">// 用表单空间的值给JavaBean对象属性赋值 %&gt;</span></span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;对象名&quot;</span> property=<span class="string">&quot;*&quot;</span> /&gt;</span><br><span class="line">&lt;% <span class="comment">// 用表单空间的值给JavaBean同名属性赋值 %&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h4><p>生存范围见内置对象</p><h1 id="二、JDBC访问数据库"><a href="#二、JDBC访问数据库" class="headerlink" title="二、JDBC访问数据库"></a>二、JDBC访问数据库</h1><p>jar包放在Tomcat安装目录\lib</p><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p>JDBC（Java DataBase Connection）</p><p>由Sun公司制定的，用于执行SQL语句的Java API(Application Programming Interface)，由一些Java语言编写的类和接口组成。</p><h2 id="2-2-使用JDBC访问数据库的基本步骤"><a href="#2-2-使用JDBC访问数据库的基本步骤" class="headerlink" title="2.2 使用JDBC访问数据库的基本步骤"></a>2.2 使用JDBC访问数据库的基本步骤</h2><p>（1）加载驱动程序</p><p><code>Class.forName(“数据库驱动程序串”)；</code></p><p>（2）获取数据库连接</p><p><code>DriverManager.getConnection(“URL”, ”Username”, ”Password”);</code></p><p>（3）创建Statement对象</p><p><code>&lt;Connection对象&gt;.createStatement();</code></p><p>（4）执行SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Statement对象&gt;.executeQuery(“查询语句”);</span><br><span class="line">&lt;Statement对象&gt;.executeUpdate(“修改语句”);</span><br></pre></td></tr></table></figure><p>（5）处理返回数据</p><p>（6）释放对象和数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResultSet对象&gt;.close();</span><br><span class="line"></span><br><span class="line">&lt;Statement对象&gt;.close();</span><br><span class="line"></span><br><span class="line">&lt;Connection对象&gt;.close();</span><br></pre></td></tr></table></figure><h2 id="2-3-开发人员常用的JDBC-API"><a href="#2-3-开发人员常用的JDBC-API" class="headerlink" title="2.3 开发人员常用的JDBC API"></a>2.3 开发人员常用的JDBC API</h2><h3 id="（1）Class"><a href="#（1）Class" class="headerlink" title="（1）Class"></a>（1）Class</h3><p>作用：加载数据库驱动程序；</p><p>用法：Class.forName(“数据库驱动程序串”)；</p><p>常用驱动程序：</p><p>ODBC的驱动程序：“sun.jdbc.odbc.JdbcOdbcDriver”</p><p>SQL Server的驱动程序：“com.microsoft.jdbc.sqlserver. SQLServerDriver”</p><p>Oracle的驱动程序：“oracle.jdbc.driver.OracleDriver”</p><h3 id="（2）DriverManager"><a href="#（2）DriverManager" class="headerlink" title="（2）DriverManager"></a>（2）DriverManager</h3><p>作用：创建数据库连接；</p><p>用法：<code>DriverManager.getConnection(“URL”,”Username”,”Password”);</code></p><p>说明：</p><p>URL为数据库统一资源定位符，即数据库的地址。URL的格式为“协议标识：驱动程序标识：数据库标识”，其中，协议标识固定为jdbc，驱动程序标识为驱动定义的类型，一般用于识别数据库服务器的地址和端口号，数据库标识用来识别某个特定的数据库，一般为数据库名称或ODBC数据源名称。</p><p>Username为用户名；</p><p>Password为用户密码。</p><h3 id="（3）Connection"><a href="#（3）Connection" class="headerlink" title="（3）Connection"></a>（3）Connection</h3><p>用来管理JDBC和数据库之间的连接。</p><p>常用方法：</p><p>1）<code>void setAutoCommit(boolean autoCommit) throws SQLException</code></p><p>功能：设置自动提交，参数autoCommit为true是自动提交，false是不自动提交。</p><p>说明：数据库连接处于自动提交状态时，每执行一条SQL语句提交一次；否则，由程序逻辑调用commit()方法显示提交。默认状态下，连接处于自动提交状态下。</p><p>2）<code>boolean getAutoCommit() throws SQLException</code></p><p>功能：获取连接的自动提交模式。</p><p>说明：自动提交模式返回true；否则返回false。</p><p>3）<code>void rollback() throws SQLException</code></p><p>功能：取消当前事务的执行的所有SQL语句，即回滚。</p><p>说明：只有在连接处于非自动提交状态时，该方法才可以使用。</p><p>4）<code>void commit() throws SQLException</code></p><p>功能：提交当前事务，既使当前事务中的所有SQL语句对数据库的更改生效、永久化。</p><p>说明：只有在连接处于非自动提交状态时，该方法才可以使用。</p><p>5）<code>void close() throws SQLException</code></p><p>功能：释放数据库连接和JDBC的所有资源。</p><p>6）<code>boolean isClosed() throws SQLException</code></p><p>功能：判断数据库连接是否释放。</p><p>7）<code>Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException</code></p><p>功能：创建一个Statement对象，通过该Statement对象，能够生成给定类型和并发性的ResultSet对象。</p><p>说明：</p><p>resultSetType参数有三种取值：</p><ul><li><p>ResultSet.TYPE_FORWARD_ONLY：结果集指针只能向前移动</p></li><li><p>ResultSet.TYPE_SCROLL_INSENSITIVE：结果集指针可以随意移动，自从获取数据后，数据库内容的变化不会引起结果集内容的变化。</p></li><li><p>ResultSet.TYPE_SCROLL_SENSITIVE: 结果集指针可以随意移动，获取数据后，数据库内容的变化将引起结果集内容的变化。</p></li></ul><p>resultSetConcurrency参数有两种取值：</p><ul><li><p>ResultSet.CONCUR_READ_ONLY：不能通过结果集中数据的更改来更新数据库。</p></li><li><p>ResultSet.CONCUR_UPDATABLE：可以通过结果集中数据的更改来更新数据库。</p></li></ul><p>8）<code>Statement createStatement( ) throws SQLException</code></p><p>功能：创建一个Statement对象，通过该Statement对象，生成ResultSet对象的类型默认为ResultSet.TYPE_FORWARD_ONLY，并发性默认为ResultSet.CONCUR_READ_ONLY。</p><p>9）<code>PreparedStatement prepareStatement(String sql) throws SQLException</code></p><p>功能：</p><p>10）<code>PreparedStatement prepareStatement(String sql, int resultSetType,int resultSetConcurrency) throws SQLException</code></p><p>11）<code>CallableStatement prepareCall(String sql) throws SQLException</code></p><p>12）<code>CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException</code></p><h3 id="（4）Statement"><a href="#（4）Statement" class="headerlink" title="（4）Statement"></a>（4）Statement</h3><p><strong>作用</strong>：用于执行SQL语句</p><p>Statement对象代表SQL语句，可用于将SQL语句发往数据库。</p><p>Statement对象用于执行一条静态的SQL语句并获得它的结果，记录结果集。</p><p><strong>3种Statement对象：</strong></p><ul><li><p>Statement：执行基本的SQL语句。</p></li><li><p>PreparedStatement：继承自Statement，用于提供可以与查询信息一起预编译的语句，用于执行带参数的SQL语句。</p></li><li><p>CallableStatement：继承自PreparedStatement ，用来执行数据库中的存储过程。</p></li></ul><p><strong>常用方法：</strong></p><ul><li><p>ResultSet executeQuery(String sql) throws SQLException<br>执行一条返回单个ResultSet的SQL语句。</p></li><li><p>int executeUpdate(String sql) throws SQLException<br>执行INSERT、UPDATE、DELETE以及没有返回结果的SQL语句，如DDL语句。方法返回语句影响的行数。</p></li><li><p>boolean execute(String sql) throws SQLException<br>执行一条可能返回多个结果的SQL语句。<br>如果下一个结果是ResultSet，返回true，否则返回false。</p></li><li><p>ResultSet getResultSet() throws SQLException<br>得到当前的ResultSet结果。</p></li><li><p>int getUpdateCount() throws SQLException<br>得到更新的数量，如果结果是一个ResultSet或没有其他结果，返回-1。</p></li><li><p>void close() throws SQLException<br>关闭语句，同时立即释放该语句的数据库和JDBC资源，如果它有相应的ResultSet，则ResultSet也会被关闭。</p></li></ul><h3 id="（5）ResultSet"><a href="#（5）ResultSet" class="headerlink" title="（5）ResultSet"></a>（5）ResultSet</h3><p>用来接收执行SQL查询语句后得到的记录集。</p><p>用它的getXXX方法可以得到记录中不同列的数据。可通过列的索引或名字来获取值，列索引从1开始。</p><p>用next()可把当前记录指针往下移动一行。</p><p><strong>常用方法：</strong></p><ul><li><p>boolean absolute(int row) throws SQLException<br>当记录指针可以上下移动查询时移动当前记录指针到指定行。<br>参数row为正数，指针移动到正方向第row个记录；参数row为负数，指针移动到反方向第row个记录。<br>第一行行号为1。<br>当记录指针移到第一行的前面或最后一行的后面，返回值false。</p></li><li><p>boolean next() throws SQLException<br>当前记录指针下移一行。<br>指针初始位置为第一行之前。<br>当移动指针到最后一行之后时，返回false;否则返回true。</p></li><li><p>boolean previous() throws SQLException<br>previous先前的<br>当记录指针可以上下移动时，当前记录指针上移一行。<br>当移动指针到第一行之前时，返回false;否则返回true。</p></li><li><p>boolean relative(int rows)<br>relative 相对的<br>将记录指针相对于当前行移动rows行，正数向后移，负数向前移。</p></li><li><p>void beforeFirst()<br>将指针移动到第一行的前面。</p></li><li><p>boolean first()<br>将指针移动到第一行。</p></li><li><p>boolean last()<br>将指针移动到最后一行。</p></li><li><p>void afterLast()<br>将指针移动到最后一行的后面。</p></li><li><p>boolean isFirst() 判断指针是否指向第一行</p></li><li><p>boolean isLast() 判断指针是否指向最后一行</p></li><li><p>boolean isBeforeFirst()</p></li><li><p>boolean isAfterLast()</p></li></ul><p><strong>注意：</strong></p><p>使用所有除了next()以外的指针移动方法有一个前提条件，记录指针必须是可以上下移动的，即产生ResultSet的Statement的创建应该如下：</p><p>createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, XXXX) 或</p><p>createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, XXXX)</p><p>用它的getXXX方法可以得到记录中不同列的数据。可通过列的索引或名字来获取值，列索引从1开始。</p><p>XXX代表数据类型</p><p>xxx getXxx(int columnIndex)</p><p>xxx getXxx(String  columnLabel)</p><p>参数columnIndex为列索引，第一列索引号为1；参数columnLabel为列名。</p><p>xxx可以是boolean、byte、short、int、long、float、double、String、……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="title function_">getByte</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="title function_">getShort</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getInt</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">getLong</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">getFloat</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">getDouble</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">getBoolean</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] getBytes(<span class="type">int</span> columnIndex | String columnLabel)</span><br><span class="line"></span><br><span class="line">Date <span class="title function_">getDate</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span></span><br><span class="line"></span><br><span class="line">Time <span class="title function_">getTime</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span> </span><br><span class="line"></span><br><span class="line">String <span class="title function_">getString</span><span class="params">(<span class="type">int</span> columnIndex | String columnLabel)</span><span class="comment">//最常用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getRow</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获取当前行的行号，从1开始。如果没有当前行，返回0。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span><br><span class="line"><span class="comment">// 关闭ResultSet对象，立即释放该语句的数据库和JDBC资源。</span></span><br></pre></td></tr></table></figure><h2 id="2-4-JDBC实验"><a href="#2-4-JDBC实验" class="headerlink" title="2.4 JDBC实验"></a>2.4 JDBC实验</h2><h3 id="2-4-1-编写JSP程序，输出学生数据库的学生基本信息。"><a href="#2-4-1-编写JSP程序，输出学生数据库的学生基本信息。" class="headerlink" title="2.4.1 编写JSP程序，输出学生数据库的学生基本信息。"></a>2.4.1 编写JSP程序，输出学生数据库的学生基本信息。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.sql.*&quot;</span> pageEncoding=<span class="string">&quot;GB2312&quot;</span>%&gt;<span class="comment">//import必须引入这个包</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line"> &lt;head&gt;  </span><br><span class="line"></span><br><span class="line">  &lt;title&gt;output the student<span class="string">&#x27;s information&lt;/title&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;/head&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String url = &quot;jdbc:mysql://127.0.0.1:3306/mis?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&quot;;//东八区</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Connection conn = DriverManager.getConnection(url, &quot;root&quot;,&quot;123456&quot;);//建立数据库连接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Statement stmt = conn.createStatement();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ResultSet rs = stmt.executeQuery(&quot;select * from student&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;table width=800 border=1 align=&#x27;</span>center<span class="string">&#x27;&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;tr&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;学号&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;用户名&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;密码&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;姓名&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;性别&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;出生日期&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;专业&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;年级&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;td&gt;电话号码&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;/tr&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> while(rs.next())&#123;  //rs结果集</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;tr&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;sno&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;susername&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;spassword&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;sname&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;ssex&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;sbirthday&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;smajor&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;sgrade&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;td&gt;&quot;+rs.getString(&quot;sphone&quot;)+&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   out.println(&quot;&lt;/tr&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;&lt;/table&gt;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> rs.close();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> stmt.close();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> conn.close();    //释放资源</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  %&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-编写JSP程序，向数据库添加学生信息。"><a href="#2-4-2-编写JSP程序，向数据库添加学生信息。" class="headerlink" title="2.4.2 编写JSP程序，向数据库添加学生信息。"></a>2.4.2 编写JSP程序，向数据库添加学生信息。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input.jsp</span></span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;gb2312&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;输入学生基本信息&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;请输入学生基本信息:&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;add.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;   <span class="comment">//提交到add.jsp</span></span><br><span class="line"></span><br><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;susername&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;spassword&quot;</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;p&gt;学号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sno&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sname&quot;</span>/&gt; </span><br><span class="line"></span><br><span class="line">&lt;p&gt;性别：男&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;ssex&quot;</span> value=<span class="string">&quot;m&quot;</span> checked/&gt;</span><br><span class="line"></span><br><span class="line">​     女&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;ssex&quot;</span> value=<span class="string">&quot;f&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;出生日期：</span><br><span class="line"></span><br><span class="line">  &lt;select name=<span class="string">&quot;year&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1980</span>;i&lt;=<span class="number">2000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">   out.println(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+i+<span class="string">&quot;&#x27;&gt;&quot;</span>+i+<span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">   %&gt;   </span><br><span class="line"></span><br><span class="line">  &lt;/select&gt;年</span><br><span class="line"></span><br><span class="line">  &lt;select name=<span class="string">&quot;month&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">   out.println(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+i+<span class="string">&quot;&#x27;&gt;&quot;</span>+i+<span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">   %&gt;    </span><br><span class="line"></span><br><span class="line">  &lt;/select&gt;月</span><br><span class="line"></span><br><span class="line">  &lt;select name=<span class="string">&quot;day&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">31</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">   out.println(<span class="string">&quot;&lt;option value=&#x27;&quot;</span>+i+<span class="string">&quot;&#x27;&gt;&quot;</span>+i+<span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">   %&gt;     </span><br><span class="line"></span><br><span class="line">  &lt;/select&gt;日</span><br><span class="line"></span><br><span class="line">&lt;p&gt;电话号码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sphone&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;年级：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;sgrade&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;专业：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;smajor&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">&quot;reset&quot;</span> value=<span class="string">&quot;重写&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.jsp</span></span><br><span class="line"></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.sql.*&quot;</span> pageEncoding=<span class="string">&quot;GB2312&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line"> &lt;head&gt;  </span><br><span class="line"></span><br><span class="line">  &lt;title&gt;output the student<span class="string">&#x27;s information&lt;/title&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;/head&gt; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String sno = request.getParameter(&quot;sno&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String susername = request.getParameter(&quot;susername&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String spassword = request.getParameter(&quot;spassword&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String sname = request.getParameter(&quot;sname&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String ssex = request.getParameter(&quot;ssex&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String sbirthday = request.getParameter(&quot;year&quot;)+&quot;-&quot;+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​           request.getParameter(&quot;month&quot;)+&quot;-&quot;+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​           request.getParameter(&quot;day&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String smajor = request.getParameter(&quot;smajor&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String sgrade = request.getParameter(&quot;sgrade&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String sphone = request.getParameter(&quot;sphone&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String url = &quot;jdbc:mysql://127.0.0.1:3306/mis?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Connection conn = DriverManager.getConnection(url, &quot;root&quot;,&quot;123456&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Statement stmt = conn.createStatement();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> String sql=&quot;insert into student &quot;+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​    &quot;(sno,sname,ssex,sbirthday,smajor,sgrade,sphone,susername,spassword)&quot;+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​    &quot; values(&#x27;</span><span class="string">&quot;+sno+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+sname+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+ssex+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+sbirthday+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+smajor+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">​    &quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+sgrade+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+sphone+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+susername+&quot;</span><span class="string">&#x27;,&#x27;</span><span class="string">&quot;+spassword+&quot;</span><span class="string">&#x27;)&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> stmt.executeUpdate(sql);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> out.println(&quot;数据已成功添加到数据库中。&quot;); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> stmt.close();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> conn.close();  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  %&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-编写JaveBean，对数据库中的数据进行查询、删除和修改。"><a href="#2-4-3-编写JaveBean，对数据库中的数据进行查询、删除和修改。" class="headerlink" title="2.4.3 编写JaveBean，对数据库中的数据进行查询、删除和修改。"></a>2.4.3 编写JaveBean，对数据库中的数据进行查询、删除和修改。</h3><p>功能：加载驱动程序；建立数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;    <span class="comment">//JDBC有关的包都在这里面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBConn</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> Connection conn=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">private</span> String driver,url,username,password;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//String connectionUrl = //&quot;jdbc:sqlserver://localhost:1433;databaseName=test;user=sa;password=sa;&quot;;</span></span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> <span class="title function_">DBConn</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="built_in">this</span>.driver= <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.url= <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mis? characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&quot;</span></span><br><span class="line"></span><br><span class="line">​     <span class="built_in">this</span>.username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="built_in">this</span>.password=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      Class.forName(driver);</span><br><span class="line"></span><br><span class="line">​      conn=DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;不能加载数据库驱动。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;不能建立数据库连接。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(String username,String password,</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">​           String realname,String sex,String email)</span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="type">boolean</span> temp=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">​     PreparedStatement stmt=<span class="literal">null</span>;  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">​    String sql=<span class="string">&quot;insert into reginfor(username,password,realname,sex,email) &quot;</span>;</span><br><span class="line"></span><br><span class="line">​        sql=sql+<span class="string">&quot;values(?,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      stmt=conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">1</span>,username);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">3</span>,realname);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">4</span>,sex);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">5</span>,email);</span><br><span class="line"></span><br><span class="line">​      stmt.execute();</span><br><span class="line"></span><br><span class="line">​      temp=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;添加数据异常．&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> ResultSet <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">​     Statement stmt=<span class="literal">null</span>;  <span class="comment">//定义语句对象，用statement不用传参数</span></span><br><span class="line"></span><br><span class="line">​     ResultSet rs=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      stmt=conn.createStatement();</span><br><span class="line"></span><br><span class="line">​      rs=stmt.executeQuery(<span class="string">&quot;select * from reginfor&quot;</span>);  </span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;查询异常．&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">return</span> rs;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> ResultSet <span class="title function_">find</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line"></span><br><span class="line">​     PreparedStatement stmt=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">​     ResultSet rs=<span class="literal">null</span>; <span class="comment">//定义结果集</span></span><br><span class="line"></span><br><span class="line">​     String sql=<span class="string">&quot;select * from reginfor &quot;</span> +</span><br><span class="line"></span><br><span class="line">​        <span class="string">&quot;where username=? and password=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      stmt=conn.prepareStatement(sql);<span class="comment">//创建语句对象</span></span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">1</span>,username);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line">​      rs=stmt.executeQuery();  <span class="comment">//执行SQL语句</span></span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;查询异常．&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">return</span> rs;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="type">boolean</span> temp=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">​     PreparedStatement stmt=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">​     String sql=<span class="string">&quot;delete from reginfor where id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      stmt=conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">​      stmt.setInt(<span class="number">1</span>,id);</span><br><span class="line"></span><br><span class="line">​      stmt.execute();</span><br><span class="line"></span><br><span class="line">​      temp=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;删除异常．&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> id,String username,String password,</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">​          String realname,String sex,String email)</span>&#123;</span><br><span class="line"></span><br><span class="line">​     <span class="type">boolean</span> temp=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">​     PreparedStatement stmt=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">​     String sql=<span class="string">&quot;update reginfor &quot;</span> +</span><br><span class="line"></span><br><span class="line">​        <span class="string">&quot;set username=?,password=?,realname=?,&quot;</span> +</span><br><span class="line"></span><br><span class="line">​        <span class="string">&quot;sex=?,email=? where id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      stmt=conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">1</span>,username);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">3</span>,realname);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">4</span>,sex);</span><br><span class="line"></span><br><span class="line">​      stmt.setString(<span class="number">5</span>,email);  </span><br><span class="line"></span><br><span class="line">​      stmt.setInt(<span class="number">6</span>,id);</span><br><span class="line"></span><br><span class="line">​      stmt.execute();</span><br><span class="line"></span><br><span class="line">​      temp=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;更新异常．&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(ResultSet rs)</span>&#123;</span><br><span class="line"></span><br><span class="line">​     System.out.print(<span class="string">&quot;ID&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     System.out.print(<span class="string">&quot;用户名&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     System.out.print(<span class="string">&quot;密　码&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     System.out.print(<span class="string">&quot;姓　名&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     System.out.print(<span class="string">&quot;性　别&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     System.out.println(<span class="string">&quot;邮　箱&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"></span><br><span class="line">​      System.out.print(rs.getString(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.print(rs.getString(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.print(rs.getString(<span class="string">&quot;password&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.print(rs.getString(<span class="string">&quot;realname&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.print(rs.getString(<span class="string">&quot;sex&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.println(rs.getString(<span class="string">&quot;email&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;输出异常．&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Servlet"><a href="#三、Servlet" class="headerlink" title="三、Servlet"></a>三、Servlet</h1><h2 id="3-1-Web应用模型"><a href="#3-1-Web应用模型" class="headerlink" title="3.1 Web应用模型"></a>3.1 Web应用模型</h2><p>一次请求处理过程：</p><ol><li>客户端向服务器发出一个请求</li><li>建立连接</li><li>服务器对客户端的请求进行响应</li><li>断开连接</li></ol><p><img src="/2024/07/07/Java/JavaEE/image-20221113102156559.png" alt="image-20221113102156559"> </p><p>HTTP协议的两个重要特性：</p><ul><li>无状态：服务器不会记录和保持客户端的任何信息</li><li>无连接：服务器不会保持与客户端的永久性连接</li></ul><h2 id="3-2-Servlet基础"><a href="#3-2-Servlet基础" class="headerlink" title="3.2 Servlet基础"></a>3.2 Servlet基础</h2><p>Servlet是服务器端的Java应用程序，用来扩展服务器的功能，运行在Web服务器里。</p><h3 id="3-2-1-Servlet工作流程"><a href="#3-2-1-Servlet工作流程" class="headerlink" title="3.2.1 Servlet工作流程"></a>3.2.1 Servlet工作流程</h3><h4 id="1、服务器、容器与Servlet之间的关系"><a href="#1、服务器、容器与Servlet之间的关系" class="headerlink" title="1、服务器、容器与Servlet之间的关系"></a>1、服务器、容器与Servlet之间的关系</h4><p>（1）Web服务器包含多个容器，一个容器对应于一个Web应用</p><p>（2）一个Web容器可以运行多个Servlet实例</p><p>（3）一个Servlet实例以多线程的形式运行</p><p> <img src="/2024/07/07/Java/JavaEE/image-20221113102803215.png" alt="image-20221113102803215"> </p><h4 id="2、Servlet的工作流程"><a href="#2、Servlet的工作流程" class="headerlink" title="2、Servlet的工作流程"></a>2、Servlet的工作流程</h4><p>（1）客户端向Web服务器发送请求</p><p>（2）Web服务器将请求发给Web容器</p><p>（3）Web容器将Servlet实例化，创建线程，调用init()方法</p><p>（4）Web容器将客户端请求发给Servlet，调用对应的do方法（doGet、doPost、doPut、doDelete）</p><p>（5）Servlet创建一个响应，并将响应返回给Web容器</p><p>（6）Web容器将响应返回给Web服务器</p><p>（7）Web服务器将响应返回给客户端</p><p>（8）当服务器关闭或者Servlet空闲时间超过一定限度时，Web容器将Servlet实例从内存移除，调用destroy()方法</p><p> <strong>注意：</strong></p><ul><li>init()方法只执行一次，Web容器将Servlet实例化时执行</li><li>destroy()方法只执行一次，当服务器关闭或者Servlet空闲时间超过一定限度时执行</li><li>do方法执行很多次，客户端每请求一次就执行一次</li></ul><h3 id="3-2-2-Servlet编程接口"><a href="#3-2-2-Servlet编程接口" class="headerlink" title="3.2.2 Servlet编程接口"></a>3.2.2 Servlet编程接口</h3><p><img src="/2024/07/07/Java/JavaEE/image-20221113103548342.png" alt="image-20221113103548342"> </p><h4 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h4><p>所有Servlet应用必须继承HttpServlet，常用的方法如下：</p><p>（1）<code>void doGet(HttpServletRequest req, HttpServletResponse resp)</code><br>当客户端发出get请求时，Web服务器调用该方法</p><p>（2）<code>void doPost(HttpServletRequest req, HttpServletResponse resp)</code><br>当客户端发出post请求时，Web服务器调用该方法</p><h4 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h4><p>代表发送到HttpServlet的请求，封装了客户端环境和从客户端发送到Servlet的数据。</p><p>常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpSession <span class="title function_">getSession</span><span class="params">()</span></span><br><span class="line">String <span class="title function_">getParameter</span><span class="params">(String name)</span></span><br><span class="line">String[] getParameterValues(String name)</span><br><span class="line">RequestDispatcher <span class="title function_">getRequestDispatcher</span><span class="params">(String path)</span></span><br><span class="line">ServletContext <span class="title function_">getServletContext</span><span class="params">()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String env)</span></span><br></pre></td></tr></table></figure><h4 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h4><p>代表HttpServlet返回给客户端的响应，常用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sendRedirect</span><span class="params">(String location)</span></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setCharacterEncoding</span><span class="params">(String charset)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContentType</span><span class="params">(String type)</span></span><br></pre></td></tr></table></figure><h4 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h4><p>用来在无状态的HTTP协议下跨越多个请求页面来维持状态和识别用户。</p><p>常用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletContext <span class="title function_">getServlet</span><span class="params">()</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(java.lang.String name)</span></span><br><span class="line">Enumeration&lt;java.lang.String&gt; getAttributeNames()</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(java.lang.String name, java.lang.Object value)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isNew</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4><p>代表Servlet的配置信息（在Web.xml中设置）</p><p>常用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getInitParameter</span><span class="params">(java.lang.String name)</span></span><br><span class="line">Enumeration&lt;java.lang.String&gt; getInitParameterNames()</span><br><span class="line">ServletContet <span class="title function_">getServletContext</span><span class="params">()</span></span><br><span class="line">String <span class="title function_">getServletName</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h4 id="RequestDispatcher"><a href="#RequestDispatcher" class="headerlink" title="RequestDispatcher"></a>RequestDispatcher</h4><p>请求转发器，可将客户端的请求转发到另一个程序</p><p>常用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">forward</span><span class="params">(ServletRequest request, ServletResponse response)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">include</span><span class="params">(ServletRequest request, ServletResponse response)</span></span><br></pre></td></tr></table></figure><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>代表Servlet的运行环境信息</p><h4 id="ServletException"><a href="#ServletException" class="headerlink" title="ServletException"></a>ServletException</h4><p>代表Servlet运行过程中抛出的例外</p><h2 id="3-3-编写Servlet"><a href="#3-3-编写Servlet" class="headerlink" title="3.3 编写Servlet"></a>3.3 编写Servlet</h2><p>（1）定义Servlet类，继承HttpServlet</p><p>（2）定义doGet()、doPost()、init()、destroy()等方法</p><p>（3）建立Servlet与URL之间的映射</p><ul><li><p>在web.xml中配置<br><img src="/2024/07/07/Java/JavaEE/image-20221113111022387.png" alt="image-20221113111022387"><br>URL与Servlet实例之间的映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet实例名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet实例与Servlet类之间的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet实例名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet类名称<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解@WebServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name=&quot;实例名称&quot;, urlPatterns=&quot;URL&quot;)</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="meta">@WebS</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="期末考试"><a href="#期末考试" class="headerlink" title="期末考试"></a>期末考试</h1><p>简答题<br>1.请简要解释HTML、JavaEE、JSP、JDBC的英文含义和中文含义。<br>2.请简要叙述Servlet和JSP在软件开发时的作用与地位。。<br>3.请简要说明JSP页面第一次运行时的过程。<br>4.请简要叙述MVC设计模式，JSP、JavaBean和Servlet在MVC设计模式中的作用。<br>5.请简要叙述include指令和include动作的功能，以及它们的区别。<br>6.请简要叙述JavaBean的四种生存范围。<br>7.请简要描述Servlet的基本工作流程。<br>8.请简要说明JDBC访问数据库的基本步骤。<br>9.请简要叙述利用JDBC访问数据库时常用的类和接口有哪些。<br>10.请简要解释下列JSP内置对象的主要用途：request、response、session、application。</p><p>材料分析题考点（填空）<br>1.表单<br>    一个表单，用于学生的信息</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=gb2312&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;titile&gt;<span class="built_in">this</span> is a form&lt;/titile&gt;&lt;/head&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    String origins[]=&#123;<span class="string">&quot;黑龙江&quot;</span>,<span class="string">&quot;吉林&quot;</span>,<span class="string">&quot;辽宁&quot;</span>,<span class="string">&quot;山东&quot;</span>,<span class="string">&quot;江苏&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;浙江&quot;</span>,<span class="string">&quot;福建&quot;</span>&#125;;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;请输入学生基本信息&lt;/h2&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/hello/servlet/print&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        &lt;p&gt;姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;realname&quot;</span>/&gt;</span><br><span class="line">        &lt;p&gt;性别：</span><br><span class="line">            男：&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;male&quot;</span> checked/&gt;</span><br><span class="line">            女：&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;femle&quot;</span>/&gt;</span><br><span class="line">        &lt;p&gt;爱好：</span><br><span class="line">            文学&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;art&quot;</span>/&gt;</span><br><span class="line">            体育&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;sports&quot;</span>/&gt;</span><br><span class="line">        &lt;p&gt;籍贯：</span><br><span class="line">            &lt;select name=<span class="string">&quot;origin&quot;</span>&gt;</span><br><span class="line">            &lt;%</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">inti</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;origins.length; i++) &#123;</span><br><span class="line">                    out.println(<span class="string">&quot;&lt;option value=&quot;</span>+origins[i]+<span class="string">&quot;&gt;&quot;</span>+origins[i]+<span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            %&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;p&gt;备注：&lt;br&gt;</span><br><span class="line">            &lt;textarea name=<span class="string">&quot;memo&quot;</span> rows=<span class="number">5</span> cols=<span class="number">50</span>&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;p&gt;&lt;input type=<span class="string">&quot;sbumit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;reset&quot;</span> value=<span class="string">&quot;重置&quot;</span>/&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.JSP脚本<br>3.request对象、session对象、application对象<br>4.JavaBean及在JSP中使用JavaBean<br>5.基于JDBC访问数据库<br>6.Servlet</p><p>编程题</p><p>1.编写JavaBean<br>2.JSP脚本</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>**1.请简要解释HTML、JavaEE、JSP、JDBC的英文含义和中文含义。</p><p>HTML：Hyper Text Markup Language，超文本标记语言<br>JavaEE：Java Enterprise Editionjava企业版<br>JSP：Java Server Pages java服务器端页面<br>JDBC：Java Database Connectionjava数据库连接</p><p><strong>2.请简要叙述Servlet和JSP在软件开发时的作用与地位。</strong></p><p>Servlet和JSP都是J2EE的组件。<br>Servlet主要用于实现软件和组成系统的控制。<br>JSP主要用于实现软件的界面。</p><p><strong>3.请简要说明JSP页面第一次运行时的过程。</strong></p><p>（1）客户端发送请求（URL地址）（jsp）</p><p>（2）服务器将 JSP 文件翻译为 Java 程序（Servlet）（Java）</p><p>（3）服务器将 Java程序编译为字节码（.class）</p><p>（4）服务器运行字节码（.html）</p><p>（5）服务器将 HTML 代码发送给客户端浏览器</p><p><strong>4.请简要叙述MVC设计模式，JSP、JavaBean和Servlet在MVC设计模式中的作用。</strong></p><p>JavaBean用来业务处理 model<br>JSP用来显示数据 view<br>Servlet用来控制页面转移 control</p><p><strong>5.请简要叙述include指令和include动作的功能，以及它们的区别。</strong></p><p>include指令：用于在当前页面包含另外一个页面<br>include动作：用于在当前页面包含另外一个页面</p><p>区别<br>include指令（静态包含）：<br>（1）语法格式：&lt;%@ include file&#x3D;“url”%&gt;<br>（2）包含时间：翻译JSP文件到Servlet时<br>（3）逻辑上：统一的</p><p>include动作（动态包含）:<br>（1）语法格式：&lt;jsp:include page&#x3D;“url”&#x2F;&gt;<br>（2）包含时间：运行时<br>（3）逻辑上：独立的</p><p><strong>6.请简要叙述JavaBean的四种生存范围。</strong></p><p>（1）page：当前JSP页面内<br>（2）request：①当前拥有相同请求的JSP文件②以及用include动作和forward动作和当前页面连接在一起的页面。<br>（3）session：同一用户的所有页面<br>（4）application：服务器下的所有页面<br><strong>7.请简要描述Servlet的基本工作流程。</strong></p><p>（1）客户端向Web服务器发送请求</p><p>（2）Web服务器将请求发给Web容器</p><p>（3）Web容器将Servlet实例化，创建线程，调用init()方法</p><p>（4）Web容器将客户端请求发给Servlet，调用对应的do方法（doGet、doPost、doPut、doDelete）</p><p>（5）Servlet创建一个响应，并将响应返回给Web容器</p><p>（6）Web容器将响应返回给Web服务器</p><p>（7）Web服务器将响应返回给客户端</p><p>（8）当服务器关闭或者Servlet空闲时间超过一定限度时，Web容器将Servlet实例从内存移除，调用destroy()方法</p><p><strong>8.请简要说明JDBC访问数据库的基本步骤。</strong></p><p>（1）加载驱动程序<code>Class.forName(“数据库驱动程序串”)；</code></p><p>（2）获取数据库连接<code>DriverManager.getConnection(“URL”, ”Username”, ”Password”);</code></p><p>（3）创建Statement对象<code>&lt;Connection对象&gt;.createStatement();</code></p><p>（4）执行SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Statement对象&gt;.executeQuery(“查询语句”);</span><br><span class="line">&lt;Statement对象&gt;.executeUpdate(“修改语句”);</span><br></pre></td></tr></table></figure><p>（5）处理返回数据</p><p>（6）释放对象和数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResultSet对象&gt;.close();</span><br><span class="line"></span><br><span class="line">&lt;Statement对象&gt;.close();</span><br><span class="line"></span><br><span class="line">&lt;Connection对象&gt;.close();</span><br></pre></td></tr></table></figure><p><strong>9.请简要叙述利用JDBC访问数据库时常用的类和接口有哪些。</strong>（任意四个就给4分，1个1分）</p><ul><li>Class</li><li>DriverManager</li><li>Connection</li><li>Statement</li><li>ResultSet</li><li>PreparedStatement</li></ul><p><strong>10.请简要解释下列JSP内置对象的主要用途：request、response、session、application。</strong></p><p>request:代表来自客户端的请求，用于从客户端向服务器端发送信息<br>response:代表服务器端的回复信息，用于从服务器向客户端发送信息。<br>session:代表一次会话，用于识别同一用户<br>application:用于全局共享数据</p><p>选择题</p><ol><li><p>关于类成员与实例成员，下列说法正确的是（BC)(多选)</p><p>A 在类外，类成员只能通过类进行访问，实例成员只能通过实例进行访问（类成员也可以通过实例访问）</p><p>B 类方法中只能调用类成员，实例方法中既能调用类成员，也能调用实例成员</p><p>C 类成员属于类，实例成员属于对象</p><p>D 类成员不用static修饰，实例成员用static修饰（反了）</p></li><li><p>param动作用于传递参数，关于param动作，下列说法错误的是（B）（单选）</p><p>A。param动作的语法格式为&lt;jsp:param name&#x3D;参数名称 value&#x3D;值&gt;</p><p>B. parama动作只能和include动作配合使用</p><p>C。param动作不能单独使用</p><p>D。param动作传递参数的类型只能为字符串</p></li><li><p>Java中，所有异常类的父类是<strong>Throwable</strong></p></li><li><p>Java程序默认有java.lang这个类</p></li><li><p>用一个jsp程序access.jsp和一个java类Counter，用于实现网站访问的计数，统一用户不重复计数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//access.jsp</span></span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;bean.Counter&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;logon page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;jsp:useBean id=<span class="string">&quot;counter&quot;</span> class=<span class="string">&quot;bean.Counter&quot;</span> scope=<span class="string">&quot;application&quot;</span>/&gt;</span><br><span class="line">        &lt;% out.println(<span class="string">&quot;你是第&quot;</span>+counter.getCount(session)+<span class="string">&quot;位来访者&quot;</span>);%&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Counter.java</span></span><br><span class="line"><span class="keyword">package</span> bean;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Counter</span><span class="params">()</span> &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session.isNew()) &#123;</span><br><span class="line">            count = count + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Java/JavaEE/image-20221216093234939.png" alt="image-20221216093234939"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/2024/07/07/Math/LinearAlgebra/"/>
      <url>/2024/07/07/Math/LinearAlgebra/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-行列式"><a href="#一、-行列式" class="headerlink" title="一、 行列式"></a>一、 行列式</h1><h2 id="1-1-二阶与三阶行列式"><a href="#1-1-二阶与三阶行列式" class="headerlink" title="1.1 二阶与三阶行列式"></a>1.1 二阶与三阶行列式</h2><h3 id="一、二阶行列式"><a href="#一、二阶行列式" class="headerlink" title="一、二阶行列式"></a>一、二阶行列式</h3><p>$$<br>定义1 记号<br>\begin{vmatrix}<br>{a_{11}}&amp;{a_{12}}\<br>{a_{21}}&amp;{a_{22}}\<br>\end{vmatrix}<br>表示代数和a_{11}a_{22}-a_{12}a_{21}，称为二阶行列式，<br>$$</p><p>​行：r (row)</p><p>​列：c (colum)</p><p>​横排的叫做行，竖排的叫做列<br>$$<br>a_{ij}:称为（i,j)元素；i:行标；j:列标<br>$$<br><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184332790-229136264-1636859270965.png"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184329326-924801769-1636859296680.png" alt="image-20210829183143524"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184326410-1606284104.png" alt="image-20210829183227764"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184323716-1470129178.png" alt="image-20210829183312659"></p><h3 id="二、三阶行列式"><a href="#二、三阶行列式" class="headerlink" title="二、三阶行列式"></a>二、三阶行列式</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184322690-1845013800.png" alt="image-20210829183527199"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184318110-41639491.png" alt="image-20210829183627379"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210829184140528-222521719.png" alt="image-20210829183706646"></p><h2 id="1-2-全排列"><a href="#1-2-全排列" class="headerlink" title="1.2 全排列"></a>1.2 全排列</h2><p>定义：把n个不同的元素排成的一列，称为这n个元素的一个全排列，简称排列。</p><p>​把n个不同的元素排成一列，共有P<sub>n</sub>种排法。</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114831697-1764775323.png" alt="image-20210830104631864"></p><h2 id="1-3-逆序数"><a href="#1-3-逆序数" class="headerlink" title="1.3 逆序数"></a>1.3 逆序数</h2><p>​规定 <strong>标准次序</strong> 标号由小到大的排列</p><p>​<em>定义</em>：在n个元素的一个排列中，若<strong>某两个元素排列的次序与标准次序不同，</strong>就称这两个数构成一个<strong>逆序</strong>，一个排列中所有逆序的总和称为这个排列的逆序数。</p><p>​记:<em><strong>N(p<sub>1</sub>p<sub>2</sub>···p<sub>n</sub>)</strong></em>或<em><strong>t(p<sub>1</sub>p<sub>2</sub>···p<sub>n</sub>)</strong></em></p><p>​例如：N（1234）&#x3D; 0，N（1243） &#x3D; 1</p><h3 id="1-3-1一个排列的逆序数的计算方法："><a href="#1-3-1一个排列的逆序数的计算方法：" class="headerlink" title="1.3.1一个排列的逆序数的计算方法："></a>1.3.1一个排列的逆序数的计算方法：</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114830282-783940912.png" alt="image-20210830105737508">  </p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114830623-129695872.png" alt="image-20210830105852638" style="zoom: 50%;"><h3 id="1-3-2-排列的奇偶性"><a href="#1-3-2-排列的奇偶性" class="headerlink" title="1.3.2 排列的奇偶性"></a>1.3.2 排列的奇偶性</h3><p>​定义：逆序数为<strong>奇数</strong>的排列为<strong>奇排列</strong></p><p>​逆序数为<strong>偶数</strong>的排列为<strong>偶排列</strong></p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114829883-606542904.png" alt="image-20210830110323333" style="zoom: 67%;"><p>在n级排列的所有n!种排列中，奇偶排列各占一半</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114832407-677516032.png" alt="image-20210830110602029"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114829753-572133640.png" alt="image-20210830113557058"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906114831063-6013832.png" alt="image-20210830113727346"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115048098-1921223527.png" alt="image-20210901081646357"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115048356-1261654420.png" alt="image-20210901082440181"></p><p>主对角行列式</p><p>副对角行列式</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115048752-788899470.png" alt="image-20210901082513052"></p><h2 id="1-4-行列式的性质"><a href="#1-4-行列式的性质" class="headerlink" title="1.4 行列式的性质"></a>1.4 行列式的性质</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115049458-1287997578.png" alt="image-20210901083115987"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115050037-1431429415.png" alt="image-20210901083202105"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115050566-1291067812.png" alt="image-20210901083339127"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115051213-1182809478.png" alt="image-20210901083816606"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115051442-859840553.png" alt="image-20210901092524025"></p><p><strong>推论：</strong>若行列式有两行（列）相同，则行列式为0</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115052192-1409634942.png" alt="image-20210901083949499"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115052670-2122642108.png" alt="image-20210901084104267"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115053273-1692078092.png" alt="image-20210901084150420"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115053745-1779146468.png" alt="image-20210901084512506"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115054270-1146897779.png" alt="image-20210901084452661"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115054724-1436144891.png" alt="image-20210901084557118"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115055319-971895294.png" alt="image-20210901084827042"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115055465-764538217.png" alt="image-20210901084805613"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115056682-892118019.png" alt="image-20210901085223856"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115056077-1461630831.png" alt="image-20210901085451149"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115057089-568342429.png" alt="image-20210901085619061"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115057636-886538880.png" alt="image-20210901085709923"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115058142-1421745715.png" alt="image-20210901085753296"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115058577-704372471.png" alt="image-20210901085902268"></p><h3 id="行列式性质的应用"><a href="#行列式性质的应用" class="headerlink" title="行列式性质的应用"></a>行列式性质的应用</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115059474-774486903.png" alt="image-20210901100211145"></p><p><strong>奇数阶反对称行列式值为0</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906115059069-1636993888.png" alt="image-20210901100953551"></p><h2 id="1-5-行列式按行-列-展开"><a href="#1-5-行列式按行-列-展开" class="headerlink" title="1.5 行列式按行(列)展开"></a>1.5 行列式按行(列)展开</h2><p>​        一、余子式与代数余子式<br>​        二、行列式按一行(列)展开<br>​        三、行列式按某 k 行（列）展开*</p><p><strong>定义1.9</strong>  在n阶行列式<em><strong>D</strong></em> &#x3D; |a<sub>ij</sub>|中，去掉元素<strong>*a<sub>ij</sub><em><strong>所在的第</strong>i</em>*行和第</strong>j<strong>列后，余下的</strong>n-1<strong>阶行列式，称为D中元素a<sub>ij</sub>的</strong>余子式**, 记为M<sub>ij</sub>．称 ***A<sub>ij</sub>&#x3D; (-1)<sup>i+j</sup>M<sub>ij</sub>***为元素 <strong>a<sub>ij</sub></strong> 的代数余子式．</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120010174-871483823.png" alt="image-20210906120007843"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120048996-1725354831.png" alt="image-20210906120047017"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120131322-1501285673.png" alt="image-20210906120129404"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120145743-1490335798.png" alt="image-20210906120143698"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120227246-380787238.png" alt="image-20210906120225396"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120303246-1793273967.png" alt="image-20210906120301360"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120347636-458149479.png" alt="image-20210906120345706"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120356356-2070302541.png" alt="image-20210906120354718"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120421136-1639744559.png" alt="image-20210906120419254"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120440453-2121066412.png" alt="image-20210906120438676"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120555676-1231868932.png" alt="image-20210906120553825"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120611970-1400999060.png" alt="image-20210906120610137"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120622368-2038506449.png" alt="image-20210906120620582"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120748116-1444240657.png" alt="image-20210906120746138"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120758560-1871066589.png" alt="image-20210906120756727"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120813416-1643820931.png" alt="image-20210906120811592"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210906120824699-495254316.png" alt="image-20210906120822852"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908090427922-1145245857.png" alt="image-20210908090425191"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210912170022767-1559045238.png" alt="image-20210912170020166"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210912165829469-1469704398.png" alt="image-20210912165822782"></p><p>奇数阶的反对称行列式的值一定为0。</p><h2 id="1-6-克拉默（Cramer-法则"><a href="#1-6-克拉默（Cramer-法则" class="headerlink" title="1.6 克拉默（Cramer)法则"></a>1.6 克拉默（Cramer)法则</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908091431455-1746176193.png" alt="image-20210908091429349"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908091523191-876805599.png" alt="image-20210908091521709"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908091942697-333178719.png" alt="image-20210908091941315"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908092012593-296902267.png" alt="image-20210908092011062"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908092412522-1715841431.png" alt="image-20210908092411101"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908092824385-1600645566.png" alt="image-20210908092822834"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908180345765-813785459.png" alt="image-20210908180342863"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210908092839305-893526887.png" alt="image-20210908092837885"></p><h1 id="第二章-矩阵"><a href="#第二章-矩阵" class="headerlink" title="第二章 矩阵"></a>第二章 矩阵</h1><h2 id="2-1-矩阵的定义"><a href="#2-1-矩阵的定义" class="headerlink" title="2.1 矩阵的定义"></a>2.1 矩阵的定义</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913211959009-1946524261.png" alt="image-20210913211956531"></p><p>实数是有限小数和无限小数的合集，实数和数轴上的点一一对应。</p><p><strong>注：</strong></p><ol><li>元素是实数的矩阵称为<strong>实矩阵</strong>，元素是复数的矩阵称为<strong>复矩阵</strong></li><li>只有一行的矩阵称为<strong>行矩阵</strong>，只有一列的矩阵称为<strong>列矩阵</strong>。</li><li>行数与列数相等的矩阵称为<strong>n阶方阵</strong></li><li>|<em>A</em>|称为<strong>方阵的行列式</strong></li><li>若<em><strong>A&#x3D;(a<sub>ij</sub>)<sub>m×n</sub>   ,B&#x3D;(b<sub>ij</sub>)<sub>s×t</sub></strong></em>  ,且  <strong>m &#x3D;  s, n &#x3D; t ,<strong>称</strong>两矩阵同型</strong>。</li><li>若<em><strong>A&#x3D;(a<sub>ij</sub>)<sub>m×n</sub>   ,B&#x3D;(b<sub>ij</sub>)<sub>s×t</sub></strong></em>  ，且  **<em>a<sub>ij</sub> &#x3D; b<sub>ij</sub></em>,称 **两矩阵相等。</li></ol><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212258180-1178413052.png" alt="image-20210913212255894"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212546830-833644108.png" alt="image-20210913212544581"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212659268-1074185391.png" alt="image-20210913212657157"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212743908-1879671058.png" alt="image-20210913212741760"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212800710-1567245727.png" alt="image-20210913212758652"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212852875-84932287.png" alt="image-20210913212850815"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212933035-1620846946.png" alt="image-20210913212930966"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913212958138-1516070923.png" alt="image-20210913212956038"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213055675-1217083477.png" alt="image-20210913213053622"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213115474-2097808223.png" alt="image-20210913213113423"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213143748-1325267159.png" alt="image-20210913213141579"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213157329-1520982546.png" alt="image-20210913213155437"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915105319467-1306879722.png" alt="image-20210915105314717"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213225025-1118864787.png" alt="image-20210913213222927"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915200115549-894750516.png" alt="image-20210915200113316"></p><h2 id="2-2-矩阵的运算"><a href="#2-2-矩阵的运算" class="headerlink" title="2.2 矩阵的运算"></a>2.2 矩阵的运算</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211011211125411-1867395527.png" alt="image-20210913213419286"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213534724-1088522329.png" alt="image-20210913213532552"></p><p><strong>矩阵的乘法</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213654449-1324881551.png" alt="image-20210913213652480"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213713536-1137244513.png" alt="image-20210913213711425"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913213805067-581779878.png" alt="image-20210913213802807"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214006944-2022278040.png"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214032512-785075205.png" alt="image-20210913214030313"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214055543-1275535991.png" alt="image-20210913214053373"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214144383-1288984993.png" alt="image-20210913214142337"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214222623-637440272.png" alt="image-20210913214220591"></p><p>矩阵的乘法无交换律</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214440526-1654034916.png" alt="image-20210913214438398"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214514887-2136578053.png" alt="image-20210913214512665"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214542810-1210358934.png" alt="image-20210913214540568"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210913214605350-63912193.png"></p><h2 id="2-3-矩阵的行列式"><a href="#2-3-矩阵的行列式" class="headerlink" title="2.3 矩阵的行列式"></a>2.3 矩阵的行列式</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915105803531-330801887.png" alt="image-20210915105759448"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915111313558-1516470394.png" alt="image-20210915111308988"></p><h2 id="2-4-逆矩阵"><a href="#2-4-逆矩阵" class="headerlink" title="2.4 逆矩阵"></a>2.4 逆矩阵</h2><h3 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915111609427-897793182.png" alt="image-20210915111604853"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915111736210-445711883.png" alt="image-20210915111731135"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915111854648-1409407160.png" alt="image-20210915111850524"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915112026340-352401779.png" alt="image-20210915112021402"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915112858749-528500414.png" alt="image-20210915112853325"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915112922825-769005808.png" alt="image-20210915112918173"></p><h3 id="2-4-2-计算"><a href="#2-4-2-计算" class="headerlink" title="2.4.2 计算"></a>2.4.2 计算</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915113306655-95571310.png" alt="image-20210915113301816"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915113523377-1757132211.png" alt="image-20210915113518632"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915113703294-1875923221.png" alt="image-20210915113658600"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915113727762-458084569.png" alt="image-20210915113722637"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915113859253-175205911.png" alt="image-20210915113854283"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915203130924-1888897080.png" alt="image-20210915203129438"></p><h2 id="2-5-分块矩阵"><a href="#2-5-分块矩阵" class="headerlink" title="2.5 分块矩阵"></a>2.5 分块矩阵</h2><h3 id="2-5-1-定义"><a href="#2-5-1-定义" class="headerlink" title="2.5.1 定义"></a>2.5.1 定义</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915174049528-586590749.png" alt="image-20210915174044548"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915174234461-652271245.png" alt="image-20210915174228247"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915174312773-2099872557.png" alt="image-20210915174308305"></p><h3 id="2-5-2-计算"><a href="#2-5-2-计算" class="headerlink" title="2.5.2 计算"></a>2.5.2 计算</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915174431874-1612761707.png" alt="image-20210915174426265"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915174510353-422075844.png" alt="image-20210915174505364"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175126480-1543068909.png" alt="image-20210915175121263"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175241347-1218892202.png" alt="image-20210915175234794"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175320878-1369974414.png" alt="image-20210915175315911"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175409633-1749312029.png" alt="image-20210915175404989"></p><h3 id="2-5-3-例子"><a href="#2-5-3-例子" class="headerlink" title="2.5.3 例子"></a>2.5.3 例子</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175743796-465391141.png" alt="image-20210915175739151"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175757738-1605245381.png" alt="image-20210915175753065"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210915175916201-2080345259.png" alt="image-20210915175911324"></p><h2 id="2-6-矩阵初等变换"><a href="#2-6-矩阵初等变换" class="headerlink" title="2.6 矩阵初等变换"></a>2.6 矩阵初等变换</h2><h3 id="2-6-1-定义"><a href="#2-6-1-定义" class="headerlink" title="2.6.1 定义"></a>2.6.1 定义</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918084442688-168227225.png" alt="image-20210918084438843"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918084525309-1179047280.png" alt="image-20210918084521430"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918085748732-1687789472.png" alt="image-20210918085743999"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918085903885-1959822751.png" alt="image-20210918085901537"></p><h3 id="2-6-2-等价矩阵"><a href="#2-6-2-等价矩阵" class="headerlink" title="2.6.2 等价矩阵"></a>2.6.2 等价矩阵</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918090000481-1408316397.png" alt="image-20210918085957999"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918090034672-1990698439.png" alt="image-20210918090033166"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210918090122622-810802536.png" alt="image-20210918090120675"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919091359466-1901606696.png" alt="image-20210919091354908"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919091618805-2031881212.png" alt="image-20210919091614817"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919091907519-1341373488.png" alt="image-20210919091903439"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919092713989-318635125.png" alt="image-20210919092710241"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919092950629-1449204082.png" alt="image-20210919092946523"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919093318790-1828114058.png" alt="image-20210919093313802"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919093408845-2015368516.png" alt="image-20210919093404803"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210919093550756-1621786625.png" alt="image-20210919093547151"></p><p>左边是行，右边是列，</p><p>每一步操作都是紧挨着哪个矩阵</p><p>左边或者右边想乘的矩阵有什么变化，就是对原来的矩阵有什么操作</p><h2 id="2-7-矩阵的秩"><a href="#2-7-矩阵的秩" class="headerlink" title="2.7 矩阵的秩"></a>2.7 矩阵的秩</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210927103330619-1145870475.png" alt="image-20210927103325819"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205615437-563609115.png" alt="image-20210927103444834"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20210927103721735-716611784.png" alt="image-20210927103718790"></p><p>行阶梯型矩阵的行数就是非零行的行数</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205622299-416054817.png" alt="image-20210927104031452"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205625004-456545067.png" alt="image-20210927105103252"></p><h1 id="三、线性方程组"><a href="#三、线性方程组" class="headerlink" title="三、线性方程组"></a>三、线性方程组</h1><h2 id="3-1-n维向量与向量组的线性相关性"><a href="#3-1-n维向量与向量组的线性相关性" class="headerlink" title="3.1 n维向量与向量组的线性相关性"></a>3.1 n维向量与向量组的线性相关性</h2><h3 id="3-1-1-n维向量"><a href="#3-1-1-n维向量" class="headerlink" title="3.1.1 n维向量"></a>3.1.1 n维向量</h3><p><strong>定义：</strong>n个数 a<sub>1</sub> ,a<sub>2</sub> ,···, a<sub>n</sub> 所组成的数组称为 <strong>n维向量</strong></p><p>​这n个数称为该向量的n个分量，第i个数a<sub>i</sub>称为第i个分量</p><p>​分量全为实数的向量称为<strong>实向量</strong></p><p>​分量全为复数的向量称为<strong>复向量</strong></p><p>n 维向量可写成一行，也可写成一列，分别称为行向量和列向量，即<strong>行矩阵</strong>和<strong>列矩阵</strong>，并规定行向量和列向量都按矩阵的运算规则进行运算。<br>$$<br>n维列向量<br>\alpha&#x3D;\left(<br>\matrix{<br>a_1\<br>a_2\<br>a_3<br>}<br>\right),<br>n维行向量<br>\alpha^T&#x3D;\left(<br>a_1,a_2,···,a_n<br>\right)<br>\<br>\mathbf{规定：}列向量用黑体小写字母a, b, \alpha,\beta等表示\<br>     行向量则用字母a^T,b^T,\alpha^T,\beta^T等表示\<br>     除特别说明外，向量都当做列向量<br>$$<br>向量是矩阵的特殊形式，因此向量也有下列概念和性质<br>$$<br>\mathbf{定义：}设\alpha&#x3D;\left( b_i\right)_n是二个n维向量\<br>1.\mathbf{向量相等}若a_i&#x3D;b_i,i&#x3D;1,···,n,称向量\alpha和\beta相等\<br>2.\mathbf{零向量}所以分量都为零的向量，一般记作\theta,\theta_n或O\<br>3.\mathbf{负向量}称向量-\alpha&#x3D;\left{<br>-a_i<br>\right}_n,为向量\alpha 的负向量\<br>4.\mathbf{向量加法}称向量\gamma&#x3D;\alpha+\beta&#x3D;<br>\left{<br>a_i+b_i<br>\right}_n<br>为向量\alpha和向量\beta的和\<br>\mathbf{向量减法}向量\alpha和向量\beta的减法定义为\alpha和-\beta的加法：\gamma&#x3D;\alpha-\beta&#x3D;\alpha+(-\beta)<br>\<br>5.\mathbf{数乘向量}设k是一个数，称向量 k\alpha&#x3D;\alpha k&#x3D;<br>\left{<br>k \alpha_i<br>\right}_n,为向量\alpha和数k的数乘向量<br>$$<br><strong>注意：</strong>矩阵的加法、数乘等运算法则对于向量同样成立</p><p>​零向量不相等</p><h3 id="3-1-2-线性组合"><a href="#3-1-2-线性组合" class="headerlink" title="3.1.2 线性组合"></a>3.1.2 线性组合</h3><p><strong>定义：</strong>若干个同维数的列向量(或行向量)所组成的集合称为<strong>向量组</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205801028-2108473265.png" alt="image-20211004142352229"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205804090-2019391270.png" alt="image-20211004142939993"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205806255-1704085886.png" alt="image-20211004143111983"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205808664-2141874105.png" alt="image-20211004143441640"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205810478-1127671236.png" alt="image-20211004143601645"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205814524-1718069650.png" alt="image-20211004143714645"></p><h3 id="3-1-3-线性相关与线性无关"><a href="#3-1-3-线性相关与线性无关" class="headerlink" title="3.1.3 线性相关与线性无关"></a>3.1.3 线性相关与线性无关</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205820090-1448865384.png" alt="image-20211006101407191"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205822843-1295467395.png" alt="image-20211006101515609"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205826327-1931476097.png" alt="image-20211006101601632"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205835294-386497241.png" alt="image-20211006101948627"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205831253-436047697.png" alt="image-20211006102149558"></p><h3 id="3-1-4-向量组的线性相关性的判断"><a href="#3-1-4-向量组的线性相关性的判断" class="headerlink" title="3.1.4 向量组的线性相关性的判断"></a>3.1.4 向量组的线性相关性的判断</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205846583-1704795679.png" alt="image-20211006120854290"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205849761-1374010356.png" alt="image-20211006121038664"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205853426-105090029.png" alt="image-20211006121107495"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205857421-291406807.png" alt="image-20211006121209768"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205901193-21574897.png" alt="image-20211006121356191"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205907247-1467252482.png" alt="image-20211006121556151"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205911702-1386416846.png" alt="image-20211006121833211"></p><p>下标写错了</p><h3 id="3-1-5-向量组的线性相关性的性质"><a href="#3-1-5-向量组的线性相关性的性质" class="headerlink" title="3.1.5 向量组的线性相关性的性质"></a>3.1.5 向量组的线性相关性的性质</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205919690-212675769.png" alt="image-20211007192833860"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205915526-1427844294.png" alt="image-20211007192949162"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205922692-165382921.png" alt="image-20211007193020774"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205926627-1202028142.png" alt="image-20211007193237295"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205928872-613699017.png" alt="image-20211007193407649"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205933313-875201450.png" alt="image-20211007193519894"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012205936552-302652028.png" alt="image-20211007193620756"></p><h2 id="3-2-向量组的极大无关组及秩"><a href="#3-2-向量组的极大无关组及秩" class="headerlink" title="3.2 向量组的极大无关组及秩"></a>3.2 向量组的极大无关组及秩</h2><h3 id="3-2-1-向量组的极大无关组"><a href="#3-2-1-向量组的极大无关组" class="headerlink" title="3.2.1 向量组的极大无关组"></a>3.2.1 向量组的极大无关组</h3><p>向量组的秩：在二维、三维几何空间中，坐标系是不唯一的，但任一坐标系中所含向量的个数是一个不变的量，向量组的秩正是这一几何事实的一般化。</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210402271-57202340.png" alt="image-20211008203707658"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210408551-723034327.png" alt="image-20211008203753893"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210414866-887564520.png" alt="image-20211008204006811"></p><h3 id="3-2-2-向量组的秩"><a href="#3-2-2-向量组的秩" class="headerlink" title="3.2.2 向量组的秩"></a>3.2.2 向量组的秩</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210418817-170973762.png" alt="image-20211009205641649"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210421486-1349197644.png"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210423655-1663357493.png" alt="image-20211009205848787"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210426100-585741121.png" alt="image-20211009210051052"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210436179-1759950983.png" alt="image-20211009210100081"></p><h3 id="3-2-3-向量组的秩和极大无关组求法"><a href="#3-2-3-向量组的秩和极大无关组求法" class="headerlink" title="3.2.3 向量组的秩和极大无关组求法"></a>3.2.3 向量组的秩和极大无关组求法</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210431016-1940018929.png" alt="image-20211010152603259"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210450477-489921328.png" alt="image-20211010152754765"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210455703-1782398229.png" alt="image-20211010153441547"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210501061-61714255.png" alt="image-20211010153504768"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210507156-1743535457.png" alt="image-20211010153523497"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210509632-1078507777.png" alt="image-20211010153539304"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210512183-1867288613.png" alt="image-20211010153652886"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210515188-1007947653.png" alt="image-20211010153719419"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210517922-1631856758.png" alt="image-20211010153744207"></p><h2 id="3-3-线性方程组有解的判定"><a href="#3-3-线性方程组有解的判定" class="headerlink" title="3.3 线性方程组有解的判定"></a>3.3 线性方程组有解的判定</h2><h3 id="3-3-1-非齐次线性方程组解的判定"><a href="#3-3-1-非齐次线性方程组解的判定" class="headerlink" title="3.3.1 非齐次线性方程组解的判定"></a>3.3.1 非齐次线性方程组解的判定</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210644435-1387203481.png" alt="image-20211011205152003"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210648097-378788019.png" alt="image-20211011205307918"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210651322-856781923.png"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210656174-1222838059.png" alt="image-20211011205419449"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012210701187-2100273772.png" alt="image-20211011205455265"></p><h3 id="3-3-2-齐次线性方程组解的判定"><a href="#3-3-2-齐次线性方程组解的判定" class="headerlink" title="3.3.2 齐次线性方程组解的判定"></a>3.3.2 齐次线性方程组解的判定</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012211521388-281818059.png" alt="image-20211012211516570"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012211546996-1265270125.png" alt="image-20211012211539265"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012211640482-289267226.png" alt="image-20211012211636608"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012211815156-1241975953.png" alt="image-20211012211811438"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012211938173-565618387.png" alt="image-20211012211934203"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012212839110-1881710068.png" alt="image-20211012212030279"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012212231719-1407698763.png" alt="image-20211012212227520"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012212423036-206826965.png" alt="image-20211012212419032"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012212605464-550350665.png" alt="image-20211012212601511"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211012212627495-932183758.png" alt="image-20211012212622482"></p><h2 id="3-4-线性方程组解的结构"><a href="#3-4-线性方程组解的结构" class="headerlink" title="3.4 线性方程组解的结构"></a>3.4 线性方程组解的结构</h2><h3 id="（1）齐次线性方程组解的结构"><a href="#（1）齐次线性方程组解的结构" class="headerlink" title="（1）齐次线性方程组解的结构"></a>（1）齐次线性方程组解的结构</h3><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017084606218-1132709201.png" alt="image-20211017084559600"></p><p><strong>什么是线性方程组的解的结构？</strong></p><p>所谓线性方程组解的结构，就是当线性方程组有五穷多个解时，解与解之间的关系。</p><p><em>备注：当方程组存在唯一解时，无须讨论解的结构</em></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017084934172-1621913580.png" alt="image-20211017084931267"></p><p><strong>性质1：</strong>若x&#x3D;&sect;<sub>1</sub>, x &#x3D; &sect;<sub>2</sub> 是齐次线性方程组 <em>Ax &#x3D; 0</em> 的解，则 <em><strong>x &#x3D; &sect;<sub>1</sub> + &sect;<sub>2</sub></strong></em> 还是<em><strong>Ax &#x3D; 0</strong></em> 的解</p><p><em>证明：</em> <em>A(&sect;<sub>1</sub> + &sect;<sub>2</sub>) &#x3D; A&sect;<sub>1</sub> + A &sect;<sub>2</sub> &#x3D; 0 + 0 &#x3D; 0</em></p><p><strong>性质2：</strong> 若 <em>x &#x3D; &sect;</em> 是齐次线性方程组 <em>Ax &#x3D; 0</em> 的解，k 为实数，则 <em><strong>x &#x3D; k&sect;</strong></em> 还是 <em>Ax &#x3D; 0</em> 的解</p><p><em>证明：A(k&sect;)&#x3D;k (A&sect;) &#x3D; k</em> 0 &#x3D; 0</p><p><strong>性质3：</strong> 若 <em>x &#x3D; &sect;<sub>1</sub> , x &#x3D; &sect;<sub>2</sub> ,……，x &#x3D; &sect;<sub>t</sub></em> 是齐次线性方程组 <em>Ax &#x3D; 0</em> 的解，则 <em><strong>x&#x3D; k<sub>1</sub>&sect;<sub>1</sub>+k<sub>2</sub>&sect;<sub>2</sub>+ …… +k<sub>t</sub>&sect;<sub>t</sub></strong></em> 还是 <em>Ax &#x3D; 0</em>  的解</p><p>把 <em>Ax &#x3D; 0</em> 的全体解组成的集合记作<em>S</em>，若求得 <em>S</em> 的一个极大无关组<em>S<sub>0</sub></em>:<em>x &#x3D; &sect;<sub>1</sub> , x &#x3D; &sect;<sub>2</sub> ,……，x &#x3D; &sect;<sub>t</sub></em> ,那么 <em>Ax &#x3D; 0</em>  的通解可表示为<em><strong>x&#x3D; k<sub>1</sub>&sect;<sub>1</sub>+k<sub>2</sub>&sect;<sub>2</sub>+ …… +k<sub>t</sub>&sect;<sub>t</sub></strong></em></p><p>齐次线性方程组的解集的极大无关组成为该齐次线性方程组的<strong>基础解系</strong>（不唯一）</p><hr><p><strong>基础解系的概念</strong></p><p><strong>定义：</strong>齐次线性方程组  <em>Ax &#x3D; 0</em> 的一组解向量：&sect;<sub>1</sub> , &sect;<sub>2</sub>,…, &sect;<sub>r</sub></p><p>如果满足</p><p>①&sect;<sub>1</sub> , &sect;<sub>2</sub>,…, &sect;<sub>r</sub> 线性无关；</p><p>②方程组中任意一个解都可以表示&sect;<sub>1</sub> , &sect;<sub>2</sub>,…, &sect;<sub>r</sub> 的线性组合，那么称这组解是齐次线性方程组的一个<strong>基础解系</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092121029-2060600622.png" alt="image-20211017092118047"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092137922-748600176.png" alt="image-20211017092135845"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092251894-649713936.png" alt="image-20211017092245895"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092403557-319829287.png"></p><p><strong>定理1：</strong>如果齐次线性方程组有非零解，则它一定有基础解系，并且基础解系含有 n-r 个解向量。其中 n 是未知量的个数，r 是系数矩阵的秩</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092710816-12264354.png" alt="image-20211017092707805"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092745373-1511145064.png" alt="image-20211017092742310"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211017092858970-1142220258.png" alt="image-20211017092855264"></p><h3 id="（二）非齐次线性方程组解的结构"><a href="#（二）非齐次线性方程组解的结构" class="headerlink" title="（二）非齐次线性方程组解的结构"></a>（二）非齐次线性方程组解的结构</h3><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019221415099.png" alt="image-20211019221415099"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019221749101.png" alt="image-20211019221749101"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019221919379.png" alt="image-20211019221919379"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019221957313.png" alt="image-20211019221957313"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019222232277.png" alt="image-20211019222232277"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019222415161.png" alt="image-20211019222415161"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211019222457180.png" alt="image-20211019222457180"></p><h2 id="3-5-向量空间"><a href="#3-5-向量空间" class="headerlink" title="3.5 向量空间"></a>3.5 向量空间</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211030200718089-182612954.png" alt="image-20211030200710683"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211030200809636-891468729.png" alt="image-20211030200805219"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211030201153639-553822030.png" alt="image-20211030201149782"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211030201317738-1271730639.png" alt="image-20211030201314171"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211030201418759-755475624.png" alt="image-20211030201415406"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211030201746654-1192654821.png" alt="image-20211030201742694"></p><h1 id="四、特征值与特征向量"><a href="#四、特征值与特征向量" class="headerlink" title="四、特征值与特征向量"></a>四、特征值与特征向量</h1><h2 id="4-1-向量的内积"><a href="#4-1-向量的内积" class="headerlink" title="4.1 向量的内积"></a>4.1 向量的内积</h2><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101102149850.png" alt="image-20211101102149850"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101102331854.png" alt="image-20211101102331854"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101102537069.png" alt="image-20211101102537069"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101102712478.png" alt="image-20211101102712478"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101102932502.png" alt="image-20211101102932502"></p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101103044274.png" alt="image-20211101103044274"><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101103308414.png" alt="image-20211101103308414"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101103516859.png" alt="image-20211101103516859"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101103601098.png" alt="image-20211101103601098"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211101113118812.png" alt="image-20211101113118812"></p><h2 id="4-2-方阵的特征值与特征向量"><a href="#4-2-方阵的特征值与特征向量" class="headerlink" title="4.2 方阵的特征值与特征向量"></a>4.2 方阵的特征值与特征向量</h2><p>$$<br>定义： 设A是n阶方阵，如果存在数\lambda 和 n 维非零向量 x使关系式\<br>Ax&#x3D;\lambda x \<br>成立，那么称数\lambda为矩阵A的特征值，非零向量x称为A的对应于特征值\lambda的特征向量<br>$$</p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211106192936957.png" alt="image-20211106192936957"></p><h2 id="4-3-相似矩阵"><a href="#4-3-相似矩阵" class="headerlink" title="4.3 相似矩阵"></a>4.3 相似矩阵</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107094213149-730912678.png" alt="image-20211107094207407"></p><p>与A相似的矩阵不唯一，也未必是对角阵</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107094513540-1097684105.png" alt="image-20211107094508608"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107094706280-2086136440.png" alt="image-20211107094701198"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107094825838-543670458.png" alt="image-20211107094817617"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107094923234-2043618761.png" alt="image-20211107094918130"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107095102546-584211156.png" alt="image-20211107095057149"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107095444728-358662037.png" alt="image-20211107095439620"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107095634785-2073837183.png" alt="image-20211107095629842"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107100047174-308566976.png" alt="image-20211107100042107"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107100129344-845092771.png" alt="image-20211107100124329"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107100149418-299016245.png" alt="image-20211107100144557"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107101718455-1541390612.png" alt="image-20211107100212584"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211107114348617.png" alt="image-20211107114348617"></p><h2 id="4-4-实对称矩阵对角化"><a href="#4-4-实对称矩阵对角化" class="headerlink" title="4.4 实对称矩阵对角化"></a>4.4 实对称矩阵对角化</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107163257386-1240283923.png" alt="image-20211107163250774"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107163331564-1329879300.png" alt="image-20211107163322393"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211107163517004-1418845023.png" alt="image-20211107163515170"></p><p>合同矩阵有相同的特征值</p><p>相似的两个矩阵，行列式的值相等</p><h1 id="五、二次型"><a href="#五、二次型" class="headerlink" title="五、二次型"></a>五、二次型</h1><h2 id="5-1-二次型的基本概念"><a href="#5-1-二次型的基本概念" class="headerlink" title="5.1 二次型的基本概念"></a>5.1 二次型的基本概念</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211110160416968-799505008.png"></p><p>（1）二次型转化为矩阵表达式</p><ol><li>平方项是主对角线上的元素</li><li>交叉项的系数除以2 放到两个对称的相应位置</li></ol><p>A：二次型的矩阵</p><p>X<sup>T</sup> AX二次型的矩阵一定对称</p><p>（2）矩阵转化为二次型<br>$$<br>已知二次型的矩阵\ A&#x3D;\begin{bmatrix}<br>{1}&amp;{0}&amp;{-1}\<br>{0}&amp;{2}&amp;{\frac{1}{2}}\<br>{-1}&amp;{\frac{1}{2}}&amp;{3}<br>\end{bmatrix}<br>$$</p><ol><li>主对角线直接作为平方项的系数</li><li>取主对角线右上角元素 乘以2 作为交叉项的系数</li></ol><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211110160442150-1500253291.png" alt="image-20211110160440547"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211110160514805-2026246822.png" alt="image-20211110160513139"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211108103630982-426370321.png" alt="image-20211108103628743"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211110160743914-1584646249.png" alt="image-20211110160742197"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111192516542-1999999364.png" alt="image-20211111192514430"></p><p>合同：A.B是n阶方阵，存在可以矩阵 C，则 C<sup>T</sup>AC&#x3D;B</p><p>判断两矩阵是否是合同矩阵：看正负惯性系数是否相同，也就是先把特征值算出来，看正负个数是否相同</p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111193238510-1047392178.png" alt="image-20211111193237712"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111193850272-1982955637.png" alt="image-20211111193849261"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111194615455-2095705344.png" alt="image-20211111194612973"></p><h2 id="5-2-化二次型为标准型"><a href="#5-2-化二次型为标准型" class="headerlink" title="5.2 化二次型为标准型"></a>5.2 化二次型为标准型</h2><p>三种方法：</p><ol><li>配方法</li><li>初等变换</li><li>正交替换</li></ol><p><strong>配方法</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111195410000-1749540284.png" alt="image-20211111195407300"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111195812252-847866663.png" alt="image-20211111195810553"></p><p><strong>初等变换</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111201513134-1720286143.png" alt="image-20211111201510003"></p><p><strong>正交</strong></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111202656535-834578983.png" alt="image-20211111202654895"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211111205051944-834533555.png" alt="image-20211111205051068"></p><h2 id="5-3、"><a href="#5-3、" class="headerlink" title="5.3、"></a>5.3、</h2><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211112180201965-593192303.png" alt="image-20211112180159212"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211112180317549-1683303458.png" alt="image-20211112180314168"></p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211116162715515.png" alt="image-20211116162715515"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211116162721411.png" alt="image-20211116162721411"><img src="/2024/07/07/Math/LinearAlgebra/image-20211116162727570.png" alt="image-20211116162727570"></p><p><img src="/2024/07/07/Math/LinearAlgebra/2510762-20211123155002720-1234568396.png" alt="image-20211123155001929"></p><p><img src="/2024/07/07/Math/LinearAlgebra/image-20211127110130731.png" alt="image-20211127110130731"><strong>D</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计</title>
      <link href="/2024/07/07/Math/ProbabilityAndStatistics/"/>
      <url>/2024/07/07/Math/ProbabilityAndStatistics/</url>
      
        <content type="html"><![CDATA[<h1 id="0、绪论"><a href="#0、绪论" class="headerlink" title="0、绪论"></a>0、绪论</h1><p>概率论与数理统计是两个学科。</p><ul><li>概率论是数学的一个分支，研究如何定量描述随机现象及其规律.</li><li>数理统计则以数据为唯一研究对象，包括数据的收集、整理、分析和建模，从而给出数据现象的某些规律进行预测或决策。</li></ul><h2 id="考试范围"><a href="#考试范围" class="headerlink" title="考试范围"></a>考试范围</h2><p>第二章</p><ul><li><p>离散型概率密度</p></li><li><p>连续型随机变量概率密度及其性质（定义）</p></li><li><p>分布函数的定义和性质</p></li><li><p>常见离散型随机变量的分布律</p></li><li><p>分布函数法f(x)</p></li><li><p>二维随机变量</p><ul><li>联合分布律怎么求</li></ul></li></ul><h1 id="一、随机事件及概率"><a href="#一、随机事件及概率" class="headerlink" title="一、随机事件及概率"></a>一、随机事件及概率</h1><p>确定性（必然）：一定发生（一定不发生）</p><p>随机性（偶然）：可能发生（可能不发生）</p><h2 id="1-1、随机事件与关系"><a href="#1-1、随机事件与关系" class="headerlink" title="1.1、随机事件与关系"></a>1.1、随机事件与关系</h2><h3 id="1-1-1、随机事件"><a href="#1-1-1、随机事件" class="headerlink" title="1.1.1、随机事件"></a>1.1.1、随机事件</h3><p>试验：观察、训练、实验</p><p>随机试验： ①在相同条件下可重复</p><p>​②结果不止一个</p><p>​③ 无法预测</p><p>​用大写字母E表示</p><p>事件：每种结果</p><p>随机事件：A,B,C</p><p><strong>基本事件</strong>：相对于实验目的 不能再分（不必再分）</p><p><strong>复合事件：</strong>由基本事件复合而成</p><p>​$\Omega是全集；\phi是空集$</p><p>必然事件：一定发生 $\Omega$</p><p>不可能事件：不可能发生 </p><p>样本空间：所有基本事件的集合 $\Omega$</p><p>样本点：样本空间中的元素   $\omega$</p><p>例子：样本空间<br>$$<br>掷硬币\ \Omega&#x3D;\lbrace正，反\rbrace \<br>掷色子 \ \Omega&#x3D;\lbrace1,2,3,4,5,6 \rbrace<br>$$<br> $\Omega—必然事件—样本空间$</p><p>$\phi—不可能事件—空集$</p><p>$—–事件—\Omega的子集$</p><h3 id="1-1-2、频率与概率"><a href="#1-1-2、频率与概率" class="headerlink" title="1.1.2、频率与概率"></a>1.1.2、频率与概率</h3><p>设随机事件 A 在 n 次实验中发生了 m 次，则比值 $\frac{m}{n}$叫做随机事件 A 的相对频率（简称<strong>频率</strong>），记作$f_{n}(A)$，用公式表示 $\displaystyle f_{n}(A)&#x3D;\frac{m}{n}$</p><p>任何随机事件的频率是介于0和1之间的一个数： $0\leq f_{n}(A) \leq 1$</p><p>由随机事件的频率的稳定性可知，随机事件在试验中发生的可能性的大小可以用一个数字来表示。这个刻画随机事件A在试验中发生的可能性大小的、介于0与1之间的数字 p 叫做随机事件A的<strong>概率</strong>。记作 <strong>P(A)</strong>,即P(A)&#x3D;p （0&lt;p&lt;1)</p><h3 id="1-1-3、事件间的关系"><a href="#1-1-3、事件间的关系" class="headerlink" title="1.1.3、事件间的关系"></a>1.1.3、事件间的关系</h3><p><strong>（1）包含</strong></p><p>$A\subset B$A发生必导致B发生</p><p>$\phi \subset A \subset \Omega$</p><p>包含是集合之间的关系</p><p>相等：$A\subset B \ ,\ B\subset A \Rightarrow A&#x3D;B$</p><p><strong>（2）并（和）</strong></p><p>$A \cup B&#x3D;A+B,A与B中至少有一个发生$</p><p><strong>（3）交（积）</strong></p><p>$A\cap B&#x3D;AB \ \ \ A,B同时发生$ </p><p>$AB \cup A,AA&#x3D;A,A \phi&#x3D;\phi ,A\Omega&#x3D;\Omega$</p><p>无限可列个：能按某种规律排成一个序列</p><p>​①自然数： 0，1，2，3，4，······</p><p>​②整数：0，1，-1，2，-2，·······</p><p>​③有理数：$\frac{p}{q}$</p><p>排不了：①实数（0，1]，②直线点集</p><p><strong>（4）差</strong></p><p>$A-B, A发生而B不发生， 属于A不属于B$</p><p>$A-B&#x3D;A-AB&#x3D;A\overline{B}$</p><p><strong>（5)互不相容事件</strong></p><p>$A,B不同时发生，\ \ \ AB&#x3D;\phi$</p><p>$n个事件A_1,A_2,···A_n,\ A_iA_j&#x3D;\phi $</p><p><strong>（6）对立事件</strong></p><p>A,B互不相容，且$A\cup B&#x3D;\Omega$</p><p>$AB&#x3D;\phi 且 A+B&#x3D;\Omega$</p><p>$A&#x3D; \bar{B} \ 或者\ B&#x3D;\bar{A}$</p><p>联系与区别：</p><ul><li>两事件对立，一定互不相容</li><li>互不相容，适用于多个事件<br>对立适用于两个事件</li><li>互不相容：不能同时发生，可以都不发生<br>对立，有且只有一个发生</li></ul><p><strong>（7）完备事件组</strong></p><p>$A_{1},A_{2},…,A_{n}两两互不相容，且 \mathop{U}^{n}\limits_{i&#x3D;1}{Ai}&#x3D;\Omega$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220108104821552.png" alt="image-20220108104821552"></p><hr><p>运算规律</p><ol><li><p>交换律：<br>$$<br>A\cup B&#x3D;B\cup A \<br>AB&#x3D;BA<br>$$</p></li><li><p>结合律：<br>$$<br>（A \cup B）\cup C&#x3D;A \cup (B\cup C)\<br>(AB)C&#x3D;A(BC)<br>$$</p></li><li><p>分配律：<br>$$<br>A(B\cup C)&#x3D;AB \cup AC\<br>A\cup(BC)&#x3D;(A\cup B)(A\cup C)<br>$$</p></li><li><p>德摩根（De Morgn）定律</p></li></ol><p>$$<br>\overline{A \cup B}&#x3D;\overline{A}\overline{B}\<br>\overline{AB}&#x3D;\bar{A}\cup \bar{B}<br>$$</p><h2 id="1-2、事件的概率"><a href="#1-2、事件的概率" class="headerlink" title="1.2、事件的概率"></a>1.2、事件的概率</h2><h3 id="1-2-1、概率的初等描述"><a href="#1-2-1、概率的初等描述" class="headerlink" title="1.2.1、概率的初等描述"></a>1.2.1、概率的初等描述</h3><p>概率：可能性大小  P(A)</p><p>性质：$（1）P(\Omega)&#x3D;1 \ \ P(\phi)&#x3D;0$</p><p>​$(2) 0\leq P(A)\leq 1$</p><h3 id="1-2-2、古典概率模型"><a href="#1-2-2、古典概率模型" class="headerlink" title="1.2.2、古典概率模型"></a>1.2.2、古典概率模型</h3><p>条件：（1）有限个样本</p><p>​（2）等可能性</p><p>$\displaystyle P(A)&#x3D;\frac{A的有利样本点}{\Omega中样本点总数}&#x3D;\frac{A中包含的基本事件数}{基本事件总数}$</p><p>记数</p><p>排列组合</p><p>加法原理：几种方案（几件上衣） 加法</p><p>乘法原理：分几步（上衣和裤子）乘法</p><hr><p>排列：</p><ol><li><p><strong>不重复排列</strong><br>从n个不同元素中取出m个不同排列<br>$P_{n}^{m}&#x3D;n(n-1)(n-2)···(n-m+1)$<br>$P_{10}^{5}&#x3D;10 \times 9\times8 \times 7\times 6&#x3D;\frac{10!}{5!}$<br><strong>全排列</strong><br>$P_{n}^{n}&#x3D;n\times (n-1)···3\times 2\times 1&#x3D;n!$<br>$0！&#x3D;1$<br>$0^{0}无意义（a^{0}&#x3D;1,当a\neq 0时）$<br>$5^{0}&#x3D;\frac{5^{1}}{5^{1}}&#x3D;1$</p></li><li><p><strong>重复排列</strong></p><p>从n个 不同元素中取6m个排列<br>$n\times n\times ···\times n&#x3D;n^{m}$</p><p>组合：从n个不同元素中取出m个不同元素<br>$C_{n}^{m}&#x3D;\frac{P_{n}^{m}}{m!}&#x3D;\frac{n(n-1)···(n-m+1)}{m(m-1)···2\times 1}&#x3D;\frac{n!}{m!(n-m)!}$</p><p>$C_{n}^{m}&#x3D;C_{n}^{n-m} \ \ \ \ \ C_{n}^{0}&#x3D;C_{n}^{n}&#x3D;1$</p></li></ol><p><strong>古典性质</strong></p><p>（1）非负性  $0\leq P(A)\leq1$</p><p>（2）规范性：P（$\Omega$）&#x3D;1P（$\phi$）&#x3D;0</p><p>（3）有限可加：A<sub>1</sub>······A<sub>n</sub>互不相容<br>            $P(A_{1}+A_{2}+···+A_{n})&#x3D;P(A_1)+···+P(A_n)$</p><p>缺点：</p><ol><li>有限个结果</li><li>等可能性</li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例：一套五卷的选集，放书架上，求自左向右或自右向左是1，2，3，4，5 的概率？<br>$$<br>\frac{2}{P_{5}^{5}}&#x3D;\frac{1}{60}<br>$$</p><p>例：有4个邮筒，两封信</p><ol><li>前两个邮筒各投入1封：$\displaystyle \frac{P_{2}^{2}}{4\times 4}&#x3D;\frac{2}{16}&#x3D;\frac{1}{8}$</li><li>第2个筒恰有1封：$\displaystyle\frac{C_{2}^{1}C_{3}^{1}}{4\times 4}&#x3D;\frac{6}{16}&#x3D;\frac{3}{8}$</li><li>投入不同邮筒：$\frac{4\times3}{4\times4}&#x3D;\frac{3}{4}$</li></ol><p>例：5 白 4黑，任取3球</p><ol><li>2白1黑 $\displaystyle\frac{C_{5}^{2}C_{4}^{1}}{C_{9}^{3}}$</li><li>没黑球 $\displaystyle\frac{C_{5}^{3}}{C_{9}^{3}}$</li><li>颜色相同 $\displaystyle\frac{C_{5}^{3} +C_{4}^{3}}{C_{9}^{3}}$</li></ol><p>例：a 白 b 黑，任取一个白球</p><ul><li>$\displaystyle\frac{a}{a+b}$</li></ul><p>例：a 白 b 黑，从中接连取出m个（1$\leq$m$\leq a+b$）</p><ul><li>法一<br>将 a+b 个球排成一排，第m个球放成白球，有 a 种可能<br>剩下（a+b-1)个球，放在剩下的位置上，就是 （a+b-1)! 种可能<br>$\displaystyle\frac{a(a+b-1)!}{(a+b)!}&#x3D;\frac{a}{a+b}$</li><li>法二<br>取出m个球，有$\displaystyle{P_{a+b}^{m}}$种可能<br>剩下（a+b-1）球，取出（m-1）个球，有$P_{a+b-1}^{m-1}$种可能<br>第m个位置有a种可能<br>$\frac{a\times P_{a+b-1}^{m-1}}{P_{a+b}^{m}}&#x3D;\frac{a}{a+b}$</li><li>法三<br>（a+b)的球， 取出一个白球放在第m个位置，就是$\frac{a}{a+b}$种可能</li></ul><h3 id="1-2-3、几何概型"><a href="#1-2-3、几何概型" class="headerlink" title="1.2.3、几何概型"></a>1.2.3、几何概型</h3><p>线段、平面、立体</p><p>一个事件的概率，就是这个几何区域的一种度量占总的比例</p><p>$P(A)&#x3D;\frac{\mu{(G)}}{\mu(\Omega)}$</p><hr><p><strong>例题：</strong>会面问题</p><p>​甲乙约点6-7点见面，先到者等一刻钟（15分钟），甲乙在这一小时内任意时刻都可能到达</p><p>​A：两人见面</p><p>​x：甲到达时间</p><p>​y：乙到达时间</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220108112508027.png" alt="image-20220108112508027"><br>$$<br>|y-x|\leq 15\<br>y-x\geq0 \ \ \ \ y-x\leq15\<br>y-x&lt;0 \ \ \ \ x-y\leqq 15\<br>可得：y\geq x \ \ y\leq x+15\<br>y&lt;x \ \ y\geq x-15\<br>\frac{60\times60 - 2\times\frac{1}{2}\times45\times45}{60\times60}&#x3D;0.43756<br>$$</p><hr><p><strong>蒲丰投针</strong>：扔长为 l 的针（l&lt;d）</p><p>假设 x：针中点离最近的线的距离$（0\leq x\leq \frac{d}{2})$</p><p>​$\phi：针与线的夹角$<br>$$<br>\frac{x}{\sin{\phi}}\leq\frac{l}{2}\<br>x\leq\frac{l}{2}\sin\phi<br>$$</p><p>$\Omega &#x3D; \lbrace  (\phi,x)|0\leq\phi\leq \pi,0\leq x \leq \frac{d}{2}\rbrace$</p><p>$G&#x3D;\lbrace (\phi,x)|0\leq \phi\leq \pi,0\leq x \leq \frac{l}{2}\sin{\phi} \rbrace$</p><p>$总的大小是\pi\times\frac{d}{2}，交叉的范围是一个弧形面积，用积分计算$</p><p>$\frac{\displaystyle\int_{0}^{\pi}\frac{l}{2}\sin\phi d\phi}{\pi\times\frac{d}{2}}&#x3D;\frac{2l}{\pi d}$</p><p>$\frac{2l}{\pi d}\approx\frac{n}{N} \ \ \ \ \pi\approx\frac{2lN}{nd}$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220108153643129.png"></p><p>几何概型与古典概型有一样的性质，</p><p><strong>完全可加性</strong></p><p>两两互不相容，和的概率等于概率的和，$P(\mathop{U}^{\infty}\limits_{i&#x3D;1}{A}<em>{i})&#x3D;\sum^{\infty}\limits</em>{i&#x3D;1}P(A_{i})$</p><h3 id="1-2-4、频率与概率"><a href="#1-2-4、频率与概率" class="headerlink" title="1.2.4、频率与概率"></a>1.2.4、频率与概率</h3><p>设随机事件 A 在 n 次实验中发生了 m 次，则比值 $\frac{m}{n}$叫做随机事件 A 的相对频率（简称<strong>频率</strong>），记作$\omega_{n}(A)$，用公式表示 $\omega_{n}(A)&#x3D;\frac{m}{n}$</p><p><strong>性质：</strong></p><p>（1）非负性：$0\leq \omega_{n}(A) \leq 1$</p><p>（2）规范性：$\omega_{n}(\Omega)&#x3D;1 \ \ \ \ \omega_{n}(\phi)&#x3D;0$</p><p>（3）可加性 ：$A_{1}···A_{m}不相容\ \omega_{n}(A_{1}+···+A_{m})&#x3D;\omega_{n}(A_{1})+···+\omega_{n}(A_{m})$</p><p>由随机事件的频率的稳定性可知，随机事件在试验中发生的可能性的大小可以用一个数字来表示。这个刻画随机事件A在试验中发生的可能性大小的、介于0与1之间的数字 p 叫做随机事件A的<strong>概率</strong>。记作 <strong>P(A)</strong>,即P(A)&#x3D;p （0&lt;p&lt;1)</p><h3 id="1-2-5、公理化"><a href="#1-2-5、公理化" class="headerlink" title="1.2.5、公理化"></a>1.2.5、公理化</h3><p>描述：古典、几何、统计</p><p>①非负②规范③可加</p><p>公理：公认的，不需要证明的</p><ul><li>公理一（非负性）：$0\leq P_{n}(A) \leq 1$</li><li>公理二（规范性）：$P(\Omega)&#x3D;1$</li><li>公理三（完全可加性）：$A_{1}A_{2}······不相容 \P(A_{1}+A_{2}+···)&#x3D;P(A_{1})+P_{A_2}+···$</li></ul><p><strong>证明：</strong></p><p>性质一：$P(\phi)&#x3D;0\ $</p><p>$\Omega &#x3D; \Omega+\phi+\phi+\phi+…….$</p><p>$P(\Omega)&#x3D;P(\Omega+\phi+\phi+\phi+…….)&#x3D;P(\Omega)+P(\phi)+P(\phi)+…….$</p><p>$P(\phi)+P(\phi)+P(\phi)+……&#x3D;0$</p><p>$P(\phi)\geq0 \ \ \ \ P(\phi)&#x3D;0$</p><p>性质二：有限可加性 $A_{1}…A_{n}不相容，P(A_{1}+…+P_n)&#x3D;P(A_1)+…+P(A_n)$</p><p>证明：$A_{1}…A_{n},\phi,\phi,…不相容，\P(A_{1}+…+P_n)&#x3D;P(A_{1}+…+A_{n}+\phi+\phi+…)&#x3D;P(A_1)+…+P(A_n)+P(\phi)+P(\phi)+…$</p><p>性质三：$P(\bar{A})&#x3D;1-P(A)     $</p><p>证明：$A\cap\bar{A}&#x3D;\phi \ \ \ \ A+\bar{A}&#x3D;\Omega \ P(\Omega)&#x3D;P(A+\bar{A})&#x3D;P(A)+P(\bar{A})&#x3D;1$</p><hr><p>推论：$A_{1}···A_{n}是完备事件组\两两互不相容\并是\Omega，P(A_1)+…+P(A_n)&#x3D;1$</p><p>$P(\Omega)&#x3D;P(A_1+…+A_n)&#x3D;P(A_1)+…+P(A_n)&#x3D;1$</p><p>性质四：$①P(A-B)&#x3D;P(A)-P(AB)\②A\supset B,0\leq P(A-B)&#x3D;P(A)-P(B) \ \ \ \ 且P(A)\geq P(B)$</p><p>证明：$①A&#x3D;(A-B)\cup AB\ \ \ \ A-B与AB不相容\P(A)&#x3D;P(A-B)+P(AB) \ \ \ \ P(A-B)&#x3D;P(A)-P(AB)$</p><p>性质五：（加法）$P(A+B)&#x3D;P(A)+P(B)-P(AB)\A,B互不相容，P(A+B)&#x3D;P(A)+P(B)$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220108150409261.png" alt="image-20220108150409261"></p><p>​证明：$A+B&#x3D;A+(B-AB)\P(A+B)&#x3D;P(A)+P(B-AB)&#x3D;P(A)+P(B)-P(AB)\P(B-AB)&#x3D;P(B)-P(B\cap(AB))&#x3D;P(B)-P(AB)$</p><p>​$补充：P(A+B+C)&#x3D;P(A)+P(B)+P(C)-P(AB)-P(AC)-P(BC)+P(ABC)$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220108150818164.png" alt="image-20220108150818164"></p><p><strong>习题</strong></p><p>例一：</p><p>A的概率为0.4，B的概率是0.3，（A+B)的概率是0.6，求$P(A\bar{B})$</p><p>$P(A+B)&#x3D;P(A)+P(B)-P(AB)\0.6&#x3D;0.4+0.3-0.1\P(AB)&#x3D;0.1\P(A\bar{B})&#x3D;P(A-B)&#x3D;P(A)-P(AB)&#x3D;0.3$</p><p>例二：</p><p>$P(A)&#x3D;P(B)&#x3D;P(C)&#x3D;\frac{1}{4} \ \ \ \ P(AB)&#x3D;0 \ \ \ \ P(AC)&#x3D;P(BC)&#x3D;\frac{1}{16}\求：①A,B,C至少一个发生\ \ \ \ \ \ \ ②A,B,C都不发生\解：P(A+B+C)&#x3D;P(A)+P(B)+P(C)-P(AB)-P(AC)-P(BC)+P(ABC)&#x3D;\frac{3}{4}-0-\frac{1}{16}-\frac{1}{16}&#x3D;\frac{5}{8}\ABC\subset AB,0\leq P(ABC)\leq P(AB)&#x3D;0,P(ABC)&#x3D;0\P(\bar{A}\bar{B}\bar{C})&#x3D;1-P(A+B+C)&#x3D;\frac{3}{8}$</p><p>例三：</p><p>4白3黑，取3个，至少2个白球的概率$\displaystyle\frac{C^{2}<em>{4}C^{1}</em>{3}+C^{3}<em>{4}}{C^{3}</em>{7}}$</p><p>例四：</p><p>第一台机床不需要看的概率为 0.9，看的概率0.1</p><p>第二台机床不需要看的概率为0.8，看的概率0.2</p><p>两台都需要看0.02，至少一台需要看的概率</p><p>$P(A_{1}+A_{2})&#x3D;P(A_1)+P(A_2)-P(A_{1}A_{2})&#x3D;0.1+0.2-0.02&#x3D;0.28$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220108152600757.png" alt="image-20220108152600757"></p><p>例五：</p><p>20件：一 6 ，二 10， 三 4，取3件</p><p>至少两件等级相同—-&gt;3件等级各不同</p><p>$\displaystyle 1-\frac{C^{1}<em>{6}C^{1}</em>{10}C^{1}<em>{4}}{C</em>{20}^{3}}&#x3D;\frac{15}{19}$</p><p>例六：（生日问题）</p><p>n个人至少两人生日相同</p><p>$\displaystyle 1-n个人生日各不同\ \displaystyle1-\frac{365\times 364\times363 \times 362 \times …}{365^n}\n&#x3D;55 \ \ \ \ 0.99$</p><h2 id="1-3、条件概率与乘法公式"><a href="#1-3、条件概率与乘法公式" class="headerlink" title="1.3、条件概率与乘法公式"></a>1.3、条件概率与乘法公式</h2><h3 id="1-3-1条件概率"><a href="#1-3-1条件概率" class="headerlink" title="1.3.1条件概率"></a>1.3.1条件概率</h3><p>定义：假设$\Omega$是样本空间，A,B两个事件，P(B)&gt;0,在B已经发生的条件下A发生的概率，A对B的条件概率 P(A|B) </p><p>P(A)无条件概率—》样本空间$\Omega$</p><p>P(A|B)条件概率—》B&#x3D;$\Omega_B$<br>$$<br>①P(A|B)&#x3D;\frac{n_{AB}}{n_B}\<br>②P(A|B)&#x3D;\frac{ \frac{n_{AB}}{n} }{ \frac{n_{B}}{n} }&#x3D;\frac{P(AB)}{P(B)}<br>$$<br>$(1)P(A|B)\geq0\(2)P(\Omega|B)&#x3D;1\(3)A_1,…A_n..不相容\P(\mathop{\sum}\limits^{\infty}<em>{i&#x3D;1}A</em>{i}|B)&#x3D;\mathop{\sum}^{\infty}\limits_{i&#x3D;1}P(A_{i}|B)$</p><p><strong>例子：</strong></p><p>1~6的6个球， B：偶数</p><p>A<sub>1</sub>：1号A<sub>2</sub>：2号A<sub>3</sub>：大于4</p><p>（1）P(A<sub>1</sub>)&#x3D;$\frac{1}{6}$    P(A<sub>1</sub>|B)&#x3D;0</p><p>（2）P(A<sub>2</sub>)&#x3D;$\frac{1}{6}$P(A<sub>2</sub>|B)&#x3D;$\frac{1}{3}$</p><p>（3）P(A<sub>3</sub>)&#x3D;$\frac{1}{3}$P(A<sub>2</sub>|B)&#x3D;$\frac{1}{3}$</p><h3 id="1-3-2、乘法公式"><a href="#1-3-2、乘法公式" class="headerlink" title="1.3.2、乘法公式"></a>1.3.2、乘法公式</h3><p>$P(A|B)&#x3D;\frac{P(AB)}{P(B)} \ \ \ \ ①P(AB)&#x3D;P(B)P(A|B)$</p><p>$P(B|A)&#x3D;\frac{P(AB)}{P(A)} \ \ \ \ ②P(AB)&#x3D;{P(A)}{P(B|A)}$</p><p>$P(A_{1}A_{2}…A_{n})&#x3D;P(A_{1})P(A_{2}|A_{1})P(A_{3}|A_{1}A_{2})…P(A_{n}|A_{1}…A_{n-1})\P(ABC)&#x3D;P(A)P(B|A)P(C|AB)$</p><p><strong>例1：</strong></p><p>灯泡甲占60 %，乙占40%，甲的合格率为90%，乙的合格率为80%。</p><p>（1）是甲厂合格的概率（2)是乙厂生产的合格的概率</p><p>$解：A:甲厂 \ \ \ \ \bar{A}:乙厂  \ \ \ \ B:合格 \ \ \ \ \bar{B}:不合格\(1)P(AB)&#x3D;P(A)P(B|A)&#x3D;0.6\times0.9&#x3D;0.54\(2)P(\bar{A}B)&#x3D;P(\bar{A})P(B|\bar{A})&#x3D;0.4\times0.8&#x3D;0.32$</p><p><strong>例2：</strong></p><p>10签4难，甲乙丙3人抽签，</p><p>（1）甲难</p><p>（2）甲乙难</p><p>（3）甲易乙难</p><p>（4）三人难</p><p>解：$A,B,C表示甲乙丙抽到难签\(1)P(A)&#x3D;\frac{4}{10}\(2)P(AB)&#x3D;P(A)P(B|A)&#x3D;\frac{4}{10}\times\frac{3}{9}\(3)P(\bar{A}B)&#x3D;P(\bar{A})P(B|\bar{A})&#x3D;\frac{6}{10}\times\frac{4}{9}\(4)P(ABC)&#x3D;P(A)P(B|A)P(C|AB)&#x3D;\frac{4}{10}\times\frac{3}{9}\times\frac{2}{8}$</p><p><strong>例3：</strong></p><p>产品100件，次品率10%，不放回，求第三次才取得合格品的概率</p><p>解：$A_{1},A_{2},A_{3}表示第1，2，3次取得合格品\P(\bar{A}\bar{B}C)&#x3D;P(\bar{A}<em>{1})P(\bar{A}</em>{2}|\bar{A}<em>{1})P(A</em>{3}|\bar{A}<em>{1}\bar{A}</em>{2})&#x3D;\frac{10}{100}\times\frac{9}{99}\times\frac{90}{98}&#x3D;0.00835$</p><p><strong>例4：</strong></p><p>（传染病）a红b黑，放入c个颜色相同的球，三次都是红球的概率</p><p>就是摸到一个红球，放回去，向箱子里额外再放入C个红球</p><p>解：$A_{1},A_{2},A_{3}表示第1，2，3次摸到红球\ \displaystyle P(A_{1}A_{2}A_{3})&#x3D;P(A_{1})P(A_{2}|A_{1})P(A_{3}|P(A_{1}A_{2}))&#x3D;\frac{a}{a+b}\frac{a+c}{a+b+c}\frac{a+2c}{a+b+2c}$</p><h2 id="1-4、公式"><a href="#1-4、公式" class="headerlink" title="1.4、公式"></a>1.4、公式</h2><h3 id="1-4-1、全概率公式"><a href="#1-4-1、全概率公式" class="headerlink" title="1.4.1、全概率公式"></a>1.4.1、全概率公式</h3><p>定理：$A_{1}A_{2}…A_{n}是E的完备事件组（互不相容，并是\Omega）\P(A_{i})&gt;0 \ \ \ \ P(B)&#x3D;\mathop{\sum}^{n}\limits_{i&#x3D;1}P(A_{i})P(B|A_{i})$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220106092604079.png" alt="image-20220106092604079"></p><p><strong>例1：</strong></p><p>有四条生产线，生产线一生产产品数占15%，不合格率为0.05，</p><p>​生产线二生产产品数占20%，不合格率为0.04，</p><p>​生产线一生产产品数占30%，不合格率为0.03，</p><p>​生产线一生产产品数占35%，不合格率为0.02，问不合格的比例</p><p>解：$A_{1},A_{2},A_{3},A_{4}生产线的产品，\ \ \ \ B:不合格\P(B)&#x3D;P(A_{1})P(B|A_{1})+P(A_2)P(B|A_{2})+P(A_{3})P(B|A_{3})+P(A_{4})P(B|A_{4})\&#x3D;0.15\times0.05+0.2\times0.04+0.3\times0.03+0.35\times0.02$</p><p><strong>例2：</strong></p><p>10台机器，3台次品（7台正品），已经取了2台，问第三台是正品的概率</p><p>解：$B:第三台是正品，A_{0}:两台都是次品 \ \ \ \ A_{1}:一台正品一台次品\ \  \ \ A_{2}:两台都是正品\P(B)&#x3D;P(A_{0})P(B|A_{0})+P(A_{1})P(B|A_{1})+P(A_{2})P(B|A_{2})\&#x3D;\displaystyle\frac{C^{2}<em>{3}}{C^{2}</em>{10}}\frac{7}{8}+\frac{C^{1}<em>{3}C^{1}</em>{7}}{C^{2}<em>{10}}\frac{6}{8}+\frac{C^{2}</em>{7}}{C^{2}_{10}}\frac{5}{8}&#x3D;0.7$</p><p><strong>例3：</strong></p><p>10件产品，次品为0次，1次，2次的可能性均为$\frac{1}{3}$</p><p>正品检验是正品的概率为0.98，是次品的概率为0.02</p><p>次品检验是正品的概率为0.05，是次品的概率为0.95，</p><p>产品通过验证的可能性是多少？</p><p>解：$B:通过验证 \ \ \ \ A_{0}A_{1}A_{2}分别为是次品的概率  \ \ \ \ B_{1}:抽是正品  \ \ \ \ \bar{B}<em>{1}:抽是次品\ P(A</em>{0})&#x3D;\frac{1}{3}\ \ \ \ P(A_{1})&#x3D;\frac{1}{3} \ \ \ \ P(A_{2})&#x3D;\frac{1}{3}\P(B_{1})                                       &#x3D;                       P(A_{0})P(B_{1}|A_{0})+P(A_{1})P(B_{1}|A_{1})+P(A_{2})P(B_{1}|A_{2})&#x3D;0.9 \ \ \ \ P(\bar{B}<em>{1})&#x3D;0.1\ P(B)&#x3D;P(B</em>{1})P(B|B_{1})+P(\bar{B}_{1})P(B|\bar{B})&#x3D;0.9\times 0.98+0.1\times 0.05&#x3D;0.887$</p><h3 id="1-4-2、贝叶斯公式"><a href="#1-4-2、贝叶斯公式" class="headerlink" title="1.4.2、贝叶斯公式"></a>1.4.2、贝叶斯公式</h3><p>定理：$A_{1}…A_{n}是完备事件组，B，P(A_{i})&gt;0,P(B)&gt;0\P(A_{K}|B)&#x3D;\displaystyle\frac{P(A_{K})P(B|A_{K})}{\mathop{\sum}^{n}\limits_{i&#x3D;1}P(A_{i})P(B|A_{i})}&#x3D;\frac{P(A_{K}B)}{P(B)}$</p><p>$P(A_{i})先验概率\P(A_{i}|B)后验概率$</p><p><strong>例题：</strong></p><p>已知发病率为0.0004，患者检查有病的概率为99%，检查没病的概率为1%，</p><p>​健康的人检查有病的概率为0.1%，检查没病的概率为99.9%，</p><p>​检查有病的人中，真有病的概率是多少？</p><p>解：<br>$$<br>A:患者 \ \ \ \ \bar{A}:健康的人 \ \ \ \ B:检查有病​\<br>P(A)&#x3D;0.0004 \ \ \ \ P(\bar{A})&#x3D;0.9996\ \ \ \ P(B|A)&#x3D;0.99\ \ \ \ P(B|\bar{A})&#x3D;0.001\<br>P(B)&#x3D;P(A)P(B|A)+P(\bar{A})P(B|\bar{A})&#x3D;0.0004\times0.99+0.996\times0.001&#x3D;0.0013956\<br>P(A|B)&#x3D;\frac{P(AB)}{P(B)}&#x3D;\frac{P(A)P(B|A)}{P(B)}&#x3D;\frac{0.004\times0.99}{0.0013956}&#x3D;0.284<br>$$</p><h2 id="1-5、独立性与模型"><a href="#1-5、独立性与模型" class="headerlink" title="1.5、独立性与模型"></a>1.5、独立性与模型</h2><h3 id="1-5-1、事件的独立性"><a href="#1-5-1、事件的独立性" class="headerlink" title="1.5.1、事件的独立性"></a>1.5.1、事件的独立性</h3><p>定义：A的概率不受B发生与否的影响P(A|B)&#x3D;P(A) </p><p>A,B独立，P(AB)&#x3D;P(A)P(B)</p><p>定理：P(A)&gt;0 P(B)&gt;0</p><p>A，B独立$\Leftrightarrow$p(AB)&#x3D;P(A)P(B)<br>$$<br>证明：充分：P(AB)&#x3D;P(A)P(B) \ \ \ \ P(A|B)&#x3D;\frac{P(AB)}{P(B)}&#x3D;\frac{P(A)P(B)}{P(B)}&#x3D;P(A) \<br>必要：A,B独立，P(A|B)&#x3D;P(A)\<br>P(AB)&#x3D;P(B)P(A|B)&#x3D;P(A)P(B)\<br>补充：P(A)&#x3D;0或P(B)&#x3D;0\<br>设P(A)&#x3D;0,AB\subset A,0\leq P(AB)\leq P(A)&#x3D;0\<br>P(AB)&#x3D;P(A)P(B)&#x3D;0<br>$$</p><p>$\phi,\Omega与任意事件A独立\ \phi与A，P(\phi A)&#x3D;P(\phi)&#x3D;0,P(\phi)P(A)&#x3D;0\\Omega与A,P(\Omega A)&#x3D;P(A),P(\Omega)p(A)&#x3D;P(A)$</p><p><strong>定理</strong>：</p><p>（1）A,B独立 $A与\bar{B},\bar{A}与B，\bar{A}与\bar{B}独立$</p><p>（2）P(A)&#x3D;0 或 P(A)&#x3D;1，A与任意事件独立</p><p>$(1)P(A\bar{B})&#x3D;P(A-B)&#x3D;P(A-AB)&#x3D;P(A)-P(AB)&#x3D;P(A)-P(A)P(B)&#x3D;P(A)(1-P(B))&#x3D;P(A)P(\bar{B})\(2)P(A)&#x3D;0,AB\subset A0\leq P(AB) \leq P(A)&#x3D;0\ \ \ \ \ P(A)&#x3D;1,P(\bar{A})&#x3D;0,\bar{A}与B独立，A与B独立，P(AB)&#x3D;0&#x3D;P(A)P(B)&#x3D;0$</p><p>独立：可能性两人陌生，上自习不受彼此影响</p><p>互不相容：$AB&#x3D;\phi$有你没我，有我没你，上自习，不在一个教室</p><p>$$<br>P(A)&gt;0,P(B)&gt;0\<br>独立与互不相容不同时成立\<br>①A,B独立，P(AB)&#x3D;P(A)P(B)&gt;0\<br>②AB&#x3D;\phi,P(AB)\neq P(A)P(B)\<br>0\neq (&gt;0)<br>$$</p><p>$A,B,C独立：①P(AB)&#x3D;P(A)P(B)\ \ \ \ ②P(BC)&#x3D;P(B)P(C) \ \ \ \ ③P(AC)&#x3D;P(A)P(C)\ \ \ \ ④P(ABC)&#x3D;P(A)P(B)P(C)\两事件A,B独立：P(AB)&#x3D;P(A)P(B)$</p><p>啥时候用：①投篮</p><p>​②A,B,C独立</p><p><strong>例2：</strong>P(A+B)&#x3D;0.9P(A)&#x3D;0.4,求P(B)</p><p>$①A,B互不相容，AB&#x3D;\phi,P(AB)&#x3D;0\P(A+B)&#x3D;P(A)+P(B)-P(AB)\0.9&#x3D;0.4+P(B)\P(B)&#x3D;0.5$</p><p>$②A,B独立，P(AB)&#x3D;P(A)P(B)\P(A+B)&#x3D;P(A)+P(B)-P(A)P(B)\0.9&#x3D;0.4+P(B)+0.4P(B)\P(B)&#x3D;\frac{5}{6}$</p><p><strong>例3：</strong>甲乙丙各投一次，投中的概率分别为0.7，0.8，0.75.</p><p>$(1)恰有一人投中  \ \ P(A\bar{B}\bar{C}+\bar{A}B\bar{C}+\bar{A}\bar{B}C)&#x3D;P(A)P(\bar{B})P(\bar{C})+P(\bar{A})P(B)P(\bar{C})+P(\bar{A})P(\bar{B})P(C)\(2)三人都投中 \ \ \ \ P(ABC)&#x3D;P(A)P(B)P(C)\(3)至少有一人投中\ \ \ P(A+B+C)&#x3D;1-P(\bar{A}\bar{B}\bar{C})$</p><p><strong>例4：</strong>破译密码，每个人译出的概率为0.6，如果保证以99%的概率译出，至少要几个人？<br>解：$A_{i}:第几个人译出\ \ \ \ B&#x3D;\mathop{\cup}^{n}\limits_{i&#x3D;1}A_{i}\P(B)&#x3D;1-P(\mathop{\cap}^{n}\limits_{i&#x3D;1}\bar{A}<em>{i})&#x3D;1-\mathop{\Pi}^{n}\limits</em>{i&#x3D;1}P(\bar{A}_{i})&#x3D;1-0.4^{n}\1-0.4^{n}\geq0.99 \ \ \ \ \ n\approx5.026\至少要6个人$</p><p><strong>例5：</strong>$0&lt;P(A)&lt;1,0&lt;P(B)&lt;1,P(A|B)+P(\bar{A}|\bar{B})&#x3D;1,证明A,B独立$</p><p>证明：$因为P(A|\bar{B})+P(\bar{A}|\bar{B})&#x3D;1,所以P(A|B)&#x3D;P(A|\bar{B})\ \frac{P(AB)}{P(B)}&#x3D;\frac{P(A\bar{B})}{P(\bar{B})}&#x3D;\frac{P(A-AB)}{1-P(B)}&#x3D;\frac{P(A)-P(AB)}{1-P(B)}\P(AB)-P(AB)P(B)&#x3D;P(B)P(A)-P(B)P(AB)\P(AB)&#x3D;P(A)P(B)$</p><h3 id="1-5-2、伯努利模型"><a href="#1-5-2、伯努利模型" class="headerlink" title="1.5.2、伯努利模型"></a>1.5.2、伯努利模型</h3><p>独立实验序列：E<sub>1</sub>,E<sub>2</sub>···E<sub>n</sub>独立</p><p>n重独立实验：E<sub>1</sub>E<sub>1</sub>E<sub>1</sub>···独立E<sup>n</sup></p><p>伯努利实验：结果只有两种 正反 中 不中 次，合格 $\Omega&#x3D;\lbrace A,\bar{A}\rbrace$</p><p>n重伯努利：n 次，独立，结果只有两种</p><p>定理：A的概率P，（0&lt;P&lt;1), $\bar{A}&#x3D;1-P$</p><p>​         $n重伯努利中A发生k次：\ P_{n}(K)&#x3D;C_{n}^{k}P^{k}(1-P)^{n-k}&#x3D;C_{n}^{k}p^{k}q^{1-k} \ \ \ \ q&#x3D;1-p\二项概率公式$</p><p><strong>例一：</strong>产品废品率0.1，合格率0.9，每次取一个又放回</p><p>（1）恰有一次取废品  $C^{1}_{3}0.1\times0.9^{2}$</p><p>（2）恰有两次取废品   $C^{2}_{3}0.1^{2}\times0.9$</p><p>（3）三次都取废品$C^{3}_{3}0.1^{3}$</p><p>（4）三次都取正品$C^{0}_{3}0.9^{3}$</p><p><strong>例二：</strong>彩票每周开一次，得奖的概率是十万分之一</p><p>​十年，买了520次，从未中奖的概率</p><p>$P_{520}(0)&#x3D;C^{0}_{520}(110^{-5})^{0}(1-10^{-5})520&#x3D;0.99999^{520}\approx0.9948$</p><h1 id="二、一维随机变量及其分布"><a href="#二、一维随机变量及其分布" class="headerlink" title="二、一维随机变量及其分布"></a>二、一维随机变量及其分布</h1><h2 id="2-1、随机变量"><a href="#2-1、随机变量" class="headerlink" title="2.1、随机变量"></a>2.1、随机变量</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>定义：$\Omega 是样本空间，X&#x3D;X(\omega)是实值函数，实值函数的定义域是样本空间，X就是随机变量，用X,Y,Z表示$</p><p>$\lbrace \omega|X(\omega)&#x3D;a\rbrace 表示一个事件，简写为\lbrace X&#x3D;a\rbrace,一个事件的概率可写为P(X&#x3D;a)或P\lbrace X&#x3D;a\rbrace$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316081738723.png" alt="image-20220316081738723"></p><p><strong>例4：</strong>公交车的车站，每隔5分钟就发一趟车，观察乘客候车时间，</p><p>若X表示候车时间，范围为[0,5]</p><p>$P\lbrace x&gt;6\rbrace&#x3D;0$</p><h3 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316082139109.png" alt="image-20220316082139109"></p><p>离散型：有限个，无限可列个，比如有3个白球，两个黑球，取出两个球，取出白球的个数的可能性是0，1，2</p><p>非离散型：连续型（一个或多个区间） ，比如枪手打枪，打中目标的次数可能是0，1，2，3…</p><h2 id="2-2、离散型随机变量及其概率分布"><a href="#2-2、离散型随机变量及其概率分布" class="headerlink" title="2.2、离散型随机变量及其概率分布"></a>2.2、离散型随机变量及其概率分布</h2><h3 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h3><p>P{X&#x3D;x<sub>k</sub>}&#x3D;P<sub>k</sub>,k&#x3D; 0,1,2叫做概率函数（分布）</p><p>$X的所有取值x_{k}(k&#x3D;1,2,..)可列个，$</p><p>大写X是随机变量，小写x是具体取值</p><h3 id="2、性质"><a href="#2、性质" class="headerlink" title="2、性质"></a>2、性质</h3><p>$①P_{k}\geq0  非负性\ \ \ \ \ ②\sum P_{k}&#x3D;1\ \ \ 规范性$</p><p>写完题后可以用概率分布图或概率分布表表示</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316083641449.png"></p><p><strong>例1：</strong>5黑3白，每次抽一个，不放回，直到取到黑球，X为取白球的数目</p><p>$P\lbrace -1&lt;x&lt;0 \rbrace,P\lbrace 1&lt;x&lt;3\rbrace,P\lbrace x\leq 3\rbrace$</p><p>$X&#x3D;0,P\lbrace x&#x3D;0\rbrace &#x3D; \frac{5}{8}\X&#x3D;1,一：白，二：黑，P\lbrace X&#x3D;1\rbrace&#x3D;\frac{3}{8}\frac{5}{7}&#x3D;\frac{15}{56}\X&#x3D;2,一，二：白：三：黑，P\lbrace X&#x3D;2\rbrace&#x3D;\frac{3}{8}\frac{2}{7}\frac{5}{6}&#x3D;\frac{5}{56}\X&#x3D;3,一，二，三：白，四：黑，P\lbrace X&#x3D;3\rbrace&#x3D;\frac{3}{8}\frac{2}{7}\frac{1}{6}\frac{5}{5}&#x3D;\frac{1}{56}$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220110092257007.png" alt="image-20220110092257007"></p><h2 id="2-3、连续性随机变量及其概率密度函数"><a href="#2-3、连续性随机变量及其概率密度函数" class="headerlink" title="2.3、连续性随机变量及其概率密度函数"></a>2.3、连续性随机变量及其概率密度函数</h2><h3 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h3><p>若存在非负可积函数f(x)，$f(x)\geq 0$，使得$F(x) &#x3D; \displaystyle\int^{x}_{+\infty}f(x)dx$</p><p>F(x)是分布函数，f(x)概率密度，X:连续随机变量，记作 X~f(x)</p><p>连续性概率密度的分布函数是连续函数</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323112257903.png" alt="image-20220323112257903"></p><h3 id="2、性质-1"><a href="#2、性质-1" class="headerlink" title="2、性质"></a>2、性质</h3><p>$①f(x)\geq 0 \ \ \  非负性\ ②\int^{+\infty}_{-\infty}f(x)&#x3D;1 \ \ \ 规范性\ 注意：连续型随机变量取个别值的概率为0$</p><p>若概率密度f(x)在x处连续，则该点的概率密度f(x)等于该点的分布函数的导数F&#96;(x)</p><p>连续型：左右端点有没有无所谓 $P\lbrace a\leq X \leq b\rbrace&#x3D;P\lbrace a&lt;X\leq b\rbrace &#x3D; P\lbrace a\leq X &lt;b\rbrace&#x3D;P\lbrace a&lt;X&lt;b\rbrace&#x3D; \displaystyle\int_{a}^{b}f(x)dx$</p><p>连续性型随机变量落在某一区间内的概率，与区间端点的开闭无关，均等于概率密度在该区间内的积分。也就是概率密度所包含的面积。</p><p>$P\lbrace X&lt;a\rbrace&#x3D; P\lbrace X\leq a \rbrace\ P\lbrace X&gt;a\rbrace&#x3D;P\lbrace X\geq a\rbrace$</p><p>概率为0 的事件未必是不可能事件</p><p>概率为1 的事件也未必是必然事件 </p><h3 id="3、例题"><a href="#3、例题" class="headerlink" title="3、例题"></a>3、例题</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323113451645.png" alt="image-20220323113451645"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323113610169.png" alt="image-20220323113610169"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323113624086.png" alt="image-20220323113624086"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323113635774.png" alt="image-20220323113635774"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323113924490.png" alt="image-20220323113924490"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323113954559.png" alt="image-20220323113954559"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220601113624936.png" alt="image-20220601113624936"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323114041355.png" alt="image-20220323114041355"> </p><h2 id="2-4、分布函数"><a href="#2-4、分布函数" class="headerlink" title="2.4、分布函数"></a>2.4、分布函数</h2><p>分布函数：离散，连续都符合</p><p>$$<br>F(x)&#x3D;P(X\leq x),x\in (-\infty,+\infty),F(x)\in [0,1] \X取值不超过x的概率，这是一个普通的实函数<br>\性质：<br>(1)0\leq F(X)，x\in(-\infty,+\infty)\(2)F(x)不减，x_1&lt;x_2,F(x_1)\leq F(x_2)\ \mathop{lim}\limits_{x\rightarrow{+\infty}}F(x)&#x3D;F(+\infty)&#x3D;1\ \mathop{lim}\limits_{x\rightarrow {-\infty}}F(x)&#x3D;F(-\infty)&#x3D;0,这两个式子常用来求参数\ (3)F(x)右连续 \begin{cases} 离散型，&amp;右连续 \ 连续型，&amp;连续\end{cases} \ 至多可列个间断点\右连续：\mathop{lim}\limits_{x\rightarrow a^+}F(x)&#x3D;F(a)\ 左连续：\mathop{lim}\limits_{x\rightarrow a^-}F(x)&#x3D;F(a)\   连续：\mathop{lim}\limits_{x\rightarrow a}F(x)&#x3D;F(a)     \  连续的三个条件：极限值存在，函数值存在，极限值等于函数值<br>$$</p><p>$$<br>F(x)&#x3D;P(X\leq x)，\<br>下面是式子对离散型和连续型都成立，和上一节的不太一样，因为要考虑离散型的那些点\<br>P\lbrace X\leq a\rbrace &#x3D;F(a)\<br>p\lbrace X&gt;a \rbrace &#x3D;1-P\lbrace X\leq a\rbrace&#x3D;1-F(a)\<br>P\lbrace a&lt;X\leq b\rbrace&#x3D;P\lbrace X\leq b\rbrace-P\lbrace X\leq a\rbrace&#x3D;F(b)-F(a)\<br>P\lbrace X&#x3D;a\rbrace&#x3D;F(a)-F(a-0)\<br>这个a-0表示无限接近0，但包含0\<br>P\lbrace a\leq X\leq b\rbrace &#x3D; F(b)-F(a-0)\<br>P\lbrace a \leq X \leq b \rbrace &#x3D;F(b)-F(a-0)\<br>P\lbrace X&lt;a\rbrace &#x3D;F(a-0)\<br>P\lbrace X\geq a\rbrace&#x3D; 1-F(a-0)<br>$$</p><h4 id="1、离散型的分布函数"><a href="#1、离散型的分布函数" class="headerlink" title="1、离散型的分布函数"></a>1、离散型的分布函数</h4><p><strong>例1：</strong><br>$$<br>F(x)&#x3D;<br> \begin{cases}<br> a-e^{-\lambda x},&amp;x&gt;0\<br> 0,&amp;x\leq0<br> \end{cases}<br>\解：<br>\lambda &gt;0,求a.\<br>F(-\infty)&#x3D;0\<br>F(+\infty)&#x3D;\mathop{lim}\limits_{x\rightarrow{+\infty}}(a-{\frac{1}{e^{\lambda x}}})&#x3D;a&#x3D;1\<br>a&#x3D;1<br>$$<br><strong>例2：</strong></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220110162147372.png" alt="image-20220110162147372"></p><p><strong>简便方法</strong></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220110163907499.png" alt="image-20220110163907499"></p><p>已知分布函数，求概率函数</p><p>$ 间断点 x_k是X 的取值\ P\lbrace X&#x3D;x_p\rbrace&#x3D;F(x_k)-F(x_k-0)$</p><h4 id="2、连续型的分布函数"><a href="#2、连续型的分布函数" class="headerlink" title="2、连续型的分布函数"></a>2、连续型的分布函数</h4><p>$$<br>F(x)&#x3D;P\lbrace X\leq x\rbrace &#x3D; \int^x_{-\infty}f(t)dt\<br>连续\ \ \ \ \  F’(x)&#x3D;f(x)<br>$$</p><p><strong>例3：</strong><br>$$<br>f(x)&#x3D;\frac{1}{\pi(1+x^2)}\<br>F(x)&#x3D;\int^x_{-\infty}\frac{1}{\pi(1+t^2)}dt&#x3D;\frac{1}{\pi}\arctan t|^x_{-\infty}&#x3D;\frac{1}{\pi}\arctan x+\frac{1}{2}<br>$$<br><strong>例题：</strong><br>$$<br>f(x)&#x3D;<br>\begin{cases}<br>{-\frac{1}{2}x}+1,&amp;0\leq x \leq2\<br>0,&amp;其他<br>\end{cases}\<br>\begin{array}{l}<br>解: \ x&lt;0时，F(x)&#x3D;\int^x_{-\infty}0dt&#x3D;0  \<br>0\leq x &lt;2时，F(x)&#x3D;\int^x_{-\infty}f(t)dt&#x3D;\int^0_{-\infty}f(t)dt+\int^x_0({-\frac{1}{2}t+1})dt&#x3D;-\frac{1}{4}x^2+x\<br>\qquad2\leq x 时，F(x)&#x3D;\int^x_{-\infty}f(t)dt&#x3D;\int^0_{-\infty}0dt+\int^2_0(-\frac{1}{2}t+1)+\int^x_2dt&#x3D;1<br>\end{array}<br>$$<br><strong>例5：</strong><br>$$<br>F(x)&#x3D;<br>\begin{cases}<br>0,&amp;x&lt;0\<br>Ax^2,&amp;0\leq x &lt;1\<br>1,&amp;1\leq x<br>\end{cases}\<br>\begin{array}{l}<br>①求A\<br> F(+\infty)&#x3D;0,F(-\infty)&#x3D;0不可以\<br> \mathop{lim}\limits_{x\rightarrow o^+}F(x)&#x3D;\mathop{lim}\limits_{x\rightarrow o^+}Ax^2&#x3D;0&#x3D;F(0)&#x3D;0,不行\<br> \mathop{lim}\limits_{x\rightarrow 1^-}Ax^2&#x3D;A&#x3D;F(1)&#x3D;1\<br>②f(x)&#x3D;<br>\begin{cases}<br>2x,&amp;0\leq x\<br>0,&amp;其他<br>\end{cases}\<br>③P\lbrace 0.3&lt;X&lt;0.7\rbrace&#x3D;F(0.7)-F(0.3)&#x3D;0.49-0.09&#x3D;0.4<br>\end{array}<br>$$</p><h2 id="2-3、几种分布"><a href="#2-3、几种分布" class="headerlink" title="2.3、几种分布"></a>2.3、几种分布</h2><p>前5离散型分布</p><p>后3种是连续型分布</p><h3 id="1、0-1分布"><a href="#1、0-1分布" class="headerlink" title="1、0-1分布"></a>1、0-1分布</h3><p>$$<br>\begin{array}{c|ll}<br>{X}&amp;{0}&amp;{1}\<br>\hline<br>{p(x)}&amp;{1-P}&amp;{P}<br>\end{array}<br>$$</p><p>$$<br>课本上还有一种定义，是将0-1分布当做二项分布的特例算的。\<br>P\lbrace X&#x3D;k\rbrace&#x3D;P^k(1-P)^{1-k},k&#x3D;0,1\<br>k&#x3D;0,P&#x3D;1-k;\<br>k&#x3D;1,P&#x3D;k\<br>其实都是一样的<br>$$</p><p><strong>例1：</strong><br>$$<br>废品率为10%,x&#x3D;<br>\begin{cases}<br>1,&amp;合格\<br>0,&amp;废品\<br>\end{cases}\<br>P\lbrace X&#x3D;1\rbrace&#x3D;0.9,P\lbrace X&#x3D;0\rbrace&#x3D;0.1\<br>0-1分布有两种结果，试验只做一次<br>$$</p><h3 id="2、几何分布"><a href="#2、几何分布" class="headerlink" title="2、几何分布"></a>2、几何分布</h3><p>$$<br>\begin{array}{l}<br>P(A)&#x3D;p,第K次首次发生，前K-1次都未发生\<br>离散型随机变量X的概率分布为：P\lbrace X&#x3D;k\rbrace &#x3D;p(1-p)^{k-1},k&#x3D;1,2,3…,记作X \sim G(p)\<br>应用场合：在n重伯努利试验中，每次实验事件A发生的概率为p，直到事件A首次发生为止，所进行的试验次数X\sim G(p)\<br>\textbf{解：}射箭比赛，射中的概率为0.6， \X：直到命中目标的次数\<br>P\lbrace X&#x3D;K\rbrace &#x3D; 0.4^{k-1} {0.6},k&#x3D;1,2,3,…<br>\end{array}<br>$$</p><h3 id="3、二项分布"><a href="#3、二项分布" class="headerlink" title="3、二项分布"></a>3、二项分布</h3><p>$$<br>\begin{array}{l}<br>P(A)&#x3D;P,n次试验，发生了K次\<br>P\lbrace X&#x3D;K\rbrace &#x3D; C^k_nP^k(1-P)^{n-k},k&#x3D;0,1,2,3… \</p><p>\end{array}<br>$$</p><p>记作X~B(n,P)</p><p>应用场合：n重伯努利试验中事件A发生的次数</p><p>与两点分布的联系 当n&#x3D;1时，二项分布退化为两点分布X~B(1,p)</p><p>两点分布：一个试验有两种可能，非此及彼，概率为P和1-P</p><p><strong>最可能值</strong><br>（1） （n+1)P不为整数，[(n+1)P]达最大值</p><p>（2）（n+1)P是整数，(n+1)P,(n+1)P-1是最值 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316085550616.png" alt="image-20220316085550616"></p><p><strong>例3：</strong><br>$$<br>报警器报警的概率为0.8，确保至少以99%的概率报警。\<br>\textbf{解：}X：发生警情时报警的台数 \qquad n:报警器安装的台数\qquad X\sim B(n,0.8)\<br>0.99\leq P\lbrace X\geq 1\rbrace&#x3D;1-P\lbrace X&#x3D;0\rbrace&#x3D;1-C^0_n{0.2}^n&#x3D;1-{0.2}^n\<br>1-0.2^n\geq 0.99\<br>0.01\geq0.2^n\<br>\ln{0.01}\geq n\ln{0.2}\<br>n\geq \frac{\ln{0.01}}{\ln{0.2}}<br>$$<br><strong>例4：</strong>每台机床需要维修的概率为P&#x3D;0.01</p><p>1）1个人看管20台机床</p><p>2）3个人看管80台机床</p><p>不能及时维修的概率<br>$$<br>\begin{array}{l}<br>\textbf{解：}(1)n&#x3D;20,P&#x3D;0.01,X:修的台数\<br>P\lbrace X&gt;1\rbrace &#x3D;1-P\lbrace X&#x3D;0\rbrace-P\lbrace X&#x3D;1\rbrace\<br>&#x3D;1-C^0_{20}{0.99}^{20}-C^1_{20}{0.01}\times{0.99}^{19}\<br>\approx0.0169\<br>(2)n&#x3D;80,P&#x3D;0.01,X:修的台数\<br>P\lbrace X&gt;3\rbrace &#x3D;1-P\lbrace X&#x3D;0\rbrace-P\lbrace X&#x3D;1 \rbrace -P\lbrace X&#x3D;2\rbrace-P\lbrace X&#x3D;3\rbrace\<br>\approx0.0087<br>\end{array}<br>$$</p><h3 id="4、泊松分布"><a href="#4、泊松分布" class="headerlink" title="4、泊松分布"></a>4、泊松分布</h3><p>$P\lbrace X&#x3D;k\rbrace &#x3D;\frac{\lambda^k}{K!}e^{-\lambda},k&#x3D;0,1,2,3… $</p><p>&lambda;&gt;0,X~P(&lambda;)</p><p>可能会用在电台呼叫次数，共用设施（等车，收银台）</p><p>二项分布</p><p> <strong>例5：</strong>电话台，用户呼叫次数X~P(3)，&lambda;&#x3D;3,求不超过5次</p><p>解：X~P(3),&lambda;&#x3D;3<br>$$<br>P\lbrace X&#x3D;K\rbrace&#x3D;\frac{\lambda^k}{k!}e^{-k}&#x3D;\frac{3^k}{k!}e^{-3},k&#x3D;0,1,2.3…\<br>P\lbrace X\leq 5\rbrace&#x3D;\mathop{\sum}^5\limits_{k&#x3D;0}P\lbrace X&#x3D;K\rbrace&#x3D;0.916<br>$$<br><strong>例6：</strong>证券营业部，有1000个账户，每户存了100 000元，每个用户提20%的概率是0.006。</p><p>100 000*20%&#x3D;2万元，应该准备多少现金，才能以95%以上的概率来满足用户提款的要求？</p><p>解： X：来提钱的用户数X~B（1000，0.006）</p><p>现金x元$P\lbrace 2X\leq x\rbrace \geq 0.95$</p><h3 id="5、超几何分布"><a href="#5、超几何分布" class="headerlink" title="5、超几何分布"></a>5、超几何分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316093707630.png" alt="image-20220316093707630"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220112102457406-1641955317518.png" alt="image-20220112102457406"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316094215095.png" alt="image-20220316094215095"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220316094420290.png" alt="image-20220316094420290"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220112104203768.png" alt="image-20220112104203768"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220112104253431.png" alt="image-20220112104253431"></p><h3 id="6、均匀分布"><a href="#6、均匀分布" class="headerlink" title="6、均匀分布"></a>6、均匀分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323121809680.png" alt="image-20220323121809680"><br>$$<br>f(x)&#x3D;<br>\begin{cases}<br>\frac{1}{b-a},&amp;a\leq x\leq b\<br>0,&amp;else<br>\end{cases},<br>$$</p><p>记作：X~&cup;[a,b]</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/2510762-20220112105852032-96904185.png" alt="image-20220112105433127"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323122448072.png" alt="image-20220323122448072"></p><p>应用场合：一维空间上的几何概型，如四舍五入所产生的误差等 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323123033688.png" alt="image-20220323123033688"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323123430083.png" alt="image-20220323123430083"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220112110449067.png" alt="image-20220112110449067"></p><h3 id="7、指数分布"><a href="#7、指数分布" class="headerlink" title="7、指数分布"></a>7、指数分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323145409172.png" alt="image-20220323145409172"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150011815.png" alt="image-20220323150011815"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150146319.png" alt="image-20220323150146319"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150333317.png" alt="image-20220323150333317"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150602620.png" alt="image-20220323150602620"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150811257.png" alt="image-20220323150811257"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150831903.png" alt="image-20220323150831903"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323150904948.png" alt="image-20220323150904948"> </p><h3 id="8、正态分布"><a href="#8、正态分布" class="headerlink" title="8、正态分布"></a>8、正态分布</h3><p>密度函数$\displaystyle\phi(x)&#x3D;\displaystyle\frac{1}{\sqrt{2\pi}\sigma}\displaystyle e^{-\displaystyle\frac{(x-\mu)^2}{2\sigma^2}},-\infty&lt;x&lt;+\infty$ X~N(&mu;,&sigma;<sup>2</sup>)</p><p>分布函数$\displaystyle\Phi(x)&#x3D;\frac{1}{\sqrt{2\pi}\sigma}\int^x_{-\infty}e^{-\displaystyle\frac{(t-u)^2}{2\sigma^2}}dt$<br>$$<br>\int^{+\infty}<em>{-\infty}e^{-x^2}dx&#x3D;\sqrt{\pi}\<br> \int^{+\infty}</em>{-\infty}\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-u)^2}{2\sigma^2}}dx\&#x3D;\frac{1}{\sqrt{2\pi}\sigma}\int^{+\infty}<em>{-\infty}e^{-(\frac{x-u}{\sqrt{2}\sigma})^2}d(x-u)\&#x3D;\frac{\sqrt{2}\sigma}{\sqrt{2\pi}\sigma}\int^{+\infty}</em>{-\infty}e^{-(\frac{x-u}{\sqrt{2}\sigma})^2}d(\frac{x-u}{\sqrt{2}\sigma})\&#x3D;\frac{1}{\sqrt{\pi}}\sqrt{\pi}&#x3D;1<br>$$<br><strong>性质：</strong></p><p>（1）y&#x3D;&phi;(x)以 x&#x3D;&mu;为对称轴</p><p>​ x&#x3D;&mu;,&mu;(x)最大值为$\displaystyle\frac{1}{\sqrt{2\pi}\sigma}$</p><p>（2）y&#x3D;&phi;(x)以x轴为渐近线，x&#x3D;&mu;&pm;&sigma;是拐点的位置</p><p>（3）&sigma;固定，&mu;变化，左右移动p</p><p>​&mu;固定 ，&sigma;变化，&sigma;变小，最高点上移，陡</p><p>​&sigma;变大，最高点下移，缓</p><p>（4）曲线在 u+&sigma;，u-&sigma;有拐点,F(&mu;)&#x3D;0.5</p><h3 id="标准正态分布"><a href="#标准正态分布" class="headerlink" title="标准正态分布"></a>标准正态分布</h3><p>&mu;&#x3D;0,&sigma;&#x3D;1;<br>$$<br>\phi_{0}(x)&#x3D;\frac{1}{\sqrt{2\pi}}e^{-\displaystyle\frac{x^2}{2}},-\infty&lt;x&lt;+\infty\<br>\Phi_{0}(x)&#x3D;\frac{1}{\sqrt{2\pi}}\int^x_{-\infty}e^{-\displaystyle\frac{t^2}{2}}dt<br>$$<br>性质：</p><p>1）y轴对称轴，偶函数，</p><p>2)$\phi_0(x)&#x3D;\phi_0(-x)$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328103508488.png" alt="image-20220328103508488"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328103951717.png" alt="image-20220328103951717"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328104809174.png" alt="image-20220328104809174"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328105835787.png" alt="image-20220328105835787"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328110232716.png" alt="image-20220328110232716"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328110555821.png" alt="image-20220328110555821"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328111542746.png" alt="image-20220328111542746"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328111800794.png" alt="image-20220328111800794"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328112625475.png" alt="image-20220328112625475"> </p><h2 id="必会题型"><a href="#必会题型" class="headerlink" title="必会题型"></a>必会题型</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323114130000.png" alt=" "></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220323114152914.png" alt="image-20220323114152914"> </p><h2 id="2-5、随机变量函数的分布"><a href="#2-5、随机变量函数的分布" class="headerlink" title="2.5、随机变量函数的分布"></a>2.5、随机变量函数的分布</h2><h3 id="1、离散型随机变量函数的分布"><a href="#1、离散型随机变量函数的分布" class="headerlink" title="1、离散型随机变量函数的分布"></a>1、离散型随机变量函数的分布</h3><h4 id="①、分布律"><a href="#①、分布律" class="headerlink" title="①、分布律"></a>①、分布律</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328113348262.png" alt="image-20220328113348262"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328113657016.png" alt="image-20220328113657016"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220328114014012.png" alt="image-20220328114014012"></p><p>等比级数，q小于1，和为$\frac{a_1}{1-q}$ </p><h3 id="2、连续型随机变量函数的分布"><a href="#2、连续型随机变量函数的分布" class="headerlink" title="2、连续型随机变量函数的分布"></a>2、连续型随机变量函数的分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330081842290.png" alt="image-20220330081842290"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330082326294.png" alt="image-20220330082326294"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330082530876.png" alt="image-20220330082530876"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330082549236.png" alt="image-20220330082549236"> </p><p> <img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330083850792.png" alt="image-20220330083850792"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330084229074.png" alt="image-20220330084229074"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330084813321.png" alt="image-20220330084813321"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330085253476.png" alt="image-20220330085253476"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330110341485.png" alt="image-20220330110341485"> </p><p>X范围发生变化时，需要讨论</p><p>比上界大，比下界小，都要单独讨论</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330111842155.png" alt="image-20220330111842155"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330111901250.png" alt="image-20220330111901250"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330112141362.png" alt="image-20220330112141362"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330112302899.png" alt="image-20220330112302899"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330112707519.png" alt="image-20220330112707519"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330113129107.png" alt="image-20220330113129107"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330113139732.png" alt="image-20220330113139732"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330113804470.png" alt="image-20220330113804470"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330114025754.png" alt="image-20220330114025754"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220330114057296.png" alt="image-20220330114057296"> </p><h1 id="三、二维随机变量及其分布"><a href="#三、二维随机变量及其分布" class="headerlink" title="三、二维随机变量及其分布"></a>三、二维随机变量及其分布</h1><h2 id="3-1、联合分布"><a href="#3-1、联合分布" class="headerlink" title="3.1、联合分布"></a>3.1、联合分布</h2><p>二维离散型随机变量：二维随机变量（X,Y)的所有可能取值是有限队或可数对。 </p><h3 id="1、联合分布函数"><a href="#1、联合分布函数" class="headerlink" title="1、联合分布函数"></a>1、联合分布函数</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404105410983.png" alt="image-20220404105410983"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110321971.png" alt="image-20220404110321971"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110332762.png" alt="image-20220404110332762"></p><p><strong>性质</strong> </p><ol><li>0 &leq; F(x,y) &leq; 1</li><li>F(x,y)分别关于x,y单调不减<br>固定y，F(x,y)对x单调不减<br>固定x,   F(x,y)对y单调不减</li><li>$F(-\infty,y)&#x3D;F(x,-\infty)&#x3D;F(-\infty,+\infty)&#x3D;0 \ \ F(+\infty,+\infty)&#x3D;1$</li><li>F(x)右连续<br>F(x,y)&#x3D; F(x+0, y) &#x3D; F(x, y+0)</li><li><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110412193.png" alt="image-20220404110412193"></li></ol><h3 id="2、联合分布律"><a href="#2、联合分布律" class="headerlink" title="2、联合分布律"></a>2、联合分布律</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110522222.png" alt="image-20220404110522222"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110529918.png" alt="image-20220404110529918"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110538178.png" alt="image-20220404110538178"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404110554752.png" alt="image-20220404110554752"> </p><h3 id="3、联合概率密度"><a href="#3、联合概率密度" class="headerlink" title="3、联合概率密度"></a>3、联合概率密度</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404112923379.png" alt="image-20220404112923379"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404113232245.png" alt=" "> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404113451209.png" alt="image-20220404113451209"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404113617050.png" alt="image-20220404113617050"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404114032486.png" alt="image-20220404114032486"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404114219360.png" alt="image-20220404114219360"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220404114603159.png" alt="image-20220404114603159"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406082748185.png" alt="image-20220406082748185"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406082525622.png" alt="image-20220406082525622"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406082848882.png" alt="image-20220406082848882"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406083753225.png" alt="image-20220406083753225"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406084657826.png" alt="image-20220406084657826"></p><h4 id="二维均匀分布"><a href="#二维均匀分布" class="headerlink" title="二维均匀分布"></a>二维均匀分布</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406085331680.png" alt="image-20220406085331680"></p><h4 id="二维正态分布"><a href="#二维正态分布" class="headerlink" title="二维正态分布"></a>二维正态分布</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406085615599.png" alt="image-20220406085615599"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406085859721.png" alt="image-20220406085859721"></p><h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406082736103.png" alt="image-20220406082736103"></p><h2 id="3-2、二维随机变量的边缘分布"><a href="#3-2、二维随机变量的边缘分布" class="headerlink" title="3.2、二维随机变量的边缘分布"></a>3.2、二维随机变量的边缘分布</h2><h3 id="1、边缘分布函数"><a href="#1、边缘分布函数" class="headerlink" title="1、边缘分布函数"></a>1、边缘分布函数</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406091959480.png" alt="image-20220406091959480"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406092200938.png" alt="image-20220406092200938"></p><h3 id="2、边缘分布律"><a href="#2、边缘分布律" class="headerlink" title="2、边缘分布律"></a>2、边缘分布律</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406092544907.png" alt="image-20220406092544907"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220406092553610.png" alt="image-20220406092553610"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200214207.png" alt="image-20220411200214207"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200224856.png" alt="image-20220411200224856"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200232296.png" alt="image-20220411200232296"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200240203.png" alt="image-20220411200240203"> </p><h3 id="3、边缘概率密度"><a href="#3、边缘概率密度" class="headerlink" title="3、边缘概率密度"></a>3、边缘概率密度</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200341502.png" alt="image-20220411200341502"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200354551.png" alt="image-20220411200354551"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200408911.png" alt="image-20220411200408911"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200419211.png" alt="image-20220411200419211"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200434159.png" alt="image-20220411200434159"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200441867.png" alt="image-20220411200441867"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200454507.png" alt="image-20220411200454507"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200502990.png" alt="image-20220411200502990"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200512051.png" alt="image-20220411200512051"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200519964.png" alt="image-20220411200519964"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200530146.png" alt="image-20220411200530146"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200541244.png" alt="image-20220411200541244"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411200552809.png" alt="image-20220411200552809"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411102631317.png" alt="image-20220411102631317"> </p><p>联合分布是什么</p><p>联合分布可以求边缘分布，边缘分布不一定可以求联合分布</p><h2 id="3-3、二维随机变量的条件分布"><a href="#3-3、二维随机变量的条件分布" class="headerlink" title="3.3、二维随机变量的条件分布"></a>3.3、二维随机变量的条件分布</h2><h3 id="1、二维离散随机变量的条件分布"><a href="#1、二维离散随机变量的条件分布" class="headerlink" title="1、二维离散随机变量的条件分布"></a>1、二维离散随机变量的条件分布</h3><h4 id="①、条件分布律"><a href="#①、条件分布律" class="headerlink" title="①、条件分布律"></a>①、条件分布律</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201011865.png" alt="image-20220411201011865"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201025719.png" alt="image-20220411201025719"> </p><p>例题</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201038534.png" alt="image-20220411201038534"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201046510.png" alt="image-20220411201046510"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201055399.png" alt="image-20220411201055399"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201104894.png" alt="image-20220411201104894"> </p><h4 id="②、条件分布函数"><a href="#②、条件分布函数" class="headerlink" title="②、条件分布函数"></a>②、条件分布函数</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201209969.png" alt="image-20220411201209969"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201218879.png" alt="image-20220411201218879"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201226257.png" alt="image-20220411201226257"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201235708.png" alt="image-20220411201235708"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201244248.png" alt="image-20220411201244248"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201252856.png" alt="image-20220411201252856"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201303347.png" alt="image-20220411201303347"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201312414.png" alt="image-20220411201312414"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201323200.png" alt="image-20220411201323200"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201332843.png" alt="image-20220411201332843"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201352148.png" alt="image-20220411201352148"> </p><h4 id="④、随机变量的独立性"><a href="#④、随机变量的独立性" class="headerlink" title="④、随机变量的独立性"></a>④、随机变量的独立性</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201428656.png" alt="image-20220411201428656"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201437000.png" alt="image-20220411201437000"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201446464.png" alt="image-20220411201446464"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201455083.png" alt="image-20220411201455083"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201504751.png" alt="image-20220411201504751"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201513491.png" alt="image-20220411201513491"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201521539.png" alt="image-20220411201521539"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201530924.png" alt="image-20220411201530924"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201540258.png" alt="image-20220411201540258"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201551170.png" alt="image-20220411201551170"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201603068.png" alt="image-20220411201603068"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201612406.png" alt="image-20220411201612406"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201620474.png" alt="image-20220411201620474"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201631211.png" alt="image-20220411201631211"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201639970.png" alt="image-20220411201639970"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201649226.png" alt="image-20220411201649226"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201657416.png" alt="image-20220411201657416"> </p><h3 id="2、二维连续随机变量的条件分布"><a href="#2、二维连续随机变量的条件分布" class="headerlink" title="2、二维连续随机变量的条件分布"></a>2、二维连续随机变量的条件分布</h3><h2 id="3-4、二维随机变量函数的分布"><a href="#3-4、二维随机变量函数的分布" class="headerlink" title="3.4、二维随机变量函数的分布"></a>3.4、二维随机变量函数的分布</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201835851.png" alt="image-20220411201835851"></p><h3 id="1、二维离散型随机变量函数的分布"><a href="#1、二维离散型随机变量函数的分布" class="headerlink" title="1、二维离散型随机变量函数的分布"></a>1、二维离散型随机变量函数的分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201845954.png" alt="image-20220411201845954"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201854215.png" alt="image-20220411201854215"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201901817.png" alt="image-20220411201901817"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201911434.png" alt="image-20220411201911434"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201919229.png" alt="image-20220411201919229"></p><p>相互独立的</p><p>泊松</p><p>二项</p><p>01分布 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201927736.png" alt="image-20220411201927736"></p><h3 id="2、二维连续型随机变量函数的分布"><a href="#2、二维连续型随机变量函数的分布" class="headerlink" title="2、二维连续型随机变量函数的分布"></a>2、二维连续型随机变量函数的分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201936535.png" alt="image-20220411201936535"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201946034.png" alt="image-20220411201946034"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411201955440.png" alt="image-20220411201955440"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202005987.png" alt="image-20220411202005987"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202013411.png" alt="image-270220411202013411"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202022276.png" alt="image-20220411202022276"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202031576.png" alt="image-20220411202031576"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202039273.png" alt="image-20220411202039273"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220413092655137.png" alt="image-20220413092655137"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202046743.png" alt="image-20220411202046743"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202054910.png" alt="image-20220411202054910"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202102816.png" alt="image-20220411202102816"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202111364.png" alt="image-20220411202111364"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202121420.png" alt="image-20220411202121420"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202129720.png" alt="image-20220411202129720"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202138670.png" alt="image-20220411202138670"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202146546.png" alt="image-20220411202146546"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202155812.png" alt="image-20220411202155812"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202203266.png" alt="image-20220411202203266"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202211666.png" alt="image-20220411202211666"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202219954.png" alt="image-20220411202219954"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202229229.png" alt="image-20220411202229229"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202237742.png" alt="image-20220411202237742"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202246512.png" alt="image-20220411202246512"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202255138.png" alt="image-20220411202255138"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202304559.png" alt="image-20220411202304559"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202312379.png" alt="image-20220411202312379"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202319383.png" alt="image-20220411202319383"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202333743.png" alt="image-20220411202333743"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202341466.png" alt="image-20220411202341466"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220411202349178.png" alt="image-20220411202349178"></p><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p> <img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150503615.png" alt="image-20220425150503615"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150517798.png" alt="image-20220425150517798"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150526989.png" alt="image-20220425150526989"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150535969.png" alt="image-20220425150535969"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150545531.png" alt="image-20220425150545531"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150554431.png" alt="image-20220425150554431"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150603108.png" alt="image-20220425150603108"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150611523.png" alt="image-20220425150611523"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150623648.png" alt="image-20220425150623648"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150651347.png" alt="image-20220425150651347"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150702159.png" alt="image-20220425150702159"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150710024.png" alt="image-20220425150710024"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150719107.png" alt="image-20220425150719107"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150728119.png" alt="image-20220425150728119"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150743199.png" alt="image-20220425150743199"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150752612.png" alt="image-20220425150752612"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150801244.png" alt="image-20220425150801244"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150810548.png" alt="image-20220425150810548"></p><p>判断独立，有一种方法，就是可不可以用x和y乘出来 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150820838.png" alt="image-20220425150820838"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150833518.png" alt="image-20220425150833518"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150841663.png" alt="image-20220425150841663"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220425150851514.png" alt="image-20220425150851514"></p><h1 id="四、随机变量的数字特征"><a href="#四、随机变量的数字特征" class="headerlink" title="四、随机变量的数字特征"></a>四、随机变量的数字特征</h1><h2 id="4-1、数学期望"><a href="#4-1、数学期望" class="headerlink" title="4.1、数学期望"></a>4.1、数学期望</h2><p>随机变量的平均取值</p><h3 id="1、数学期望的概念"><a href="#1、数学期望的概念" class="headerlink" title="1、数学期望的概念"></a>1、数学期望的概念</h3><h4 id="①、离散型随机变量的数学期望"><a href="#①、离散型随机变量的数学期望" class="headerlink" title="①、离散型随机变量的数学期望"></a>①、离散型随机变量的数学期望</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150851213.png" alt=""> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150901124.png" alt="image-20220418150901124"> </p><p>概率论中的求和默认是无序的，所以应该无论将它的每一项怎么放，结果都不会变。</p><p>倘若它是条件收敛的，比如$1+\frac{1}{2}-\frac{1}{3}+\frac{1}{4}-\frac{1}{5}+…$</p><p>假如只考虑加号，它的极限是正无穷大，</p><p> 假如只考虑减号，它的极限是负无穷大，</p><p>相加后，收敛于正无穷大，</p><p>假如更改数据，比如先加一些加数，接近与π，大于π，减去一些数；小于π，加上一些数；</p><p>因为它是无穷多个数，所以只要一直这样做，便会收敛于π，</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150909272.png" alt="image-20220418150909272"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150917293.png" alt="image-20220418150917293"></p><p><strong>例子</strong></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150926544.png" alt="image-20220418150926544"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150935908.png" alt="image-20220418150935908"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150945344.png" alt="image-20220418150945344"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418150952696.png" alt="image-20220418150952696"></p><h4 id="②、连续型随机变量的数学期望"><a href="#②、连续型随机变量的数学期望" class="headerlink" title="②、连续型随机变量的数学期望"></a>②、连续型随机变量的数学期望</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151002084.png" alt="image-20220418151002084"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151011564.png" alt="image-20220418151011564"> </p><h3 id="2、随机变量函数的期望"><a href="#2、随机变量函数的期望" class="headerlink" title="2、随机变量函数的期望"></a>2、随机变量函数的期望</h3><h4 id="①、一维随机变量函数的数学期望"><a href="#①、一维随机变量函数的数学期望" class="headerlink" title="①、一维随机变量函数的数学期望"></a>①、一维随机变量函数的数学期望</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151032960.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151040556.png" alt="image-20220418151040556"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151254898.png" alt="image-20220418151254898"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151305446.png" alt="image-20220418151305446"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151316271.png" alt="image-20220418151316271"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151326307.png" alt="image-20220418151326307"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151335923.png" alt="image-20220418151335923"></p><h4 id="②、二维随机变量函数的数学期望"><a href="#②、二维随机变量函数的数学期望" class="headerlink" title="②、二维随机变量函数的数学期望"></a>②、二维随机变量函数的数学期望</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151345248.png" alt="image-20220418151345248"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151356656.png" alt="image-20220418151356656"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151404579.png" alt="image-20220418151404579"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151432334.png" alt="image-20220418151432334"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151442747.png" alt="image-20220418151442747"> </p><h3 id="3、数学期望的性质"><a href="#3、数学期望的性质" class="headerlink" title="3、数学期望的性质"></a>3、数学期望的性质</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151455392.png" alt="image-20220418151455392"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151506160.png" alt="image-20220418151506160"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151514519.png" alt="image-20220418151514519"> </p><h3 id="4、常用分布的数学期望"><a href="#4、常用分布的数学期望" class="headerlink" title="4、常用分布的数学期望"></a>4、常用分布的数学期望</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151525843.png" alt="image-20220418151525843"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151535367.png" alt="image-20220418151535367"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151546815.png" alt="image-20220418151546815"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151558303.png" alt="image-20220418151558303"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151608564.png" alt="image-20220418151608564"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220418151618127.png" alt="image-20220418151618127"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420180912631.png" alt="image-20220420180912631"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420180921291.png" alt="image-20220420180921291"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420180930723.png" alt="image-20220420180930723"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420180939847.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420180949183.png" alt="image-20220420180949183"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181005841.png" alt="image-20220420181005841"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181013679.png" alt="image-20220420181013679"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181021175.png" alt="image-20220420181021175"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181028827.png" alt="image-20220420181028827"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181037738.png" alt="image-20220420181037738"> </p><h2 id="4-2、方差"><a href="#4-2、方差" class="headerlink" title="4.2、方差"></a>4.2、方差</h2><p>随机变量取值平均偏离均值的程度</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181052755.png" alt="image-20220420181052755"> </p><h3 id="1、方差的概念和计算"><a href="#1、方差的概念和计算" class="headerlink" title="1、方差的概念和计算"></a>1、方差的概念和计算</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181119180.png" alt="image-20220420181119180"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181127423.png" alt="image-20220420181127423"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181135151.png" alt="image-20220420181135151"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181143591.png" alt="image-20220420181143591"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181153159.png" alt="image-20220420181153159"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181205915.png" alt="image-20220420181205915"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181215599.png" alt=" "> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181225187.png" alt="image-20220420181225187"> </p><h3 id="2、方差的性质"><a href="#2、方差的性质" class="headerlink" title="2、方差的性质"></a>2、方差的性质</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181254931.png" alt="image-20220420181254931"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181302858.png" alt="image-20220420181302858"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181311722.png" alt="image-20220420181311722"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181320240.png" alt="image-20220420181320240"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181328350.png" alt="image-20220420181328350"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181337511.png" alt="image-20220420181337511"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181348111.png" alt="image-20220420181348111"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181357760.png" alt="image-20220420181357760"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181408879.png" alt="image-20220420181408879"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181417672.png" alt="image-20220420181417672"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181428767.png" alt="image-20220420181428767"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181440054.png" alt="image-20220420181440054"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181451950.png" alt="image-20220420181451950"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181459274.png" alt="image-20220420181459274"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181508982.png" alt="image-20220420181508982"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181517431.png" alt="image-20220420181517431"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181526659.png" alt="image-20220420181526659"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181539203.png" alt="image-20220420181539203"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181547858.png" alt="image-20220420181547858"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220420181556778.png" alt="image-20220420181556778"> </p><h2 id="4-3、协方差和相关系数"><a href="#4-3、协方差和相关系数" class="headerlink" title="4.3、协方差和相关系数"></a>4.3、协方差和相关系数</h2><p>描述两个随机变量之间的线性相关程度</p><h3 id="1、协方差"><a href="#1、协方差" class="headerlink" title="1、协方差"></a>1、协方差</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192737084.png" alt="image-20220424192737084"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192747907.png" alt="image-20220424192747907"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192755651.png" alt="image-20220424192755651"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192806864.png" alt="image-20220424192806864"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192817280.png" alt="image-20220424192817280"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192831385.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192850705.png" alt="image-20220424192850705"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192914854.png" alt="image-20220424192914854"> </p><h3 id="2、相关系数"><a href="#2、相关系数" class="headerlink" title="2、相关系数"></a>2、相关系数</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192929154.png" alt="image-20220424192929154"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192939051.png" alt="image-20220424192939051"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192946380.png" alt="image-20220424192946380"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424192956348.png" alt="image-20220424192956348"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193004483.png" alt="image-20220424193004483"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193013847.png" alt="image-20220424193013847"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193113747.png" alt="image-20220424193113747"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193122692.png" alt="image-20220424193122692"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193130909.png" alt="image-20220424193130909"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193139157.png" alt="image-20220424193139157"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193153855.png" alt="image-20220424193153855"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193205600.png" alt="image-20220424193205600"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193217749.png" alt="image-20220424193217749"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193232166.png" alt="image-20220424193232166"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193246822.png" alt="image-20220424193246822"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193258301.png" alt="image-20220424193258301"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193308797.png" alt="image-20220424193308797"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193320701.png" alt="image-20220424193320701"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193331390.png" alt="image-20220424193331390"> </p><h3 id="3、矩和协方差矩阵"><a href="#3、矩和协方差矩阵" class="headerlink" title="3、矩和协方差矩阵"></a>3、矩和协方差矩阵</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193341352.png" alt="image-20220424193341352"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193352792.png" alt="image-20220424193352792"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193404825.png" alt="image-20220424193404825"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193418573.png" alt="image-20220424193418573"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220424193428361.png" alt="image-20220424193428361"> </p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502111228741.png" alt="image-20220502111228741"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502114107175.png" alt="image-20220502114107175"> </p><h2 id="复习-1"><a href="#复习-1" class="headerlink" title="复习"></a>复习<img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202315502.png" alt="image-20220502202315502"></h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202326181.png" alt="image-20220502202326181"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202334947.png" alt="image-20220502202334947"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202345021.png" alt="image-20220502202345021"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202353993.png" alt="image-20220502202353993"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202406906.png" alt="image-20220502202406906"> </p><p>常见分布的期望和方差</p><table><thead><tr><th>分布</th><th></th><th>参数</th><th>数学期望</th><th>方差</th></tr></thead><tbody><tr><td>两点分布</td><td></td><td>0 &lt; p &lt; 1</td><td>p</td><td>p(1-p)</td></tr><tr><td>二项分布</td><td>$X\sim B(n,p)$</td><td>0 &lt; p &lt; 1</td><td>np</td><td>np(1-p)</td></tr><tr><td>泊松分布</td><td>$X\sim P(\lambda)$</td><td>&lambda; &gt; 0</td><td>&lambda;</td><td>&lambda;</td></tr><tr><td>均匀分布</td><td>$X\sim U(n,p)$</td><td>a &lt; b</td><td>$\frac{1}{2}(a+b)$</td><td>$\frac{1}{12}(b-a)^2$</td></tr><tr><td>指数分布</td><td>$X\sim e(\lambda)$</td><td>&lambda; &gt; 0</td><td>$\frac{1}{ \lambda}$</td><td>$\frac{1}{ \lambda^2 }$</td></tr><tr><td>正态分布</td><td>$X \sim N(\mu, \sigma^2)$</td><td>$\mu \in R, \sigma &gt; 0$</td><td>&mu;</td><td>$\sigma^2$</td></tr><tr><td>几何分布</td><td>$X \sim G(p)$</td><td>0 &lt; p &lt; 1</td><td>$\frac{1}{p}$</td><td>$\frac{q}{p^2}$</td></tr></tbody></table><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202431284.png" alt="image-20220502202431284"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202439020.png" alt="image-20220502202439020"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202446647.png" alt="image-20220502202446647"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202453907.png" alt="image-20220502202453907"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202501319.png" alt="image-20220502202501319"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202509095.png" alt="image-20220502202509095"> </p><h1 id="五、大数定律和中心极限定理"><a href="#五、大数定律和中心极限定理" class="headerlink" title="五、大数定律和中心极限定理"></a>五、大数定律和中心极限定理</h1><h2 id="5-1、大数定律"><a href="#5-1、大数定律" class="headerlink" title="5.1、大数定律"></a>5.1、大数定律</h2><p>用来阐述大量随机现象平均结果的稳定性的一系列定理统称为大数定律</p><h3 id="1、切比雪夫不等式"><a href="#1、切比雪夫不等式" class="headerlink" title="1、切比雪夫不等式"></a>1、切比雪夫不等式</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202810982.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202820628.png" alt="image-20220502202820628"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202832336.png" alt="image-20220502202832336"> </p><h3 id="2、大数定律"><a href="#2、大数定律" class="headerlink" title="2、大数定律"></a>2、大数定律</h3><ol><li>依概率收敛</li><li>切比雪夫大数定律</li><li>伯努利大数定律</li></ol><h4 id="①、依概率收敛"><a href="#①、依概率收敛" class="headerlink" title="①、依概率收敛"></a>①、依概率收敛</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202855517.png" alt="image-20220502202855517"></p><p>n越大，不符合条件的概率就越小</p><h4 id="②、切比雪夫大数定律"><a href="#②、切比雪夫大数定律" class="headerlink" title="②、切比雪夫大数定律"></a>②、切比雪夫大数定律</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202904494.png" alt="                 "> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202913729.png" alt="image-20220502202913729"></p><h4 id="③、辛钦大数定律"><a href="#③、辛钦大数定律" class="headerlink" title="③、辛钦大数定律"></a>③、辛钦大数定律</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202924701.png"> </p><h4 id="④、伯努利大数定律"><a href="#④、伯努利大数定律" class="headerlink" title="④、伯努利大数定律"></a>④、伯努利大数定律</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202937642.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220502202951677.png" alt="image-20220502202951677"> </p><h2 id="5-2、中心极限定理"><a href="#5-2、中心极限定理" class="headerlink" title="5.2、中心极限定理"></a>5.2、中心极限定理</h2><h3 id="1、独立同分布的中心极限定理"><a href="#1、独立同分布的中心极限定理" class="headerlink" title="1、独立同分布的中心极限定理"></a>1、独立同分布的中心极限定理</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163420819.png" alt="image-20220503163420819"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163429092.png" alt="image-20220503163429092"></p><p>泊松 分布的期望和方差都是&lambda;</p><p>指数分布的数学期望是$\frac{1}{\lambda}$，方差是$\frac{1}{\lambda^2}$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515114858683.png" alt="image-20220515114858683"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515115902475.png" alt="image-20220515115902475"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515120305841.png" alt="image-20220515120305841"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163509956.png" alt="image-20220503163509956"></p><h3 id="2、棣莫弗-拉普拉斯中心极限定理"><a href="#2、棣莫弗-拉普拉斯中心极限定理" class="headerlink" title="2、棣莫弗-拉普拉斯中心极限定理"></a>2、棣莫弗-拉普拉斯中心极限定理</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163526156.png" alt="image-20220503163526156"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163536611.png">x </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163545666.png" alt="image-20220503163545666"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163601996.png" alt="image-20220503163601996"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220529132146647.png" alt="image-20220529132146647"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516102418214.png" alt="image-20220516102418214"></p><p>中心极限是求和，拉普拉斯是二项分布</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220503163621992.png" alt="image-20220503163621992"> </p><h1 id="六、数理统计的基本知识"><a href="#六、数理统计的基本知识" class="headerlink" title="六、数理统计的基本知识"></a>六、数理统计的基本知识</h1><p>数理统计：以概率论为基础，研究如何有效收集带有随机影响的数据，利用一定的统计模型对数据进行整理分析，以便对考察的问题尽可能做出可靠的推断和预测，为决策提供依据和建议。</p><p>收集数据 统计推断</p><h2 id="6-1、总体、样本与统计量"><a href="#6-1、总体、样本与统计量" class="headerlink" title="6.1、总体、样本与统计量"></a>6.1、总体、样本与统计量</h2><p><strong>总体</strong>：所研究对象的某项数量指标值的全体</p><p><strong>个体</strong>：总体中的每一个元素</p><p>如：研究某批灯泡的使用寿命，则这批灯泡寿命的全体就构成了总体；而每个灯泡的寿命就是个体。</p><p><strong>样本</strong>：从总体中随机抽取的一部分个体</p><p><strong>样本容量</strong>：样本中所含个体的数目</p><p><strong>抽样</strong>：抽取样本的过程</p><p>数量指标值是一个随机变量，故总体是随机变量，可用X和它的分布函数F（x）表示总体。</p><p>$X_1,X_2,…,X_n—-总体X的容量为n的样本$</p><p>$x_1,x_2,…,x_n—–X_1,X_2,…X_n的观察值$</p><h3 id="1、简单随机样本"><a href="#1、简单随机样本" class="headerlink" title="1、简单随机样本"></a>1、简单随机样本</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530141656573.png" alt="image-20220530141656573"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511093028866.png"></p><h3 id="2、数理统计研究问题的方法"><a href="#2、数理统计研究问题的方法" class="headerlink" title="2、数理统计研究问题的方法"></a>2、数理统计研究问题的方法</h3><p>在数理统计中，不是对所研究对象的全体（总体）进行观察，而是抽取其中的部分（样本）进行观察（抽样），并通过部分数据信息对整体信息进行判断。</p><p><strong>由部分推断全体</strong> </p><h3 id="3、统计量"><a href="#3、统计量" class="headerlink" title="3、统计量"></a>3、统计量</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511093048376.png" alt="image-20220511093048376"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511093059982.png" alt="image-20220511093059982"></p><h3 id="4、常用统计量"><a href="#4、常用统计量" class="headerlink" title="4、常用统计量"></a>4、常用统计量</h3><p>设X<sub>1</sub>, X<sub>2</sub>,…,X<sub>n</sub>是来自总体的一个样本，x<sub>1</sub>,x<sub>2</sub>,x<sub>3</sub>，…,x<sub>n</sub>是这一样本的观察值。</p><p>（1）样本均值   $\overline{X}&#x3D;\frac{1}{n}\sum\limits^n_{i&#x3D;1}X_i$<br>        其观察值$\overline{x} &#x3D; \frac{1}{n} \sum\limits^{n}_{i&#x3D;1}x_i$</p><p>（2）样本方差 $S^2 &#x3D; \frac{1}{n-1}\sum\limits^{n}<em>{i&#x3D;1}(X_i - \overline{X})^2 &#x3D; \frac{1}{n-1}(\sum\limits^{n}</em>{i&#x3D;1}X_i^2-n\overline{X}^2)$<br>            其观察值 $s^2 &#x3D; \frac{1}{n-1}\sum\limits^{n}<em>{i&#x3D;1}(x_i - \overline{x})^2 &#x3D; \frac{1}{n-1}(\sum\limits^{n}</em>{i&#x3D;1}x_i^2-n\overline{x}^2)$</p><p>（3）样本标准差$S &#x3D; \sqrt{S^2} &#x3D; \sqrt{ \frac{1}{n-1}\sum\limits^{n}_{i-1}(X_i-\overline{X})^2 }$</p><p>​其观察值 $s &#x3D; \sqrt{s^2} &#x3D; \sqrt{ \frac{1}{n-1}\sum\limits^{n}_{i-1}(x_i-\overline{x})^2 }$</p><p>（4）样本k阶矩 $A_k &#x3D; \frac{1}{n}\sum\limits^{n}<em>{i&#x3D;1}X^{k}</em>{i},k&#x3D;1,2,…$</p><p>​其观察值 $a_k &#x3D; \frac{1}{n}\sum\limits^{n}<em>{i&#x3D;1}x^{k}</em>{i},k&#x3D;1,2,…$</p><p>​1阶矩等于样本均值</p><p>（5）样本k阶中心距$B_{k} &#x3D; \frac{1}{n}\sum\limits{n}<em>{i&#x3D;1}(X</em>{i}-\overline{X})^{k},k&#x3D;2,3…$</p><p>​其观察值$b_{k} &#x3D; \frac{1}{n}\sum\limits{n}<em>{i&#x3D;1}(x</em>{i}-\overline{x})^{k},k&#x3D;2,3…$</p><p>​样本2阶中心距不等于样本方差，一个是n，一个是n-1</p><p>r.v.是随机变量的缩写 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515164909584.png" alt="image-20220515164909584"></p><p>样本是一组随机变量 </p><h2 id="6-2、数理统计中的常用分布"><a href="#6-2、数理统计中的常用分布" class="headerlink" title="6.2、数理统计中的常用分布"></a>6.2、数理统计中的常用分布</h2><h3 id="1、-chi-2-分布"><a href="#1、-chi-2-分布" class="headerlink" title="1、$\chi^2$分布"></a>1、$\chi^2$分布</h3><p>卡方分布</p><h4 id="①、定义"><a href="#①、定义" class="headerlink" title="①、定义"></a>①、定义</h4><p>设X_1,X_2,…X_n相互独立，且均服从N(0,1)则称统计量<br>$$<br>Y &#x3D; X_{1}^{2}+X^{2}<em>{2}+···+X^{2}</em>{n}&#x3D;\sum\limits^{n}<em>{i&#x3D;1}X^{2}</em>{i}<br>$$<br>服从自由度为n的$\chi^{2}$分布，记为$Y \sim \chi^{2}(n)$</p><p>其中自由度n表示$\sum\limits^{n}<em>{i&#x3D;1}X^{2}</em>{i}$中随机变量的个数</p><h4 id="②、概率密度"><a href="#②、概率密度" class="headerlink" title="②、概率密度"></a>②、概率密度</h4><p>知道就行</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530152015606.png" alt="image-20220530152015606"> </p><h4 id="③、性质"><a href="#③、性质" class="headerlink" title="③、性质"></a>③、性质</h4><p>性质1：若$Y\sim\chi^{2}(n)$，则E(Y)&#x3D;n, D(Y)&#x3D;2n</p><p>性质2（可加性）：设$Y_{1}\sim\chi^{2}(n_{1}),Y_{2}\sim\chi^{2}(n_{2})$，并且Y<sub>1</sub>,Y<sub>2</sub>独立，则Y<sub>1</sub>+Y<sub>2</sub>&sim;$\chi^{2}(n_{1}+n_{2})$</p><p>推广：设$Y_{i}\sim\chi^{2}(n_{i})$，并且Y<sub>1</sub>（i&#x3D;1,2,···,m）独立，则$\sum\limits^{m}<em>{i&#x3D;1}Y</em>{i}\sim\chi^{2}(n_{1}+n_{2}+···+n_{m})$</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511143633111.png" alt="image-20220511143633111"> </p><h3 id="2、t分布"><a href="#2、t分布" class="headerlink" title="2、t分布"></a>2、t分布</h3><h4 id="①、定义-1"><a href="#①、定义-1" class="headerlink" title="①、定义"></a>①、定义</h4><p>设$X\sim N(0,1),Y\sim\chi^{2}(n)$，且X，Y独立，则称随机变量$T&#x3D;\displaystyle\frac{X}{\sqrt{\frac{Y}{n}}}$ 服从自由度为n的t分布，记为$T\sim t(n)$。</p><h4 id="②、概率密度-1"><a href="#②、概率密度-1" class="headerlink" title="②、概率密度"></a>②、概率密度</h4><p>概率密度了解</p><p>是偶函数 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530153537685.png" alt="image-20220530153537685"></p><h4 id="③、性质-1"><a href="#③、性质-1" class="headerlink" title="③、性质"></a>③、性质</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530153636761.png">  </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515191348526.png" alt="image-20220515191348526"> </p><h3 id="3、F分布"><a href="#3、F分布" class="headerlink" title="3、F分布"></a>3、F分布</h3><h4 id="①、定义-2"><a href="#①、定义-2" class="headerlink" title="①、定义"></a>①、定义</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530154440444.png" alt="image-20220530154440444"> </p><h4 id="②、概率密度-2"><a href="#②、概率密度-2" class="headerlink" title="②、概率密度"></a>②、概率密度</h4><p>了解就行</p><p> <img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530154507622.png" alt="image-20220530154507622"> </p><h4 id="③、性质-2"><a href="#③、性质-2" class="headerlink" title="③、性质"></a>③、性质</h4><p>若$F\sim F(n_{1},n_{2})$，则$\displaystyle\frac{1}{F} \sim F(n_{2}, n_{1})$ </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511143810813.png" alt="image-20220511143810813"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/../../../Software/Typora/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1.assets/image-20220511143823827.png" alt="image-20220511143823827"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515192117171.png" alt="image-20220515192117171">  </p><h3 id="4、上-alpha-分位线"><a href="#4、上-alpha-分位线" class="headerlink" title="4、上&alpha;分位线"></a>4、上&alpha;分位线</h3><h4 id="①、标准正态分布的上-alpha-分位数"><a href="#①、标准正态分布的上-alpha-分位数" class="headerlink" title="①、标准正态分布的上&alpha;分位数"></a>①、标准正态分布的上&alpha;分位数</h4><p>课本320面</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530160310533.png" alt="image-20220530160310533"> </p><h4 id="②、t分布的上-alpha-分位数t-alpha-n"><a href="#②、t分布的上-alpha-分位数t-alpha-n" class="headerlink" title="②、t分布的上&alpha;分位数t&alpha;(n)"></a>②、t分布的上&alpha;分位数t<sub>&alpha;</sub>(n)</h4><p> 322面</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530160602838.png" alt="image-20220530160602838"> </p><h4 id="③、-chi-2-分布的上-alpha-分位数-chi-2-alpha-n"><a href="#③、-chi-2-分布的上-alpha-分位数-chi-2-alpha-n" class="headerlink" title="③、$\chi^{2}$分布的上&alpha;分位数$\chi^{2}_{\alpha}(n)$"></a>③、$\chi^{2}$分布的上&alpha;分位数$\chi^{2}_{\alpha}(n)$</h4><p>321面 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530160819605.png" alt="image-20220530160819605"> </p><h4 id="④、F分布的上-alpha-分位数-F-alpha-n-1-n-2"><a href="#④、F分布的上-alpha-分位数-F-alpha-n-1-n-2" class="headerlink" title="④、F分布的上&alpha;分位数$F_{\alpha}(n_{1},n_{2})$"></a>④、F分布的上&alpha;分位数$F_{\alpha}(n_{1},n_{2})$</h4><p>323面课本，多张表&alpha; </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530161012082.png" alt="image-20220530161012082"></p><h2 id="6-3、定理"><a href="#6-3、定理" class="headerlink" title="6.3、定理"></a>6.3、定理</h2><h3 id="1、单个正态总体统计量的分布"><a href="#1、单个正态总体统计量的分布" class="headerlink" title="1、单个正态总体统计量的分布"></a>1、单个正态总体统计量的分布</h3><p>定理1</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515201504944.png" alt="image-20220515201504944"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511144029513.png" alt="image-20220511144029513"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511144043049.png" alt="image-20220511144043049"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511144053155.png" alt="image-20220511144053155"></p><p>定理2 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515203634682.png" alt="image-20220515203634682"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515203046280.png" alt="image-20220515203046280"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515204023853.png" alt="image-20220515204023853"><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515204611011.png" alt="image-20220515204611011"></p><h3 id="2、两个正态总体统计量的分布"><a href="#2、两个正态总体统计量的分布" class="headerlink" title="2、两个正态总体统计量的分布"></a>2、两个正态总体统计量的分布</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220530174753504.png" alt="image-20220530174753504"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515204917259.png" alt="image-20220515204917259"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515205422243.png" alt="image-20220515205422243"></p><p>第3个了解，知道 </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515205646724.png" alt="image-20220515205646724"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511144229621.png" alt="image-20220511144229621"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220515205802382.png" alt="image-20220515205802382"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220511095231962.png" alt="image-20220511095231962"> </p><p>16.C</p><p>只有随机变量相互独立的时候，正态分布和卡方分布才具有可加性</p><p>F分布的两个卡方分布需要相互独立</p><h1 id="七、参数估计"><a href="#七、参数估计" class="headerlink" title="七、参数估计"></a>七、参数估计</h1><p>参数估计就是利用样本来估计总体中的未知参数。</p><h2 id="7-1、点估计"><a href="#7-1、点估计" class="headerlink" title="7.1、点估计"></a>7.1、点估计</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130822505.png"></p><h3 id="1、矩估计"><a href="#1、矩估计" class="headerlink" title="1、矩估计"></a>1、矩估计</h3><p>矩估计的基本思想：用样本矩代替总体矩</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130056111.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130122789.png" alt="image-20220516130122789"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130906827.png" alt="image-20220516130906827"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516131122677.png" alt="image-20220516131122677"></p><p>例子</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516131013241.png" alt="image-20220516131013241"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516131052313.png" alt="image-20220516131052313"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130032634.png" alt="image-20220516130032634"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130043473.png" alt="image-20220516130043473"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130136357.png" alt="image-20220516130136357"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130147025.png" alt="image-20220516130147025"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130156551.png" alt="image-20220516130156551"></p><p>6.4、</p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516131219863.png" alt="image-20220516131219863"></p><h3 id="2、最大似然估计"><a href="#2、最大似然估计" class="headerlink" title="2、最大似然估计"></a>2、最大似然估计</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130226314.png" alt="image-20220516130226314"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130235240.png" alt="image-20220516130235240"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130242698.png"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130254094.png" alt="image-20220516130254094"> </p><p> <img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220603091038924.png" alt="image-20220603091038924"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130315916.png" alt="image-20220516130315916"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220518112650330.png" alt="image-20220518112650330"><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220518084757239.png" alt="image-20220518084757239"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130333694.png" alt="image-20220516130333694"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130342620.png" alt="image-20220516130342620"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130350996.png" alt="image-20220516130350996"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130359094.png" alt="image-20220516130359094"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130411539.png" alt="image-20220516130411539"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130421211.png" alt="image-20220516130421211"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130431646.png" alt="image-20220516130431646"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130441549.png" alt="image-20220516130441549"> </p><h2 id="7-2、点估计的评价标准"><a href="#7-2、点估计的评价标准" class="headerlink" title="7.2、点估计的评价标准"></a>7.2、点估计的评价标准</h2><h3 id="1、无偏性"><a href="#1、无偏性" class="headerlink" title="1、无偏性"></a>1、无偏性</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130538930.png" alt="image-20220516130538930"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130548437.png" alt="image-20220516130548437"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130557561.png" alt="image-20220516130557561"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130606945.png" alt="image-20220516130606945"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130615095.png" alt="image-20220516130615095"> </p><h3 id="2、有效性"><a href="#2、有效性" class="headerlink" title="2、有效性"></a>2、有效性</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130624678.png" alt="image-20220516130624678"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130633449.png" alt="image-20220516130633449"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130645276.png" alt="image-20220516130645276"> </p><p>系数为1才能保证有效 </p><h3 id="3、一致性"><a href="#3、一致性" class="headerlink" title="3、一致性"></a>3、一致性</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130657082.png" alt="image-20220516130657082"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604082823858.png" alt="image-20220604082823858">  </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220516130706470.png" alt="image-20220516130706470"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604082723047.png" alt="image-20220604082723047"> </p><h2 id="7-3、区间估计"><a href="#7-3、区间估计" class="headerlink" title="7.3、区间估计"></a>7.3、区间估计</h2><h3 id="1、区间估计的概念"><a href="#1、区间估计的概念" class="headerlink" title="1、区间估计的概念"></a>1、区间估计的概念</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092635784.png" alt="image-20220525092635784"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092649086.png" alt="image-20220525092649086"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092703251.png" alt="image-20220525092703251"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092718199.png" alt="image-20220525092718199"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604090546402.png" alt="image-20220604090546402"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604090521560.png" alt="image-20220604090521560"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092754953.png" alt="image-20220525092754953"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092804290.png" alt="image-20220525092804290"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092812263.png" alt="image-20220525092812263"></p><h3 id="2、单个正态总体均值和方差的区间估计"><a href="#2、单个正态总体均值和方差的区间估计" class="headerlink" title="2、单个正态总体均值和方差的区间估计"></a>2、单个正态总体均值和方差的区间估计</h3><h4 id="①、正态总体均值"><a href="#①、正态总体均值" class="headerlink" title="①、正态总体均值"></a>①、正态总体均值</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092823618.png" alt="image-20220525092823618"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604091302949.png" alt="image-20220604091302949"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092850878.png" alt="image-20220525092850878"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604092649048.png" alt="image-20220604092649048"></p><h4 id="②、正态总体方差"><a href="#②、正态总体方差" class="headerlink" title="②、正态总体方差"></a>②、正态总体方差</h4><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092901741.png" alt="image-20220525092901741"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092914385.png" alt="image-20220525092914385"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092925341.png" alt="image-20220525092925341"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092935909.png" alt="image-20220525092935909"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092946119.png" alt="image-20220525092946119"></p><h3 id="3、两个正态总体均值差和方差比的区间估计"><a href="#3、两个正态总体均值差和方差比的区间估计" class="headerlink" title="3、两个正态总体均值差和方差比的区间估计"></a>3、两个正态总体均值差和方差比的区间估计</h3><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525092955257.png" alt="image-20220525092955257"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093005254.png" alt="image-20220525093005254"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093014912.png" alt="image-20220525093014912"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093042441.png" alt="image-20220525093042441"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093055899.png" alt="image-20220525093055899"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093106204.png" alt="image-20220525093106204"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604095557842.png" alt="image-20220604095557842"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604095635453.png" alt="image-20220604095635453"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604095916665.png" alt="image-20220604095916665"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604102251067.png" alt="image-20220604102251067"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604102610763.png" alt="image-20220604102610763"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220604102757130.png" alt="image-20220604102757130"> </p><h1 id="八、假设检验"><a href="#八、假设检验" class="headerlink" title="八、假设检验"></a>八、假设检验</h1><p>假设检验问题：对总体X的分布参数或概率分布作某“假设”，然后根据抽样得到的样本观测值，运用梳理统计的分析方法，检验这种“假设”是否正确，从而决定接受或拒绝“假设”。</p><h2 id="8-1、假设检验的思想和实验"><a href="#8-1、假设检验的思想和实验" class="headerlink" title="8.1、假设检验的思想和实验"></a>8.1、假设检验的思想和实验</h2><p>Fisher女士品茶实验</p><p>1.Fisher的实验</p><p>请人按照不同顺序调配奶茶，让该女士品尝，通过答对比例以确定该女士是否真能分辨奶茶做法。</p><p>2.推断过程</p><p>（1）H<sub>0</sub>：女士不具有这个能力</p><p>（2）连续才对8杯的概率p,每次是二分之一</p><p>（3）推断结论：不是碰巧，她真有这个能力</p><p>小概率原理——小概率事件在一次试验中几乎不可能发生</p><h2 id="8-2、基本原理"><a href="#8-2、基本原理" class="headerlink" title="8.2、基本原理"></a>8.2、基本原理</h2><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093301348.png" alt="image-20220525093301348"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093311352.png" alt="image-20220525093311352"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093320206.png" alt="image-20220525093320206"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093331204.png" alt="image-20220525093331204"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093339584.png" alt="image-20220525093339584"></p><h2 id="8-3、两类错误"><a href="#8-3、两类错误" class="headerlink" title="8.3、两类错误"></a>8.3、两类错误</h2><p>第一类错误：H<sub>0</sub>为真，却错误地拒绝了H<sub>0</sub>——弃真错误<br>                        犯第一类错误的概率为&alpha;</p><p>第二类错误：H<sub>0</sub>为假，却错误地接受了H<sub>0</sub>——纳伪错误<br>                        犯第二类错误的概率通常记为&beta;  </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093358866.png" alt="image-20220525093358866"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093408081.png" alt="image-20220525093408081"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093419567.png" alt="image-20220525093419567"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093429048.png" alt="image-20220525093429048"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093438929.png" alt="image-20220525093438929"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220528150353902.png" alt="image-20220528150353902"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220528150822578.png" alt="image-20220528150822578"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220528152714050.png" alt="image-20220528152714050"></p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220525093523976.png" alt="image-20220525093523976"> </p><p><img src="/2024/07/07/Math/ProbabilityAndStatistics/image-20220528155221067.png" alt="image-20220528155221067"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2024/07/07/Java/Java/"/>
      <url>/2024/07/07/Java/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="0、-人机交互"><a href="#0、-人机交互" class="headerlink" title="0、 人机交互"></a>0、 人机交互</h2><h3 id="0-1-什么是cmd？"><a href="#0-1-什么是cmd？" class="headerlink" title="0.1 什么是cmd？"></a>0.1 什么是cmd？</h3><p>就是在windows操作系统中，利用命令行的方式去操作计算机。</p><p>我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。</p><h3 id="0-2-如何打开CMD窗口？"><a href="#0-2-如何打开CMD窗口？" class="headerlink" title="0.2 如何打开CMD窗口？"></a>0.2 如何打开CMD窗口？</h3><ol><li><p>按下快捷键：win + R。</p><pre><code>此时会出现运行窗口。</code></pre></li><li><p>在运行窗口中输出cmd</p></li><li><p>输出回车。</p></li></ol><p>解惑：</p><p>​cmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名）</p><p> <img src="/2024/07/07/Java/Java/cmd.png" alt="image-20210923091350952"></p><h3 id="0-3-常用CMD命令"><a href="#0-3-常用CMD命令" class="headerlink" title="0.3 常用CMD命令"></a>0.3 常用CMD命令</h3><p> 扩展一个小点：</p><p>​在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。</p><p>​而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。</p><p>常见的CMD命令如下：</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2...</td><td>进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h3 id="0-4-CMD练习"><a href="#0-4-CMD练习" class="headerlink" title="0.4 CMD练习"></a>0.4 CMD练习</h3><p>需求：</p><p>  利用cmd命令打开自己电脑上的QQ。</p><p>完成步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,确定自己电脑上的QQ安装在哪里</span><br><span class="line"><span class="number">2</span>,启动cmd</span><br><span class="line"><span class="number">3</span>,进入到启动程序QQ.exe所在的路径。</span><br><span class="line"><span class="number">4</span>,输出qq.exe加回车表示启动qq。</span><br><span class="line">    </span><br><span class="line">C:\Users\Lenovo&gt;D:</span><br><span class="line"></span><br><span class="line">D:\&gt;cd Software\QQ\bin</span><br><span class="line"></span><br><span class="line">D:\Software\QQ\Bin&gt;QQScLauncher.exe</span><br><span class="line"></span><br><span class="line">D:\Software\QQ\Bin&gt;</span><br></pre></td></tr></table></figure><p>解惑：</p><p>​在windows操作系统当中，文件名或者文件夹名是忽略大小写的。</p><h3 id="0-5-写一个java文件"><a href="#0-5-写一个java文件" class="headerlink" title="0.5 写一个java文件"></a>0.5 写一个java文件</h3><p>1.创建一个Java Project</p><p><img src="/2024/07/07/Java/Java/image-20220807170922740.png" alt="image-20220807170922740"> </p><p>2.起一个名字，点击finish</p><p><img src="/2024/07/07/Java/Java/image-20220807171033349.png" alt="image-20220807171033349"> </p><p>3.在src文件夹下，建一个包</p><p><img src="/2024/07/07/Java/Java/image-20220807171327956.png" alt="image-20220807171327956"> </p><p>4.在这个包中，新建文件class，首字母最好大写</p><p><img src="/2024/07/07/Java/Java/image-20220807171414933.png" alt="image-20220807171414933"> </p><p><img src="/2024/07/07/Java/Java/image-20220807171539338.png" alt="image-20220807171539338"> </p><h3 id="0-6-快捷键"><a href="#0-6-快捷键" class="headerlink" title="0.6 快捷键"></a>0.6 快捷键</h3><p>Alt+&#x2F;可以显示没写完的代码，补全代码</p><h3 id="0-7-常用语句"><a href="#0-7-常用语句" class="headerlink" title="0.7 常用语句"></a>0.7 常用语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//读输入</span></span><br><span class="line">System.out.println(in.nextLine());<span class="comment">//打印输入的一行</span></span><br><span class="line">price = in.nextInt();<span class="comment">//读整数</span></span><br><span class="line">in.next();<span class="comment">//读入一个单词，单词的标志是空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开方</span></span><br><span class="line">Math.sqrt(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Character类</span></span><br><span class="line">    Character.isDigit(<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/Java/Java/image-20220808164531702.png" alt="image-20220808164531702"></p><h3 id="0-8-教程"><a href="#0-8-教程" class="headerlink" title="0.8 教程"></a>0.8 教程</h3><p><a href="https://blog.csdn.net/weixin_50455331/article/details/126324741">eclipse下载与安装（汉化教程）超详细_麟星爵的博客-CSDN博客_eclipse下载</a></p><p><a href="https://blog.csdn.net/lxt_Lucia/article/details/105439952">eclipse 史上最舒服(且护眼) 字体+大小+配色 教程（强推！！）_lxt_Lucia的博客-CSDN博客_eclipse哪个字体看着舒服</a></p><p><a href="https://blog.csdn.net/weixin_42753193/article/details/122425501">阿里巴巴Java开发文档2020版学习-代码格式_嘟嘟的程序员铲屎官的博客-CSDN博客_阿里巴巴开发文档</a></p><h3 id="0-8-IDEA"><a href="#0-8-IDEA" class="headerlink" title="0.8 IDEA"></a>0.8 IDEA</h3><h4 id="8-1-IDEA概述"><a href="#8-1-IDEA概述" class="headerlink" title="8.1 IDEA概述"></a>8.1 IDEA概述</h4><p>​IDEA全称IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。</p><p><strong>集成环境：</strong></p><p>​把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p><h4 id="8-2-IDEA的下载和安装"><a href="#8-2-IDEA的下载和安装" class="headerlink" title="8.2 IDEA的下载和安装"></a>8.2 IDEA的下载和安装</h4><h5 id="8-2-1-下载"><a href="#8-2-1-下载" class="headerlink" title="8.2.1 下载"></a>8.2.1 下载</h5><p>​可以到官方网站自行下载，网址为：<a href="https://www.jetbrains.com/idea">https://www.jetbrains.com/idea</a></p><p>​今天的资料中，对应的安装包也提高给大家了。</p><h5 id="8-2-2-安装"><a href="#8-2-2-安装" class="headerlink" title="8.2.2 安装"></a>8.2.2 安装</h5><ul><li>到资料文件夹中，双击安装包。</li><li>点击next，准备安装</li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%851.png" alt="计算机发展"></p><ul><li><p>点击Browse修改安装路径。</p><p>修改完毕点击next</p></li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%852.png" alt="计算机发展"></p><ul><li><p>勾选64-bit launcher。表示在桌面新建一个64位的快捷方式。</p><p>其他的不要勾选。</p><p>点击next。</p></li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%854.png" alt="计算机发展"></p><ul><li>点击Install，准备安装。</li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%855.png" alt="计算机发展"></p><ul><li><p>等进度条读取完毕之后，会有最终界面提示。</p><p>点击finish即可。</p></li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%856.png" alt="计算机发展"></p><ul><li><p>第一次启动会询问，是否导入一些设置。</p><p>选择第二个不导入，保持默认设置，再点击OK。</p></li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%857.png" alt="计算机发展"></p><ul><li><p>选择背景主题</p><p>左边是黑色背景。右边是白色背景。</p><p>这个可以根据自己的喜好来选择。</p><p>选择完毕点击右下角的next</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/idea%E5%AE%89%E8%A3%858.png" alt="计算机发展"></p><ul><li><p>在本界面让我们购买idea。</p><p>因为我们是学习阶段，所以可以使用免费使用30天。</p><p>点击第一排第二个。Evaluate for free</p></li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%859.png" alt="计算机发展"></p><ul><li>点击蓝色的Evaluate，就可以开始免费试用30天了。</li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%8510.png" alt="计算机发展"></p><ul><li><p>当看到这个界面，就表示idea已经成功安装完毕</p><p>可以点击右上角关闭。</p></li></ul><p><img src="/2024/07/07/Java/Java/idea%E5%AE%89%E8%A3%8511.png" alt="计算机发展"></p><h4 id="8-3-IDEA中层级结构介绍"><a href="#8-3-IDEA中层级结构介绍" class="headerlink" title="8.3 IDEA中层级结构介绍"></a>8.3 IDEA中层级结构介绍</h4><h5 id="8-3-1-结构分类"><a href="#8-3-1-结构分类" class="headerlink" title="8.3.1 结构分类"></a>8.3.1 结构分类</h5><ul><li>project（项目、工程）</li><li>module（模块）</li><li>package（包）</li><li>class（类）</li></ul><h5 id="8-3-2-结构介绍"><a href="#8-3-2-结构介绍" class="headerlink" title="8.3.2 结构介绍"></a>8.3.2 结构介绍</h5><p>​为了让大家更好的吸收，package这一层级，我们后面再学习，先学习最基础的project、module、class。</p><h6 id="project（项目、工程）"><a href="#project（项目、工程）" class="headerlink" title="project（项目、工程）"></a>project（项目、工程）</h6><p>​淘宝、京东、黑马程序员网站都属于一个个项目，IDEA中就是一个个的Project。</p><h6 id="module（模块）"><a href="#module（模块）" class="headerlink" title="module（模块）"></a>module（模块）</h6><p>​在一个项目中，可以存放多个模块，不同的模块可以存放项目中不同的业务功能代码。在黑马程序员的官方网站中，至少包含了以下模块：</p><ul><li>论坛模块</li><li>报名、咨询模块</li></ul><p>为了更好的管理代码，我们会把代码分别放在两个模块中存放。</p><h6 id="package（包）"><a href="#package（包）" class="headerlink" title="package（包）"></a>package（包）</h6><p>​一个模块中又有很多的业务，以黑马程序员官方网站的论坛模块为例，至少包含了以下不同的业务。</p><ul><li>发帖</li><li>评论</li></ul><p>为了把这些业务区分的更加清楚，就会用包来管理这些不同的业务。</p><h6 id="class（类）"><a href="#class（类）" class="headerlink" title="class（类）"></a>class（类）</h6><p>​就是真正写代码的地方。</p><h5 id="8-3-3-小结"><a href="#8-3-3-小结" class="headerlink" title="8.3.3 小结"></a>8.3.3 小结</h5><ul><li><p>层级关系</p><p>​project - module - package - class</p></li><li><p>包含数量</p><p>​project中可以创建多个module<br>​module中可以创建多个package<br>​package中可以创建多个class</p><p>​这些结构的划分，是为了方便管理类文件的。</p></li></ul><h4 id="8-4-IDEA中的第一个代码"><a href="#8-4-IDEA中的第一个代码" class="headerlink" title="8.4 IDEA中的第一个代码"></a>8.4 IDEA中的第一个代码</h4><h5 id="8-4-1-操作步骤"><a href="#8-4-1-操作步骤" class="headerlink" title="8.4.1 操作步骤"></a>8.4.1 操作步骤</h5><ul><li>创建Project 项目</li><li>创建Module 模块</li><li>创建class   类</li><li>在类中编写代码</li><li>完成编译运行</li></ul><h5 id="8-4-2-分步图解"><a href="#8-4-2-分步图解" class="headerlink" title="8.4.2 分步图解"></a>8.4.2 分步图解</h5><ul><li><p>双击启动图标</p><p><img src="/2024/07/07/Java/Java/idea%E4%BD%BF%E7%94%A81.png" alt="计算机发展"></p></li><li><p>首先要新建一个项目</p><p>点击creat new project</p><p><img src="/2024/07/07/Java/Java/idea1.png" alt="计算机发展"></p></li><li><p>我们要从0开始写代码，所以新建一个空的什么都没有的项目。</p><p>点击左下方的Empty Project</p><p>再点击右下角的next</p></li></ul><p><img src="/2024/07/07/Java/Java/idea2.png" alt="计算机发展"></p><ul><li><p>输入项目的名称</p><p>输入项目的存放路径</p></li></ul><p><img src="/2024/07/07/Java/Java/idea3.png" alt="计算机发展"></p><ul><li>点击ok。idea会帮助我们在本地创建一个项目文件夹</li></ul><p><img src="/2024/07/07/Java/Java/idea4.png" alt="计算机发展"></p><ul><li>点击Module，准备新建一个模块</li></ul><p><img src="/2024/07/07/Java/Java/idea5.png" alt="计算机发展"></p><ul><li><p>点击+</p><p>再点击New Module</p></li></ul><p><img src="/2024/07/07/Java/Java/idea6.png" alt="计算机发展"></p><ul><li><p>我们要编写Java代码，所以要新建一个Java模块。</p><p>点击Java</p><p>再点击右下角的next</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/idea7.png" alt="计算机发展"></p><ul><li><p>输入模块的名称</p><p>再点击右下角的Next</p></li></ul><p><img src="/2024/07/07/Java/Java/idea8.png" alt="计算机发展"></p><ul><li><p>成功新建一个模块之后，中间就会出现刚刚新建的模块</p><p>点击右下角的OK</p></li></ul><p><img src="/2024/07/07/Java/Java/idea9.png" alt="计算机发展"></p><ul><li><p>回到主界面</p><p>展开刚刚新建的模块</p><p>右键点击src，选择New，选择Java Class</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/idea10.png" alt="计算机发展"></p><ul><li><p>输入类名</p><p>再按回车</p></li></ul><p><img src="/2024/07/07/Java/Java/idea11.png" alt="计算机发展"></p><ul><li><p>由于字体比较小</p><p>所以，我们要设置一下字体。</p><p>点击File，选择Setting。</p></li></ul><p><img src="/2024/07/07/Java/Java/idea12.png" alt="计算机发展"></p><ul><li><p>搜索一下font</p><p>在右边可以输入Size的数值来调节代码字体的大小。</p><p>设置完毕后点击右下角的OK</p></li></ul><p><img src="/2024/07/07/Java/Java/idea13.png" alt="计算机发展"></p><ul><li>编写代码</li></ul><p><img src="/2024/07/07/Java/Java/idea14.png" alt="计算机发展"></p><ul><li><p>运行代码</p><p>右键空白处，点击Run</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/idea15.png" alt="计算机发展"></p><ul><li><p>最下面会弹出控制台。</p><p>所有输出语句中的内容，都会在控制台上展示。</p></li></ul><p><img src="/2024/07/07/Java/Java/idea16.png" alt="计算机发展"></p><h4 id="8-5-IDEA中类的相关操作"><a href="#8-5-IDEA中类的相关操作" class="headerlink" title="8.5 IDEA中类的相关操作"></a>8.5 IDEA中类的相关操作</h4><h5 id="8-5-1-类的相关操作"><a href="#8-5-1-类的相关操作" class="headerlink" title="8.5.1 类的相关操作"></a>8.5.1 类的相关操作</h5><ul><li>新建类文件</li><li>删除类文件</li><li>修改类文件</li></ul><h5 id="8-5-2-新建类文件"><a href="#8-5-2-新建类文件" class="headerlink" title="8.5.2 新建类文件"></a>8.5.2 新建类文件</h5><ul><li><p>所有的Java代码都会写在src文件夹当中。</p><p>所以，右键点击src，选择new，点击Java Class</p><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E7%B1%BB1.png" alt="计算机发展"></p></li><li><p>输入类名，再按回车</p><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E7%B1%BB2.png" alt="计算机发展"></p></li><li><p>新建完毕</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E7%B1%BB3.png" alt="计算机发展"></p><h5 id="8-5-3-修改类名"><a href="#8-5-3-修改类名" class="headerlink" title="8.5.3 修改类名"></a>8.5.3 修改类名</h5><ul><li><p>右键点击想要修改的文件</p><p>点击Refactor</p><p>再点击Rename</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D1.png" alt="计算机发展"></p><ul><li><p>输入想要修改的名字</p><p>输入完毕点击下面的Refactor</p></li></ul><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D2.png" alt="计算机发展"></p><ul><li><p>文件名和类名均已修改成功</p><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%90%8D3.png" alt="计算机发展"></p></li></ul><h5 id="8-5-4-删除类文件"><a href="#8-5-4-删除类文件" class="headerlink" title="8.5.4 删除类文件"></a>8.5.4 删除类文件</h5><ul><li><p>想要删除哪个文件，就右键点击该文件</p><p>选择Delete即可</p></li></ul><p><img src="/2024/07/07/Java/Java/%E5%88%A0%E9%99%A4%E7%B1%BB%E6%96%87%E4%BB%B61.png" alt="计算机发展"></p><ul><li>在弹出的界面中点击OK，确定删除</li></ul><p><img src="/2024/07/07/Java/Java/%E5%88%A0%E9%99%A4%E7%B1%BB%E6%96%87%E4%BB%B62.png" alt="计算机发展"></p><blockquote><p>小贴士：</p><p>此时删除是不走回收站的，直接从硬盘中删掉了。</p></blockquote><h4 id="8-6-IDEA中模块的相关操作"><a href="#8-6-IDEA中模块的相关操作" class="headerlink" title="8.6 IDEA中模块的相关操作"></a>8.6 IDEA中模块的相关操作</h4><h5 id="8-6-1-模块的相关操作"><a href="#8-6-1-模块的相关操作" class="headerlink" title="8.6.1 模块的相关操作"></a>8.6.1 模块的相关操作</h5><ul><li>新建模块</li><li>删除模块</li><li>修改模块</li><li>导入模块</li></ul><h5 id="8-6-2-新建模块"><a href="#8-6-2-新建模块" class="headerlink" title="8.6.2 新建模块"></a>8.6.2 新建模块</h5><ul><li><h5 id="点击File，选择Project-Structure"><a href="#点击File，选择Project-Structure" class="headerlink" title="点击File，选择Project Structure"></a>点击File，选择Project Structure</h5></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li>选择Module</li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li><p>点击+</p><p>选择New Module</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><ul><li><p>要创建一个Java模块，所以选择第一个Java</p><p>点击右下角的Next</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%974.png" alt="计算机发展"></p><ul><li><p>输入模块的名称</p><p>点击右下角的Finish</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%975.png" alt="计算机发展"></p><ul><li><p>成功新建完毕之后，在中间空白区域就出现了刚刚新建的模块</p><p>点击右下角的OK</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%976.png" alt="计算机发展"></p><ul><li>在主界面中，也会出现刚刚新建的模块</li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%977.png" alt="计算机发展"></p><h5 id="8-6-3-删除模块"><a href="#8-6-3-删除模块" class="headerlink" title="8.6.3 删除模块"></a>8.6.3 删除模块</h5><ul><li><p>右键点击模块</p><p>选择Remove Module</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li>选择Remove，表示确定删除</li></ul><p><img src="/2024/07/07/Java/Java/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li>此时发现，在IDEA列表页面，删除的模块已经不在了。</li></ul><p><img src="/2024/07/07/Java/Java/%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><blockquote><p>小贴士：</p><p>此时删除仅仅是从IDEA列表中的删除，在本地硬盘中还是存在的。</p></blockquote><h5 id="8-6-4-修改模块"><a href="#8-6-4-修改模块" class="headerlink" title="8.6.4 修改模块"></a>8.6.4 修改模块</h5><ul><li><p>右键点击模块名</p><p>选择Refactor</p><p>再选择Rename</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D1.png" alt="计算机发展"></p><ul><li><p>选择第三个修改模块名和本地文件夹名</p><p>点击OK</p></li></ul><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D3.png" alt="计算机发展"></p><ul><li><p>输入要修改的新的模块名</p><p>输入完毕点击Refactor</p></li></ul><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D4.png" alt="计算机发展"></p><ul><li>回到主界面，就发现模块名和文件夹名都已经修改完毕</li></ul><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E6%A8%A1%E5%9D%97%E5%90%8D5.png" alt="计算机发展"></p><h5 id="8-6-5-导入模块"><a href="#8-6-5-导入模块" class="headerlink" title="8.6.5 导入模块"></a>8.6.5 导入模块</h5><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%971.png" alt="计算机发展"></p><ul><li><p>选择Module</p><p>点击+</p><p>选择Import Module</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%972.png" alt="计算机发展"></p><ul><li><p>从本地硬盘中选择要导入的模块</p><p>再点击OK</p></li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%973.png" alt="计算机发展"></p><ul><li>不断点击Next</li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%974.png" alt="计算机发展"></p><ul><li><p>如果中间出现提示框，则点击Overwrite</p><p>然后继续点击右下角的Next</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%975.png" alt="计算机发展"></p><ul><li>一直点到finish为止</li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%976.png" alt="计算机发展"></p><ul><li>成功导入后，在中间位置就会出现导入的模块信息</li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%977.png" alt="计算机发展"></p><ul><li>在主界面中也会出现导入的模块信息</li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%978.png" alt="计算机发展"></p><ul><li><p>展开模块点击模块中的Java文件，会发现代码报错。</p><p>是因为导入模块跟JDK没有关联导致。</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%979.png" alt="计算机发展"></p><ul><li><p>可以点击右上角的Setup SDK</p><p>再选择已经安装的JDK版本即可</p></li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9710.png" alt="计算机发展"></p><ul><li>导入完毕之后，代码就恢复正常不会报错了</li></ul><p><img src="/2024/07/07/Java/Java/%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%9711.png" alt="计算机发展"></p><h5 id="8-7-IDEA中项目的相关操作"><a href="#8-7-IDEA中项目的相关操作" class="headerlink" title="8.7 IDEA中项目的相关操作"></a>8.7 IDEA中项目的相关操作</h5><h5 id="8-7-1-项目的相关操作"><a href="#8-7-1-项目的相关操作" class="headerlink" title="8.7.1 项目的相关操作"></a>8.7.1 项目的相关操作</h5><ul><li>关闭项目</li><li>打开项目</li><li>修改项目</li><li>新建项目</li></ul><h5 id="8-7-2-关闭项目"><a href="#8-7-2-关闭项目" class="headerlink" title="8.7.2 关闭项目"></a>8.7.2 关闭项目</h5><ul><li>点击File，选择Close Project即可</li></ul><p><img src="/2024/07/07/Java/Java/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>刚刚操作的项目就已经关闭了</p><p>左侧是项目列表，如果要再次打开该项目，直接点击即可。</p><p>右侧有create new project，可以再建一个新的项目</p></li></ul><p><img src="/2024/07/07/Java/Java/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li><p>鼠标放在项目上，后面会出现一个叉。</p><p>如果点击了这里的叉，会在IDEA的列表中删除。不会删除本地硬盘上的项目。</p></li></ul><p><img src="/2024/07/07/Java/Java/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><h5 id="8-7-3-打开项目"><a href="#8-7-3-打开项目" class="headerlink" title="8.7.3 打开项目"></a>8.7.3 打开项目</h5><ul><li><p>在本界面还可以打开本地已经存在的项目</p><p>点击Open or Import</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>选择要打开的项目</p><p>点击OK</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li>项目就被打开了。</li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><h5 id="8-7-4-修改项目"><a href="#8-7-4-修改项目" class="headerlink" title="8.7.4 修改项目"></a>8.7.4 修改项目</h5><ul><li>点击File，选择Project Structure</li></ul><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>在这个界面，默认是Module</p><p>所以，要先点击Project</p><p>在右侧页面中，输入新的项目名称</p><p>修改JDK版本和编译版本都变成JDK14</p><p>再点击OK</p></li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li>此时发现，项目名称已经修改完毕</li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li>但是本地文件夹的名字还没有修改</li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE4.png" alt="计算机发展"></p><ul><li>需要先关闭当前项目</li></ul><p><img src="/2024/07/07/Java/Java/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li>点击项目后面的叉，从列表中移除项目</li></ul><p><img src="/2024/07/07/Java/Java/%E5%85%B3%E9%97%AD%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li>到本地硬盘中手动修改文件夹的名称</li></ul><p> <img src="/2024/07/07/Java/Java/JavaSE%E6%9C%80%E6%96%B0%E7%89%88/day02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E7%AC%94%E8%AE%B0/img/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE5.png" alt="计算机发展"></p><ul><li>点击Open or Import重新打开项目</li></ul><p><img src="/2024/07/07/Java/Java/%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li><p>选择修改之后的项目</p><p>点击OK</p></li></ul><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE6.png" alt="计算机发展"></p><ul><li>此时会发现，项目名称和本地硬盘文件夹的名称都已经修改完毕了</li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE7.png" alt="计算机发展"></p><h5 id="8-7-5-新建项目"><a href="#8-7-5-新建项目" class="headerlink" title="8.7.5 新建项目"></a>8.7.5 新建项目</h5><ul><li><p>点击File</p><p>选择New</p><p>点击Project</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE1.png" alt="计算机发展"></p><ul><li>同样还是创建一个什么都没有的空项目</li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE2.png" alt="计算机发展"></p><ul><li><p>输入项目的名称</p><p>点击右下角的finish</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE3.png" alt="计算机发展"></p><ul><li><p>IDEA循环是否需要帮我们在本地创建一个新的文件夹</p><p>点击OK</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE4.png" alt="计算机发展"></p><ul><li><p>询问是在本窗口打开还是在一个新的窗口打开。</p><p>可以点击New Window，在一个新的窗口打开。</p></li></ul><p><img src="/2024/07/07/Java/Java/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE5.png" alt="计算机发展"></p><ul><li>此时就出现了两个窗口，在一个新的窗口打开了新的项目</li></ul><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE6.png" alt="计算机发展"></p><h3 id="8-7-配置"><a href="#8-7-配置" class="headerlink" title="8.7 配置"></a>8.7 配置</h3><p><img src="/2024/07/07/Java/Java/%E6%8F%90%E7%A4%BA%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99.png" alt="提示忽略大小写"></p><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98.png" alt="修改主题"></p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E4%BF%AE%E6%94%B9%E6%B3%A8%E9%87%8A%E7%9A%84%E9%A2%9C%E8%89%B2.png" alt="修改注释的颜色"></p><p><img src="/2024/07/07/Java/Java/%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93.png" alt="修改字体"></p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%8C%85.png" alt="自动导包"></p><h2 id="一、-Java概述"><a href="#一、-Java概述" class="headerlink" title="一、 Java概述"></a>一、 Java概述</h2><h3 id="1-1-Java是什么？"><a href="#1-1-Java是什么？" class="headerlink" title="1.1 Java是什么？"></a>1.1 Java是什么？</h3><p>语言：人与人交流沟通的表达方式</p><p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p><p>Java是一门非常火的计算机语言。（也叫做编程语言）</p><p>我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了</p><h3 id="1-2-下载和安装"><a href="#1-2-下载和安装" class="headerlink" title="1.2 下载和安装"></a>1.2 下载和安装</h3><h4 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h4><p>通过官方网站获取JDK</p><p><a href="http://www.oracle.com/">http://www.oracle.com</a></p><p><strong>注意1</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p><p><strong>注意2</strong>：</p><p>​如果你的电脑是windows32位的，建议重装系统，重装成64位的操作系统。</p><p>​因为Java从9版本开始，就已经不提供32位版本的安装包了。</p><h4 id="1-2-2-安装"><a href="#1-2-2-安装" class="headerlink" title="1.2.2 安装"></a>1.2.2 安装</h4><p>​傻瓜式安装，下一步即可。默认的安装路径是在C:\Program Files下。</p><p>建议：</p><ul><li>安装路径不要有中文，不要有空格等一些特殊的符号。</li><li>以后跟开发相关的所有软件建议都安装在同一个文件夹中，方便管理。</li></ul><h4 id="1-2-3-JDK的安装目录介绍"><a href="#1-2-3-JDK的安装目录介绍" class="headerlink" title="1.2.3 JDK的安装目录介绍"></a>1.2.3 JDK的安装目录介绍</h4><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h4 id="1-2-4-JRE下载"><a href="#1-2-4-JRE下载" class="headerlink" title="1.2.4 JRE下载"></a>1.2.4 JRE下载</h4><p>命令行下进入jdk安装路径，输入<code>bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</code>回车即可。</p><p><img src="/2024/07/07/Java/Java/image-20221111175649895.png" alt="image-20221111175649895"></p><h4 id="1-2-5-环境配置"><a href="#1-2-5-环境配置" class="headerlink" title="1.2.5 环境配置"></a>1.2.5 环境配置</h4><p>1.新建系统变量JAVA_HOME</p><blockquote><h4 id="变量名：JAVA-HOME-变量值：C-Program-Files-Java-jdk1-8-0-131-默认安装的JDK根目录"><a href="#变量名：JAVA-HOME-变量值：C-Program-Files-Java-jdk1-8-0-131-默认安装的JDK根目录" class="headerlink" title="变量名：JAVA_HOME 变量值：C:\Program Files\Java\jdk1.8.0_131 (默认安装的JDK根目录)"></a>变量名：JAVA_HOME 变量值：C:\Program Files\Java\jdk1.8.0_131 (默认安装的JDK<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>)</h4></blockquote><p><img src="/2024/07/07/Java/Java/image-20221111180001239.png" alt="image-20221111180001239"></p><p>2.修改系统变量Path</p><p> Path的变量值就是JDK的bin目录,JRE的bin目录：</p><blockquote><p>%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin</p></blockquote><p>3.检查</p><p>可以win+R打开命令行，输入java和javac、如果有输出，代表配置完成</p><h3 id="1-3-HelloWorld小案例"><a href="#1-3-HelloWorld小案例" class="headerlink" title="1.3 HelloWorld小案例"></a>1.3 HelloWorld小案例</h3><p>​HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h4 id="2-3-1-Java程序开发运行流程"><a href="#2-3-1-Java程序开发运行流程" class="headerlink" title="2.3.1 Java程序开发运行流程"></a>2.3.1 Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。</p><h4 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h4><ol><li>新建文本文档文件，修改名称为HelloWorld.java。</li></ol><p><strong>注意</strong>：后缀名为java的才是java文件。</p><ol start="2"><li>用记事本打开HelloWorld.java文件，输写程序内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>保存</li></ol><p><strong>注意</strong>：未保存的文件在左上角会有*符号标记</p><ol start="4"><li><p>编译文件。编译后会产生一个class文件。</p><p>java文件：程序员自己编写的代码。</p><p>class文件：交给计算机执行的文件。</p></li><li><p>运行代码</p><p><strong>注意</strong>：运行的是编译之后的class文件。</p></li></ol><blockquote><p>用到两个命令：</p><p>​javac + 文件名 + 后缀名 （就是编译java文件）</p><p>编译：javac是JDK提供的编译工具，可以将.java文件编译成.class文件</p><p>​java + 文件名（运行编译之后的class文件）</p><p>运行：java也是JDK的工具。运行时不加后缀名</p></blockquote><h3 id="1-4-HelloWorld案例常见问题"><a href="#1-4-HelloWorld案例常见问题" class="headerlink" title="1.4 HelloWorld案例常见问题"></a>1.4 HelloWorld案例常见问题</h3><h4 id="1-4-1-BUG"><a href="#1-4-1-BUG" class="headerlink" title="1.4.1 BUG"></a>1.4.1 BUG</h4><p>​在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。</p><h4 id="1-4-2-BUG的解决"><a href="#1-4-2-BUG的解决" class="headerlink" title="1.4.2 BUG的解决"></a>1.4.2 BUG的解决</h4><ol><li>具备识别BUG的能力：多看</li><li>具备分析BUG的能力：多思考，多查资料</li><li>具备解决BUG的能力：多尝试，多总结</li></ol><h4 id="1-4-3-HelloWorld常见问题"><a href="#1-4-3-HelloWorld常见问题" class="headerlink" title="1.4.3 HelloWorld常见问题"></a>1.4.3 HelloWorld常见问题</h4><p>1、非法字符问题。Java中的符号都是英文格式的。</p><p>2、大小写问题。Java语言对大小写敏感（区分大小写）。</p><p>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。</p><p>4、编译命令后的java文件名需要带文件后缀.java</p><p>5、运行命令后的class文件名（类名）不带文件后缀.class</p><p>…</p><h3 id="1-5-环境变量"><a href="#1-5-环境变量" class="headerlink" title="1.5 环境变量"></a>1.5 环境变量</h3><h4 id="1-5-1-为什么配置环境变量"><a href="#1-5-1-为什么配置环境变量" class="headerlink" title="1.5.1 为什么配置环境变量"></a>1.5.1 为什么配置环境变量</h4><p>​开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。</p><p>注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。</p><h4 id="1-5-2配置方式"><a href="#1-5-2配置方式" class="headerlink" title="1.5.2配置方式"></a>1.5.2配置方式</h4><p><img src="/2024/07/07/Java/Java/image-20210923091654365.png" alt="image-20210923091654365"></p><p>以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。</p><p>①<strong>JAVA_HOME</strong>：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）（路径不带bin）</p><p>②<strong>Path</strong>：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置（%JAVA_HOME%\bin）</p><h4 id="1-5-3win10的bug"><a href="#1-5-3win10的bug" class="headerlink" title="1.5.3win10的bug"></a>1.5.3win10的bug</h4><p>当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。</p><p>步骤：</p><ul><li><p>还是要配置JAVA_HOME给以后的相关软件去使用</p></li><li><p>我们可以把java和javac的完整路径配置到PATH当中。</p><p>E:\develop\JDK\bin</p></li></ul><h3 id="1-6-Java语言的发展"><a href="#1-6-Java语言的发展" class="headerlink" title="1.6 Java语言的发展"></a>1.6 Java语言的发展</h3><p>三个版本：</p><ul><li>Java5.0：这是Java的第一个大版本更新。</li><li>Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。</li><li>Java15.0：这个是我们课程中学习的版本。</li></ul><p>解惑：</p><p>​我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？</p><p>向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。</p><p>举例：</p><p>用8版本开发的代码，用11版本能运行吗？必须可以的。</p><p>用11版本开发的代码，用8版本能运行吗？不一定。</p><p>如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。</p><p>如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。</p><h3 id="1-7-Java的三大平台"><a href="#1-7-Java的三大平台" class="headerlink" title="1.7 Java的三大平台"></a>1.7 Java的三大平台</h3><p>​JavaSE、JavaME、JavaEE</p><h4 id="1-7-1-JavaSE"><a href="#1-7-1-JavaSE" class="headerlink" title="1.7.1 JavaSE"></a>1.7.1 JavaSE</h4><p>​是其他两个版本的基础。</p><h4 id="1-7-2-JavaME"><a href="#1-7-2-JavaME" class="headerlink" title="1.7.2 JavaME"></a>1.7.2 JavaME</h4><p>​Java语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p><p>​其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p><p>​但是，安卓也是可以用Java来开发的。</p><h4 id="1-7-3-JavaEE"><a href="#1-7-3-JavaEE" class="headerlink" title="1.7.3 JavaEE"></a>1.7.3 JavaEE</h4><p>​用于Web方向的网站开发。（主要从事后台服务器的开发）</p><p>​在服务器领域，Java是当之无愧的龙头老大。</p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221111203453985.png" alt="image-20221111203453985"></p><h3 id="1-8-Java的主要特性"><a href="#1-8-Java的主要特性" class="headerlink" title="1.8 Java的主要特性"></a>1.8 Java的主要特性</h3><ul><li>面向对象</li><li>安全性</li><li>多线程</li><li>简单易用</li><li>开源</li><li>跨平台</li></ul><h4 id="1-8-1-Java语言跨平台的原理"><a href="#1-8-1-Java语言跨平台的原理" class="headerlink" title="1.8.1 Java语言跨平台的原理"></a>1.8.1 Java语言跨平台的原理</h4><ul><li>操作系统本身其实是不认识Java语言的。</li><li>但是针对于不同的操作系统，Java提供了不同的虚拟机。</li></ul><p>虚拟机会把Java语言翻译成操作系统能看得懂的语言。</p><p><img src="/2024/07/07/Java/Java/image-20210923091350952.png" alt="image-20210923091350952"></p><h3 id="1-9-JRE和JDK"><a href="#1-9-JRE和JDK" class="headerlink" title="1.9 JRE和JDK"></a>1.9 JRE和JDK</h3><p><img src="/2024/07/07/Java/Java/image-20210923091544110.png" alt="image-20210923091544110"></p><p>JVM（Java Virtual Machine），Java虚拟机，真正运行java的地方</p><p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p><p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p><h3 id="1-10-混合、解释和编译"><a href="#1-10-混合、解释和编译" class="headerlink" title="1.10 混合、解释和编译"></a>1.10 混合、解释和编译</h3><p><strong>3种类型</strong></p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221111204314780.png" alt="image-20221111204314780"> </p><p><img src="/2024/07/07/Java/Java/image-20221111204333976.png" alt="image-20221111204333976"></p><p><img src="/2024/07/07/Java/Java/image-20221111204420253.png" alt="image-20221111204420253"> </p><p><img src="/2024/07/07/Java/Java/image-20221111204433727.png" alt="image-20221111204433727"> </p><h2 id="二、-Java基础语法"><a href="#二、-Java基础语法" class="headerlink" title="二、 Java基础语法"></a>二、 Java基础语法</h2><h3 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h3><p>​注释是对代码的解释和说明文字。</p><p>Java中的注释分为三种：</p><ul><li>单行注释：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释文字</span></span><br></pre></td></tr></table></figure><ul><li>多行注释：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">注意：多行注释不能嵌套使用。</span><br></pre></td></tr></table></figure><ul><li>文档注释（暂时用不到）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><p>​注释的内容不会参与编译和运行的，仅仅是对代码的解释说明而已。</p><p>​所以，不管在注释当中写什么内容，都不会影响代码运行的结果。</p><h3 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h3><h4 id="2-2-1-概念"><a href="#2-2-1-概念" class="headerlink" title="2.2.1 概念"></a>2.2.1 概念</h4><p>​被Java赋予了特定含义的英文单词。</p><p>​当我们在代码中写了关键字之后，程序在运行的时候，就知道要做什么事情了。</p><p>注意：关键字很多，不用刻意去记。</p><table><thead><tr><th><strong>abstract</strong></th><th><strong>assert</strong></th><th><strong>boolean</strong></th><th><strong>break</strong></th><th><strong>byte</strong></th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>char</strong></td><td><strong>class</strong></td><td><strong>const</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>default</strong></td><td><strong>do</strong></td><td><strong>double</strong></td><td><strong>else</strong></td></tr><tr><td><strong>enum</strong></td><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>finally</strong></td><td><strong>float</strong></td></tr><tr><td><strong>for</strong></td><td><strong>goto</strong></td><td><strong>if</strong></td><td><strong>implements</strong></td><td><strong>import</strong></td></tr><tr><td><strong>instanceof</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>new</strong></td><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td></tr><tr><td><strong>return</strong></td><td><strong>strictfp</strong></td><td><strong>short</strong></td><td><strong>static</strong></td><td><strong>super</strong></td></tr><tr><td><strong>switch</strong></td><td><strong>synchronized</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>transient</strong></td><td><strong>try</strong></td><td><strong>void</strong></td><td><strong>volatile</strong></td><td><strong>while</strong></td></tr></tbody></table><h4 id="2-2-2-第一个关键字class"><a href="#2-2-2-第一个关键字class" class="headerlink" title="2.2.2 第一个关键字class"></a>2.2.2 第一个关键字class</h4><p>​表示定义一个类。创建一个类。</p><p>类：Java项目最基本的组成单元，一个完整的Java项目有可能会有成千上万个类来组成的。</p><p>class后面跟随的就是这个类的名字，简称：类名。</p><p>在类名后面会有一对大括号，表示这个类的内容。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：class表示定义类。</p><p>​类名：HelloWorld</p><p>​HelloWorld后面的大括号表示这个类的范围。</p><h3 id="2-3-字面量"><a href="#2-3-字面量" class="headerlink" title="2.3 字面量"></a>2.3 字面量</h3><p>作用：告诉程序员，数据在程序中的书写格式。</p><table><thead><tr><th><strong>字面量类型</strong></th><th><strong>说明</strong></th><th><strong>程序中的写法</strong></th></tr></thead><tbody><tr><td>整数</td><td>不带小数的数字</td><td>666，-88</td></tr><tr><td>小数</td><td>带小数的数字</td><td>13.14，-5.21</td></tr><tr><td>字符</td><td>必须使用单引号，有且仅能一个字符</td><td>‘A’，‘0’，   ‘我’</td></tr><tr><td>字符串</td><td>必须使用双引号，内容可有可无</td><td>“HelloWorld”，“黑马程序员”</td></tr><tr><td>布尔值</td><td>布尔值，表示真假，只有两个值：true，false</td><td>true 、false</td></tr><tr><td>空值</td><td>一个特殊的值，空值</td><td>值是：null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">10</span>); <span class="comment">// 输出一个整数</span></span><br><span class="line">        System.out.println(<span class="number">5.5</span>); <span class="comment">// 输出一个小数</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 输出一个字符</span></span><br><span class="line">        System.out.println(<span class="literal">true</span>); <span class="comment">// 输出boolean值true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎学习java&quot;</span>); <span class="comment">// 输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>区分技巧</strong></p><ol><li>不带小数点的数字都是整数类型的字面量。</li><li>只要带了小数点，那么就是小数类型的字面量。</li><li>只要用双引号引起来的，不管里面的内容是什么，不管里面有没有内容，都是字符串类型的字面量。</li><li>字符类型的字面量必须用单引号引起来，不管内容是什么，但是个数有且只能有一个。</li><li>字符类型的字面量只有两个值，true、false。</li><li>空类型的字面量只有一个值，null。</li></ol><h3 id="2-4-变量"><a href="#2-4-变量" class="headerlink" title="2.4 变量"></a>2.4 变量</h3><h4 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h4><p>​变量就在程序中临时存储数据的容器。但是这个容器中只能存一个值。</p><h4 id="2-4-2-变量的定义格式"><a href="#2-4-2-变量的定义格式" class="headerlink" title="2.4.2 变量的定义格式"></a>2.4.2 变量的定义格式</h4><p>​数据类型 变量名 &#x3D; 数据值；</p><h5 id="①-格式详解"><a href="#①-格式详解" class="headerlink" title="① 格式详解"></a>① 格式详解</h5><p>​数据类型：限定了变量当中能存储什么类型的数据。</p><p>​   如果要存10，那么数据类型就需要写整数类型。</p><p>​   如果要存10.0，那么数据类型就需要写小数类型。</p><p>​变量名：其实就是这个容器的名字。</p><p>​当以后想要使用变量里面的数据时，直接使用变量名就可以了。</p><p>​数据值：真正存储在容器中的数据。</p><p>​分号：表示语句的结束，就跟以前写作文时候的句号是一样的。</p><h5 id="②-常用的数据类型"><a href="#②-常用的数据类型" class="headerlink" title="② 常用的数据类型"></a>② 常用的数据类型</h5><p>​整数：int</p><p>​小数：（浮点数）double</p><p>​其他数据类型稍后讲解</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义一个整数类型的变量</span></span><br><span class="line"><span class="comment">//数据类型 变量名 = 数据值;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">System.out.println(a);<span class="comment">//16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个小数类型的变量</span></span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10.1</span>;</span><br><span class="line">System.out.println(b);<span class="comment">//10.1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③-变量的注意事项"><a href="#③-变量的注意事项" class="headerlink" title="③ 变量的注意事项"></a>③ 变量的注意事项</h5><ul><li>变量名不能重复</li><li>在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。</li><li>变量在使用之前必须要赋值。</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1.变量名不允许重复</span></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"><span class="comment">//int a = 20;</span></span><br><span class="line"><span class="comment">//System.out.println(a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.一条语句可以定义多个变量</span></span><br><span class="line"><span class="comment">//了解。</span></span><br><span class="line"><span class="comment">//int a = 10, b = 20, c = 20,d = 20;</span></span><br><span class="line"><span class="comment">//System.out.println(a);//?</span></span><br><span class="line"><span class="comment">//System.out.println(b);//?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.变量在使用之前必须要赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-数据类型"><a href="#2-4-数据类型" class="headerlink" title="2.4 数据类型"></a>2.4 数据类型</h3><h4 id="2-4-1-Java语言数据类型的分类"><a href="#2-4-1-Java语言数据类型的分类" class="headerlink" title="2.4.1 Java语言数据类型的分类"></a>2.4.1 Java语言数据类型的分类</h4><ul><li>基本数据类型：数据值存储在自己的空间中</li><li>引用数据类型：数据值存放在其他空间，自己空间存储的是地址值</li></ul><h4 id="2-4-2-基本数据类型的四类八种"><a href="#2-4-2-基本数据类型的四类八种" class="headerlink" title="2.4.2 基本数据类型的四类八种"></a>2.4.2 基本数据类型的四类八种</h4><table><thead><tr><th align="center">数据类型</th><th align="center">关键字</th><th align="center">内存占用</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">整数</td><td align="center">byte</td><td align="center">1</td><td align="center">负的2的7次方 ~ 2的7次方-1(-128~127)</td></tr><tr><td align="center"></td><td align="center">short</td><td align="center">2</td><td align="center">负的2的15次方 ~ 2的15次方-1(-32768~32767)</td></tr><tr><td align="center"></td><td align="center">int</td><td align="center">4</td><td align="center">负的2的31次方 ~ 2的31次方-1</td></tr><tr><td align="center"></td><td align="center">long</td><td align="center">8</td><td align="center">负的2的63次方 ~ 2的63次方-1</td></tr><tr><td align="center">浮点数</td><td align="center">float</td><td align="center">4</td><td align="center">1.401298e-45 ~ 3.402823e+38</td></tr><tr><td align="center"></td><td align="center">double</td><td align="center">8</td><td align="center">4.9000000e-324 ~ 1.797693e+308</td></tr><tr><td align="center">字符</td><td align="center">char</td><td align="center">2</td><td align="center">0-65535</td></tr><tr><td align="center">布尔</td><td align="center">boolean</td><td align="center">1</td><td align="center">true，false</td></tr></tbody></table><p><strong>说明</strong></p><p>​e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p><p>​在java中整数默认是int类型，浮点数默认是double类型。</p><p><strong>需要记忆以下几点</strong></p><p>byte类型的取值范围：</p><p>​-128 ~ 127</p><p>int类型的大概取值范围：</p><p>​-21亿多  ~ 21亿多</p><p>整数类型和小数类型的取值范围大小关系：</p><p>​double &gt; float &gt; long &gt; int &gt; short &gt; byte</p><p>最为常用的数据类型选择：</p><ul><li><p>在定义变量的时候，要根据实际的情况来选择不同类型的变量。</p><p>比如：人的年龄，可以选择byte类型。</p><p>比如：地球的年龄，可以选择long类型。</p></li><li><p>如果整数类型中，不太确定范围，那么默认使用int类型。</p></li><li><p>如果小数类型中，不太确定范围，那么默认使用double类型。</p></li><li><p>如果要定义字符类型的变量，那么使用char</p></li><li><p>如果要定义布尔类型的变量，那么使用boolean</p></li></ul><h4 id="2-4-3-定义8种基本数据类型变量"><a href="#2-4-3-定义8种基本数据类型变量" class="headerlink" title="2.4.3 定义8种基本数据类型变量"></a>2.4.3 定义8种基本数据类型变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VariableDemo3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义byte类型的变量</span></span><br><span class="line">        <span class="comment">//数据类型 变量名 = 数据值;</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.定义short类型的变量</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.定义int类型的变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.定义long类型的变量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">123456789123456789L</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.定义float类型的变量</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10.1F</span>;</span><br><span class="line">        System.out.println(e);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.定义double类型的变量</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">20.3</span>;</span><br><span class="line">        System.out.println(f);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.定义char类型的变量</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">g</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        System.out.println(g);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.定义boolean类型的变量</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">h</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        System.out.println(h);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</li><li>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以）</li></ul><h3 id="2-5-标识符"><a href="#2-5-标识符" class="headerlink" title="2.5 标识符"></a>2.5 标识符</h3><h4 id="2-5-1-硬性要求："><a href="#2-5-1-硬性要求：" class="headerlink" title="2.5.1 硬性要求："></a>2.5.1 硬性要求：</h4><ul><li>必须由数字、字母、下划线_、美元符号$组成。</li><li>数字不能开头</li><li>不能是关键字</li><li>区分大小写的。</li></ul><h4 id="2-5-2-软件建议："><a href="#2-5-2-软件建议：" class="headerlink" title="2.5.2 软件建议："></a>2.5.2 软件建议：</h4><p>​如果不这么做，代码不会报错，但是会让代码显得比较low。</p><h4 id="①-小驼峰命名法"><a href="#①-小驼峰命名法" class="headerlink" title="① 小驼峰命名法"></a>① 小驼峰命名法</h4><p>适用于<strong>变量名和方法名</strong></p><ul><li><p>如果是一个单词，那么全部小写，比如：name</p></li><li><p>如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge</p></li></ul><h4 id="②-大驼峰命名法"><a href="#②-大驼峰命名法" class="headerlink" title="② 大驼峰命名法"></a>② 大驼峰命名法</h4><p>适用于<strong>类名</strong></p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。</p></li><li><p>如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld</p></li></ul><p>不管起什么名字，都要做到见名知意。</p><p><strong>阿里巴巴命名规范细节</strong>：</p><ol><li><p>尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。</p><p>正确：alibaba、hangzhou、nanjing</p><p>错误：jiage、dazhe</p></li><li><p>平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。</p><p>错误：_name</p><p>正确：name</p></li></ol><h3 id="2-6-键盘录入Scanner"><a href="#2-6-键盘录入Scanner" class="headerlink" title="2.6 键盘录入Scanner"></a>2.6 键盘录入Scanner</h3><p>​键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。</p><p>使用步骤：</p><p>第一步：</p><p>​导包：其实就是表示先找到Scanner这个类在哪。</p><p>第二步：</p><p>​创建对象：其实就表示申明一下，我准备开始用Scanner这个类了。</p><p>第三步：</p><p>​接收数据：也是真正干活的代码。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导包，其实就是先找到Scanner这个类在哪</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//3.接收数据</span></span><br><span class="line"><span class="comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><h3 id="3-1-运算符和表达式"><a href="#3-1-运算符和表达式" class="headerlink" title="3.1 运算符和表达式"></a>3.1 运算符和表达式</h3><p>运算符：</p><p>​就是对常量或者变量进行操作的符号。</p><p>​比如： +  -  *  &#x2F; </p><p>表达式：</p><p>​用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。</p><p>​比如：a + b 这个整体就是表达式。</p><p>​而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。</p><h3 id="3-2-算术运算符"><a href="#3-2-算术运算符" class="headerlink" title="3.2 算术运算符"></a>3.2 算术运算符</h3><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>符号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10+5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10-5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10*5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10&#x2F;5</td><td>2</td></tr><tr><td>%</td><td>取模（取余）</td><td>10%3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a&#x3D;2; b&#x3D;++a;</td><td>a&#x3D;3; b&#x3D;3;</td></tr><tr><td>++</td><td>后置递增</td><td>a&#x3D;2; b&#x3D;a++;</td><td>a&#x3D;3; b&#x3D;2;</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2; b&#x3D;–a;</td><td>a&#x3D;1; b&#x3D;1;</td></tr><tr><td>–</td><td>后置递减</td><td>a&#x3D;2; b&#x3D;a–;</td><td>a&#x3D;1; b&#x3D;2;</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*：</span></span><br><span class="line"><span class="comment">1.整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。</span></span><br><span class="line"><span class="comment">2.小数直接参与运算，得到的结果有可能是不精确的。</span></span><br><span class="line"><span class="comment">案例：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println( <span class="number">10</span> / <span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">3</span>);<span class="comment">//3.3333333333333335</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%：取模、取余。</span><br><span class="line">   他做的也是除法运算，只不过获取的是余数而已。</span><br><span class="line">案例：</span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">2</span>);<span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>);<span class="comment">//1</span></span><br><span class="line">应用场景：</span><br><span class="line"><span class="comment">//可以利用取模来判断一个数是奇数还是偶数</span></span><br><span class="line">System.out.println(<span class="number">15</span> % <span class="number">2</span>);<span class="comment">//1  奇数</span></span><br></pre></td></tr></table></figure><p><strong>练习：数值拆分</strong></p><p>需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.键盘录入一个三位数</span></span><br><span class="line"><span class="comment">//导包 --- 创建对象 --- 接收数据</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个三位数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取这个三位数的个位、十位、百位并打印出来</span></span><br><span class="line"><span class="comment">//公式：</span></span><br><span class="line"><span class="comment">//针对于任意的一个数而言</span></span><br><span class="line"><span class="comment">//个位： 数字 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ones</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//十位： 数字 / 10 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">tens</span> <span class="operator">=</span> number / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//百位： 数字 / 100 % 10</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hundreds</span> <span class="operator">=</span> number / <span class="number">100</span>  % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(ones);</span><br><span class="line">System.out.println(tens);</span><br><span class="line">System.out.println(hundreds);</span><br></pre></td></tr></table></figure><h3 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包含以下符号：</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; a-&#x3D;2;</td><td>a&#x3D;3;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%&#x3D;2;</td><td>a&#x3D;1;</td></tr></tbody></table><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符实例</span></span><br><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 1.最为简单的赋值运算符用法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// 就是把10赋值给变量a</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.如果等号右边需要进行计算。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;<span class="comment">// 先计算等号右边的，把计算的结果赋值给左边的变量</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.特殊的用法</span></span><br><span class="line">        a = a + <span class="number">10</span>;<span class="comment">// 先计算等号右边的，把计算的结果赋值给左边的变量</span></span><br><span class="line">        System.out.println(a); <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意点</strong>：</p><p>​扩展的赋值运算符中隐层还包含了一个强制转换。</p><p>以+&#x3D;为例。</p><p>a +&#x3D; b ;实际上相当于 a &#x3D; (byte)(a + b);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//a += b;</span></span><br><span class="line">        a = (<span class="type">byte</span>)(a + b);</span><br><span class="line">        System.out.println(a);<span class="comment">//30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-关系运算符"><a href="#3-4-关系运算符" class="headerlink" title="3.4 关系运算符"></a>3.4 关系运算符</h3><p>又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。</p><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不相等</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 3</td><td>1</td></tr></tbody></table><h3 id="3-5-位运算符"><a href="#3-5-位运算符" class="headerlink" title="3.5 位运算符"></a>3.5 位运算符</h3><p><strong>运算对象：</strong>整型数据 和 字符型数据</p><p>假设变量 <strong>A</strong> 的值为 60（0011 1100），<br>        变量 <strong>B</strong> 的值为 13（0000 1101）</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与（AND），按二进制位进行”与”运算。<br>运算规则：<code>0&amp;0=0;    0&amp;1=0;     1&amp;0=0;      1&amp;1=1;</code></td><td align="left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或（OR），按二进制位进行”或”运算。<br>运算规则：&#96;0</td><td align="left">0&#x3D;0;    0</td></tr><tr><td align="left">^</td><td align="left">按位异或（XOR），按二进制位进行”异或”运算。<br>运算规则：<code>0^0=0;    0^1=1;    1^0=1;   1^1=0;</code></td><td align="left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td align="left">~</td><td align="left">取反运算符，按二进制位进行”取反”运算。<br>运算规则：<code>~1=-2;    ~0=-1;</code></td><td align="left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td align="left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td align="left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><h3 id="3-6-逻辑运算符"><a href="#3-6-逻辑运算符" class="headerlink" title="3.6 逻辑运算符"></a>3.6 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假植</p><p>当左边不能确定整个表达式的结果，右边才会执行。</p><p>​当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。</p><p>逻辑运算符有以下术语</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；如果a为真，则!a为假</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>只有a和b都为真时，才为真</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>只要a或b中有一个为真，结果就为真</td></tr></tbody></table><p>&amp;&amp; 的优先级高于 ||</p><h3 id="3-7-三元运算符"><a href="#3-7-三元运算符" class="headerlink" title="3.7 三元运算符"></a>3.7 三元运算符</h3><p>又叫做：三元表达式或者问号冒号表达式。</p><p><strong>格式</strong>：</p><p>​关系表达式 ？ 表达式1 ：表达式2 ；</p><p><strong>计算规则</strong>：</p><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li></ul><p><strong>注意点</strong>：</p><p>​三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</p><p><strong>案例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：求两个数的较大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span></span><br><span class="line">        <span class="comment">//注意点：</span></span><br><span class="line">        <span class="comment">//三元运算符的最终结果一定要被使用。</span></span><br><span class="line">        <span class="comment">//要么赋值给一个变量，要么直接输出。</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span>  a &gt; b ? a : b ;</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; b ? a : b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习</strong>1-两只老虎</p><p>需求：</p><p>​动物园里有两只老虎，两只老虎的体重分别为通过键盘录入获得，</p><p>​请用程序实现判断两只老虎的体重是否相同。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取两只老虎的体重</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第一只老虎的体重&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">weight1</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第二只老虎的体重&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">weight2</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利用三元运算符求出最终结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> weight1 == weight2 ? <span class="string">&quot;相同&quot;</span> : <span class="string">&quot;不相同&quot;</span>;</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p><strong>练习</strong>2-求三个数的最大值</p><p>需求：</p><p>​一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm。</p><p>​请用程序实现获取这三个和尚的最高身高。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义三个变量记录和尚的身高</span></span><br><span class="line"><span class="type">int</span> <span class="variable">height1</span> <span class="operator">=</span> <span class="number">150</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">height2</span> <span class="operator">=</span> <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">height3</span> <span class="operator">=</span> <span class="number">165</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利用三元运算符求出两个数中的较大值。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> height1 &gt; height2 ? height1 : height2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.求出最终的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> temp &gt; height3 ? temp : height3;</span><br><span class="line"></span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h3 id="3-8-隐式转换"><a href="#3-8-隐式转换" class="headerlink" title="3.8 隐式转换"></a>3.8 隐式转换</h3><p>概念：</p><p>​也叫自动类型提升。</p><p>​就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。</p><p><strong>简单记忆：</strong></p><p>​就是小的给大的，可以直接给。</p><p>两种提升规则：</p><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。</li></ul><p><strong>取值范围从小到大的关系</strong>：</p><p>​byte short int long float double</p><hr><p><strong>隐式转换的练习</strong></p><p>请看下面案例是否有误，如果有问题，请说出原因，如果没有问题，请说出运算过程和运算结果</p><p>案例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(d);<span class="comment">//10.0</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​10是整数，整数默认是int类型的。</p><p>​而在取值范围的顺序中：byte short int long float double</p><p>​在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。</p><p>案例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b;<span class="comment">//可以成功赋值</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​因为byte的取值范围是小的，int的取值范围是大的，在底层进行了隐式转换，不需要我们额外写代码单独实现，是可以直接赋值。</p><p>案例三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20L</span>;</span><br><span class="line">??? result = i + n;</span><br><span class="line">问变量result是什么类型的？</span><br></pre></td></tr></table></figure><p>解释：</p><p>​变量i是int类型的，变量n是long类型的。</p><p>​而在取值范围的顺序中：byte short int long float double</p><p>​变量i里面的值会自动提升为long类型的，最终的结果其实就是两个long相加，那么最终的result是long类型的。</p><p>案例四：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100L</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">20.0</span>;</span><br><span class="line">??? result = i + n + d;</span><br><span class="line">问变量result是什么类型的？</span><br></pre></td></tr></table></figure><p>解释：</p><p>​变量i是int类型，变量n是long类型，变量d是double类型。</p><p>​而在取值范围的顺序中：byte short int long float double</p><p>​所以变量i和变量n里面的值在参与运算的时候，都会进行类型提升，变成double。</p><p>​最终其实就是三个double进行相加，那么最终的结果就是double类型的。</p><p>案例五：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">??? result = b1 + b2;<span class="comment">//int</span></span><br><span class="line">问变量result是什么类型的？</span><br></pre></td></tr></table></figure><p>解释：</p><p>​因为b1和b2都是byte类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。</p><p>案例六：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100L</span>;</span><br><span class="line">??? result = b + s + n;</span><br><span class="line">问变量result是什么类型的？<span class="type">long</span></span><br></pre></td></tr></table></figure><p>解释：</p><p>​变量b是byte类型的，变量s是short类型的，变量n是long类型的。</p><p>​byte，short，char类型的变量在参与运算的时候，变量里面的值会直接先提升为int。</p><p>第一步：变量b和变量s里面的值会先提升为int参与运算。</p><p>​int + int + long</p><p>第二步：而long类型的取值范围是大于int的取值范围的。</p><p>​所以变量b和变量s里面的值会再次提升为long。</p><p>​long + long + long。</p><p>所以最终结果是long类型的。</p><h3 id="3-9-强制转换"><a href="#3-9-强制转换" class="headerlink" title="3.9 强制转换"></a>3.9 强制转换</h3><p><strong>概念</strong>：</p><p>​如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。</p><p>​如果一定要这么干，就需要加入强制转换。</p><p><strong>书写格式</strong>：</p><p>​目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据；</p><p>简单理解：</p><p>​要转成什么类型的，那么就在小括号中写什么类型就可以了。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>)a;</span><br><span class="line">        System.out.println(b);<span class="comment">//12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><p>​强制转换有可能会导致数据发生错误。（数据的精度丢失）</p><h3 id="3-10-字符串的-操作"><a href="#3-10-字符串的-操作" class="headerlink" title="3.10 字符串的+操作"></a>3.10 字符串的+操作</h3><p><strong>核心技巧</strong>：</p><ul><li>当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。</li><li>当连续进行+操作时，从左到右逐个执行的。</li></ul><blockquote><p>注意：特例：字符串只有+操作，没有其他操作。</p></blockquote><p><strong>字符串相加的练习</strong>：</p><p>案例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果：”1abc1”</p><p>解释：</p><p>​第一步： 1 + “abc”。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”1abc”</p><p>​第二步：  “1abc” + 1。这个过程中，有字符串参与的，所以做的也是拼接操作，产生一个新的字符串”1abc1”</p><p>案例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>结果：“3abc21”</p><p>解释：</p><p>​第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。</p><p>​第二步：3 + “abc”。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”3abc”。</p><p>​第三步：”3abc” + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串”3abc2”。</p><p>​第四步：”3abc2” + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”</p><p>案例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;黑默丁格&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;我的名字是&quot;</span> + name);</span><br></pre></td></tr></table></figure><p>结果： 我的名字是黑默丁格</p><p>解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。</p><h3 id="3-11-字符的-操作"><a href="#3-11-字符的-操作" class="headerlink" title="3.11 字符的+操作"></a>3.11 字符的+操作</h3><p><strong>规则</strong>：</p><p>​当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。</p><p><strong>案例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> c + <span class="number">0</span>;</span><br><span class="line">System.out.println(result);<span class="comment">//97</span></span><br></pre></td></tr></table></figure><p>ASCII码表中：</p><p>​‘a’   —–    97</p><p>​‘A’   —–    65</p><h2 id="四、流程控制语句"><a href="#四、流程控制语句" class="headerlink" title="四、流程控制语句"></a>四、流程控制语句</h2><h3 id="4-1-顺序结构"><a href="#4-1-顺序结构" class="headerlink" title="4.1 顺序结构"></a>4.1 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><p>顺序结构执行流程图：</p><p><img src="/2024/07/07/Java/Java/1545615769372.png" alt="1545615769372"></p><h3 id="4-2-选择结构"><a href="#4-2-选择结构" class="headerlink" title="4.2 选择结构"></a>4.2 选择结构</h3><h4 id="4-2-1-if语句"><a href="#4-2-1-if语句" class="headerlink" title="4.2.1 if语句"></a>4.2.1 if语句</h4><h5 id="①格式1"><a href="#①格式1" class="headerlink" title="①格式1"></a>①格式1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体</p><p>③如果关系表达式的值为false就不执行语句体</p><p>④继续执行后面的语句内容</p><p><img src="/2024/07/07/Java/Java/1545616039363.png" alt="1545616039363"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span></span><br><span class="line"><span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a等于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(a == c) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a等于c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一种格式的细节</strong>：</p><ol><li><p>如果我们要对一个布尔类型的变量进行判断，不要写&#x3D;&#x3D;，直接把变量写在小括号中即可。</p></li><li><p>如果大括号中的语句体只有一条，那么大括号可以省略不写</p><p>如果大括号省略了，那么if只能控制距离他最近的那一条语句。</p><p><strong>建议：</strong>自己不要去写，如果别人这么写了，你要能看懂即可。</p></li></ol><h5 id="②语句格式2"><a href="#②语句格式2" class="headerlink" title="②语句格式2"></a>②语句格式2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式的值</p><p>②如果关系表达式的值为true就执行语句体1</p><p>③如果关系表达式的值为false就执行语句体2</p><p>④继续执行后面的语句内容</p><p><img src="/2024/07/07/Java/Java/1545616221283.png" alt="1545616221283"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a的值大于b&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③语句格式3"><a href="#③语句格式3" class="headerlink" title="③语句格式3"></a>③语句格式3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式：</span></span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>①首先计算关系表达式1的值</p><p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p><p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p><p>④…</p><p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p><p><img src="/2024/07/07/Java/Java/1545616667104.png" alt="1545616667104"></p><h4 id="4-2-2-switch语句"><a href="#4-2-2-switch语句" class="headerlink" title="4.2.2 switch语句"></a>4.2.2 switch语句</h4><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程：</strong></p><ul><li>首先计算出表达式的值 </li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</li></ul><p><strong>练习：运动计划</strong></p><ul><li><p>需求：键盘录入星期数，显示今天的减肥活动。</p><p>周一：跑步  </p><p>周二：游泳  </p><p>周三：慢走  </p><p>周四：动感单车</p><p>周五：拳击  </p><p>周六：爬山  </p><p>周日：好好吃一顿</p></li><li><p>代码示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> a01switch选择语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入一个整数表示星期</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数表示星期&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.书写一个switch语句去跟week进行匹配</span></span><br><span class="line">        <span class="keyword">switch</span> (week)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;动感单车&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误，没有这个星期&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch的扩展知识：</strong></p><ul><li><p>default的位置和省略情况</p><p>default可以放在任意位置，也可以省略</p></li><li><p>case穿透</p><p>不写break会引发case穿透现象</p></li><li><p>switch在JDK12的新特性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;一&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;二&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;其他&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch和if第三种格式各自的使用场景</li></ul><p>当我们需要对一个范围进行判断的时候，用if的第三种格式</p><p>当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句</p><p>比如：</p><p>​小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。</p><p>​如果是星期，月份，客服电话中0~9的功能选择就可以用switch</p><p><strong>练习</strong>：休息日和工作日</p><p>需求：键盘录入星期数，输出工作日、休息日。</p><p>(1-5) 工作日，(6-7)休息日。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入星期数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入星期&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//3</span></span><br><span class="line"><span class="comment">//2.利用switch进行匹配</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line">利用<span class="keyword">case</span>穿透简化代码</span><br><span class="line"><span class="keyword">switch</span> (week)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line">利用JDK12简化代码书写</span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span> -&gt; System.out.println(<span class="string">&quot;休息日&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;没有这个星期&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-循环结构"><a href="#4-3-循环结构" class="headerlink" title="4.3 循环结构"></a>4.3 循环结构</h3><h4 id="4-3-1-for循环"><a href="#4-3-1-for循环" class="headerlink" title="4.3.1 for循环"></a>4.3.1 for循环</h4><p>​循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。 </p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式解释：</strong></p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul><p><strong>执行流程：</strong></p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p><p><strong>for循环书写技巧：</strong></p><ul><li>确定循环的开始条件</li><li>确定循环的结束条件</li><li>确定循环要重复执行的代码</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.确定循环的开始条件</span></span><br><span class="line"><span class="comment">//2.确定循环的结束条件</span></span><br><span class="line"><span class="comment">//3.确定要重复执行的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：打印5次HelloWorld</span></span><br><span class="line"><span class="comment">//开始条件：1</span></span><br><span class="line"><span class="comment">//结束条件：5</span></span><br><span class="line"><span class="comment">//重复代码：打印语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-while循环"><a href="#4-3-2-while循环" class="headerlink" title="4.3.2 while循环"></a>4.3.2 while循环</h4><p><strong>格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习1：打印5次HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><h4 id="4-3-3-do…while循环"><a href="#4-3-3-do…while循环" class="headerlink" title="4.3.3 do…while循环"></a>4.3.3 do…while循环</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125; <span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure><p>特点：</p><p>​先执行，再判断。</p><h4 id="4-3-4-三种格式的区别："><a href="#4-3-4-三种格式的区别：" class="headerlink" title="4.3.4 三种格式的区别："></a>4.3.4 三种格式的区别：</h4><p>​for和while循环，是先判断，再执行。</p><p>​do…while是先执行，再判断。</p><p>​当知道循环次数或者循环范围的时候，用for循环。</p><p>​当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。</p><h3 id="4-4-条件控制语句"><a href="#4-4-条件控制语句" class="headerlink" title="4.4 条件控制语句"></a>4.4 条件控制语句</h3><ul><li>break</li><li>continue</li></ul><h4 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h4><p>​不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    <span class="comment">//2.吃完第三个的时候就不吃了</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//结束整个循环。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue:"></a>continue:</h4><p>​不能单独存在的。只能存在于循环当中。</p><p>​表示：跳过本次循环，继续执行下次循环。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//2.第3个包子有虫子就跳过，继续吃下面的包子</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-Random"><a href="#4-5-Random" class="headerlink" title="4.5 Random"></a>4.5 Random</h3><p>Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。</p><p><strong>使用步骤</strong>：</p><ol><li>导包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">导包的动作必须出现在类定义的上边。</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span> ();</span><br><span class="line">上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。</span><br></pre></td></tr></table></figure><ol start="3"><li>生成随机数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围);</span><br><span class="line">上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。</span><br><span class="line">随机数范围的特点：从<span class="number">0</span>开始，不包含指定值。比如：参数为<span class="number">10</span>，生成的范围[<span class="number">0</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//3.生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>);<span class="comment">//包左不包右，包头不包尾</span></span><br><span class="line">        <span class="comment">//0 ~ 99</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h2><h3 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h3><p>​指的是一种容器，可以同来存储同种数据类型的多个值。</p><p>​但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p><p>比如：</p><p>​定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，</p><p>​但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。</p><p>建议：</p><p>​容器的类，和存储的数据类型保持一致。</p><p>举例：</p><p>​整数1 2 3 4 56 就可以使用int类型的数组来存储。</p><p>​小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。</p><p>​字符串”aaa”  “bbb”  “ccc” 就可以使用String类型的数组来存储。</p><h3 id="5-2-数组的定义"><a href="#5-2-数组的定义" class="headerlink" title="5.2 数组的定义"></a>5.2 数组的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式1</span></span><br><span class="line">数据类型 [] 数组名</span><br><span class="line"><span class="type">int</span> [] array;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式2</span></span><br><span class="line">数据类型 数组名 []</span><br><span class="line"><span class="type">int</span> array[];</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化格式:</span></span><br><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>，元素<span class="number">2</span>，元素<span class="number">3</span>，元素<span class="number">4.</span>..&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">double</span>[] array = &#123;<span class="number">1.1</span>,<span class="number">1.2</span>,<span class="number">1.3</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>详解</strong>：</p><p>数据类型：限定了数组以后能存什么类型的数据。</p><p>方括号：表示现在定义的是一个数组。</p><p>数组名：就是一个名字而已，方便以后使用。</p><blockquote><p>平时习惯性使用第一种方式。</p></blockquote><h3 id="5-3-数组的静态初始化"><a href="#5-3-数组的静态初始化" class="headerlink" title="5.3.数组的静态初始化"></a>5.3.数组的静态初始化</h3><p><strong>格式：</strong><code>数据类型[] 数组名 = new 数据类型[]&#123;元素1，元素2，元素3，元素4...&#125;;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line"><span class="type">double</span>[] arr = <span class="keyword">new</span> <span class="title class_">double</span>[] &#123;<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>格式详解</strong>：</p><p>​数据类型：限定了数组以后能存什么类型的数据。</p><p>​方括号：表示现在定义的是一个数组。</p><p>​数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。</p><p>​arr   namesArr</p><p>​new：就是给数组在内存中开辟了一个空间。</p><p>​数据类型：限定了数组以后能存什么类型的数据。</p><p>​  前面和后面的数据类型一定要保持一致。</p><p>​int[] arr &#x3D; new double[]{11,22,33};&#x2F;&#x2F;错误写法</p><p>​方括号：表示现在定义的是一个数组。</p><p>​大括号：表示数组里面的元素。元素也就是存入到数组中的数据。</p><p>​多个元素之间，一定要用逗号隔开。</p><blockquote><p>注意1.等号前后的数据类型必须保持一致。</p><p>注意2.数组一旦创建之后，长度不能发生变化。</p></blockquote><p>练习1：</p><p>定义数组存储5个学生的年龄。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>给数组限定什么类型？ <span class="type">int</span></span><br><span class="line"><span class="number">2.</span>利用静态初始化完成创建并添加元素</span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] agesArr = &#123;<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-4-地址值"><a href="#5-4-地址值" class="headerlink" title="5.4 地址值"></a>5.4 地址值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@6d03e736</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] arr2 = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>&#125;;</span><br><span class="line">System.out.println(arr2);<span class="comment">//[D@568db2f2</span></span><br></pre></td></tr></table></figure><p>打印数组的时候，实际出现的是数组的地址值。</p><p>数组的地址值：就表示数组在内存中的位置。</p><p>以[I@6d03e736为例：</p><p>[ ：表示现在打印的是一个数组。</p><p>I：表示现在打印的数组是int类型的。</p><p>@：仅仅是一个间隔符号而已。</p><p>6d03e736：就是数组在内存中真正的地址值。（十六进制的）</p><p>但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。</p><p>地址值对于我们来说，作用不大，简单了解。</p><h3 id="5-5-数组元素访问"><a href="#5-5-数组元素访问" class="headerlink" title="5.5 数组元素访问"></a>5.5 数组元素访问</h3><p>格式：</p><p>​数组名[索引];</p><p>作用：</p><ul><li><p>获取数组中对应索引上的值</p></li><li><p>修改数组中对应索引上的值</p><p>一旦修改之后，原来的值就会被覆盖了。</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        数组中元素访问的格式：</span></span><br><span class="line"><span class="comment">                数组名[索引];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         作用：</span></span><br><span class="line"><span class="comment">            1.获取指定索引上对应的元素</span></span><br><span class="line"><span class="comment">            2.修改指定索引上对应的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">       <span class="comment">//需求1：获取arr数组中，3索引上的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr[<span class="number">3</span>];</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//需求2：将arr数组中，3索引上的值修改为10</span></span><br><span class="line">            arr[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改之后为:&quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-索引"><a href="#5-6-索引" class="headerlink" title="5.6 索引"></a>5.6 索引</h3><p>​也叫角标、下标</p><p>​就是数组容器中每一个小格子对应的编号。</p><p>索引的特点：</p><ul><li>索引一定是从0开始的。</li><li>连续不间断。</li><li>逐个+1增长。</li></ul><h3 id="5-7-数组的遍历"><a href="#5-7-数组的遍历" class="headerlink" title="5.7 数组的遍历"></a>5.7 数组的遍历</h3><p>遍历：就是把数组里面所有的内容一个一个全部取出来。</p><p>数组的长度：数组名.length;</p><p>通用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环的过程中，i依次表示数组中的每一个索引</span></span><br><span class="line">    sout(arr[i]);<span class="comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-数组的动态初始化"><a href="#5-8-数组的动态初始化" class="headerlink" title="5.8 数组的动态初始化"></a>5.8 数组的动态初始化</h3><p>格式：</p><p>​数据类型[] 数组名 &#x3D; new 数据类型[数组的长度];</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义一个数组，存3个人的年龄，年龄未知</span></span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span></span><br><span class="line"><span class="type">int</span>[] scoresArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>数组的默认初始化值：</p><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’</p><p>引用类型：null</p><h3 id="5-9-数组两种初始化方式的区别"><a href="#5-9-数组两种初始化方式的区别" class="headerlink" title="5.9 数组两种初始化方式的区别"></a>5.9 数组两种初始化方式的区别</h3><p>静态初始化：int[] arr &#x3D; {1,2,3,4,5};</p><p>动态初始化：int[] arr &#x3D; new int[3];</p><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><p>使用场景：</p><p>只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。</p><p>已经明确了要操作的所有数据，推荐使用静态初始化。</p><p>举例：</p><ul><li><p>使用数组来存储键盘录入的5个整数。</p><p>int[] arr &#x3D; new int[5];</p></li><li><p>将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100</p><p>int[] arr &#x3D; new int[5];</p><p>arr[0] &#x3D; 66;</p><p>arr[1] &#x3D; 77;</p><p>… 虽然可以实现，但是太麻烦了。</p><p>建议使用静态初始化：int[] arr &#x3D; {66,77,88,99,100};</p></li></ul><h3 id="5-10-数组常见问题"><a href="#5-10-数组常见问题" class="headerlink" title="5.10 数组常见问题"></a>5.10 数组常见问题</h3><p>当访问了数组中不存在的索引，就会引发索引越界异常。</p><p>避免：</p><p>​针对于任意一个数组，索引的范围：<br>       最小索引：0<br>       最大索引：数组的长度 - 1<br>​               数组名.length - 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//用索引来访问数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);<span class="comment">// 越界</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、方法"><a href="#六、方法" class="headerlink" title="六、方法"></a>六、方法</h2><h3 id="6-1-方法的概念"><a href="#6-1-方法的概念" class="headerlink" title="6.1 方法的概念"></a>6.1 方法的概念</h3><p>​方法（method）是程序中最小的执行单元</p><p>注意：</p><ul><li>方法必须先创建才可以使用，该过程成为方法定义</li><li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li></ul><h3 id="6-2-方法的定义和调用"><a href="#6-2-方法的定义和调用" class="headerlink" title="6.2 方法的定义和调用"></a>6.2 方法的定义和调用</h3><h4 id="6-2-1-无参数方法定义和调用"><a href="#6-2-1-无参数方法定义和调用" class="headerlink" title="6.2.1 无参数方法定义和调用"></a>6.2.1 无参数方法定义和调用</h4><ul><li><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (   ) &#123;</span><br><span class="line"><span class="comment">// 方法体;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span> <span class="params">(    )</span> &#123;</span><br><span class="line"><span class="comment">// 方法体;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method();</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><p>​方法必须先定义，后调用，否则程序将报错</p></li></ul><p><strong>无参数方法的练习</strong></p><ul><li>需求：设计一个方法用于打印两个数中的较大数 </li><li>思路：<ul><li>①定义一个方法，用于打印两个数字中的较大数，例如getMax() </li><li>②方法中定义两个变量，用于保存两个数字 </li><li>③使用分支语句分两种情况对两个数字的大小关系进行处理 </li><li>④在main()方法中调用定义好的方法</li></ul></li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法</span></span><br><span class="line">        getMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于打印两个数字中的较大数，例如getMax()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//方法中定义两个变量，用于保存两个数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理</span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-带参数方法定义和调用"><a href="#6-2-2-带参数方法定义和调用" class="headerlink" title="6.2.2 带参数方法定义和调用"></a>6.2.2 带参数方法定义和调用</h4><ul><li><p>定义格式：</p><p>参数：由数据类型和变量名组成 -  数据类型 变量名</p><p>参数范例：int a</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3.</span>..) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isEvenNumber</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><pre><code>方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错方法定义时，多个参数之间使用逗号( ，)分隔</code></pre></li></ul></li><li><p>调用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数)；</span><br><span class="line"></span><br><span class="line">方法名(参数<span class="number">1</span>,参数<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">getMax(<span class="number">10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</li></ul></li></ul><h3 id="6-3-带返回值方法的定义和调用"><a href="#6-3-带返回值方法的定义和调用" class="headerlink" title="6.3 带返回值方法的定义和调用"></a>6.3 带返回值方法的定义和调用</h3><ul><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line"><span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEvenNumber</span><span class="params">( <span class="type">int</span> number )</span> &#123;           </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">( <span class="type">int</span> a, <span class="type">int</span> b )</span> &#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">100</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li></ul></li></ul></li><li><p>调用格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法名 ( 参数 ) ;</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 ) ;</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isEvenNumber ( <span class="number">5</span> ) ;</span><br><span class="line"><span class="type">boolean</span>  <span class="variable">flag</span> <span class="operator">=</span>  isEvenNumber ( <span class="number">5</span> ); </span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li></ul></li></ul></li></ul><h3 id="6-4-方法的注意事项"><a href="#6-4-方法的注意事项" class="headerlink" title="6.4 方法的注意事项"></a>6.4 方法的注意事项</h3><h4 id="6-4-1-方法的注意事项"><a href="#6-4-1-方法的注意事项" class="headerlink" title="6.4.1 方法的注意事项"></a>6.4.1 方法的注意事项</h4><ul><li><p>方法不能嵌套定义</p><ul><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 这里会引发编译错误!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p><ul><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return 100; 编译错误，因为没有具体返回值类型</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//System.out.println(100); return语句后面不能跟数据或代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="6-4-2-方法的通用格式"><a href="#6-4-2-方法的通用格式" class="headerlink" title="6.4.2 方法的通用格式"></a>6.4.2 方法的通用格式</h4><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123;</span><br><span class="line">   方法体; </span><br><span class="line">   <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解释：</p><ul><li><p>public static 修饰符，目前先记住这个格式</p><p>返回值类型方法操作完毕之后返回的数据的数据类型</p><p>​如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p><p> 方法名调用方法时候使用的标识</p><p> 参数由数据类型和变量名组成，多个参数之间用逗号隔开</p><p> 方法体完成功能的代码块</p><p> return如果方法操作完毕，有数据返回，用于把数据返回给调用者</p></li></ul></li><li><p>定义方法时，要做到两个明确</p><ul><li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li><li>明确参数：主要是明确参数的类型和数量</li></ul></li><li><p>调用方法时的注意：</p><ul><li>void类型的方法，直接调用即可</li><li>非void类型的方法，推荐用变量接收调用</li></ul></li></ul><h3 id="6-5-方法重载"><a href="#6-5-方法重载" class="headerlink" title="6.5 方法重载"></a>6.5 方法重载</h3><h4 id="6-5-1-方法重载"><a href="#6-5-1-方法重载" class="headerlink" title="6.5.1 方法重载"></a>6.5.1 方法重载</h4><ul><li><p>方法重载概念</p><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul></li><li><p>注意：</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li></ul></li><li><p>正确范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">double</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123; <span class="comment">/*错误原因：重载与返回值无关*/</span></span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fn</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">(<span class="type">double</span> a)</span> &#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span></span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-5-2-方法重载练习"><a href="#6-5-2-方法重载练习" class="headerlink" title="6.5.2 方法重载练习"></a>6.5.2 方法重载练习</h4><ul><li><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） </p></li><li><p>思路：</p><ul><li>①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数</li><li>②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</li><li>③定义所有的重载方法，两个byte类型与两个short类型参数 </li><li>④完成方法的调用，测试运行结果</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        System.out.println(compare(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(compare((<span class="type">byte</span>) <span class="number">10</span>, (<span class="type">byte</span>) <span class="number">20</span>));</span><br><span class="line">        System.out.println(compare((<span class="type">short</span>) <span class="number">10</span>, (<span class="type">short</span>) <span class="number">20</span>));</span><br><span class="line">        System.out.println(compare(<span class="number">10L</span>, <span class="number">20L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//byte</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a, <span class="type">byte</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;byte&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//short</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a, <span class="type">short</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;short&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//long</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、面向对象"><a href="#七、面向对象" class="headerlink" title="七、面向对象"></a>七、面向对象</h2><h3 id="7-1-类和对象"><a href="#7-1-类和对象" class="headerlink" title="7.1 类和对象"></a>7.1 类和对象</h3><h4 id="7-1-1-类和对象的理解"><a href="#7-1-1-类和对象的理解" class="headerlink" title="7.1.1 类和对象的理解"></a>7.1.1 类和对象的理解</h4><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p><ul><li>类<ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li><li>简单理解：类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li>类和对象的关系<ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h4 id="7-1-2-类的定义"><a href="#7-1-2-类的定义" class="headerlink" title="7.1.2 类的定义"></a>7.1.2 类的定义</h4><p>类的组成是由属性和行为两部分组成</p><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p>类的定义步骤：</p><p>①定义类</p><p>②编写类的成员变量</p><p>③编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>；</span><br><span class="line">变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">…</span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">方法<span class="number">1</span>;</span><br><span class="line">方法<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手机类：</span></span><br><span class="line"><span class="comment">        类名：</span></span><br><span class="line"><span class="comment">        手机(Phone)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员变量：</span></span><br><span class="line"><span class="comment">        品牌(brand)</span></span><br><span class="line"><span class="comment">        价格(price)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员方法：</span></span><br><span class="line"><span class="comment">        打电话(call)</span></span><br><span class="line"><span class="comment">        发短信(sendMessage)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-1-3-对象的使用"><a href="#7-1-3-对象的使用" class="headerlink" title="7.1.3 对象的使用"></a>7.1.3 对象的使用</h4><ul><li>创建对象的格式：<ul><li>类名 对象名 &#x3D; new 类名();</li></ul></li><li>调用成员的格式：<ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象</span></span><br><span class="line"><span class="comment">        格式：类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">        范例：Phone p = new Phone();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用对象</span></span><br><span class="line"><span class="comment">        1：使用成员变量</span></span><br><span class="line"><span class="comment">            格式：对象名.变量名</span></span><br><span class="line"><span class="comment">            范例：p.brand</span></span><br><span class="line"><span class="comment">        2：使用成员方法</span></span><br><span class="line"><span class="comment">            格式：对象名.方法名()</span></span><br><span class="line"><span class="comment">            范例：p.call()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员变量</span></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员方法</span></span><br><span class="line">        p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-4-学生对象-练习"><a href="#7-1-4-学生对象-练习" class="headerlink" title="7.1.4 学生对象-练习"></a>7.1.4 学生对象-练习</h4><ul><li>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用</li><li>分析：<ul><li>成员变量：姓名，年龄…</li><li>成员方法：学习，做作业…</li></ul></li><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomework</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-对象内存图"><a href="#7-2-对象内存图" class="headerlink" title="7.2 对象内存图"></a>7.2 对象内存图</h3><p>Java内存分配：</p><ul><li>堆：new出来的东西会在这块内存中开辟空间并产生地址</li><li>栈：方法运行时所进入的内存，变量也是在这里</li><li>方法区：字节码文件加载时进入的内存</li><li>本地方法栈</li><li>寄存器</li></ul><h4 id="7-2-1-单个对象内存图"><a href="#7-2-1-单个对象内存图" class="headerlink" title="7.2.1 单个对象内存图"></a>7.2.1 单个对象内存图</h4><p><img src="/2024/07/07/Java/Java/image-20221206143324833.png" alt="image-20221206143324833"></p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221206144247399.png" alt="image-20221206144247399"></p><h4 id="7-2-2-多个对象内存图"><a href="#7-2-2-多个对象内存图" class="headerlink" title="7.2.2 多个对象内存图"></a>7.2.2 多个对象内存图</h4><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221206144953395.png" alt="image-20221206144953395"></p><ul><li>总结：</li></ul><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p><h4 id="7-2-3-多个引用指向同一个对象"><a href="#7-2-3-多个引用指向同一个对象" class="headerlink" title="7.2.3 多个引用指向同一个对象"></a>7.2.3 多个引用指向同一个对象</h4><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221206145743062.png" alt="image-20221206145743062"></p><h3 id="7-3-成员变量和局部变量"><a href="#7-3-成员变量和局部变量" class="headerlink" title="7.3 成员变量和局部变量"></a>7.3 成员变量和局部变量</h3><h4 id="7-3-1-成员变量和局部变量的区别"><a href="#7-3-1-成员变量和局部变量的区别" class="headerlink" title="7.3.1 成员变量和局部变量的区别"></a>7.3.1 成员变量和局部变量的区别</h4><ul><li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，随着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul><h3 id="7-4-封装"><a href="#7-4-封装" class="headerlink" title="7.4 封装"></a>7.4 封装</h3><h4 id="7-4-1-封装思想"><a href="#7-4-1-封装思想" class="headerlink" title="7.4.1 封装思想"></a>7.4.1 封装思想</h4><ol><li><p>封装概述<br>是面向对象三大特征之一（封装，继承，多态）</p><p><strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong> </p></li><li><p>封装代码实现<br>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private，提供对应的getXxx()&#x2F;setXxx()方法</p></li></ol><h4 id="7-4-2-private关键字"><a href="#7-4-2-private关键字" class="headerlink" title="7.4.2 private关键字"></a>7.4.2 private关键字</h4><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p><ul><li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li><li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li></ul></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get/set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//调用show方法</span></span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-4-3-private的使用"><a href="#7-4-3-private的使用" class="headerlink" title="7.4.3 private的使用"></a>7.4.3 private的使用</h4><ul><li><p>需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出  林青霞，30 </p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用set方法给成员变量赋值</span></span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用get方法获取成员变量的值</span></span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;---&quot;</span> + s.getAge());</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-4-4-this关键字"><a href="#7-4-4-this关键字" class="headerlink" title="7.4.4 this关键字"></a>7.4.4 this关键字</h4><p>同名时，调用的时候采用<strong>就近原则</strong>，谁离得近，用谁</p><p>this的本质：所在方法调用者的地址值</p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221206151107714.png" alt="image-20221206151107714"></p><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221206151400728.png" alt="image-20221206151400728"></p><ul><li>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）<ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-构造方法"><a href="#7-5-构造方法" class="headerlink" title="7.5 构造方法"></a>7.5 构造方法</h3><h4 id="7-5-1-构造方法概述"><a href="#7-5-1-构造方法概述" class="headerlink" title="7.5.1 构造方法概述"></a>7.5.1 构造方法概述</h4><p>构造方法是一种特殊的方法</p><ul><li><p>作用：创建对象   Student stu &#x3D; <strong>new Student();</strong></p></li><li><p>格式：</p><p>public class 类名{</p><p>​        修饰符 类名( 参数 ) {</p><p>​        }</p><p>}</p></li><li><p>功能：主要是完成对象数据的初始化</p></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-2-构造方法的注意事项"><a href="#7-5-2-构造方法的注意事项" class="headerlink" title="7.5.2 构造方法的注意事项"></a>7.5.2 构造方法的注意事项</h4><ul><li>构造方法的创建</li></ul><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法</p><ul><li>构造方法的重载</li></ul><p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p><ul><li>推荐的使用方式</li></ul><p>无论是否使用，都手工书写无参数构造方法</p><ul><li>重要功能！</li></ul><p>可以使用带参构造，为成员变量进行初始化</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(int age)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">30</span>);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name,int age)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-3-标准类制作"><a href="#7-5-3-标准类制作" class="headerlink" title="7.5.3 标准类制作"></a>7.5.3 标准类制作</h4><p>① 类名需要见名知意</p><p>② 成员变量使用private修饰</p><p>③ 提供至少两个构造方法 </p><ul><li>无参构造方法</li><li>带全部参数的构造方法</li></ul><p>④ get和set方法 </p><p>​提供每一个成员变量对应的setXxx()&#x2F;getXxx()</p><p>⑤ 如果还有其他行为，也需要写上</p><h4 id="7-5-4-练习1"><a href="#7-5-4-练习1" class="headerlink" title="7.5.4 练习1"></a>7.5.4 练习1</h4><p>需求：</p><p>​定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。 </p><ul><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象并为其成员变量赋值的两种方式</span></span><br><span class="line"><span class="comment">        1:无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line"><span class="comment">        2:使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">30</span>);</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-4-练习2"><a href="#7-5-4-练习2" class="headerlink" title="7.5.4 练习2"></a>7.5.4 练习2</h4><p><img src="/2024/07/07/Java/Java/111.jpg" alt="111"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//1.私有化全部的成员变量</span></span><br><span class="line">    <span class="comment">//2.空参构造</span></span><br><span class="line">    <span class="comment">//3.带全部参数的构造</span></span><br><span class="line">    <span class="comment">//4.针对于每一个私有化的成员变量都要提供其对应的get和set方法</span></span><br><span class="line">    <span class="comment">//5.如果当前事物还有其他行为，那么也要写出来，比如学生的吃饭，睡觉等行为</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String email;<span class="comment">//邮箱</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带全部参数的构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String password, String email, <span class="type">char</span> gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get和set</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//写一个标准的javabean类</span></span><br><span class="line">        <span class="comment">//咱们在课后只要能把这个标准的javabean能自己写出来，那么就表示今天的知识点就ok了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用空参构造创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">//如果利用空参创建对象，还想赋值只能用set方法赋值</span></span><br><span class="line">        u1.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        u1.setPassword(<span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line">        u1.setEmail(<span class="string">&quot;itheima@itcast.cn&quot;</span>);</span><br><span class="line">        u1.setGender(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        u1.setAge(<span class="number">23</span>);</span><br><span class="line">        <span class="comment">//获取属性的值并打印</span></span><br><span class="line">        System.out.println(u1.getUsername() + <span class="string">&quot;, &quot;</span> + u1.getPassword()</span><br><span class="line">                + <span class="string">&quot;, &quot;</span> + u1.getEmail() + <span class="string">&quot;, &quot;</span> + u1.getGender() + <span class="string">&quot;, &quot;</span> + u1.getAge());</span><br><span class="line">        u1.eat();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单的办法</span></span><br><span class="line">        <span class="comment">//利用带全部参数的构造来创建对象</span></span><br><span class="line">        <span class="comment">//快捷键:ctrl + p</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;12345678&quot;</span>,<span class="string">&quot;lisi@itcast.cn&quot;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">24</span>);</span><br><span class="line">        System.out.println(u2.getUsername() + <span class="string">&quot;, &quot;</span> + u2.getPassword()</span><br><span class="line">                + <span class="string">&quot;, &quot;</span> + u2.getEmail() + <span class="string">&quot;, &quot;</span> + u2.getGender() + <span class="string">&quot;, &quot;</span> + u2.getAge());</span><br><span class="line">        u2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-6-综合练习"><a href="#7-6-综合练习" class="headerlink" title="7.6 综合练习"></a>7.6 综合练习</h3><h4 id="7-6-1-文字版格斗游戏"><a href="#7-6-1-文字版格斗游戏" class="headerlink" title="7.6.1 文字版格斗游戏"></a>7.6.1 文字版格斗游戏</h4><p><img src="/2024/07/07/Java/Java/../../../Blogs/Java/Java.assets/image-20221206152950187.png" alt="image-20221206152950187"> </p><h2 id="八、常用API"><a href="#八、常用API" class="headerlink" title="八、常用API"></a>八、常用API</h2><h3 id="8-1-API"><a href="#8-1-API" class="headerlink" title="8.1 API"></a>8.1 API</h3><h4 id="8-1-1-API概述"><a href="#8-1-1-API概述" class="headerlink" title="8.1.1 API概述"></a>8.1.1 API概述</h4><ul><li><p>什么是API</p><p>​API (Application Programming Interface) ：应用程序编程接口</p></li><li><p>java中的API</p><p>​指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p></li></ul><h4 id="8-1-2-如何使用API帮助文档"><a href="#8-1-2-如何使用API帮助文档" class="headerlink" title="8.1.2 如何使用API帮助文档"></a>8.1.2 如何使用API帮助文档</h4><p><a href="https://blog.csdn.net/shizheng_Li/article/details/114281185">Java API帮助文档怎么查找？_阿正的梦工坊的博客-CSDN博客_java帮助文档在哪</a></p><ul><li>打开帮助文档</li></ul><p><img src="/2024/07/07/Java/Java/01.png" alt="01"></p><ul><li>找到索引选项卡中的输入框</li></ul><p><img src="/2024/07/07/Java/Java/02.png" alt="02"></p><ul><li>在输入框中输入Random</li></ul><p><img src="/2024/07/07/Java/Java/03.png" alt="03"></p><ul><li>看类在哪个包下</li></ul><p><img src="/2024/07/07/Java/Java/04.png" alt="04"></p><ul><li>看类的描述</li></ul><p><img src="/2024/07/07/Java/Java/05.png" alt="05"></p><ul><li>看构造方法</li></ul><p><img src="/2024/07/07/Java/Java/06.png" alt="06"></p><ul><li>看成员方法</li></ul><p><img src="/2024/07/07/Java/Java/07.png" alt="07"></p><h3 id="8-2-String类"><a href="#8-2-String类" class="headerlink" title="8.2 String类"></a>8.2 String类</h3><h4 id="8-2-1-String类概述"><a href="#8-2-1-String类概述" class="headerlink" title="8.2.1 String类概述"></a>8.2.1 String类概述</h4><p>​String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</p><h4 id="8-2-2-String类的特点"><a href="#8-2-2-String类的特点" class="headerlink" title="8.2.2 String类的特点"></a>8.2.2 String类的特点</h4><ul><li>字符串不可变，它们的值在创建后不能被更改</li><li>虽然 String 的值是不可变的，但是它们可以被共享</li><li>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</li></ul><h4 id="8-2-3-String类的构造方法"><a href="#8-2-3-String类的构造方法" class="headerlink" title="8.2.3 String类的构造方法"></a>8.2.3 String类的构造方法</h4><ul><li><p>常用的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public   String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public   String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s &#x3D;   “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public String()：创建一个空白字符串对象，不含有任何内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;s1:&quot;</span> + s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(char[] chs)：根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="comment">// 需求：修改字符串中的内容</span></span><br><span class="line">        <span class="comment">// 字符串变为字符，修改，再变为字符串</span></span><br><span class="line">        <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2:&quot;</span> + s2);<span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="comment">// 应用场景：以后再网络当中传输的数据的数据其实都是字节信息</span></span><br><span class="line">        <span class="comment">// 我们一般要把字节信息进行转换，转成字符串，此时就要用到这个</span></span><br><span class="line">        <span class="type">byte</span>[] bys = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bys);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3:&quot;</span> + s3);<span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = “abc”;直接赋值的方式创建字符串对象，内容就是abc</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;s4:&quot;</span> + s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2-4-创建字符串对象两种方式的区别"><a href="#8-2-4-创建字符串对象两种方式的区别" class="headerlink" title="8.2.4 创建字符串对象两种方式的区别"></a>8.2.4 创建字符串对象两种方式的区别</h4><ul><li><p>通过构造方法创建</p><p>​通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p>直接赋值方式创建</p><p>​以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p></li></ul><h4 id="8-2-5-字符串的比较"><a href="#8-2-5-字符串的比较" class="headerlink" title="8.2.5 字符串的比较"></a>8.2.5 字符串的比较</h4><h5 id="①、-号的作用"><a href="#①、-号的作用" class="headerlink" title="①、&#x3D;&#x3D;号的作用"></a>①、&#x3D;&#x3D;号的作用</h5><ul><li>比较基本数据类型：比较的是具体的值</li><li>比较引用数据类型：比较的是对象地址值</li></ul><h5 id="②、equals方法的作用"><a href="#②、equals方法的作用" class="headerlink" title="②、equals方法的作用"></a>②、equals方法的作用</h5><ul><li><p>方法介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(String s)</span>     比较两个字符串内容是否相同、区分大小写</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equalslgnoreCase</span><span class="params">(要比较的字符串)</span> 忽略大小写的比较</span><br></pre></td></tr></table></figure></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">        <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equals(s3));</span><br><span class="line">        System.out.println(s3.equals(s4));</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2-6-用户登录案例"><a href="#8-2-6-用户登录案例" class="headerlink" title="8.2.6 用户登录案例"></a>8.2.6 用户登录案例</h4><h5 id="①、案例需求"><a href="#①、案例需求" class="headerlink" title="①、案例需求"></a>①、案例需求</h5><p>​已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p><h5 id="②、代码实现"><a href="#②、代码实现" class="headerlink" title="②、代码实现"></a>②、代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span>登录案例 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量用来记录正确的用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rightUsername</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rightPassword</span> <span class="operator">=</span> <span class="string">&quot;1234qwer&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.键盘录入用户名和密码</span></span><br><span class="line">        <span class="comment">//ctrl + alt + T 选择包裹方式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;<span class="comment">//0 1 2</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.判断比较</span></span><br><span class="line">            <span class="keyword">if</span> (username.equals(rightUsername) &amp;&amp; password.equals(rightPassword)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="comment">//如果正确，循环结束</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//最后一次机会</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;账户&quot;</span> + username + <span class="string">&quot;被锁定，请联系黑马程序员官方小姐姐：XXXXXXX&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//不是最后一次机会</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;用户名或密码错误，登录失败,还剩下&quot;</span> + (<span class="number">2</span> - i) + <span class="string">&quot;次机会&quot;</span>);<span class="comment">//2 1 0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-7-遍历字符串案例"><a href="#8-2-7-遍历字符串案例" class="headerlink" title="8.2.7 遍历字符串案例"></a>8.2.7 遍历字符串案例</h4><h5 id="①、案例需求-1"><a href="#①、案例需求-1" class="headerlink" title="①、案例需求"></a>①、案例需求</h5><p>​键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><h5 id="②、直接遍历字符串"><a href="#②、直接遍历字符串" class="headerlink" title="②、直接遍历字符串"></a>②、直接遍历字符串</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>字符串直接遍历 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//两个方法：</span></span><br><span class="line">        <span class="comment">//charAt()：会根据索引获取对应的字符</span></span><br><span class="line">        <span class="comment">//length(): 会返回字符串的长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示字符串的每一个索引</span></span><br><span class="line">            <span class="comment">//索引的范围：0 ~  长度-1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据索引获取字符串里面的每一个字符</span></span><br><span class="line">            <span class="comment">//ctrl + alt + V 自动生成左边的接受变量</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-8-统计字符次数案例"><a href="#8-2-8-统计字符次数案例" class="headerlink" title="8.2.8 统计字符次数案例"></a>8.2.8 统计字符次数案例</h4><h5 id="①案例需求"><a href="#①案例需求" class="headerlink" title="①案例需求"></a>①案例需求</h5><p>​键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p><h5 id="②、代码实现-1"><a href="#②、代码实现-1" class="headerlink" title="②、代码实现"></a>②、代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span>统计个数 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，统计大写，小写，数字出现的次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.统计 --- 计数器count</span></span><br><span class="line">        <span class="comment">//此时我要统计的有3样东西，所以要定义3个计数器分别进行统计</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bigCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">smallCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//得到这个字符串里面每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 表示字符串中的索引</span></span><br><span class="line">            <span class="comment">//c 表示字符串中的每一个字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对c进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                smallCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                bigCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                numberCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.当循环结束之后，三个变量记录的就是对应的个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大写字符有:&quot;</span> + bigCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字符有:&quot;</span> + smallCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字字符有:&quot;</span> + numberCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-9-字符串拼接案例"><a href="#8-2-9-字符串拼接案例" class="headerlink" title="8.2.9 字符串拼接案例"></a>8.2.9 字符串拼接案例</h4><h5 id="①、案例需求-2"><a href="#①、案例需求-2" class="headerlink" title="①、案例需求"></a>①、案例需求</h5><p>​定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p><p>​并在控制台输出结果。例如，数组为 int[] arr &#x3D; {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p><h5 id="②、代码实现-2"><a href="#②、代码实现-2" class="headerlink" title="②、代码实现"></a>②、代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span>数组拼接成字符串 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</span></span><br><span class="line">        <span class="comment">//并在控制台输出结果。例如，数组为 int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line">        <span class="comment">//执行方法后的输出结果为：[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arrToString(arr);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//作用：把一个数组变成字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrToString</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//拼接左括号</span></span><br><span class="line">        s = s + <span class="string">&quot;[&quot;</span>; <span class="comment">//此时是拿着长度为0的字符串，跟[进行拼接，产生一个新的字符串。</span></span><br><span class="line">        <span class="comment">//把新的字符串再赋值给s，此时变量s记录的就是新的字符串&quot;[&quot;的地址值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面我想得到数组里面的每一个元素并进行拼接</span></span><br><span class="line">        <span class="comment">//那么就需要遍历数组，得到每一个元素才行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//假设第一次循环:i = 0 获取的就是0索引上的元素</span></span><br><span class="line">            <span class="comment">//在拼接的时候：&quot;[&quot; + 1 + &quot;, &quot; 拼接完毕之后产生一个新的字符串 &quot;[1, &quot;</span></span><br><span class="line">            <span class="comment">//第二次循环：i = 1 获取的就是1索引上的元素</span></span><br><span class="line">            <span class="comment">//在拼接的时候： 此时s就是第一次循环结束后拼接完毕的结果：&quot;[1, &quot;</span></span><br><span class="line">            <span class="comment">//在拼接的时候：&quot;[1, &quot; + 2 + &quot;, &quot; 拼接完毕之后产生一个新的字符串 &quot;[1, 2, &quot;</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">           <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//如果是最后一个元素，那么不需要拼接逗号空格</span></span><br><span class="line">               s = s + arr[i];</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//如果不是最后一个元素，需要拼接元素和逗号空格</span></span><br><span class="line">               s = s + arr[i] + <span class="string">&quot;, &quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等循环结束之后，再拼接最后一个右括号</span></span><br><span class="line">        s = s + <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来遍历数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line">        <span class="comment">//我们现在要知道，这个最终结果是怎么来的？</span></span><br><span class="line">        <span class="comment">//从到右依次打印得来的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-10字符串反转案例"><a href="#8-2-10字符串反转案例" class="headerlink" title="8.2.10字符串反转案例"></a>8.2.10字符串反转案例</h4><h5 id="①、案例需求-3"><a href="#①、案例需求-3" class="headerlink" title="①、案例需求"></a>①、案例需求</h5><p>​定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p><p>​例如，键盘录入 abc，输出结果 cba</p><h5 id="②、代码实现-3"><a href="#②、代码实现-3" class="headerlink" title="②、代码实现"></a>②、代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span>反转字符串 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</span></span><br><span class="line"><span class="comment">        例如，键盘录入 abc，输出结果 cba*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//2.定义一个方法，反转字符串</span></span><br><span class="line">        <span class="comment">//abc  ---&gt;  cba</span></span><br><span class="line">        <span class="comment">//可以把字符串倒着遍历，再拼接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reverse(str);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注释：方法的作用就是反转字符串</span></span><br><span class="line">    <span class="comment">//把传递进来的字符串进行反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span>&#123;<span class="comment">//abc</span></span><br><span class="line">        <span class="comment">//核心思想：倒着遍历并进行拼接就可以了</span></span><br><span class="line">        <span class="comment">//fori :正着遍历  forr：倒着遍历</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示字符串里面的每一个索引（倒着的）</span></span><br><span class="line">            <span class="comment">//我们就可以拿到里面的每一个字符并拼接</span></span><br><span class="line">            s = s + str.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把倒着拼接之后的结果返回即可</span></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-11-金额转换"><a href="#8-2-11-金额转换" class="headerlink" title="8.2.11 金额转换"></a>8.2.11 金额转换</h4><h5 id="①、-案例需求"><a href="#①、-案例需求" class="headerlink" title="①、 案例需求"></a>①、 案例需求</h5><p>​把2135变成：零佰零拾零万贰仟壹佰叁拾伍元 </p><p>​把789变成：零佰零拾零万零仟柒佰捌拾玖元</p><h5 id="②、-代码实现"><a href="#②、-代码实现" class="headerlink" title="②、 代码实现"></a>②、 代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入一个金额</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> money;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入一个金额&quot;</span>);</span><br><span class="line">            money = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (money &gt;= <span class="number">0</span> &amp;&amp; money &lt;= <span class="number">9999999</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;金额无效&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来表示钱的大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">moneyStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.得到money里面的每一位数字,再转成中文</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;<span class="comment">//2135</span></span><br><span class="line">            <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> money % <span class="number">10</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">capitalNumber</span> <span class="operator">=</span> getCapitalNumber(ge);</span><br><span class="line">            <span class="comment">//把转换之后的大写拼接到moneyStr当中</span></span><br><span class="line">            moneyStr = capitalNumber + moneyStr;</span><br><span class="line">            <span class="comment">//第一次循环 ： &quot;伍&quot; + &quot;&quot; = &quot;伍&quot;</span></span><br><span class="line">            <span class="comment">//第二次循环 ： &quot;叁&quot; + &quot;伍&quot; = &quot;叁伍&quot;</span></span><br><span class="line">            <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">            money = money / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">            <span class="keyword">if</span> (money == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.在前面补0，补齐7位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">7</span> - moneyStr.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            moneyStr = <span class="string">&quot;零&quot;</span> + moneyStr;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(moneyStr);<span class="comment">//零零零贰壹叁伍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.插入单位</span></span><br><span class="line">        <span class="comment">//定义一个数组表示单位</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//               零    零   零   贰   壹   叁   伍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历moneyStr，依次得到 零    零   零   贰   壹   叁   伍</span></span><br><span class="line">        <span class="comment">//然后把arr的单位插入进去</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moneyStr.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> moneyStr.charAt(i);</span><br><span class="line">            <span class="comment">//把大写数字和单位拼接到result当中</span></span><br><span class="line">            result = result + c + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.打印最终结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法把数字变成大写的中文</span></span><br><span class="line">    <span class="comment">//1 -- 壹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//定义数组，让数字跟大写的中文产生一个对应关系</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> arr[number];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-12-手机号屏蔽"><a href="#8-2-12-手机号屏蔽" class="headerlink" title="8.2.12 手机号屏蔽"></a>8.2.12 手机号屏蔽</h4><p>需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</p><p>最终效果为：<code>131****9468</code></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span>手机号屏蔽 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</span></span><br><span class="line"><span class="comment">        最终效果为：131****9468*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个手机号码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入手机号码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> sc.next();<span class="comment">//13112349408</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.截取手机号码中的前三位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">star</span> <span class="operator">=</span> phoneNumber.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.截取手机号码中的最后四位</span></span><br><span class="line">        <span class="comment">//此时我用substring方法，是用1个参数的，还是两个参数的？1个参数的会更好</span></span><br><span class="line">        <span class="comment">//因为现在我要截取到最后，所以建议使用1个参数的。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> phoneNumber.substring(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.拼接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> star + <span class="string">&quot;****&quot;</span> + end;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-13-敏感词替换"><a href="#8-2-13-敏感词替换" class="headerlink" title="8.2.13 敏感词替换"></a>8.2.13 敏感词替换</h4><p>需求1：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span>敏感词替换 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个变量表示骂人的话</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">talk</span> <span class="operator">=</span> <span class="string">&quot;后裔你玩什么啊，TMD&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.把这句话中的敏感词进行替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> talk.replace(<span class="string">&quot;TMD&quot;</span>, <span class="string">&quot;***&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(talk);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需求2：如果要替换的敏感词比较多怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span>多个敏感词替换 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实际开发中，敏感词会有很多很多</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先键盘录入要说的话</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要说的话&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">talk</span> <span class="operator">=</span> sc.next();<span class="comment">//后裔你玩什么啊，TMD,GDX,ctmd,ZZ</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.定义一个数组用来存多个敏感词</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;TMD&quot;</span>,<span class="string">&quot;GDX&quot;</span>,<span class="string">&quot;ctmd&quot;</span>,<span class="string">&quot;ZZ&quot;</span>,<span class="string">&quot;lj&quot;</span>,<span class="string">&quot;FW&quot;</span>,<span class="string">&quot;nt&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把说的话中所有的敏感词都替换为***</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//i 索引</span></span><br><span class="line">            <span class="comment">//arr[i] 元素 --- 敏感词</span></span><br><span class="line">            talk = talk.replace(arr[i],<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.打印结果</span></span><br><span class="line">        System.out.println(talk);<span class="comment">//后裔你玩什么啊，***,***,***,***</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-14-身份证信息查看"><a href="#8-2-14-身份证信息查看" class="headerlink" title="8.2.14 身份证信息查看"></a>8.2.14 身份证信息查看</h4><p>​身份证的每一位都是有固定的含义：</p><ul><li>1、2位：省份 </li><li>3、4位：城市 </li><li>5、6位：区县 </li><li>7-14位：出生年、月、日 </li><li>15、16位：所在地派出所 </li><li>17位：性别（奇数男性，偶数女性）</li><li>18位：个人信息码（随机产生）</li></ul><p>要求打印内容方式如下：</p><p>​人物信息为：</p><p>​出生年月日：XXXX年X月X日</p><p>​性别为：男&#x2F;女</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个字符串记录身份证号码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;321281202001011234&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取出生年月日</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> id.substring(<span class="number">6</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> id.substring(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> id.substring(<span class="number">12</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;人物信息为：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;出生年月日:&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取性别</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> id.charAt(<span class="number">16</span>);<span class="comment">//&#x27;3&#x27;  ---&gt; 3</span></span><br><span class="line">        <span class="comment">//利用ASCII码表进行转换</span></span><br><span class="line">        <span class="comment">//&#x27;0&#x27; ---&gt;  48</span></span><br><span class="line">        <span class="comment">//&#x27;1&#x27; ---&gt;  49</span></span><br><span class="line">        <span class="comment">//&#x27;2&#x27; ---&gt;  50</span></span><br><span class="line">        <span class="comment">//&#x27;3&#x27; ---&gt;  51</span></span><br><span class="line">        <span class="comment">//&#x27;4&#x27; ---&gt;  52</span></span><br><span class="line">        <span class="comment">//&#x27;5&#x27; ---&gt;  53</span></span><br><span class="line">        <span class="comment">//&#x27;6&#x27; ---&gt;  54</span></span><br><span class="line">        <span class="comment">//&#x27;7&#x27; ---&gt;  55</span></span><br><span class="line">        <span class="comment">//&#x27;8&#x27; ---&gt;  56</span></span><br><span class="line">        <span class="comment">//&#x27;9&#x27; ---&gt;  57</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> gender - <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别为:女&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别为:男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-StringBuilder"><a href="#8-3-StringBuilder" class="headerlink" title="8.3 StringBuilder"></a>8.3 StringBuilder</h3><p>StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。</p><p>作用：提高字符串的操作效率</p><p>应用场景：</p><ul><li>字符串拼接</li><li>字符串反转</li></ul><h4 id="8-3-1-基本使用"><a href="#8-3-1-基本使用" class="headerlink" title="8.3.1 基本使用"></a>8.3.1 基本使用</h4><p><strong>构造方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String str)</td><td>根据字符串的内容，来创建可变字符串对象</td></tr></tbody></table><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringgBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder revverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length()</td><td>返回长度（字符出现的个数）</td></tr><tr><td>public String toString()</td><td>通过toString()就可以实现把StringBuilder转化为String</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加元素</span></span><br><span class="line">        <span class="comment">/*sb.append(1);</span></span><br><span class="line"><span class="comment">        sb.append(2.3);</span></span><br><span class="line"><span class="comment">        sb.append(true);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        sb.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();</span><br><span class="line">        System.out.println(len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        <span class="comment">//普及：</span></span><br><span class="line">        <span class="comment">//因为StringBuilder是Java已经写好的类</span></span><br><span class="line">        <span class="comment">//java在底层对他做了一些特殊处理。</span></span><br><span class="line">        <span class="comment">//打印对象不是地址值而是属性值。</span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-链式编程"><a href="#8-3-2-链式编程" class="headerlink" title="8.3.2 链式编程"></a>8.3.2 链式编程</h4><p><strong>链式编程：</strong>当我们在调用一个方法的时候，不需要用变量接收它的结果，可以继续调用其他方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加字符串</span></span><br><span class="line">        <span class="comment">// 链式编程</span></span><br><span class="line">        sb.append(<span class="string">&quot;aaa&quot;</span>).append(<span class="string">&quot;bbb&quot;</span>).append(<span class="string">&quot;ccc&quot;</span>).append(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);<span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.再把StringBuilder变回字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(str);<span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-练习1：对称字符串"><a href="#8-3-3-练习1：对称字符串" class="headerlink" title="8.3.3 练习1：对称字符串"></a>8.3.3 练习1：对称字符串</h4><p>需求：</p><p>​键盘接受一个字符串，程序判断出该字符串是否是对称字符串，并在控制台打印是或不是</p><pre><code>  对称字符串：123321、111    非对称字符串：123123</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo6</span> &#123;</span><br><span class="line">    <span class="comment">//使用StringBuilder的场景：</span></span><br><span class="line">    <span class="comment">//1.字符串的拼接</span></span><br><span class="line">    <span class="comment">//2.字符串的反转</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.反转键盘录入的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(str).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.比较</span></span><br><span class="line">        <span class="keyword">if</span>(str.equals(result))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前字符串是对称字符串&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前字符串不是对称字符串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-3-4-练习2：拼接字符串"><a href="#8-3-4-练习2：拼接字符串" class="headerlink" title="8.3.4 练习2：拼接字符串"></a>8.3.4 练习2：拼接字符串</h4><p>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回。</p><p>​          调用该方法，并在控制台输出结果。</p><p>​          例如：数组为int[] arr &#x3D; {1,2,3}; </p><p>​          执行方法后的输出结果为：[1, 2, 3]</p><p>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringbuilderdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用方法把数组变成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arrToString(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrToString</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-4-StringJoiner"><a href="#8-4-StringJoiner" class="headerlink" title="8.4 StringJoiner"></a>8.4 StringJoiner</h3><ul><li>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。</li><li>作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。 </li><li>JDK8出现的</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner(间隔符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号</td></tr><tr><td>public StringJoiner(间隔符号，开始符号，结束符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号，开始符号，结束符号</td></tr></tbody></table><p><strong>成员方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner add(添加的内容)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public int length()</td><td>返回长度（字符出现的个数）</td></tr><tr><td>public String toString()</td><td>返回一个字符串（该字符串就是拼接之后的结果）</td></tr></tbody></table><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个对象，并指定中间的间隔符号</span></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">//3.打印结果</span></span><br><span class="line">System.out.println(sj);<span class="comment">//aaa---bbb---ccc</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sj.length();</span><br><span class="line">System.out.println(len);<span class="comment">//15</span></span><br><span class="line"><span class="comment">//3.打印</span></span><br><span class="line">System.out.println(sj);<span class="comment">//[aaa, bbb, ccc]</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sj.toString();</span><br><span class="line">System.out.println(str);<span class="comment">//[aaa, bbb, ccc]</span></span><br></pre></td></tr></table></figure><h3 id="关于字符串的小扩展："><a href="#关于字符串的小扩展：" class="headerlink" title="关于字符串的小扩展："></a>关于字符串的小扩展：</h3><ol><li><p>字符串存储的内存原理</p><p>String s &#x3D; “abc”；直接赋值</p><p>特点：</p><p>​此时字符串abc是存在字符串常量池中的。</p><p>​先检查字符串常量池中有没有字符串abc，如果有，不会创建新的，而是直接复用。如果没有abc，才会创建一个新的。</p><p>所以，直接赋值的方式，代码简单，而且节约内存。</p></li><li><p>new出来的字符串</p><p>看到new关键字，一定是在堆里面开辟了一个小空间。</p><p>String s1 &#x3D; new String（“abc”）；</p><p>String s2 &#x3D; “abc”；</p><p>s1记录的是new出来的，在堆里面的地址值。</p><p>s2是直接赋值的，所以记录的是字符串常量池中的地址值。</p></li><li><p>&#x3D;&#x3D;号比较的到底是什么？</p><p>如果比较的是基本数据类型：比的是具体的数值是否相等。</p><p>如果比较的是引用数据类型：比的是地址值是否相等。</p><p>结论：&#x3D;&#x3D;只能用于比较基本数据类型。不能比较引用数据类型。</p></li></ol><h3 id="8-5-字符串原理"><a href="#8-5-字符串原理" class="headerlink" title="8.5 字符串原理"></a>8.5 字符串原理</h3><h4 id="8-5-1-字符串存储的内存原理"><a href="#8-5-1-字符串存储的内存原理" class="headerlink" title="8.5.1 字符串存储的内存原理"></a>8.5.1 字符串存储的内存原理</h4><ul><li>直接赋值会复用字符串常量池中的</li><li>new出来不会复用，而是开辟一个新的空间</li></ul><h4 id="8-5-2-号比较的到底是什么"><a href="#8-5-2-号比较的到底是什么" class="headerlink" title="8.5.2 &#x3D;&#x3D;号比较的到底是什么"></a>8.5.2 &#x3D;&#x3D;号比较的到底是什么</h4><ul><li>基本数据类型比较数据值</li><li>引用数据类型比较地址值</li></ul><h4 id="8-5-3-字符串拼接的低层原理"><a href="#8-5-3-字符串拼接的低层原理" class="headerlink" title="8.5.3 字符串拼接的低层原理"></a>8.5.3 字符串拼接的低层原理</h4><p><strong>&#x3D;右边没有变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拼接的时候没有变量，都是字符串。触发字符串的优化机制，在编译的时候已经是最终的结果了。</p><p><strong>&#x3D;右边有变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1 + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDK8以前，系统底层会自动你创建一个StringBuilder对象，然后调用其append方法完成拼接。拼接后，再调用toString方法转换为String类型，而toString方法的底层是直接new了一个字符串对象</li><li>没进行一次，至少创建两个对象</li><li>JDK8之后，系统会预估要字符串拼接之后的总大小，把要拼接的内容都放在数组中，此时也是产生一个新的字符串</li><li>先预估空间，再创建对象</li></ul><p>如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存</p><h4 id="8-5-4-StringBuilder提高效率原理图"><a href="#8-5-4-StringBuilder提高效率原理图" class="headerlink" title="8.5.4 StringBuilder提高效率原理图"></a>8.5.4 StringBuilder提高效率原理图</h4><ul><li>所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</li></ul><h4 id="8-5-5-StringBuilder源码分析"><a href="#8-5-5-StringBuilder源码分析" class="headerlink" title="8.5.5 StringBuilder源码分析"></a>8.5.5 StringBuilder源码分析</h4><ul><li>默认创建一个长度为16的字节数组</li><li>添加的内容长度小于16，直接存</li><li>添加的内容大于16会扩容（原来的容量*2 + 2）</li><li>如果扩容之后还不够，以实际长度为准</li></ul><h2 id="九、ArrayList"><a href="#九、ArrayList" class="headerlink" title="九、ArrayList"></a>九、ArrayList</h2><h3 id="集合和数组的优势对比："><a href="#集合和数组的优势对比：" class="headerlink" title="集合和数组的优势对比："></a>集合和数组的优势对比：</h3><ol><li>长度可变</li><li>存储类型：可以存储引用数据类型，基本数据类型需要变为包装类才可存储</li><li>添加数据的时候不需要考虑索引，默认将数据添加到末尾</li></ol><h3 id="9-1-ArrayList类概述"><a href="#9-1-ArrayList类概述" class="headerlink" title="9.1 ArrayList类概述"></a>9.1 ArrayList类概述</h3><ul><li><p>什么是集合</p><p>​提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p></li><li><p>ArrayList集合的特点</p><p>​长度可以变化，只能存储引用数据类型。</p></li><li><p>泛型的使用</p><p>​用于约束集合中存储元素的数据类型</p></li></ul><h3 id="1-2-ArrayList类常用方法"><a href="#1-2-ArrayList类常用方法" class="headerlink" title="1.2 ArrayList类常用方法"></a>1.2 ArrayList类常用方法</h3><h4 id="1-2-1-构造方法"><a href="#1-2-1-构造方法" class="headerlink" title="1.2.1 构造方法"></a>1.2.1 构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象</td></tr></tbody></table><h4 id="1-2-2-成员方法"><a href="#1-2-2-成员方法" class="headerlink" title="1.2.2 成员方法"></a>1.2.2 成员方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(要添加的元素)</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public boolean remove(要删除的元素)</td><td>删除指定元素,返回值表示是否删除成功</td></tr><tr><td>public E  remove(int   index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E   set(int index,E   element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E   get(int   index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int   size()</td><td>返回集合中的元素的个数</td></tr></tbody></table><h4 id="1-2-3-示例代码"><a href="#1-2-3-示例代码" class="headerlink" title="1.2.3 示例代码"></a>1.2.3 示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        <span class="comment">// 泛型</span></span><br><span class="line">        <span class="comment">// ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();</span></span><br><span class="line">        <span class="comment">// JDK7：</span></span><br><span class="line">        <span class="comment">//此时我们创建的是ArrayList的对象，而ArrayList是java已经写号的一个类</span></span><br><span class="line">        <span class="comment">// 这个类在底层做了一些处理</span></span><br><span class="line">        <span class="comment">// 打印对象不是地址值，而是集合中存储数据内容</span></span><br><span class="line">        <span class="comment">// 在展示的时候会拿[]b</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(&quot;world&quot;));</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.remove(3));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.set(1,&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.set(3,&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E get(int index)：返回指定索引处的元素</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.get(0));</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.get(1));</span></span><br><span class="line">        <span class="comment">//        System.out.println(array.get(2));</span></span><br><span class="line">        <span class="comment">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size()：返回集合中的元素的个数</span></span><br><span class="line">        System.out.println(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;array:&quot;</span> + array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-ArrayList存储字符串并遍历"><a href="#1-3-ArrayList存储字符串并遍历" class="headerlink" title="1.3 ArrayList存储字符串并遍历"></a>1.3 ArrayList存储字符串并遍历</h3><h4 id="1-3-1-案例需求"><a href="#1-3-1-案例需求" class="headerlink" title="1.3.1 案例需求"></a>1.3.1 案例需求</h4><p>​创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p><h4 id="1-3-2-代码实现"><a href="#1-3-2-代码实现" class="headerlink" title="1.3.2 代码实现"></a>1.3.2 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//快捷键: list.fori 正向遍历</span></span><br><span class="line">        <span class="comment">//list.forr 倒着遍历</span></span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示集合里面的每一个索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//最大索引</span></span><br><span class="line">                System.out.print(list.get(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//非最大索引</span></span><br><span class="line">                System.out.print(list.get(i) + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-ArrayList存储学生对象并遍历"><a href="#1-4-ArrayList存储学生对象并遍历" class="headerlink" title="1.4 ArrayList存储学生对象并遍历"></a>1.4 ArrayList存储学生对象并遍历</h3><h4 id="1-4-1-案例需求"><a href="#1-4-1-案例需求" class="headerlink" title="1.4.1 案例需求"></a>1.4.1 案例需求</h4><p>​创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><h4 id="1-4-2-代码实现"><a href="#1-4-2-代码实现" class="headerlink" title="1.4.2 代码实现"></a>1.4.2 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建集合对象，用来存储数据</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把学生对象添加到集合中</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示集合中的每一个索引</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(stu.getName() + <span class="string">&quot;, &quot;</span> + stu.getAge());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-查找用户的索引"><a href="#1-5-查找用户的索引" class="headerlink" title="1.5 查找用户的索引"></a>1.5 查找用户的索引</h3><p>需求： </p><p>1，main方法中定义一个集合，存入三个用户对象。 </p><p>   用户属性为：id，username，password    </p><p>2，要求：定义一个方法，根据id查找对应的学生信息。</p><p>   如果存在，返回索引</p><p>   如果不存在，返回-1</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*需求：</span></span><br><span class="line"><span class="comment">        1，main方法中定义一个集合，存入三个用户对象。</span></span><br><span class="line"><span class="comment">        用户属性为：id，username，password</span></span><br><span class="line"><span class="comment">        2，要求：定义一个方法，根据id查找对应的学生信息。</span></span><br><span class="line"><span class="comment">        如果存在，返回索引</span></span><br><span class="line"><span class="comment">        如果不存在，返回-1*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建用户对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima001&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima002&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima003&quot;</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把用户对象添加到集合当中</span></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用方法，通过id获取对应的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(list, <span class="string">&quot;heima001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.我要干嘛？  根据id查找对应的学生信息</span></span><br><span class="line">    <span class="comment">//2.我干这件事情需要什么才能完成？   集合 id</span></span><br><span class="line">    <span class="comment">//3.方法的调用处是否需要继续使用方法的结果？</span></span><br><span class="line">    <span class="comment">//要用必须返回，不要用可以返回也可以不返回</span></span><br><span class="line">    <span class="comment">//明确说明需要有返回值 int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span> &#123;</span><br><span class="line">        <span class="comment">//遍历集合得到每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> u.getId();</span><br><span class="line">            <span class="keyword">if</span>(uid.equals(id))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为只有当集合里面所有的元素都比较完了，才能断定id是不存在的。</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-6-判断用户的是否存在"><a href="#1-6-判断用户的是否存在" class="headerlink" title="1.6 判断用户的是否存在"></a>1.6 判断用户的是否存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">        1，main方法中定义一个集合，存入三个用户对象。</span></span><br><span class="line"><span class="comment">        用户属性为：id，username，password</span></span><br><span class="line"><span class="comment">        2，要求：定义一个方法，根据id查找对应的学生信息。</span></span><br><span class="line"><span class="comment">        如果存在，返回true</span></span><br><span class="line"><span class="comment">        如果不存在，返回false*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义集合</span></span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima001&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima002&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;heima003&quot;</span>,<span class="string">&quot;wangwu&quot;</span>,<span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把用户对象添加到集合当中</span></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用方法，查询id是否存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> contains(list, <span class="string">&quot;heima001&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义在测试类中的方法需要加static</span></span><br><span class="line">    <span class="comment">//1.我要干嘛？ 我要根据id查询学生是否存在</span></span><br><span class="line">    <span class="comment">//2.我干这件事情，需要什么才能完成？ 集合 id</span></span><br><span class="line">    <span class="comment">//3.方法的调用处是否需要使用方法的结果？</span></span><br><span class="line">    <span class="comment">//如果要用，必须返回，如果不用，可以返回也可以不返回</span></span><br><span class="line">    <span class="comment">//但是本题明确说明需要返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span>&#123;</span><br><span class="line">        <span class="comment">//循环遍历集合，得到集合里面的每一个元素</span></span><br><span class="line">        <span class="comment">//再进行判断</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 索引  list.get(i); 元素</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="comment">//判断id是否存在，我是拿着谁跟谁比较</span></span><br><span class="line">            <span class="comment">//需要把用户对象里面的id拿出来再进行比较。</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> u.getId();</span><br><span class="line">            <span class="keyword">if</span>(id.equals(uid))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//return 关键字：作用就是结束方法。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有当集合里面所有的元素全部比较完毕才能认为是不存在的。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学</title>
      <link href="/2024/07/07/Math/discreteMathematics/"/>
      <url>/2024/07/07/Math/discreteMathematics/</url>
      
        <content type="html"><![CDATA[<p> A：选择</p><p>B：大题</p><p>C：没题型</p><p>考试时间：十三周（待定）</p><h1 id="一、命题逻辑基本概念"><a href="#一、命题逻辑基本概念" class="headerlink" title="一、命题逻辑基本概念"></a>一、命题逻辑基本概念</h1><ul><li>命题与联结词<ul><li>命题及其分类</li><li>联结词与符合命题</li></ul></li><li>命题公式及其赋值</li></ul><h2 id="1-1、命题与联结词"><a href="#1-1、命题与联结词" class="headerlink" title="1.1、命题与联结词"></a>1.1、命题与联结词</h2><p>命题：判断结果惟一的陈述句</p><p>命题的真值：判断的结果</p><p>真值的取值：真与假</p><p>真命题与假命题</p><p><strong>注意：</strong></p><p>感叹句、祈使句、疑问句都不是命题</p><p>陈述句中的悖论，判断结果不惟一确定的不是命题 </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301104309949.png" alt="image-20220301104309949"></p><p>有可能和联结词在一起出</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301104701712.png"></p><p><strong>否定联结词、合取联结词</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301110909458.png" alt="image-20220301110909458"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220319160159521.png" alt="image-20220319160159521"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301111526205.png" alt="image-20220301111526205"></p><p><strong>析取联结词</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301112324698-16461051299441.png"></p><p>例子：将下列命题符号化</p><p>（1）张晓静爱唱歌或爱听音乐</p><p>令p:张晓静爱唱歌，q：张晓静爱听音乐， p&vee;q</p><p><strong>蕴涵联结词</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505091737346.png" alt="image-20220505091737346"> </p><p>P为范围宽的，是充分条件；q为范围小的，是必要条件</p><p>取值方法</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301114311709.png" alt="image-20220301114311709"></p><p>如果地球是方的，则火星上有水。（真命题）</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301115435031.png"></p><p><strong>等价联结词</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505092409331.png" alt="image-20220505092409331"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303083450913.png" alt="image-20220303083450913"></p><p>例题：将下列命题符号化，并讨论他们的真值</p><p>（1）$\sqrt{3}$是无理数当且仅当加拿大位于亚洲1&leftrightarrow;0 &#x3D; 0</p><p>（2）2+3 &#x3D; 5 的充要条件是$\sqrt{3}$是无理数1&leftrightarrow;1 &#x3D; 1</p><p>p等价于q</p><p>小结：</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505092951479.png"></p><p>优先级：非、合取、析取、蕴涵、等价，同级从左到右顺序进行</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303085306503.png" alt="image-20220303085306503"></p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303091302200.png"></p><h2 id="1-２、命题变项与合式公式"><a href="#1-２、命题变项与合式公式" class="headerlink" title="1.２、命题变项与合式公式"></a>1.２、命题变项与合式公式</h2><p>命题常项</p><p>命题变项（命题变元）</p><p>常项与变项均用 p,q,r,…,p<sub>i</sub>,q<sub>i</sub>,r<sub>i</sub>…等表示</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505094105883.png" alt="image-20220505094105883"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303091956541.png" alt="image-20220303091956541"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303092724953.png" alt="image-20220303092724953"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303093100836.png" alt="image-20220303093100836"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303093214086.png" alt="image-20220303093214086"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220319155614438.png" alt="image-20220319155614438"></p><p>中间的几列是步骤，可有可无</p><p>公式的类型</p><p><strong>重言式</strong>（或<strong>永真式</strong>）：任何赋值下均为真</p><p><strong>矛盾式</strong>（或<strong>永假式</strong>）：任何赋值下均为假</p><p><strong>可满足式</strong>；该公式不是矛盾式</p><p>重言式是可满足式，但可满足式不一定为重言式</p><p>真值表的用途：</p><p>求出公式的全部成真赋值与成假赋值，判断公式的类型。</p><h2 id="1-3、题目"><a href="#1-3、题目" class="headerlink" title="1.3、题目"></a>1.3、题目</h2><p>例1.1 判断下列句子是否为命题。若是，判断真假命题。</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301104309949.png" alt="image-20220301104309949"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220319160159521.png" alt="image-20220319160159521"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220319160225093.png" alt="image-20220319160225093"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220301115435031.png">  </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505140224507.png" alt="image-20220505140224507"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303085306503.png" alt="image-20220303085306503"></p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303094353470.png" alt="image-20220303094353470"></p><p>（1）0（有理数：整数和分数）</p><p>（2）1</p><p>（3）0（非负整数）</p><p>（4）1</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220303091302200.png"></p><h1 id="二、命题逻辑等值演算"><a href="#二、命题逻辑等值演算" class="headerlink" title="二、命题逻辑等值演算"></a>二、命题逻辑等值演算</h1><ul><li>等值式等值演算</li><li>析取范式与合取范式，主析取范式与主合取范式</li><li>联结词完备集</li></ul><h2 id="2-1、等值式"><a href="#2-1、等值式" class="headerlink" title="2.1、等值式"></a>2.1、等值式</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220320150623436.png" alt="image-20220320150623436"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308102232362.png" alt="image-20220308102232362"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308102330391.png" alt="image-20220308102330391"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308102432955.png" alt="image-20220308102432955"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308103220566.png" alt="image-20220308103220566"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308103724258.png" alt="image-20220308103724258"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308104048089.png" alt="image-20220308104048089"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308104622569.png" alt="image-20220308104622569"></p><p>等值演算的应用：都是<strong>选择</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308105231790.png" alt="image-20220308105231790"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308105327971.png" alt="image-20220308105327971"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308110550847.png" alt="image-20220308110550847"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308112927575.png" alt="image-20220308112927575"></p><p>后两个是结论</p><h2 id="2-2、析取范式与合取范式"><a href="#2-2、析取范式与合取范式" class="headerlink" title="2.2、析取范式与合取范式"></a>2.2、析取范式与合取范式</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308113823698.png" alt="image-20220308113823698"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308114012419.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308114128050.png" alt="image-20220308114128050"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220308114555947.png" alt="image-20220308114555947"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310081939513.png" alt="image-20220310081939513"></p><p>右边的注释有问题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310082213464.png" alt="image-20220310082213464"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310083410082.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310084048667.png" alt="image-20220310084048667"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310084507269.png" alt="image-20220310084507269"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310085454907.png" alt="image-20220310085454907"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310085517757.png" alt="image-20220310085517757"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310091510696.png" alt="image-20220310091510696"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310091607018.png" alt="image-20220310091607018"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310092839575.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310093621087.png" alt="image-20220310093621087"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310093958616.png" alt="image-20220310093958616"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310094049756.png" alt="image-20220310094049756"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310094124759.png" alt="image-20220310094124759"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220310094430551.png" alt="image-20220310094430551"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220320193601747.png" alt="image-20220320193601747"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220320194442330.png" alt="image-20220320194442330"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220320194820595.png" alt="image-20220320194820595"> </p><h2 id="2-3、联结词的完备集"><a href="#2-3、联结词的完备集" class="headerlink" title="2.3、联结词的完备集"></a>2.3、联结词的完备集</h2><p>要求记住</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220320194930891.png" alt="image-20220320194930891"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220320195550114.png" alt="image-20220320195550114"></p><p>完备集都有非</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317081537462-16474761843211.png" alt="image-20220317081537462"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317081629008.png" alt="image-20220317081629008"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317082219288.png" alt="image-20220317082219288"></p><p><img src="/2024/07/07/Math/discreteMathematics/../../../Software/Typora/discreteMathematics.assets/image-20220317082820043.png" alt="image-20220317082820043"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317083216519.png" alt="image-20220317083216519"></p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317083601073.png" alt="image-20220317083601073"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322110519573.png" alt="image-20220322110519573"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322110534860.png" alt="image-20220322110534860"></p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322110611106.png" alt="image-20220322110611106"></p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317083801942.png" alt="image-20220317083801942"></p><p>后面的文字不需要</p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317083826948.png" alt="image-20220317083826948"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322110721668.png" alt="image-20220322110721668"></p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317083912739.png" alt="image-20220317083912739"></p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084001440.png" alt="image-20220317084001440"></p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084246322.png" alt="image-20220317084246322"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084259600.png" alt="image-20220317084259600"> </p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084454589.png" alt="image-20220317084454589"><img src="/2024/07/07/Math/discreteMathematics/image-20220317084546448.png" alt="image-20220317084546448"></p><p>这个题目计算过程不要这么写，按照上课，合成一个，不要劈开</p><p>合取过程不要，直接写答案</p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084730880.png" alt="image-20220317084730880"></p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084631006.png" alt="image-20220317084631006"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317084916611.png" alt="image-20220317084916611"></p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317085010153.png" alt="image-20220317085010153"></p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317085112804.png" alt="image-20220317085112804"></p><p>求成真赋值，成假赋值</p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317085228206.png" alt="image-20220317085228206"></p><p>求成真赋值，成假赋值</p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317085302568.png" alt="image-20220317085302568"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317085314440.png" alt="image-20220317085314440"></p><p>BBBB</p><h1 id="三、命题逻辑的推理理论"><a href="#三、命题逻辑的推理理论" class="headerlink" title="三、命题逻辑的推理理论"></a>三、命题逻辑的推理理论</h1><p>重点在3.2</p><h2 id="3-1、推理的形式结构"><a href="#3-1、推理的形式结构" class="headerlink" title="3.1、推理的形式结构"></a>3.1、推理的形式结构</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317090827874.png" alt="image-20220317090827874"> </p><p>推理的形式结构：</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510153817614.png" alt="image-20220510153817614"> </p><p>判断推理是否正确的方法：</p><ol><li>真值表法</li><li>等值演算法</li><li>主析取范式法</li></ol><p><strong>推理实例</strong></p><p>例1：判断下面推理是否正确</p><p>（1）若a能被4整除，则a能被2整除。a能被4整除。所以，a能被2整除</p><p>解：设p：a能被4整除， q：a能被2整除</p><p>推理的形式结构：<br>    前提：p&rightarrow;q,p<br>    结论：q</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317092229746.png"></p><h2 id="3-2、自然推理系统P"><a href="#3-2、自然推理系统P" class="headerlink" title="3.2、自然推理系统P"></a>3.2、自然推理系统P</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317093352694.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317094002333.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317094217879.png" alt="image-20220317094217879"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220317094515012.png" alt="image-20220317094515012"></p><p>10、11不要</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322102258013.png" alt="image-20220322102258013"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322102935834.png" alt="image-20220322102935834"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322103221575.png" alt="image-20220322103221575"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322103748547.png" alt="image-20220322103748547"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322104007861.png"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322104152745.png" alt="image-20220322104152745"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322104345100.png" alt="image-20220322104345100"></p><p>归谬法（反证法）</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510163004714.png" alt="image-20220510163004714"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322141119272.png"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322141614887.png" alt="image-20220322141614887"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322142245094.png" alt="image-20220322142245094"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322143235182.png" alt="image-20220322143235182"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322143731538.png" alt="image-20220322143731538"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220322150643081.png" alt="image-20220322150643081"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220324092318433.png" alt="image-20220324092318433"> </p><p>证明压轴题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220324094106002.png" alt="image-20220324094106002"> </p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329101923713.png" alt="image-20220329101923713"> </p><p>3</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102005653.png" alt="image-20220329102005653"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102029629.png" alt="image-20220329102029629"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102038823.png" alt="image-20220329102038823"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102045330.png" alt="image-20220329102045330"> </p><p>3</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102103584.png" alt="image-20220329102103584"> </p><p>2</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102140395.png" alt="image-20220329102140395"> </p><p>2</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102219057.png" alt="image-20220329102219057"> </p><p>3</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102314841.png" alt="image-20220329102314841"> </p><p>2</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102334839.png" alt="image-20220329102334839"> </p><p>3</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329102401913.png" alt="image-20220329102401913"> </p><p>2</p><h1 id="四、一阶逻辑基本概念"><a href="#四、一阶逻辑基本概念" class="headerlink" title="四、一阶逻辑基本概念"></a>四、一阶逻辑基本概念</h1><h2 id="4-1、一阶逻辑命题符号化"><a href="#4-1、一阶逻辑命题符号化" class="headerlink" title="4.1、一阶逻辑命题符号化"></a>4.1、一阶逻辑命题符号化</h2><p>个体词——所研究对象中可以独立存在的具体或抽象的客体</p><p>个体常项：具体的事务，用a,b,c等表示</p><p>个体变项：抽象的事物，用x,y,z等表示</p><p>个体域（论域）——个体变项的取值范围</p><p>有限个体域，如{a,b,c},{1,2}</p><p>无限个体域，如N,Z,R</p><p>全总个体域——由宇宙间一切事物组成</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329103816008.png"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329104246595.png" alt="image-20220329104246595"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329104743598.png"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329111031402.png"> </p><p>当成公式，记住 </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329112450960.png" alt="image-20220329112450960"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220329113000906.png"> </p><p>两种写法都要掌握</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331090706752.png" alt="image-20220331090706752"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331090614022.png" alt="image-20220331090614022"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331090837442.png" alt="image-20220331090837442"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331093414975.png" alt="image-20220331093414975"></p><p>第四章第4小题的第一题，第一种写法，G(x)前面应加非号。</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331093513277.png" alt="image-20220331093513277"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331093609701.png" alt="image-20220331093609701"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220331094846120.png" alt="image-20220331094846120"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405102958982.png" alt="image-20220405102958982"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407081354843.png" alt="image-20220407081354843"> </p><h2 id="4-2、一阶逻辑公式及解释"><a href="#4-2、一阶逻辑公式及解释" class="headerlink" title="4.2、一阶逻辑公式及解释"></a>4.2、一阶逻辑公式及解释</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405104001647.png" alt="image-20220405104001647"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405104450609.png" alt="image-20220405104450609"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405104830186.png" alt="image-20220405104830186"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405105137778.png" alt="image-20220405105137778"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405110904825.png" alt="image-20220405110904825"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405112906647.png" alt="image-20220405112906647"> </p><h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405113227358.png" alt="image-20220405113227358"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405113454214.png" alt="image-20220405113454214"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405113804163.png" alt="image-20220405113804163"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405113742028.png" alt="image-20220405113742028"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405113857084.png" alt="image-20220405113857084"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405114206156.png" alt="image-20220405114206156"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405114327957.png" alt="image-20220405114327957"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405114400090.png" alt="image-20220405114400090"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405114431415.png" alt="image-20220405114431415"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405114516656.png" alt="image-20220405114516656"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220405114525628.png" alt="image-20220405114525628"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407081318737.png" alt="image-20220407081318737"></p><h1 id="五、一阶逻辑等值演算"><a href="#五、一阶逻辑等值演算" class="headerlink" title="五、一阶逻辑等值演算"></a>五、一阶逻辑等值演算</h1><ul><li>一阶逻辑等值式与基本的等值式</li><li>置换规则、换名规则、代替规则</li><li>前束范式</li></ul><h2 id="5-1、一阶逻辑等值式与置换规则"><a href="#5-1、一阶逻辑等值式与置换规则" class="headerlink" title="5.1、一阶逻辑等值式与置换规则"></a>5.1、一阶逻辑等值式与置换规则</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407081916665.png" alt="image-20220407081916665"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407082048904.png" alt="image-20220407082048904"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407084009284.png"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407091242360.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412101855952.png" alt="image-20220412101855952"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407092350141.png" alt="image-20220407092350141"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407093037714.png" alt="image-20220407093037714"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407093522500.png" alt="image-20220407093522500"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220407094123831.png" alt="image-20220407094123831"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412102402847.png" alt="image-20220412102402847"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412102720800.png" alt="image-20220412102720800"></p><h2 id="5-2、一阶逻辑前束范式"><a href="#5-2、一阶逻辑前束范式" class="headerlink" title="5.2、一阶逻辑前束范式"></a>5.2、一阶逻辑前束范式</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412104224253.png"></p><p>量词前面有非号，也不是前束范式</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412110835023.png" alt="image-20220412110835023"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412111054518.png" alt="image-20220412111054518"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412111838430.png" alt="image-20220412111838430"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412112942424.png" alt="image-20220412112942424"> </p><p>存在y好像应该变为存在t</p><p>每个步骤用什么规则，不需要写</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412113814255.png" alt="image-20220412113814255"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220412115012877.png" alt="image-20220412115012877"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414134602890.png" alt="image-20220414134602890"> </p><p><img src="/2024/07/07/Math/discreteMathematics/../../../Software/Typora/discreteMathematics.assets/image-20220414135730735.png" alt="image-20220414135730735"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140046108.png" alt="image-20220414140046108"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140325697.png" alt="image-20220414140325697"> </p><h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140537362.png" alt="image-20220414140537362"> </p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140558937.png" alt="image-20220414140558937"> </p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140646481.png" alt="image-20220414140646481"></p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140713845.png" alt="image-20220414140713845"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414140834998.png" alt="image-20220414140834998"> </p><p>C C</p><p> <img src="/2024/07/07/Math/discreteMathematics/image-20220414140956780.png" alt="image-20220414140956780"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141012549.png" alt="image-20220414141012549"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141024187.png" alt="image-20220414141024187"> </p><p>B</p><p>逐步进行，不能跳步</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141220384.png" alt="image-20220414141220384"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141314781.png" alt="image-20220414141314781"> </p><p>B</p><p>不写规则，式子写对就可以</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141511384.png" alt="image-20220414141511384"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141528902.png" alt="image-20220414141528902"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141655492.png" alt="image-20220414141655492"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414141943327.png" alt="image-20220414141943327"></p><p><img src="/2024/07/07/Math/discreteMathematics/../../../Software/Typora/discreteMathematics.assets/image-20220414141916766.png" alt="image-20220414141916766"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414142009981.png" alt="image-20220414142009981"> </p><p>ABB</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414142018408.png" alt="image-20220414142018408"> </p><p>B</p><h1 id="六、集合代数"><a href="#六、集合代数" class="headerlink" title="六、集合代数"></a>六、集合代数</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831133406162-1837869085-1634453530388.png" alt="image-20210831133402148"></p><p>平时30分，期中（讲完集合论，第8、9周后）10分，课堂表现20分，</p><hr><p><strong>重点6.1</strong></p><p><strong>集合的表示方法（谓词表示法、）</strong></p><p><strong>6.3（有几个集合符合这个，符合哪个）</strong></p><p><strong>6.4（证明）</strong></p><p>选择题、大题、</p><hr><h2 id="6-1集合的基本概念"><a href="#6-1集合的基本概念" class="headerlink" title="6.1集合的基本概念"></a>6.1集合的基本概念</h2><h3 id="1-集合定义"><a href="#1-集合定义" class="headerlink" title="1.集合定义"></a><strong>1.集合定义</strong></h3><p>​集合没有精确的数学定义</p><p>​理解：由离散个体构成的整体称为<strong>集合</strong>，称这些个体为集合的<strong>元素</strong></p><p>​常见的书籍：</p><p>​<strong>N（自然数）（非负整数）包含0</strong></p><p>​Z 整数集合</p><p>​Q 有理数是<strong>整数（正整数、0、负整数）和分数的统称，是整数和分数的集合</strong>。</p><p>​R 实数（有理数和无理数）</p><p>​C 复数</p><p>​Z<sup>+</sup>正整数集</p><h3 id="2-集合表示法"><a href="#2-集合表示法" class="headerlink" title="2.集合表示法"></a><strong>2.集合表示法</strong></h3><p>​<strong>枚举法</strong>————通过列出全体元素来表示集合</p><p>​<strong>谓词表示法</strong>————通过谓词概括集合元素的性质</p><p>​实例：</p><p>​枚举法 自然数集合 N&#x3D;{0，1，2，3，···}</p><p>​谓词法 S&#x3D;{x|x 是实数，x<sub>2</sub>—1&#x3D;0}</p><h3 id="3-元素与集合"><a href="#3-元素与集合" class="headerlink" title="3.元素与集合"></a>3.元素与集合</h3><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831135511029-953909993.png"></p><p>大集合中的小集合中的元素不属于大集合</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831140038288-1259282133.png"></p><p>​&sube; 包含于（可以等于)^而且</p><p>​&sub; 真包含 </p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831140529671-72072801.png" alt="image-20210831140527313"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831140639103-1962127639.png" alt="image-20210831140636661"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831140953199-122115476.png" alt="image-20210831140950782"></p><p>​集合加个绝对值，表示集合内元素的个数</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831141600914-1797905525.png" alt="image-20210831141553239"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831142311648-601409589.png" alt="image-20210831142307595"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831142512497-1209856841.png" alt="image-20210831142510028"></p><ol><li><p>(1)       {x|x∈N  且  x&lt;5}</p><p>（2）{x|x&#x3D; 2k+1，k∈Z}</p><p>（3）{x| x &#x3D; 10k,   k∈Z}</p><ol start="2"><li><p>(1){0,1,2,3,4,5,6,7,8,9}</p><p>(2){2,5}</p><p>开口向上为或，向下为且</p><p>(3){4,5,6,7,8,9,10,11}</p><p>(4) &empty; （或{}）</p><p>(5){&lt;0,-1&gt;,&lt;0,0&gt;,&lt;1,-1&gt;,&lt;1,0&gt;,&lt;2,-1&gt;,&lt;2,0&gt;}</p></li></ol></li></ol><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831144510071-2001780816.png" alt="image-20210831144507737"></p><p>​<strong>5.(1)真</strong></p><p>​(2)<strong>假</strong></p><p>​(3)真</p><p>​(4)真</p><p>​(5)<strong>真</strong></p><p>​(6)真</p><p>​(7)真</p><p>​(8)<strong>假</strong></p><p>空集是一个集合，按集合算</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831145131650-702002692.png"> </p><p>6.成立的是（2）</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210831145535866-2071458499.png" alt="image-20210831145533444"></p><p>8.（1） {<em>Ø，{a},{b},{c},{a,b},{a,c},{b,c},{a,b,c}</em> }</p><p>​（2）*{Ø，{1}，，{1，{2，3}} }*</p><p>​（3）*{Ø，{Ø} }*</p><p>​（4）*{Ø，{Ø}，，{Ø，{Ø}} }*</p><h2 id="6-2-集合的运算"><a href="#6-2-集合的运算" class="headerlink" title="6.2 集合的运算"></a>6.2 集合的运算</h2><p>初级运算</p><p>集合的基本运算有∨ ∧</p><p>​        <strong>并              <em>A</em>∪<em>B</em>&#x3D;{x | x ∈ <em>A</em> ∨ x ∈ <em>B</em>}</strong></p><p>​    <strong>交                      A∩B &#x3D; {x | x ∈ <em>A</em> ∧ x ∈ <em>B</em>}</strong></p><p> <strong>相对补             A-B  &#x3D; {x | x ∈ <em>A</em> ∧ x ∉ <em>B</em>}</strong></p><p><strong>对称差              A⊕B  &#x3D;(A-B)∪（B-A)</strong></p><p><strong>9              ~A  &#x3D; E-A</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092004524-1125120544.png" alt="image-20210907134013868"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092010898-2143120493.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092015646-1456309559.png"></p><p>(1)假</p><p><strong>(2)真</strong></p><p>(3)真</p><p>(4)真</p><p>(5)假</p><p>(6)假</p><p>(7)假</p><p>(8)真</p><p>(9)假</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092020667-221671408.png" alt="image-20211010210045228"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092023460-1479242716.png" alt="image-20211010210545679"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092026188-1106094076.jpg" alt="微信图片_20210918100204"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092028763-2021635066.jpg" alt="微信图片_20210918100307"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092030635-1693704995.jpg" alt="微信图片_20210918100256"></p><h1 id="七、二元关系"><a href="#七、二元关系" class="headerlink" title="七、二元关系"></a>七、二元关系</h1><ul><li>有序对与笛卡尔积</li><li>二元关系的定义与表示法</li><li>关系的运算</li><li>关系的性质</li><li>关系的闭包</li><li>等价关系与划分</li><li>偏序关系</li></ul><h2 id="7-1-有序对与笛卡尔积"><a href="#7-1-有序对与笛卡尔积" class="headerlink" title="7.1 有序对与笛卡尔积"></a>7.1 有序对与笛卡尔积</h2><p><strong>定义7.1：</strong>有两个元素x 和 y ，按照一定的顺序组成的二元组称为有序对，记作&lt;x,y&gt;</p><p><strong>性质：</strong></p><ol><li><p>有序性&lt; x, y&gt;≠ &lt;y , x&gt;(当x ≠ y 时 )</p></li><li><p>&lt; x, y&gt;与&lt; u, v&gt;相等的充分必要条件是</p><p>​&lt; x, y&gt; &#x3D; &lt; u, v&gt; <img src="/2024/07/07/Math/discreteMathematics/2510762-20210928134057502-1097940792.png" alt="image-20210928134053626"></p></li></ol><h2 id="7-2-二元关系"><a href="#7-2-二元关系" class="headerlink" title="7.2 二元关系"></a>7.2 二元关系</h2><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210928134645627-1193549118.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210928135302200-1465310260.png" alt="image-20210928135258221"></p><h3 id="A到B的关系与A上的关系"><a href="#A到B的关系与A上的关系" class="headerlink" title="A到B的关系与A上的关系"></a>A到B的关系与A上的关系</h3><p><strong>定义：</strong>设<em><strong>A,B</strong></em>为集合，<em>A</em>×<em>B</em>的任何子集所定义的二元关系叫做<strong>从<em>A</em>到<em>B</em>的二元关系</strong>，当A&#x3D;B时则叫做<strong><em>A</em>上的二元关系</strong></p><p><strong>例：</strong></p><p>A&#x3D;{0,1} , B&#x3D;{1,2,3} , 那么R<sub>1</sub>&#x3D;{&lt;0,2&gt;} , R<sub>2</sub> &#x3D;A×B,R<sub>3</sub>&#x3D; ∅</p><p><strong>定义：</strong>⋁⋀</p><p>设A为集合，</p><ol><li><p>∅ 是A 上的关系，称为空关系</p></li><li><p>全域关系E<sub>A</sub>&#x3D;{&lt; x, y&gt;|x ∈A ∧ y ∈ A}&#x3D;A×A</p><p>恒等关系I<sub>A</sub> &#x3D; {&lt; x, x&gt;|x ∈A }</p><p>小于等于关系L<sub>A</sub> &#x3D;{&lt; x, y&gt;|x , y ∈ A∧ x≤y}，A为实数子集</p><p>整除关系D<sub>B</sub> &#x3D; {&lt; x, y&gt;|x , y ∈ B  ⋀ x整除y},B 为非0整数子集，y是被除数，y除以x</p><p>包含关系R<sub>&sube;</sub> &#x3D; {&lt;x,y&gt;| x,y &isin; A  ⋀ x&sube;y }，A是集合族。</p></li></ol><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210928142209672-129892220.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20210928142640802-1696873131.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093023747-2017629153.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093020531-1373381842.png"></p><p>素数：除了1和它本身之外没有其他的因数</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093017029-2062885330.png" alt="image-20211005140112567"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012092956262-196119442.png" alt="image-20211005141045920"></p><h2 id="7-3-关系的运算"><a href="#7-3-关系的运算" class="headerlink" title="7.3 关系的运算"></a>7.3 关系的运算</h2><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093157288-1479830696.png" alt="image-20211005141507180"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093252311-1203799393.png" alt="image-20211005142512660"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093200477-1787238884.png" alt="image-20211005143101395"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093207386-1348877694.png" alt="image-20211005143930399"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093210053-1254693089.png" alt="image-20211005144202163"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093237744-414704695.png" alt="image-20211005144617163"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093212730-733799769.png" alt="image-20211005144803692"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093222061-1987800662.png" alt="image-20211005144934368"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211012093226716-1490458445.png" alt="image-20211005150044517"></p><h2 id="7-4-关系的性质"><a href="#7-4-关系的性质" class="headerlink" title="7.4 关系的性质"></a>7.4 关系的性质</h2><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221414313-301060987.png" alt="image-20211013221413204"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221425193-2025282276.png" alt="image-20211013221424057"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221432747-916224202.png" alt="image-20211013221431645"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221441200-162014362.png" alt="image-20211013221440094"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221448754-1494402863.png" alt="image-20211013221447794"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221455495-423626427.png" alt="image-20211013221454407"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221503008-1803196291.png" alt="image-20211013221500782"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211013221509168-226866676-1634455539576.png" alt="image-20211013221508114"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214115701.png" alt="image-20211019214115701"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214156142.png" alt="image-20211019214156142"></p><h2 id="7-5-闭包"><a href="#7-5-闭包" class="headerlink" title="7.5 闭包"></a>7.5 闭包</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214242709.png" alt="image-20211019214242709"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214324721.png" alt="image-20211019214324721"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214335182.png" alt="image-20211019214335182"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214345154.png" alt="image-20211019214345154"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214353199.png" alt="image-20211019214353199"></p><h2 id="7-6-等价关系与划分"><a href="#7-6-等价关系与划分" class="headerlink" title="7.6 等价关系与划分"></a>7.6 等价关系与划分</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211019214525420-1635259050266.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026214617065-402123390-1635259048860.png" alt="image-20211026214548774"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026214952728-796555232-1635509801836.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215029690-1277271337-1635259055699.png" alt="image-20211026215028572"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215041900-827433171-1635259067979.png" alt="image-20211026215039981"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215049660-815248524-1635508782126.png" alt="image-20211026215047665"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215105257-1916205497-1635508787873.png" alt="image-20211026215103032"></p><h2 id="7-7-偏序关系"><a href="#7-7-偏序关系" class="headerlink" title="7.7 偏序关系"></a>7.7 偏序关系</h2><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215122567-299725995-1635508793920.png" alt="image-20211026215121472"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215137070-525687196-1636031809605.png" alt="image-20211026215135816"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211026215142961-279194588-1636031789583.png" alt="image-20211026215141809"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104211504577-1261893519.png" alt="image-20211029202827098"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211029202852981-584343403.png" alt="image-20211029202850621"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211029202904273-1849639818.png" alt="image-20211029202902779"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104212214202-1679212826.png" alt="image-20211029202910089"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104212218161-1389502528.png" alt="image-20211102133739082"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211102133816222.png" alt="image-20211102133816222"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211029202930160-1333726588.png" alt="image-20211029202928761"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104212302914-1615346733.png" alt="image-20211102134003401"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102134950857-589711757.png" alt="image-20211102134949577"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102134458438-808864587.png" alt="image-20211102134452266"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102141218456-156574397.png" alt="image-20211102141217285"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102141546784-443231923.png" alt="image-20211102141545710"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102141955003-375797778.png" alt="image-20211102141952878"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102142358530-49574775.png" alt="image-20211102142357402"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102144112266-41970998.png" alt="image-20211102144110356"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145013012-1207810696.png" alt="image-20211102145011203"></p><h2 id="第七章-题型"><a href="#第七章-题型" class="headerlink" title="第七章 题型"></a>第七章 题型</h2><p>100页</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145144597-1875338014.png"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145224580-791054056.png" alt="image-20211102145223268"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145254332-886899461.png" alt="image-20211102145253249"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145313176-608336032.png" alt="image-20211102145312110"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145326642-366681601.png" alt="image-20211102145325530"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145418895-368640788.png" alt="image-20211102145417750">大题</p><p>102</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145442328-663742558.png">选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145510056-945016369.png" alt="image-20211102145509037"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145522368-2113927141.png" alt="image-20211102145521286"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145551375-963530330.png" alt="image-20211102145550224"></p><p> M 平方都会算</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145700859-1842635797.png">选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145724292-2010447952.png">选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145736254-326138627.png" alt="image-20211102145735122"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211102145757229.png"></p><p>a.  对称   </p><p>b.反自反 反对称 传递</p><p>c.自反  反对称  </p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145845917-729474521.png">大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102145920089-1626422527.png">选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150006655-83311209.png"></p><p>大题 会背</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150047744-23341012.png"></p><p>大题（求等价关系的关系图）</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150116206-902495064.png" alt="image-20211102150115084"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150144432-1494524993.png" alt="image-20211102150143428">选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150158658-844635331.png" alt="image-20211102150157515"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150222236-966885274.png" alt="image-20211102150221198"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150253289-792188646.png" alt="image-20211102150252065"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150326264-869203706.png" alt="image-20211102150325146"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150403508-718586871.png" alt="image-20211102150402425"><strong>选择</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150418749-347559527.png" alt="image-20211102150417441"></p><p><strong>选择</strong></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150446223-1656104153.png" alt="image-20211102150445086"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211102150507893-1912473254.png" alt="image-20211102150506720"></p><p>大题<br><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200112675-552669916.png" alt="image-20211104200109959"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200133121-2135948020.png" alt="image-20211104200131244"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200224445-138576336.png" alt="image-20211104200222587">大题（列出集合，所有形式)</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200258806-417413824.png" alt="image-20211104200256568"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200327418-1784644290.png" alt="image-20211104200325555"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200341058-1906538356.png" alt="image-20211104200339163"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200353736-350931823.png" alt="image-20211104200351809">选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200408119-167036458.png" alt="image-20211104200406284"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200421015-146736404.png" alt="image-20211104200419090"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200436073-500941235.png" alt="image-20211104200434211"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200450473-1491857260.png" alt="image-20211104200448571"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200503850-836094306.png"></p><p>关系图</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200526697-1380638761.png" alt="image-20211104200524992"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200609930-1924044162.png" alt="image-20211104200607042"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104200627444-1715065517.png" alt="image-20211104200625412"></p><p>大题</p><h1 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h1><h2 id="8-1函数的定义与性质（重点）"><a href="#8-1函数的定义与性质（重点）" class="headerlink" title="8.1函数的定义与性质（重点）"></a>8.1函数的定义与性质（重点）</h2><p>主要是双射函数的证明</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104191322339-1702184718.png" alt="image-20211104191320046"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104191921326-1804424734.png" alt="image-20211104191918320"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104193856857-1086028267.png" alt="image-20211104193838665"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104194038890-1421065458.png" alt="image-20211104194036608"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104194344800-2062021364.png" alt="image-20211104194341361"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104205023465-367550027.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104205109520-2094784508.png" alt="image-20211104205106560"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104205208552-1226330722.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104205851190-1321892940.png" alt="image-20211104205849305"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211104205818167-2078655881.png" alt="image-20211104205814820"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211109134811751-876369246.png"></p><p>（1）单、满、双射</p><p>（2）单、满、双射</p><p>（3）单、不满、不双射</p><p>（4）单、不满、不双射</p><p>（5）不单、满、不双射</p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211109140140690-1770752030.png" alt="image-20211109140137936"></p><p>（1）单、不满、不双射</p><p>（2）不单、不满、不双射</p><p>（3）不单、不满、不双射</p><p>（4）不单、满、不双射</p><p>（5）单、不满、不双射</p><p>（6）不单、不满、不双射                        </p><h2 id="8-2-、推论"><a href="#8-2-、推论" class="headerlink" title="8.2 、推论"></a>8.2 、推论</h2><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211109142434181-1346814730.png" alt="image-20211109142431495"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211109144407097-1008558161.png" alt="image-20211109144359330"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211109143637095-638001222.png" alt="image-20211109143633814"></p><p><img src="/2024/07/07/Math/discreteMathematics/2510762-20211109144643195-1669518971.png" alt="image-20211109144640586"></p><h2 id="习题-2"><a href="#习题-2" class="headerlink" title="习题"></a>习题</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111081817642.png"></p><p>F1是函数，F2不是函数，函数是对定义域来说，有唯一的一个值</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111081847377.png"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111081931009.png"></p><p>单射：对值域中的每个数在定义域中都有唯一一个值</p><p>满射：函数的值域等于它定义的值域</p><p>（1）不单射，不满射，不双射</p><p>（2）单射，不满射，不双射</p><p>（3）不单射，满射，不双射</p><p>（4）单射，满射，双射</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111081956073.png"></p><p>函数：定义域相等，值域包含</p><p>（1）构成，不单射，不满射，不双射</p><p>（2）不构成</p><p>（3）不构成</p><p>（4）构成：单射，满射，双射</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082027072.png" alt="image-20211111082027072"></p><p>没题型</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082117022.png"></p><p>1.选择 2.大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082140964.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082155688.png" alt="image-20211111082155688"></p><p>（1）单射，满射，双射</p><p>（2）单射，满射，双射</p><p>（3）单射，不满射，不双射</p><p>（4）单射，不满射，不双射</p><p>（5）不单射，满射，不双射</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082211721.png"></p><p>（1）单射，不满射，不双射</p><p>（2）不单射，不满射，不双射</p><p>（3）不单射，不满射，不双射</p><p>（4）不单射，满射，不双射</p><p>（5）单射，不双射，不满射</p><p>（6）不单射，不双射，不满射</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082242436.png"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082335760.png"></p><p>单射，不满射</p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211111082411984.png" alt="image-20211111082411984"></p><p>重要：<img src="/2024/07/07/Math/discreteMathematics/2510762-20211109150716655-1501894036.png"></p><p>所以函数 f 为双射</p><p>大题</p><h1 id="九、图的基本概念"><a href="#九、图的基本概念" class="headerlink" title="九、图的基本概念"></a>九、图的基本概念</h1><h2 id="9-1（重点）"><a href="#9-1（重点）" class="headerlink" title="9.1（重点）"></a>9.1（重点）</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124204755185.png"></p><p>多重意思是 边允许重复</p><p>无向图：允许两个顶点之间有多个边，像e<sub>5</sub>，e<sub>6</sub></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124205056579.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124205348344.png" alt="image-20211124205348344"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124205601694.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124205815943.png"></p><p>含平行边的图为多重图</p><p>不含平行边和环的图为简单图</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124210347642.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124210510257.png" alt="image-20211124210510257"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124210537686.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124210718532.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124210800328.png" alt="image-20211124210800328"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124210909968.png" alt="image-20211124210909968"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124211031945.png" alt="image-20211124211031945"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124211423558.png" alt="image-20211124211423558"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124211612638.png" alt="image-20211124211612638"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211124212142615.png" alt="image-20211124212142615"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116133803537.png" alt="image-20211116133803537"></p><p>导出子图不考</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116134525063.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116134807379.png" alt="image-20211116134807379"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116135746738.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116140229957.png" alt="image-20211116140229957"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116141343791.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116143452826.png" alt="image-20211116143452826"></p><h2 id="9-2-通路与回路"><a href="#9-2-通路与回路" class="headerlink" title="9.2 通路与回路"></a>9.2 通路与回路</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116143723254.png" alt="image-20211116143723254"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116144338872.png" alt="image-20211116144338872"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116144945071.png" alt="image-20211116144945071"></p><h2 id="9-3图的连通性"><a href="#9-3图的连通性" class="headerlink" title="9.3图的连通性"></a>9.3图的连通性</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116145521793.png" alt="image-20211116145521793"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116150120978.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118083621856.png" alt="image-20211118083621856"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118084211827.png" alt="image-20211118084211827"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118084857520.png" alt="image-20211118084857520"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118090815500.png" alt="image-20211118090815500"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118091203032.png" alt="image-20211118091203032"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118091237781.png" alt="image-20211118091237781"></p><p>$28. \kappa(G) &#x3D; 2,,,,,, \lambda&#x3D;3$</p><h2 id="知识点-全部都是选择题"><a href="#知识点-全部都是选择题" class="headerlink" title="知识点-全部都是选择题"></a>知识点-全部都是选择题</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118092444748.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118092523701.png" alt="image-20211118092523701"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118092559312.png" alt="image-20211118092559312"><img src="/2024/07/07/Math/discreteMathematics/image-20211118092656762.png"><img src="/2024/07/07/Math/discreteMathematics/image-20211118092735222.png"><img src="/2024/07/07/Math/discreteMathematics/image-20211118092749303.png" alt="image-20211118092749303"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118092804571.png"><img src="/2024/07/07/Math/discreteMathematics/image-20211118092821587.png" alt="image-20211118092821587"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118092831444.png" alt="image-20211118092831444"></p><p>彼得松图</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118092940295.png" alt="image-20211118092940295"></p><p>简单图：不含平行边和环的图</p><p>n阶无向完全图：每个顶点均与其余 n-1个顶点相邻</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093014552.png" alt="image-20211118093014552"><img src="/2024/07/07/Math/discreteMathematics/image-20211118093041789.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093050476.png" alt="image-20211118093050476"><img src="/2024/07/07/Math/discreteMathematics/image-20211118093126201.png"></p><p>生成子图：点集相等</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093201162.png"></p><p>带权图：对每一个边给定了一个数W（e）</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093212693.png"></p><p>最短路径算法：Dijkstra标号法</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093223638.png" alt="image-20211118093223638"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093339298.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093403249.png" alt="image-20211118093403249"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093506767.png"></p><p>点连通度：就是去除几个点后可以将原图分成两个</p><p>边连通度：就是去除几条边之后可以将原图分为两个</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213164949844.png" alt="image-20211213164949844"></p><p>2.$V&#x3D;\lbrace v_1,v_2,v_3,v_4,v_5\rbrace\E&#x3D;{\lbrace(v_1,v_2),(v_2,v_3),(v_2,v_4),v_3,v_5),(v_4,v_5)\rbrace}$</p><p>   $V&#x3D;\lbrace v_1,v_2,v_3,v_4,v_5 \rbrace\E&#x3D;\lbrace(v_1,v_2),(v_1,v_2),(v_2,v_3),(v_3,v_4),(v_4,v_5)\rbrace$</p><p>3.$d(v_1)&#x3D;1,d(v_2)&#x3D;3,d(v_3)&#x3D;2,d(v_4)&#x3D;2,d(v_5)&#x3D;2\d(v_1)&#x3D;2,d(v_2)&#x3D;3,d(v_3)&#x3D;2,d(v_4)&#x3D;2,d(v_5)&#x3D;1$</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093617919.png"></p><p>n阶非连通的简单图的边数最多可为$\frac{(n-1)(n-2)}{2}$，最少为 0</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211116141343791.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093631550.png"></p><p>9.由握手定理可知，顶点的度数：6*2&#x3D;12，12-3-5&#x3D;4&#x3D;2 * 2，有4个顶点  </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093640330.png" alt="image-20211118093640330"></p><p>由握手定理得：顶点的度数是边数的2倍，</p><p>（1）5+5+3+2+2&#x3D;17，不是2的倍数 否</p><p>（2）3+3+3+3+2&#x3D;14，是2的倍数     是</p><p>（3）1+2+3+4+5&#x3D;15，不是2的倍数   否</p><p>（4）4*5&#x3D;20，是2的倍数，               是</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093711935.png"><br>$$<br>G的边数 &#x3D; \frac{n(n-1)}{4}\Rightarrow n&#x3D;4k或n&#x3D;4k+1<br>$$</p><p>$$<br>18.m’&#x3D;\frac{n(n-1)}{2}-m<br>$$</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093735561.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213172530849.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118090815500.png" alt="image-20211118090815500"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118091203032.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118093808457.png"></p><p>$28. \kappa(G) &#x3D; 2,,,,,, \lambda(G)&#x3D;3,,,,\delta(G)&#x3D;4$</p><h1 id="十、树（大题）"><a href="#十、树（大题）" class="headerlink" title="十、树（大题）"></a>十、树（大题）</h1><h2 id="10-1、无向树"><a href="#10-1、无向树" class="headerlink" title="10.1、无向树"></a>10.1、无向树</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118094607175.png" alt="image-20211118094607175"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211118095200371.png" alt="image-20211118095200371"></p><p>前缀码：A的任意两个互不为前缀：前缀码</p><p>2叉树生成前缀码：左0右1，只有1个分支，按0表示</p><p>入度为0的是树根</p><p>入度为1，出度为0，是树叶</p><p>入度为1，出度不为0，是内点</p><p>分支点：内点和树根</p><p>从树根到顶点的路径长度称为 层数</p><p>所有顶点的最大层数称为 树高</p><p>每个分支点最多有r个儿子，r叉树</p><p>​都有r个儿子,r叉正则树</p><p>Huffman算法——求最优二叉树</p><p>W（T）等于所有分支点的权之和，也等于树叶的大小乘以层数</p><p>生成子图：顶点一样，边数是子集</p><p>生成树：无向图的生成子图是树</p><p>实现称为子图的树枝，不在子图中的为权</p><p>最小生成树：无向连通带权图G&#x3D;&lt;V,E,W&gt;,T是G的生成树，T各边权之和为T的权 W（T)</p><p>​G中权最小的生成树为G的最小生成树</p><p>避圈法（Kruskal算法）</p><p>波兰符合法：前序排列</p><p>逆波兰符号法：后序排列</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>{1，00，011，0101，01001，0 000}为前缀码</p><p>{1，00，011，0101，0100，01001，01000}不是前缀码，因为0100是01001（01000）的前缀</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204131646.png"></p><p>由握手定理得：顶点的度数之和是边数的2倍，</p><p>​                           无向树的边数 等于 阶数（顶点数）减1</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204121672.png" alt="image-20211213204121672"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204102045.png" alt="image-20211213204102045"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204050792.png" alt="image-20211213204050792"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204036781.png" alt="image-20211213204036781"></p><p>求最小生成树的算法：避图法（Kruskal算法）</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204010811.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211213204158731.png" alt="image-20211213204158731"><img src="/2024/07/07/Math/discreteMathematics/image-20211213204221093.png" alt="image-20211213204221093"><img src="/2024/07/07/Math/discreteMathematics/image-20211213204229209.png" alt="image-20211213204229209"><img src="/2024/07/07/Math/discreteMathematics/image-20211213204236631.png" alt="image-20211213204236631"><img src="/2024/07/07/Math/discreteMathematics/image-20211213204245133.png" alt="image-20211213204245133"><img src="/2024/07/07/Math/discreteMathematics/image-20211213204302914.png" alt="image-20211213204302914"><img src="/2024/07/07/Math/discreteMathematics/image-20211213204310696.png" alt="image-20211213204310696"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219101041723.png" alt="image-20211219101041723"></p><h1 id="十一、几种特殊的图"><a href="#十一、几种特殊的图" class="headerlink" title="十一、几种特殊的图"></a>十一、几种特殊的图</h1><p>大题：哈密顿图，平面图</p><p>选择：欧拉图，二部图</p><p>欧拉图：经过每条边一次</p><p>哈密顿图：经过每个顶点一次</p><p>半欧拉图，半哈密顿图：不存在回路，存在通路</p><h2 id="11-1、欧拉图"><a href="#11-1、欧拉图" class="headerlink" title="11.1、欧拉图"></a>11.1、欧拉图</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219102035895.png" alt="image-20211219102035895"></p><p>既不是欧拉图，也不是半欧拉图</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219102225069.png" alt="image-20211219102225069"><img src="/2024/07/07/Math/discreteMathematics/image-20211219102326759.png" alt="image-20211219102326759"><img src="/2024/07/07/Math/discreteMathematics/image-20211219103426638.png" alt="image-20211219103426638"></p><p>欧拉图：度数都是偶数，连通</p><p>半欧拉图：恰有2个顶点度数是奇数</p><p>既不是欧拉图，也不是半欧拉图：四个顶点度数都是3</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219104017271.png" alt="image-20211219104017271"></p><p>找欧拉回路</p><h2 id="11-2、哈密顿图"><a href="#11-2、哈密顿图" class="headerlink" title="11.2、哈密顿图"></a>11.2、哈密顿图</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219104402706.png" alt="image-20211219104402706"></p><p>有经过每个顶点的回路</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219105450915.png" alt="image-20211219105450915"><img src="/2024/07/07/Math/discreteMathematics/image-20211219105554737.png" alt="image-20211219105554737"><img src="/2024/07/07/Math/discreteMathematics/image-20211219110003903.png" alt="image-20211219110003903"><img src="/2024/07/07/Math/discreteMathematics/image-20211219110547520.png" alt="image-20211219110547520"><img src="/2024/07/07/Math/discreteMathematics/image-20211219112708616.png" alt="image-20211219112708616"><img src="/2024/07/07/Math/discreteMathematics/image-20211219113920454.png" alt="image-20211219113920454"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219113947449.png" alt="image-20211219113947449"><img src="/2024/07/07/Math/discreteMathematics/image-20211219114107564.png" alt="image-20211219114107564"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219114358359.png" alt="image-20211219114358359"><img src="/2024/07/07/Math/discreteMathematics/image-20211219114437889.png" alt="image-20211219114437889"></p><p>a.欧拉图 </p><p>b.半欧拉图</p><p>c.欧拉图</p><p>d.既不是欧拉图，也不是半欧拉图</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219114854596.png" alt="image-20211219114854596"></p><p>a.半哈密顿图</p><p>b.哈密顿图</p><p>c.半哈密顿图</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219115451445.png" alt="image-20211219115451445"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219135457703.png" alt="image-20211219135457703"><img src="/2024/07/07/Math/discreteMathematics/image-20211219135534549.png" alt="image-20211219135534549"><img src="/2024/07/07/Math/discreteMathematics/image-20211219135756572.png" alt="image-20211219135756572"><img src="/2024/07/07/Math/discreteMathematics/image-20211219135811347.png"></p><p>删去顶点后的图不用画，其他的都要写</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219135911383.png" alt="image-20211219135911383"></p><h2 id="11-3、二部图与匹配"><a href="#11-3、二部图与匹配" class="headerlink" title="11.3、二部图与匹配"></a>11.3、二部图与匹配</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219141402334.png" alt="image-20211219141402334"></p><p>只能上下连，不能左右连</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219141433573.png" alt="image-20211219141433573"><img src="/2024/07/07/Math/discreteMathematics/image-20211219141531433.png" alt="image-20211219141531433"><img src="/2024/07/07/Math/discreteMathematics/image-20211219142624178.png" alt="image-20211219142624178"><img src="/2024/07/07/Math/discreteMathematics/image-20211219142925649.png" alt="image-20211219142925649"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219143617706.png" alt="image-20211219143617706"></p><p>3.（1）错 要求N为奇数</p><p>​（2）对</p><h2 id="11-4、平面图"><a href="#11-4、平面图" class="headerlink" title="11.4、平面图"></a>11.4、平面图</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219143814714.png" alt="image-20211219143814714"><img src="/2024/07/07/Math/discreteMathematics/image-20211219144211271.png" alt="image-20211219144211271"><img src="/2024/07/07/Math/discreteMathematics/image-20211219144420422.png" alt="image-20211219144420422"><img src="/2024/07/07/Math/discreteMathematics/image-20211219144558781.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219150239588.png" alt="image-20211219150239588"></p><p>只属于R<sub>0</sub>的边，需要算两次，如i，其他的算一次，</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219150407391.png" alt="image-20211219150407391"><img src="/2024/07/07/Math/discreteMathematics/image-20211219150844587.png" alt="image-20211219150844587"></p><p>极大平面图：每个面的次数均为3，包括无限面</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219150920878.png" alt="image-20211219150920878"><img src="/2024/07/07/Math/discreteMathematics/image-20211219151108568.png" alt="image-20211219151108568"><img src="/2024/07/07/Math/discreteMathematics/image-20211219151348423.png" alt="image-20211219151348423"><img src="/2024/07/07/Math/discreteMathematics/image-20211219151443560.png" alt="image-20211219151443560"></p><p>什么图都不是</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219152220123.png" alt="image-20211219152220123"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219152619871.png" alt="image-20211219152619871"></p><p>非连通图，需要验证推广</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219152722006.png" alt="image-20211219152722006"></p><p>是不是C不要</p><h2 id="题型-1"><a href="#题型-1" class="headerlink" title="题型"></a>题型</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219152828581.png" alt="image-20211219152828581"></p><p>没有题型</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219152907633.png" alt="image-20211219152907633"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219152938610.png" alt="image-20211219152938610"> 选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153003641.png" alt="image-20211219153003641"></p><p>没有</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153020301.png" alt="image-20211219153020301"></p><p>没有</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153038166.png" alt="image-20211219153038166"><img src="/2024/07/07/Math/discreteMathematics/image-20211219153049409.png" alt="image-20211219153049409"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153119054.png" alt="image-20211219153119054"><img src="/2024/07/07/Math/discreteMathematics/image-20211219153129098.png" alt="image-20211219153129098"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153148091.png" alt="image-20211219153148091"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153239552.png" alt="image-20211219153239552"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153357229.png" alt="image-20211219153357229"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153446103.png" alt="image-20211219153446103"></p><p>上面平面图     下面平面嵌入</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153541478.png" alt="image-20211219153541478"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153631286.png" alt="image-20211219153631286"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153657284.png" alt="image-20211219153657284"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153707579.png" alt="image-20211219153707579"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153722170.png" alt="image-20211219153722170"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153740391.png" alt="image-20211219153740391"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153806763.png" alt="image-20211219153806763"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153830924.png" alt="image-20211219153830924"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153850875.png" alt="image-20211219153850875"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219153913931.png" alt="image-20211219153913931"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154005627.png" alt="image-20211219154005627"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154036260.png" alt="image-20211219154036260"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154048080-1639899648356.png" alt="image-20211219154048080"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154103919.png" alt="image-20211219154103919"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154155705.png" alt="image-20211219154155705"></p><p>验证面的次数之和是边的二倍</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154356796.png" alt="image-20211219154356796"></p><p>大题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154233084.png" alt="image-20211219154233084"></p><p>选择</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20211219154256076.png" alt="image-20211219154256076"></p><p>大题</p><h1 id="十四、代数系统概论"><a href="#十四、代数系统概论" class="headerlink" title="十四、代数系统概论"></a>十四、代数系统概论</h1><ul><li>二元运算及其性质<br>二元运算和一元运算、二元运算性质、特意元素</li><li>代数系统的概念</li><li>几个典型的代数系统<br>半群、独异点、群<br>环与域<br>格与布尔代数</li><li>代数系统的同构与同态</li></ul><h2 id="14-1、代数系统的基本概念"><a href="#14-1、代数系统的基本概念" class="headerlink" title="14.1、代数系统的基本概念"></a>14.1、代数系统的基本概念</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414192209474.png"></p><p>（1）自然数集合N上的加法和乘法是N上的二元运算，但加法和除法不是</p><p>（2）整数集合Z上的加法、减法和乘法都是Z上的二元运算，而除法不是。</p><p>（3）非零实数集R<em>上的乘法和除法都是 R * 上的二元运算，而加法和减法不是（1+ （-1）&#x3D; 0）。求倒数是R</em>上的一元运算。</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414192221028.png"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414193842964.png" alt="image-20220414193842964"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414193918082.png" alt="image-20220414193918082"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414194419213.png" alt="image-20220414194419213"> </p><p>我觉得绝对补有问题</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419102039946.png" alt="image-20220419102039946"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419102930764.png" alt="image-20220419102930764"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419103556555.png" alt="image-20220419103556555"></p><p>特异元素：单位元、零元 </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419103847664.png" alt="image-20220419103847664"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419104643641.png" alt="image-20220419104643641"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419105516504.png" alt="image-20220419105516504"> </p><h2 id="14-2、代数系统"><a href="#14-2、代数系统" class="headerlink" title="14.2、代数系统"></a>14.2、代数系统</h2><p>满足条件：二元运算</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419112144269.png" alt="image-20220419112144269"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419113029202.png" alt="image-20220419113029202"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419113347216.png" alt="image-20220419113347216"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419113657073.png" alt="image-20220419113657073"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419114340628.png" alt="image-20220419114340628"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419114443722.png" alt="image-20220419114443722"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220421083943197.png" alt="image-20220421083943197"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220421083956172.png" alt="image-20220421083956172"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220421084007579.png" alt="image-20220421084007579"></p><p>第一问选择，只记结论    </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220421085744792.png" alt="image-20220421085744792"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220421091014176.png" alt="image-20220421091014176"></p><table><thead><tr><th>9.</th><th>交换律</th><th>结合律</th><th>单位元</th><th>零元</th></tr></thead><tbody><tr><td>x+y</td><td>是</td><td>是</td><td>0</td><td>无</td></tr><tr><td>x-y</td><td>否</td><td>否</td><td>无</td><td>无</td></tr><tr><td>x*y</td><td>是</td><td>是</td><td>1</td><td>0</td></tr><tr><td>max(x,y)</td><td>是</td><td>是</td><td>无</td><td>无</td></tr><tr><td>min(x,y)</td><td>是</td><td>是</td><td>无</td><td>无</td></tr><tr><td>|x-y|</td><td>是</td><td>否</td><td>无（负数）</td><td>无</td></tr></tbody></table><p><img src="/2024/07/07/Math/discreteMathematics/image-20220421093219429.png"></p><p>（1）是二元运算。交换律是、结合律是、单位元无、零元1</p><p>（2）不是二元运算</p><p>（3）max(x,y)是二元运算。交换律是、结合律是、单位元1、零元10</p><p>（4）不是二元运算。x&#x3D; 8, y&#x3D;5, 0 </p><h2 id="14-3-几个典型的代数系统"><a href="#14-3-几个典型的代数系统" class="headerlink" title="14.3 几个典型的代数系统"></a>14.3 几个典型的代数系统</h2><p>0没有逆元</p><table><thead><tr><th>半群</th><th>可结合</th></tr></thead><tbody><tr><td>含幺半群</td><td>有单位元，独异点</td></tr><tr><td>群</td><td>有单位元，逆元</td></tr><tr><td>有限群</td><td>群G是有穷集</td></tr><tr><td>交换器或阿贝尔群</td><td>群中运算可交换</td></tr><tr><td>格</td><td>任意两个节点都有最大上界或最小下界</td></tr></tbody></table><h3 id="1、半群、独异点与群"><a href="#1、半群、独异点与群" class="headerlink" title="1、半群、独异点与群"></a>1、半群、独异点与群</h3><p><img src="/2024/07/07/Math/discreteMathematics/image-20220513102745976.png"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426102321881.png"></p><p>可逆实矩阵才有乘法逆元 </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426104438699.png" alt="image-20220426104438699"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426105053149.png" alt="image-20220426105053149"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426110908500.png" alt="image-20220426110908500"> </p><p>单位元就是7个0</p><h3 id="2、有限群和阿贝尔群"><a href="#2、有限群和阿贝尔群" class="headerlink" title="2、有限群和阿贝尔群"></a>2、有限群和阿贝尔群</h3><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426111457154.png" alt="image-20220426111457154"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220419114443722.png" alt="image-20220419114443722"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426112637756.png" alt="image-20220426112637756"></p><p>矩阵不可逆的话，乘法就没有逆元</p><p>矩阵的乘法永远都是不可交换的，所以不可能是阿贝尔群 </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220426114639728.png" alt="image-20220426114639728"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220428083035893.png" alt="image-20220428083035893"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220428082910195.png"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220428083006777.png" alt="image-20220428083006777"> </p><h3 id="3、环与域"><a href="#3、环与域" class="headerlink" title="3、环与域"></a>3、环与域</h3><img src="/2024/07/07/Math/discreteMathematics/image-20220505083749099.png" alt="image-20220505083749099" style="zoom:150%;"> <p><img src="/2024/07/07/Math/discreteMathematics/image-20220505084719361.png" alt="image-20220505084719361"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505093532708.png" alt="image-20220505093532708"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220505094839592.png" alt="image-20220505094839592"></p><h2 id="不会"><a href="#不会" class="headerlink" title="不会"></a>不会</h2><h3 id="4、格"><a href="#4、格" class="headerlink" title="4、格"></a>4、格</h3><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510101544058.png"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510103333475.png" alt="     "> </p><p>c图中de有下界，但没有最大下界</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510104906703.png" alt="image-20220510104906703"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510105208596.png" alt="image-20220510105208596"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510105255120.png" alt="image-20220510105255120"> </p><p>且和或读成最小上界和最大下界</p><p>把结论记好</p><p>分配格：不包含钻石格和五角格</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510111933516.png" alt="image-20220510111933516"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510112014167.png" alt="image-20220510112014167"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510112525196.png" alt="image-20220510112525196"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510112712351.png" alt="image-20220510112712351"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510113746549.png" alt="image-20220510113746549"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220510114703330.png" alt="image-20220510114703330"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512083257598.png" alt="image-20220512083257598"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512083530154.png" alt="image-20220512083530154"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512083635470.png" alt="image-20220512083635470"> </p><p>ABA</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512084952652.png" alt="image-20220512084952652"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517111541243.png" alt="image-20220517111541243"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512092056048.png" alt="image-20220512092056048"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512092231830.png" alt="image-20220512092231830"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220512094544202.png" alt="image-20220512094544202"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517105926410.png" alt="image-20220517105926410"></p><h2 id="题"><a href="#题" class="headerlink" title="题"></a>题</h2><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517102941994.png" alt="image-20220517102941994"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220414192221028.png"></p><p>还有5</p><p>选择A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103030139.png" alt="image-20220517103030139"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103246368.png" alt="image-20220517103246368"></p><p> A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103352753.png" alt="image-20220517103352753"></p><p>答案也不完全一样</p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103443840.png" alt="image-20220517103443840"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103554182.png" alt="image-20220517103554182"> </p><p>还有（6）</p><table><thead><tr><th></th><th>Z<sup>+</sup>（正整数）</th><th>N（自然数）（非负整数）</th><th>Z（整数）</th><th>Q（有理数）</th><th>r（实数）</th></tr></thead><tbody><tr><td>+</td><td>半群</td><td>独异点</td><td>群</td><td>群</td><td>群</td></tr></tbody></table><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103713077.png"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103802085.png" alt="image-20220517103802085"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103837939.png" alt="image-20220517103837939"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103900193.png" alt="image-20220517103900193"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103909609.png" alt="image-20220517103909609"></p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517103934893.png" alt="image-20220517103934893"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104000164.png" alt="image-20220517104000164"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104029734.png" alt="image-20220517104029734"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104049459.png" alt="image-20220517104049459"> </p><p>C</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104102418.png" alt="image-20220517104102418"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104117954.png" alt="image-20220517104117954"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104216744.png" alt="image-20220517104216744"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104310848.png" alt="image-20220517104310848"> </p><p>a</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104413948.png" alt="image-20220517104413948"></p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104603252.png" alt="image-20220517104603252"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104615348.png" alt="image-20220517104615348"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104642557.png" alt="image-20220517104642557"></p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104717229.png" alt="image-20220517104717229"> </p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104818762.png" alt="image-20220517104818762"> </p><p>A</p><p>13</p><p>A</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517104915592.png" alt="image-20220517104915592"> </p><p>B</p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220517105053903.png" alt="image-20220517105053903"> </p><p>BAA</p><h1 id="期中"><a href="#期中" class="headerlink" title="期中"></a>期中</h1><p><img src="/2024/07/07/Math/discreteMathematics/image-20220503104039710.png" alt="image-20220503104039710"><img src="/2024/07/07/Math/discreteMathematics/image-20220503105452845.png" alt="image-20220503105452845"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220503112349087.png" alt="image-20220503112349087"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220503112451219.png" alt="image-20220503112451219"> </p><p><img src="/2024/07/07/Math/discreteMathematics/image-20220503113408602.png" alt="image-20220503113408602"> </p><p>模n加法是什么</p><p>14.9（4）</p><p>14.17的第四问和第五问</p><p>环与域</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2024/07/07/Web/CSS/"/>
      <url>/2024/07/07/Web/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-简介"><a href="#CSS-简介" class="headerlink" title="CSS 简介"></a>CSS 简介</h1><p>在学习之前，需要对下面的知识有基本了解</p><ul><li>HTML&#x2F;XHTML</li></ul><h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><ul><li>CSS 指层叠样式表（<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)</li><li>样式定义<strong>如何显示</strong> HTML元素</li><li>样式通常存储在<strong>样式表</strong>中</li><li>把样式添加到 HTML 4.0 中，是为了<strong>解决内容与表现分离的问题</strong></li><li><strong>外部样式表</strong>可以极大提高工作效率</li><li>外部样式表通常存储在 <strong>CSS 文件</strong> 中</li><li>多个样式定义可<strong>层叠</strong> 为一个</li></ul><h2 id="样式解决了一个很大的问题"><a href="#样式解决了一个很大的问题" class="headerlink" title="样式解决了一个很大的问题"></a>样式解决了一个很大的问题</h2><p>HTML 标签原本被设计为用于定义文档内容，如下实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    这是一个标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式表定义如何显示HTML元素，就像 HTML 中 的字体标签和颜色属性所起的作用那样。样式通常保存在外部的 .css 文件中。我们只需要编辑一个简单的CSS 文档就可以改变所有页面的布局和外观</p><h1 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h1><h2 id="CSS实例"><a href="#CSS实例" class="headerlink" title="CSS实例"></a>CSS实例</h2><p>CSS规则由两个主要的部分构成：选择器，以及一条或多条声明</p><p><img src="/2024/07/07/Web/CSS/../../../Blogs/Web/CSS.assets/image-20211010222156038.png" alt="image-20211010222156038"></p><p>选择器通常是你需要改变样式的HTML元素。</p><p>每条声明由一个属性和一个值组成</p><p>属性（property）是你希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。</p><p>CSS 声明总是以分号(;)结束，声明总以大括号({})括起来：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:red;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p>为了让CSS可读性更强，你可以每行只设置一个属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-注释"><a href="#CSS-注释" class="headerlink" title="CSS 注释"></a>CSS 注释</h2><p>注释是用来解释你的代码，并且可以随意编辑它，浏览器会忽略它。</p><p>CSS注释以  <strong>&#x2F;</strong>*  开始，以    ***&#x2F;**  结束，实例如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是个注释*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="comment">/*这是另一个注释*/</span></span><br><span class="line">    <span class="attribute">color</span>:black;</span><br><span class="line">    <span class="attribute">font-family</span>:arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS-Id-和-Class"><a href="#CSS-Id-和-Class" class="headerlink" title="CSS Id 和 Class"></a>CSS Id 和 Class</h1><h2 id="id-和-class-选择器"><a href="#id-和-class-选择器" class="headerlink" title="id 和 class 选择器"></a>id 和 class 选择器</h2><p>如果你要在HTML元素中设置CSS 样式，你需要在元素中设置“id”和”class”选择器</p><h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h2><p>id 选择器可以为标有特定 id 的HTML元素指定特定的样式</p><p>HTML元素以id 属性来设置id 选择器，CSS中id 选择器以”#” 来定义</p><p>以下的样式规则应用于元素属性 id&#x3D;”para1”:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#para1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ID属性不要以数字开头，数字开头的ID在Mozilla&#x2F;Firefox 浏览器不起作用</p><h2 id="class-选择器"><a href="#class-选择器" class="headerlink" title="class 选择器"></a>class 选择器</h2><p>class 选择器用于描述一组元素的样式，class 选择器有别于id 选择器，class 可以在多个元素中使用。</p><p>class 选择器在 HTML中以 class 属性表示，在CSS 中，类选择器以一个点”.”显示：</p><p>在以下的例子中，所有用于 center 类的HTML元素均为居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p>你也可以指定特定的HTML元素使用class</p><p>在以下实例汇总，所有的p元素使用 class&#x3D;”center”让该元素的文本居中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p> 类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用</p><h1 id="CSS-创建"><a href="#CSS-创建" class="headerlink" title="CSS 创建"></a>CSS 创建</h1><p>当读到一个样式表，浏览器会根据它来格式化 HTML 文档。</p><h2 id="如何插入样式表"><a href="#如何插入样式表" class="headerlink" title="如何插入样式表"></a>如何插入样式表</h2><p>插入样式表的方法有三种：</p><ul><li>外部样式表(External style sheet)</li><li>内部样式表(Internal style sheet)</li><li>内联样式(Inline style)</li></ul><hr><h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>当样式需要应用于很多页面时，外部样式将是理想的选择。在使用外部样式表的情况下，你可以通过一个文件来改变整个站点的外观。每个页面使用&lt;link&gt;标签链接到样式表。&lt;link&gt;标签在（文档的）头部：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器会从 mystyle.css 中读到样式声明，并根据它来格式文档。</p><p>外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 html 标签。样式表应该以 .css 扩展名进行保存。下面是一个样式表文件的例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hr &#123;<span class="attribute">color</span>:sienna;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;/images/back40.gif&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><p><em>不要在属性值与单位之间留有空格（如：“*<em>margin-left: 20 px</em></em>“),正确的写法是”<strong>margin-left: 20px</strong>“。*</p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用&lt;style&gt;标签在文档头部定义内部样式表，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        hr &#123;<span class="attribute">color</span>:sienna;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">200px</span>;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><p>要使用内联样式，你需要在相关的标签内使用样式（style)属性。Style属性可以包含任何 CSS 属性。</p><p>本例展示如何改变段落的颜色和左外边距：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:sienna;margin-left:20px&quot;</span>&gt;</span></span><br><span class="line">    这是一个段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h2><p>如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。</p><p>例如，外部样式表拥有针对 h3 选择器的三个属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h3</span><br><span class="line">&#123;</span><br><span class="line">color:red;</span><br><span class="line">text-align:left;</span><br><span class="line">font-size:8pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而内部样式表拥有针对 h3 选择器的两个属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h3</span><br><span class="line">&#123;</span><br><span class="line">text-align:right;</span><br><span class="line">font-size:20pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">color:red;</span><br><span class="line">text-align:right;</span><br><span class="line">font-size:20pt;</span><br></pre></td></tr></table></figure><p>即颜色属性将被继承于外部样式表，而文字排列（text-alignment）和字体尺寸（font-size）会被内部样式表中的规则取代。</p><h2 id="多重样式优先级"><a href="#多重样式优先级" class="headerlink" title="多重样式优先级"></a>多重样式优先级</h2><p>样式表允许以多种方式规定样式信息。样式可以规定在单个的HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p><p>一般情况下，优先级如下：</p><p><strong>（内联样式）Inline style &gt; (内部样式) Internal style sheet &gt; （外部样式）External style sheet &gt; 浏览器默认样式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部样式 style.css--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;styelsheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置： h3&#123;color:blue;&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 内部样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h3</span>&#123;<span class="attribute">color</span>:green;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        测试！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>注意：如果外部样式表放在内部样式表的后面，则外部样式表将覆盖内部样式。</em></p><h1 id="CSS-Backgrounds-背景"><a href="#CSS-Backgrounds-背景" class="headerlink" title="CSS Backgrounds(背景)"></a>CSS Backgrounds(背景)</h1><p>CSS 背景属性用于定义 HTML 元素的背景。</p><p>CSS 属性定义背景效果：</p><ul><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-attachment</li><li>background-position</li></ul><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>background-color 属性定义了元素的背景颜色。</p><p>页面的背景颜色使用在 body 的选择器中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123;background-color:#b0c4de;&#125;</span><br></pre></td></tr></table></figure><p> CSS 中，颜色值通常以以下方式定义：</p><ul><li>十六进制 - 如：”#ff0000”</li><li>RGB - 如：”rgb(255,0,0)”</li><li>颜色名称 - 如：”red”</li></ul><p>以下实例中，h1，p，和 div 元素拥有不同的背景颜色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;background-color:#6495ed;&#125;</span><br><span class="line">p &#123;background-color:#e0ffff;&#125;</span><br><span class="line">div &#123;background-color:#b0c4de;&#125;</span><br></pre></td></tr></table></figure><h2 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h2><p>background-image 属性描述了元素的背景图像。</p><p>默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体</p><p>页面背景图片设置实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123;background-image:url(&#x27;paper.gif&#x27;);&#125;</span><br></pre></td></tr></table></figure><h2 id="背景图像-水平或垂直平铺"><a href="#背景图像-水平或垂直平铺" class="headerlink" title="背景图像 - 水平或垂直平铺"></a>背景图像 - 水平或垂直平铺</h2><p>默认情况下 background-image 属性会在页面的水平或者垂直方向平铺</p><p>一些图像如果在水平方向与垂直方向平铺，这样看起来很不协调，</p><h2 id="背景-简写属性"><a href="#背景-简写属性" class="headerlink" title="背景 - 简写属性"></a>背景 - 简写属性</h2><p>为了简化这些属性的代码，我们可以将这些属性合并在同一个属性中</p><p>背景颜色的简写属性为 “background”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123;background:#ffffff url(&#x27;img_tree.png&#x27;) no-repeat right top;&#125;</span><br></pre></td></tr></table></figure><p>当使用简写属性时，属性值的顺序为：</p><ul><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-attachment</li><li>background-position</li></ul><p>以上属性无需全部使用，可以按照页面的实际需要使用</p><h2 id="CSS-背景属性"><a href="#CSS-背景属性" class="headerlink" title="CSS 背景属性"></a>CSS 背景属性</h2><table>    <tr>        <th>Property        </th>        <th>描述        </th>    </tr>    <tr>        <td>background        </td>        <td>简写属性，作用是将背景属性设置在一个声明中。        </td>    </tr>    <tr>        <td>background-attachment        </td>        <td>背景属性是否固定或者随着页面的其余部分滚动。        </td>    </tr>    <tr>        <td>background-color        </td>        <td>设置元素的背景颜色        </td>    </tr>    <tr>        <td>background-image        </td>        <td>把图像设置为背景        </td>    </tr>   <tr>        <td>background-position        </td>        <td>设置背景图像的起始位置        </td>    </tr>    <tr>        <td>background-repeat        </td>        <td>设置背景图像是否及如何重复。        </td>    </tr></table><h3 id="background-属性"><a href="#background-属性" class="headerlink" title="background 属性"></a>background 属性</h3><p>实例</p><p>在一个div元素中设置多个背景图像（并指定他们的位置）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#00ff00</span> <span class="built_in">url</span>(<span class="string">&#x27;smiley.gif&#x27;</span>) no-repeat fixed center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h4><p>表格中的数字表示支持该属性的第一个浏览器版本号。</p><p><img src="/2024/07/07/Web/CSS/../../../Blogs/Web/CSS.assets/image-20211019085501616.png" alt="image-20211019085501616"></p><p>所有主流浏览器都支持 background 属性。</p><p><strong>注意：</strong>IE8 和更早版本不支持一个元素对个背景图像。</p><p><strong>注意：</strong>IE7 和更早的版本不支持“继承”的值。IE8 需要定义 <strong>！ DOCTYPE</strong>。 IE9支持“继承”。</p><h4 id="标签定义及使用说明"><a href="#标签定义及使用说明" class="headerlink" title="标签定义及使用说明"></a>标签定义及使用说明</h4><p>背景缩写属性可以在一个声明中设置所有的背景属性。</p><p>可以设置的属性为：background-color、background-position、background-size、background-repeat、background-origin、background-clip、background-attachment和background-image。</p><p>各值之间用空格分割，不分先后顺序。可以只有其中的某些值，例如**background: #FF0000 URL (smiley.gif);**是允许的。</p><table>    <tr>        <th>默认值：        </th>        <td>请参阅单独的属性        </td>    </tr>    <tr>        <th>继承：        </th>        <td>no        </td>    </tr>    <tr>        <th>版本：        </th>        <td>CSS1+CSS3中的新属性        </td>    </tr>    <tr>        <th>JavaScript 语法：        </th>        <td>object object.style.background="rel url(smiley.gif) top left no-repeat"        </td>    </tr></table><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;</span><br></pre></td></tr></table></figure><h3 id="background-color属性"><a href="#background-color属性" class="headerlink" title="background-color属性"></a>background-color属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#00ff00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标签定义及使用说明-1"><a href="#标签定义及使用说明-1" class="headerlink" title="标签定义及使用说明"></a>标签定义及使用说明</h4><p>background-color属性设置一个元素的背景颜色。</p><p>元素的背景是元素的总大小，包括填充和边界（但不包括边距）</p><table>    <tr>        <th>默认值：        </th>        <td>transparent        </td>    </tr>    <tr>        <th>继承：        </th>        <td>no        </td>    </tr>    <tr>        <th>版本：        </th>        <td>CSS1        </td>    </tr>    <tr>        <th>JavaScript 语法：        </th>        <td>object object.style.backgroundColor="00FF00"        </td>    </tr></table><h4 id="浏览器支持-1"><a href="#浏览器支持-1" class="headerlink" title="浏览器支持"></a>浏览器支持</h4><p>表格中的数字表示支持该属性的第一个浏览器版本号</p><p><img src="/2024/07/07/Web/CSS/../../../Blogs/Web/CSS.assets/image-20211019091642568.png" alt="image-20211019091642568"></p><h4 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h4><p>使用背景色和文本颜色，使文本易于阅读。</p><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><table>    <tr>        <th>值        </th>        <th>描述        </th>    </tr>    <tr>        <td>color        </td>        <td>指定背景颜色。在CSS 颜色值尽可能的寻找一个颜色值的完整列表        </td>    </tr>    <tr>        <td>transparent        </td>        <td>指定背景颜色应该是透明的。这是默认。        </td>    </tr>    <tr>        <td>inherit        </td>        <td>指定背景颜色，应该从父元素继承        </td>    </tr></table>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http</title>
      <link href="/2024/07/07/Web/Http/"/>
      <url>/2024/07/07/Web/Http/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Web及网络基础"><a href="#一、Web及网络基础" class="headerlink" title="一、Web及网络基础"></a>一、Web及网络基础</h1><h2 id="1-1-使用HTTP协议访问Web"><a href="#1-1-使用HTTP协议访问Web" class="headerlink" title="1.1 使用HTTP协议访问Web"></a>1.1 使用HTTP协议访问Web</h2><p>网页浏览器**(Web browser)<strong>的地址栏中输入</strong>URL**，会出现Web页面</p><p>根据Web浏览器地址栏中指定的URL，Web浏览器从Web服务端获取文件资源**(resource)**等信息，从而显示出Web页面。</p><p>发送请求获取服务器资源的Web浏览器等，都可称为客户端(<strong>client</strong>)</p><p>Web使用一种名为<strong>HTTP(HyperText Transfer Protocol,超文本传输协议</strong>)的协议作为规范，完成从客户端到服务器端等一系列运作流程。而协议是指规则的约定。</p><p>Web是建立在HTTP协议上通信的</p><h2 id="1-2-HTTP的诞生"><a href="#1-2-HTTP的诞生" class="headerlink" title="1.2 HTTP的诞生"></a>1.2 HTTP的诞生</h2><h3 id="1-2-1-为知识共享而规划Web"><a href="#1-2-1-为知识共享而规划Web" class="headerlink" title="1.2.1 为知识共享而规划Web"></a>1.2.1 为知识共享而规划Web</h3><p>1989年3月，互联网还只属于少数人。在这一互联网的黎明期，HTTP诞生了。</p><p>CERN(欧洲核子研究组织)的蒂姆·伯纳斯 - 李 （Tim Berners-Lee）博士提出了一种能让远隔两地的研究者们共享知识的设想。</p><p>最初设想的基本理念是：借助多文档之间相互关联形成的超文本（HyperText），连成可相互参阅的WWW（World Wide Web,万维网）</p><p>现在已提出3项WWW构建技术，分别是：把 <strong>SGML（Standard Generalized Markup Language，标准通用标记语言）</strong>作为页面的文本标记语言的<strong>HTML（HyperText Markup Language，超文本标记语言）</strong>；作为文档传输协议的HTTP；指定文档所在地址的<strong>URL（Uniform Resource Locator，统一资源定位符）。</strong></p><h3 id="1-2-2-Web成长时代"><a href="#1-2-2-Web成长时代" class="headerlink" title="1.2.2 Web成长时代"></a>1.2.2 Web成长时代</h3><p>1990年11月，CERN成功研发了世界上第一台Web服务器和Web浏览器。</p><p>1990年，大家针对HTML 1.0草案进行了讨论，因HTML 1.0中存在多处模糊不清的部分，草案被直接废弃了</p><ul><li>HTML 1.0<br><a href="http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt">http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt</a></li></ul><p>1992娘9月，日本第一个网站的主页上线了。</p><ul><li>日本第一个网页<br><a href="http://www.ibarakiken.gr.jp/www/">http://www.ibarakiken.gr.jp/www/</a></li></ul><p>1993年1月，现代浏览器的祖先<strong>NCSA（National Center for Supercomputer Applications,美国国家超级计算机应用中心）</strong>研发的 <strong>Mosaic</strong> 问世了。它以 <strong>in-line（内联）</strong>等形式显示HTML的图像，在图像方面出色的表现使它迅速在世界范围内流传开来。</p><p>1993年秋天，Mosaic 的 Windows 版和 Macintosh 版问世。使用 CGI 技术的 NCSA Web 服务器、NCSA HTTPd 1.0 也差不多是在这个时期出现的。</p><ul><li><p>NCSA Mosaic bounce page<br><a href="http://archive.ncsa.illinois.edu/mosaic.html">http://archive.ncsa.illinois.edu/mosaic.html</a></p></li><li><p>The NCSA HTTPd Home Page（存档）</p><p><a href="http://web.archive.org/web/20090426182129/http://hoohoo.ncsa.illinois.edu/%EF%BC%88%E5%8E%9F%E5%9D%80%E5%B7%B2%E5%A4%B1%E6%95%88%EF%BC%89">http://web.archive.org/web/20090426182129/http://hoohoo.ncsa.illinois.edu/（原址已失效）</a></p></li></ul><p>1994年12月，网景通信公司发布了 Netscape Navigator 1.0,</p><p>1995年微软公司发布 Internet Explorer 1.0 和 2.0</p><p>紧随其后的是现在依然称为Web服务器标准之一的 Apache，当时它已 Apache 0.2 的姿态出现在世人眼前。</p><p>HTML也发布了2.0 版本</p><p>从1995年左右起，微软和网景之间的浏览器大战愈演愈烈。两家公司都对HTML做了扩展，所以在写HTML页面时，必须考虑兼容两家公司的浏览器。</p><p>2004年，Mozilla 基金会发布了Firefox 浏览器</p><h3 id="1-2-3-驻足不前的HTTP"><a href="#1-2-3-驻足不前的HTTP" class="headerlink" title="1.2.3 驻足不前的HTTP"></a>1.2.3 驻足不前的HTTP</h3><p><strong>HTTP&#x2F;0.9</strong></p><p>​HTTP自1990年面世。那时的HTTP并没有作为正式的标准被建立。现在HTTP其实含有HTTP1.0之前版本的意思，因此被称为HTTP&#x2F;0.9</p><p><strong>HTTP&#x2F;1.0</strong></p><p>​HTTP正式作为标准被公布是在1996年的5月，版本被命名为HTTP&#x2F;1.0,并记载于 RFC1945.虽说是初期标准，但该协议标准至今仍被广泛使用在服务器端</p><ul><li><p>RFC1945-Hypertext Transfer Protocol – HTTP&#x2F;1.0</p><p><a href="http://www.ietf.org/rfc/rfc1945.txt">http://www.ietf.org/rfc/rfc1945.txt</a></p></li></ul><p><strong>HTTP&#x2F;1.1</strong></p><p>​1997年1月公布的HTTP&#x2F;1.1是目前主流的HTTP协议版本。当初的标准是RFC2068,之后发布的修订版RFC2616 就是当前的最新版本</p><ul><li><p>RFC2616 - Hypertext Transfer Protocol – HTTP&#x2F;1.1</p><p><a href="http://www.ietf.org/rfc/rfc2616.txt">http://www.ietf.org/rfc/rfc2616.txt</a></p><p>可见，作为Web文档传输协议的HTTP，它的版本几乎没有更新。新一代HTTP&#x2F;2.0正在制定中，</p><p>当年HTTP协议的出现主要是为了解决文本传输的难题。由于协议本身非常简单，于是在此基础上设想了很多应用方法并投入了实际使用。现在HTTP协议已经超出了Web这个框架的局限，被应用到了各种场景里。</p></li></ul><h2 id="1-3-网络基础-TCP-IP"><a href="#1-3-网络基础-TCP-IP" class="headerlink" title="1.3 网络基础 TCP&#x2F;IP"></a>1.3 网络基础 TCP&#x2F;IP</h2><p>通常使用的网络（包括互联网）是在 TCP&#x2F;IP 协议族的基础上运作的。而 HTTP 属于它内部的一个子集。</p><h3 id="1-3-1-TCP-IP-协议族"><a href="#1-3-1-TCP-IP-协议族" class="headerlink" title="1.3.1 TCP&#x2F;IP 协议族"></a>1.3.1 TCP&#x2F;IP 协议族</h3><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为<strong>协议（protocol）</strong></p><p><img src="/2024/07/07/Web/Http/2510762-20211017103208809-2114002492.png" alt="image-20211017102521891"></p><p>协议中存在各式各样的内容。从电缆的规格到 IP 地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及 Web 页面显示需要处理的步骤，等等。</p><p>像这样把与互联网相关联的协议集合起来总称为 TCP&#x2F;IP。也有说法认为，TCP&#x2F;IP 是指 TCP 和 IP 这两种协议。还有一种说法认为，TCP&#x2F;IP 是在IP 协议的通信过程中，使用到的协议族的统称。</p><h3 id="1-3-2-TCP-IP-的分层管理"><a href="#1-3-2-TCP-IP-的分层管理" class="headerlink" title="1.3.2 TCP&#x2F;IP 的分层管理"></a>1.3.2 TCP&#x2F;IP 的分层管理</h3><p>​TCP&#x2F;IP 协议族里重要的一点就是分层。 TCP&#x2F;IP 协议族按层次分为以下 4 层：<strong>应用层、传输层、网络层和数据链路层。</strong></p><p>​把TCP&#x2F;IP 层次化是有好处的。比如，如果互联网只由一个协议统筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。而分层之后只需把变动的层替换掉即可。把各层之间的接口部分规划好之后，每个层次内部的设计就能够自由改动了。</p><p>​层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪个地方、对方的传输路线是怎样的、是否能确保传输送达等问题。</p><p>​TCP&#x2F;IP协议族各层的作用如下：</p><p><strong>应用层</strong></p><p>应用层决定了向用户提供应用服务时通信的活动。</p><p>TCP&#x2F;IP 协议族内预存了各类通用的应用服务。比如，<strong>FTP</strong>（File Transfer Protocol，文件传输协议）和<strong>DNS</strong>（Domain Name System，域名系统）服务就是其中两类。</p><p>HTTP 协议也处于该层。</p><p><strong>传输层</strong></p><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</p><p>在传输层有两个性质不同的协议：<strong>TCP</strong>（Transmission Control Protocol，传输控制协议）和 <strong>UDP</strong>（User Data Protocol，用户数据报协议）</p><p><strong>网络层（又名网络互连层）</strong></p><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><p>与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</p><p><strong>链路层（又名数据链路层、网络接口层）</strong></p><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、<strong>NIC</strong>（Network Interface Card，网络适配器，即网卡），即光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</p><h3 id="1-3-3-TCP-IP-通信传输流"><a href="#1-3-3-TCP-IP-通信传输流" class="headerlink" title="1.3.3 TCP&#x2F;IP 通信传输流"></a>1.3.3 TCP&#x2F;IP 通信传输流</h3><p><img src="/2024/07/07/Web/Http/2510762-20211017105110253-1571672214.png" alt="image-20211017105106815"></p><p>​利用 <strong>TCP&#x2F;IP</strong> 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层上走。</p><p>​用<strong>HTTP</strong> 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。</p><p>​接着，为了传输方便，在传输层（<strong>TCP</strong> 协议）把从应用层处收到的数据（<strong>HTTP</strong>请求收文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p><p>​在网络层（<strong>IP</strong> 协议），增加作为通信目的地的 <strong>MAC</strong> 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</p><p>​接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的 <strong>HTTP</strong> 请求。</p><p><img src="/2024/07/07/Web/Http/2510762-20211017110249392-182313378.png" alt="image-20211017110245597"></p><p>​发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层会把对应的首部消去。</p><p>​这种把数据信息包装起来的做法成为封装（encapsulate）</p><h2 id="1-4-与-HTTP-关系密切的协议：IP、TCP-和-DNS"><a href="#1-4-与-HTTP-关系密切的协议：IP、TCP-和-DNS" class="headerlink" title="1.4 与 HTTP 关系密切的协议：IP、TCP 和 DNS"></a>1.4 与 HTTP 关系密切的协议：IP、TCP 和 DNS</h2><h3 id="1-4-1-负责传输的-IP-协议"><a href="#1-4-1-负责传输的-IP-协议" class="headerlink" title="1.4.1 负责传输的 IP 协议"></a>1.4.1 负责传输的 IP 协议</h3><p>​按层次分，<strong>IP（Internet Protocol）网络协议</strong>位于网络层。</p><p>​Internet Protocol 这个名称可能听起来有点夸张，但事实正是如此，因为几乎所有使用网络的系统都会用到 IP 协议。 TCP&#x2F;IP 协议族中的 IP 指的就是网络协议。</p><p>​可能有人把 “IP” 和 “IP地址” 搞混， “IP” 其实是一种协议的名称。</p><p>​<strong>IP 协议的作用</strong>是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各种条件。其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）</p><h4 id="使用ARP-协议凭借-MAC-地址进行通信"><a href="#使用ARP-协议凭借-MAC-地址进行通信" class="headerlink" title="使用ARP 协议凭借 MAC 地址进行通信"></a>使用ARP 协议凭借 MAC 地址进行通信</h4><p>​<strong>IP</strong> 间的通信依赖 <strong>MAC</strong> 地址。在网络上，通信的双方在同一局域网（<strong>LAN</strong>）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 <strong>MAC</strong> 地址来搜索下一个中转目标。这时，会采用 <strong>ARP 协议（Address Resolution Protocol）</strong>。<strong>ARP</strong> 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</p><h4 id="没有人能够全面掌握互联网中的传输情况"><a href="#没有人能够全面掌握互联网中的传输情况" class="headerlink" title="没有人能够全面掌握互联网中的传输情况"></a>没有人能够全面掌握互联网中的传输情况</h4><p>​在到达通信目标的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。</p><p>​这种机制称为<strong>路由选择（routing）</strong>，有点像快递公司的送货过程。想要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会判断是否能送到对方的家中。</p><p>​<img src="/2024/07/07/Web/Http/image-20211018184840342.png" alt="image-20211018184840342"></p><h3 id="1-4-2-确保可靠性的-TCP-协议"><a href="#1-4-2-确保可靠性的-TCP-协议" class="headerlink" title="1.4.2 确保可靠性的 TCP 协议"></a>1.4.2 确保可靠性的 TCP 协议</h3><p>​按层次分，<strong>TCP</strong> 位于传输层，提供可靠的字节流服务。</p><p>​所谓的<strong>字节流服务（Byte Steam Service</strong>）是指，为了传输方便，将大块数据分割成以<strong>报文段（segment）</strong>为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。</p><p>​一言以蔽之，TCP 协议为了更容易传送大数据才能数据分割，而且 TCP 协议能够确认最终是否送达到对方。</p><h4 id="确保数据能到达目标"><a href="#确保数据能到达目标" class="headerlink" title="确保数据能到达目标"></a>确保数据能到达目标</h4><p>​为了准确无误地将数据送达目标处，TCP 协议采用了<strong>三次握手（three-way handshaking ）</strong>策略。用 TCP 协议把数据包送出去后， TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志（<strong>flag）</strong>— <strong>SYN（synchronize）和 ACK （acknowledgement）</strong></p><p>​发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN&#x2F;ACK 标志的数据包以示传达确认信息。最后，发送端在回传一个带 ACK 标志的数据包，代表“握手”结束。</p><p>​若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p><p><img src="/2024/07/07/Web/Http/image-20211018190307167.png" alt="image-20211018190307167"></p><p>除了上述三次握手外，TCP 协议还有其他各种手段来保证通信的可靠性。</p><h2 id="1-5-负责域名解析的-DNS-服务"><a href="#1-5-负责域名解析的-DNS-服务" class="headerlink" title="1.5 负责域名解析的 DNS 服务"></a>1.5 负责域名解析的 DNS 服务</h2><p>​<strong>DNS（Domain Name System）</strong>服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务。</p><p>​计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。比如 <a href="http://www.hackr.jp./">www.hackr.jp。</a></p><p>​用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为 与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。</p><p>​但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。</p><p>​为了解决上述的问题， DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p><p><img src="/2024/07/07/Web/Http/image-20211018191746688.png" alt="image-20211018191746688"></p><h2 id="1-6-各种协议与-HTTP-协议的关系"><a href="#1-6-各种协议与-HTTP-协议的关系" class="headerlink" title="1.6 各种协议与 HTTP 协议的关系"></a>1.6 各种协议与 HTTP 协议的关系</h2><p>以下这张图可以更好地了解 <strong>IP</strong> 协议、<strong>TCP</strong> 协议和 <strong>DNS</strong> 服务在使用 <strong>HTTP</strong> 协议的通信过程中各自发挥了哪些作用。</p><p><img src="/2024/07/07/Web/Http/image-20211018192255831.png" alt="image-20211018192255831"></p><h2 id="1-7-URI-和-URL"><a href="#1-7-URI-和-URL" class="headerlink" title="1.7 URI 和 URL"></a>1.7 URI 和 URL</h2><p>​与URI（统一资源标识符）相比，我们更熟悉URL（Uniform Resource Locator，统一资源定位符）。URL 正是使用 Web 浏览器等访问 Web 页面时需要输入的网页结构。比如，<a href="http://hackr.jp/">http://hackr.jp/</a> 就是URL</p><h3 id="1-7-1-统一资源标识符"><a href="#1-7-1-统一资源标识符" class="headerlink" title="1.7.1 统一资源标识符"></a>1.7.1 统一资源标识符</h3><p>​<strong>URI</strong> 是 <strong>Uniform Resource Identifier</strong> 的缩写。RFC2396 分别对这 3 个单词进行了如下定义。</p><p><strong>Uniform</strong></p><p>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。另外，加入新增的协议方案（如 <strong>http:</strong> 或 <strong>ftp:</strong> ）也更容易</p><p><strong>Resource</strong></p><p>资源的定义是“可标识的任何东西”。除了文档文件、图像或服务（例如当天的天气预报）等能够区别于其他类型的，全都可作为资源。另外，资源不仅可以是单一的，也可以是多数的集合体。</p><p><strong>Identifier</strong></p><p>表示可标识的对象。也称为标识符。</p><hr><p>综上所述，URI 就是某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。</p><p>​采用 HTTP 协议时，协议方案就是 <strong>http</strong>。除此之外，还有 <strong>ftp、mailto、telnet、file</strong>等。标准的 URI 协议方案有 30 种左右，由隶属于国际互联网资源管理的非盈利社团 <strong>ICANN（Internet Corporation for Assigned Names and Numbers，互联网名称与数字地址分配机构）的 IANA （Internet Assigned Numbers Authority，互联网号码分配局）</strong>管理颁布。</p><ul><li><p><strong>IANA - Uniform Resource Identifier （URI）SCHEMES（统一资源标识符方案）</strong><br><a href="http://www.iana.org/assignments/uri-schemes">http://www.iana.org/assignments/uri-schemes</a></p><p><strong>URI</strong> 用字符串标识某一互联网资源，而 <strong>URL</strong> 标识资源的地点（互联网上的位置）。可见 <strong>URL</strong> 是 <strong>UR</strong>I 的子集。</p><p>“RFC3986：统一资源标识符（<strong>URI</strong>）通用语法”中列举了几种 URI 例子，如下所示。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ftp://ftp.is.co.za/rfc/rfc1808.txt</span><br><span class="line">http://www.ietf.org/rfc/rfc2396.txt</span><br><span class="line">ldap://[2001:db8::7]/c=GB?objectClass?one</span><br><span class="line">mailto:John.Doe@example.com</span><br><span class="line">news:comp.infosystems.www.servers.unix</span><br><span class="line">tel:+1-816-555-1212</span><br><span class="line">telnet://192.0.2.16:80/</span><br><span class="line">urn:oasis:names:specification:docbook:dtd:xml:4.1.2</span><br></pre></td></tr></table></figure><h3 id="1-7-2-URI-格式"><a href="#1-7-2-URI-格式" class="headerlink" title="1.7.2 URI 格式"></a>1.7.2 URI 格式</h3><p>​表示指定的<strong>URI</strong>，要使用涵盖全部必要信息的绝对 <strong>URI</strong>、绝对 <strong>URL</strong> 以及相对 <strong>URL</strong> 。相对 <strong>URL</strong>，是指从浏览器中基本 <strong>URI</strong>处指定的 <strong>URL</strong> ，形如 &#x2F;image&#x2F;logo.gif。</p><p><img src="/2024/07/07/Web/Http/image-20211018212746676.png" alt="image-20211018212746676"></p><p>​使用 <strong>http:</strong> 或<strong>https:</strong> 等协议方案名获取资源时要指定协议类型。不区分字母大小写，最后附一个冒号（ : ）</p><p>​也可使用<strong>data:</strong> 或 <strong>javascript:</strong> 这类指定数据或脚本程序的方案名</p><p><strong>登录信息（认证）</strong></p><p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。</p><p><strong>服务器地址</strong></p><p>使用绝对 <strong>URI</strong> 必须指定待访问的服务器地址。地址可以是类似 <strong>hackr.jp</strong> 这种 <strong>DNS</strong> 可解析的名称，或是 <strong>192.168.1.1</strong> 这类 <strong>IPv4</strong> 地址名，还可以是**[0:0:0:0:0:0:0:1]** 这种用方括号括起来的 <strong>IPv6</strong> 地址名。</p><p><strong>服务器端口名</strong></p><p>指定服务器连接的网络端口号。此项也是<strong>可选项</strong>，若用户省略则自动使用默认端口号。</p><p><strong>带层次的文件路径</strong></p><p>指定服务器上的文件路径来定位特指的资源。这与 <strong>UNIX</strong> 系统的文件目录结构相似。</p><p><strong>查询字符串</strong></p><p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项<strong>可选</strong>。</p><p><strong>片段标识符</strong></p><p>使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在 RFC 中并没有明确规定其使用方法。该项也为可选项。</p><hr><p>并不是所有的应用程序都符合 RFC</p><p>​有一些用来制定 HTTP 协议技术标准的文档，它们被称为 RFC（Request for Comments，征求修正意见书）。</p><p>​通常，应用程序会遵照有 RFC 确定的标准实现。可以说， RFC是互联网的设计文档，钥匙不按照 RDC标准执行，就有可能导致无法通信的状况。比如，有一台 Web 服务器内的应用服务没有遵照 RFC 的标准实现，那 Web 浏览器就很可能无法访问这台服务器。</p><p>​由于不遵照 RFC 标准实现就无法进行 HTTP 协议通信，所以基本上客户端和服务器端都会以 RFC 为标准来实现 HTTP 协议。但也存在某些应用因客户端或服务器端的笔筒，而未遵照 RFC 标准，反而将自成一套的“标准”扩展的情况。</p><p>​不按 RFC 标准来实现，当然也不必劳心费力让自己的“标准”符合其他所有的客户端和服务器端。但设想一下，如果这款应用程序的使用者非常多，那会发生什么情况？不难想象，其他的客户端或服务器端必然都不得不去配合它。</p><p>​实际在互联网上，已经实现了 HTTP 协议的一些服务器端和客户端里就存在上述情况。</p><h1 id="二、简单的-HTTP-协议"><a href="#二、简单的-HTTP-协议" class="headerlink" title="二、简单的 HTTP 协议"></a>二、简单的 HTTP 协议</h1><p>本章将针对 HTTP 洗衣结构进行讲解，主要使用了 HTTP&#x2F;1.1版本。</p><h2 id="2-1-HTTP协议用于客户端和服务器端之间的通信"><a href="#2-1-HTTP协议用于客户端和服务器端之间的通信" class="headerlink" title="2.1 HTTP协议用于客户端和服务器端之间的通信"></a>2.1 HTTP协议用于客户端和服务器端之间的通信</h2><p>​<strong>HTTP</strong> 协议和 <strong>TCP&#x2F;IP</strong> 协议族内的其他众多的协议相同，用于<strong>客户端和服务器端</strong>之间的通信。</p><p>​请求访问文本或图像等资源的一端称为<strong>客户端</strong>，而提供资源响应的一端称为<strong>服务器端</strong>。</p><p>​在两台计算机之间使用 <strong>HTTP</strong> 协议通信时，在一条通信线路上必定有一端是<strong>客户端</strong>，另一端则是<strong>服务器端</strong>。</p><p>​有时候，按实际情况，两台计算机作为客户端和服务器端的角色有可能会互换。但就仅从一条通信路线来说，服务器端和客户端的角色是<strong>确定</strong>的，而用 HTTP 协议能够明确区分哪端是客户端，哪端是服务器端。</p><h2 id="2-2-通过请求和响应的交换达成通信"><a href="#2-2-通过请求和响应的交换达成通信" class="headerlink" title="2.2 通过请求和响应的交换达成通信"></a>2.2 通过请求和响应的交换达成通信</h2><p>​HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。</p><p><img src="/2024/07/07/Web/Http/image-20211019211644722.png" alt="image-20211019211644722"></p><p>​下面则是从客户端发送给某个 HTTP 服务器端的请求报文中的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /index.htm HTTP/1.1</span><br><span class="line">Host: hackr.jp</span><br></pre></td></tr></table></figure><p>​起始行开头的 <strong>GET</strong> 表示请求访问服务器的类型，称为<strong>方法（method)<strong>。随后的字符串 <strong>&#x2F;index.htm</strong> 指明了请求访问的资源对象，也叫做</strong>请求 URI（request-URI）</strong>。最后的 <strong>HTTP&#x2F;1.1</strong>，即 HTTP 的版本号，用来提示客户端使用的 HTTP 协议功能。</p><p>​综合来看，这段请求内容的意思是：请求访问某台 HTTP 服务器上的 &#x2F;index.htm 页面资源。</p><p>​<strong>请求报文</strong>是由<strong>请求方法</strong>、<strong>请求 URI</strong>、<strong>协议版本</strong>、<strong>可选的请求首部字段</strong>和<strong>内容实体</strong>构成的。</p><p><img src="/2024/07/07/Web/Http/image-20211019212408648.png" alt="image-20211019212408648"></p><p>​接收到请求的服务器，会将请求内容的处理结果以响应的形式返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 10 Jul 2012 06:50:15 GMT</span><br><span class="line">Content-Length:362</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>​在起始行开头的 <strong>HTTP&#x2F;1.1</strong> 表示服务器对应的 HTTP 版本。</p><p>​紧挨着的 <strong>200 OK</strong> 表示请求的处理结果的<strong>状态码（status code）</strong>和<strong>原因短语（reason-phrase）</strong>。下一行显示了创建响应的日期时间，是<strong>首部字段（header field）</strong>内的一个属性。</p><p>​接着以一空行分割，之后的内容称为资源实体的<strong>主体（entity body）</strong></p><p>​响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><p><img src="/2024/07/07/Web/Http/image-20211019213208640.png" alt="image-20211019213208640"></p><h2 id="2-3-HTTP-是不保存状态的协议"><a href="#2-3-HTTP-是不保存状态的协议" class="headerlink" title="2.3 HTTP 是不保存状态的协议"></a>2.3 HTTP 是不保存状态的协议</h2><p>​HTTP 是一种不保存状态，即<strong>无状态（stateless）协议</strong>。 HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求和响应都不做持久化处理。</p><p><img src="/2024/07/07/Web/Http/image-20211020103956377.png" alt="image-20211020103956377"></p><p>​使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务，确保协议的可伸展性，而特意把 HTTP 协议设计成如此简单。</p><p>​可是，随着 Web 的不断发展，因无状态而导致业务处理变得棘手的情况增多了。比如，用户登录到一家购物网站，及时他跳转到该站的其他页面后，也需要能继续保持登录状态。针对这个实例，网站为了能够掌握是谁送出的请求，需要保存用户的状态。</p><p>​HTTTP&#x2F;1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于是引用了 <strong>Cookie</strong> 技术。有了Cookie 再用 HTTP 协议通信，就可以管理状态了。</p><h2 id="2-4-请求-URI-定位资源"><a href="#2-4-请求-URI-定位资源" class="headerlink" title="2.4 请求 URI 定位资源"></a>2.4 请求 URI 定位资源</h2><p>​HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。</p><p><img src="/2024/07/07/Web/Http/image-20211020105128195.png" alt="image-20211020105128195"></p><p>​当客户端请求访问资源而发送请求时，URI 需要将作为请求报文中的请求URI 包含在内。指定 请求URI 的方式有很多。</p><p><img src="/2024/07/07/Web/Http/image-20211020105741793.png" alt="image-20211020105741793"></p><p>​除此之外，如果不是访问特定组员而是对服务器本身发起请求，可以用一个 * 来代替 请求URI 。下面这个例子是查询 HTTP 服务器端支持的 HTTP 方法种类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIOUS * HTTP/1.1</span><br></pre></td></tr></table></figure><h2 id="2-5-告知服务器意图的-HTTP-方法"><a href="#2-5-告知服务器意图的-HTTP-方法" class="headerlink" title="2.5 告知服务器意图的 HTTP 方法"></a>2.5 告知服务器意图的 HTTP 方法</h2><p>​下面，介绍 <strong>HTTP&#x2F;1.1</strong> 中可使用的方法。</p><p><strong>GET:获取资源</strong></p><p>​<strong>GET</strong> 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就爆出原样返回；如果是像 <strong>CGI（Common Gateway Interface，通用网关接口）</strong>那样的程序，则返回经过执行后的输出结果。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155945313-756277792.png" alt=" "></p><p><strong>POST:传输实体主体</strong></p><p>​POST 方法用来传输实体的主体。</p><p>​虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155939847-1564699902.png" alt="image-20211022153141176"></p><p><img src="/2024/07/07/Web/Http/2510762-20211022155939160-1727800808.png" alt="image-20211022153146433"></p><p><strong>PUT：传输文件</strong></p><p>​PUT 方法用来传输文件，就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。</p><p>​但是，鉴于 HTTP&#x2F;1.1 的 PUT 方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的 Web网站不使用该方法。若配合 Web应用程序的验证机制，或架构设计采用 <strong>REST</strong>（REpresentational State Transfer，表征状态转移）标准的同类 Web 网站，就可能会开放使用 PUT 方法。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155944247-102893595.png" alt="image-20211022153711730"></p><p><em>响应的意思其实是请求执行成功了，但无数据返回。</em></p><p><strong>HEAD：获得报文首部</strong></p><p>​HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155945415-150857790.png" alt="image-20211022154036039"></p><p><strong>DELETE:删除文件</strong></p><p>​DELETE方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。</p><p>​但是，HTTP&#x2F;1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机制，所以一般的Web 网站也不使用 DELETE方法。当配合Web 应用程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155934716-904531548.png" alt="image-20211022154430080"></p><p><img src="/2024/07/07/Web/Http/2510762-20211022155932558-1503873984.png" alt="image-20211022154434959"></p><p><strong>OPTIONS:询问支持的方法</strong></p><p>​OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155928394-328189849.png" alt="image-20211022154623818"></p><p><strong>TRACE:追踪路径</strong></p><p>​TRACE 方法是让 Web服务器端将之前的请求通信环回给客户端的方法。</p><p>​发送请求时，在 <strong>Max -Forwards</strong> 首部字段中填入数值，每经过一个服务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最后接收到请求的服务器端则返回状态码 200 OK 的响应。</p><p>​客户端通过 TRACE 方法可以查询发送出去的请求是怎样被加工修改&#x2F;篡改的。这是因为，请求想要连接到源目标服务器可能会通过代理中转， TRACE 方法就是用来确认连接过程中发生的一系列操作。</p><p>​但是，TRACE 方法本来就不怎么常用，再加上它容易引发 <strong>XST（Cross-Site Tracting，跨站追踪）</strong>攻击，通常就更不会用到了。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155933627-530409767.png" alt="image-20211022155404276"></p><p><img src="/2024/07/07/Web/Http/2510762-20211022155929659-1777512570.png" alt="image-20211022155409232"></p><p><strong>CONNECT：要求用隧道协议连接代理</strong></p><p>​<strong>CONNECT</strong> 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 <strong>TCP</strong> 通信。主要使用 <strong>SSL（Secure Sockets Layer</strong>，安全套接层）和<strong>TLS（Transport Layer Security</strong>，传输层安全）协议把通信内容加密后经网络隧道传输。</p><p>​CONNECT 方法的格式如下所示。</p><p><img src="/2024/07/07/Web/Http/2510762-20211022155918081-1373781380.png" alt="image-20211022155903662"></p><p><img src="/2024/07/07/Web/Http/2510762-20211022155920084-1157467051.png" alt="image-20211022155908076"></p><h2 id="2-6-使用以下方法下达命令"><a href="#2-6-使用以下方法下达命令" class="headerlink" title="2.6 使用以下方法下达命令"></a>2.6 使用以下方法下达命令</h2><p>​向<strong>请求URI</strong> 指定的资源发送请求报文时，采用称为方法的命令。</p><p>​方法的作用在于，可以指定请求的资源按期望产生某种行为。方法中有 <strong>GET、POST 和 HEAD</strong> 等</p><p>​<img src="/2024/07/07/Web/Http/image-20211023170353097.png" alt="image-20211023170353097"></p><p>​下表列出了 HTTP&#x2F;1.0和 HTTP&#x2F;1.1 支持的方法。另外，方法名区分大小写，注意要用大写字母。</p><p><img src="/2024/07/07/Web/Http/image-20211023170545676.png" alt="image-20211023170545676"></p><p>​在这里列举的众多方法中，LINK和 UNLINK 已被 HTTP&#x2F;1.1 废弃，不在支持。</p><h2 id="2-7-持久连接节省通信量"><a href="#2-7-持久连接节省通信量" class="headerlink" title="2.7 持久连接节省通信量"></a>2.7 持久连接节省通信量</h2><p>​HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。</p><p><img src="/2024/07/07/Web/Http/image-20211023171134968.png" alt="image-20211023171134968"></p><p>​以当年的通信情况来说，因为都是些容量很小的文本传输，所以即使这样也没有多大问题。可随着 HTTP 的普及，文档中包含着大量图片的情况多了起来。</p><p>​比如，使用浏览器浏览一个包含多张图片的 HTML 页面时，在发送请求访问 HTML 页面资源的同时，也会请求该页面里包含的其他资源。因此，每次请求都会造成无谓的 TCP连接建立和断开，增加通信量的开销。</p><p><img src="/2024/07/07/Web/Http/image-20211023172139281.png" alt="image-20211023172139281"></p><h3 id="2-7-1-持久连接"><a href="#2-7-1-持久连接" class="headerlink" title="2.7.1 持久连接"></a>2.7.1 持久连接</h3><p>​为解决上述 TCP 连接的问题，HTTP&#x2F;1.1 和一部分的 HTTP&#x2F;1.0 想出了持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一段没有明确提出断开连接，则保持 TCP 连接状态。</p><p><img src="/2024/07/07/Web/Http/image-20211023172627564.png" alt="image-20211023172627564"></p><p>​持久连接的好处在于减少了 <strong>TCP</strong> 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 <strong>HTTP</strong> 请求和响应能够更早地结束，这样 <strong>Web</strong> 页面的显示速度也就相应提高了。</p><p>​在 <strong>HTTP&#x2F;1.1</strong> 中，所有的连接默认都是持久连接，但在 <strong>HTTP&#x2F;1.0</strong> 内并未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接，但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客户端也需要支持持久连接。</p><h3 id="2-7-2-管线化"><a href="#2-7-2-管线化" class="headerlink" title="2.7.2 管线化"></a>2.7.2 管线化</h3><p>​持久连接使得多数请求以<strong>管线化（pipelining）</strong>方式发送称为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。</p><p>​这样就能做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p><p><img src="/2024/07/07/Web/Http/image-20211023173514447.png" alt="image-20211023173514447"></p><p>​比如，当请求一个包含10张图片的 <strong>HTML Web</strong> 页面，与挨个连接相比，用持久连接可以让请求更快结束。而管线化技术则比持久连接还要快。请求数越多，时间差就越明显。</p><h2 id="2-8-使用Cookie-的状态管理"><a href="#2-8-使用Cookie-的状态管理" class="headerlink" title="2.8 使用Cookie 的状态管理"></a>2.8 使用Cookie 的状态管理</h2><p>​HTTP是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。</p><p>​假设要求登录认证的Web页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。</p><p>​不可否认，无状态协议当然也有它的优点。由于不必保存状态，然可减少服务器的CPU及内存资源的消耗。从另一侧面来说，也正因为 HTTP 协议本身是非常简单的，所以才会被应用于各种场景中。</p><p><img src="/2024/07/07/Web/Http/2510762-20211030104137371-909031665.png" alt="image-20211030104132962"></p><p>​保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。</p><p>​Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie  的首段字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie值后发送出去。</p><p>​服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p><p><img src="/2024/07/07/Web/Http/2510762-20211030105113570-1275713285.png" alt="image-20211030105109771"></p><p><img src="/2024/07/07/Web/Http/2510762-20211030105220895-2087622047.png" alt="image-20211030105217949"></p><h1 id="三、HTTP报文内的-HTTP信息"><a href="#三、HTTP报文内的-HTTP信息" class="headerlink" title="三、HTTP报文内的 HTTP信息"></a>三、HTTP报文内的 HTTP信息</h1><p>HTTP通信过程包括从客户端发往服务器端的请求及从服务器端返回客户端的响应。</p><h2 id="3-1-HTTP报文"><a href="#3-1-HTTP报文" class="headerlink" title="3.1 HTTP报文"></a>3.1 HTTP报文</h2><p>用于HTTP协议<strong>交互</strong>的信息被称为 HTTP报文。</p><p>请求端（客户端）的 HTTP报文叫做请求报文，响应端（服务器端）的叫做响应报文。</p><p><strong>HTTP 报文本身是由多行（用 CR+LF作换行符）数据构成的字符串文本。</strong></p><p>HTTP 报文大致可分为<strong>报文首部</strong>和<strong>报文主体</strong>两块。两者由最初出现的**空行（CR+LE)**来划分。通常，并不一定要有报文主体。</p><p><img src="/2024/07/07/Web/Http/image-20211030112340085.png" alt="image-20211030112340085"></p><h2 id="3-2-请求报文及响应报文的结构"><a href="#3-2-请求报文及响应报文的结构" class="headerlink" title="3.2 请求报文及响应报文的结构"></a>3.2 请求报文及响应报文的结构</h2><p><img src="/2024/07/07/Web/Http/2510762-20211030112858730-115817377.png" alt="image-20211030112852212"></p><p><img src="/2024/07/07/Web/Http/2510762-20211030112904900-757135526.png" alt="image-20211030112902056"></p><p><img src="/2024/07/07/Web/Http/2510762-20211030112911789-1032356065.png" alt="image-20211030112908063"></p><p>​请求报文和响应报文的首部内容由以下数据组成。现在出现的各种首部字段及状态码稍后会进行阐述。</p><p><strong>请求行</strong></p><p>包含用于请求的方法，请求URI 和 HTTP 版本</p><p><strong>状态行</strong></p><p>包含表明响应结果的状态码，原因短语和 HTTP版本</p><p><strong>首部字段</strong></p><p>包含表示请求和响应的各种条件和属性的各类首部</p><p>一般有4种首部，分别是：通用首部、请求首部、响应首部和实体首部</p><p><strong>其他</strong></p><p>可能包含 HTTP 的RFC 里未定义的首部（Cookie等）</p><h2 id="3-3-编码提升传输速率"><a href="#3-3-编码提升传输速率" class="headerlink" title="3.3 编码提升传输速率"></a>3.3 编码提升传输速率</h2><p>HTTP在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。但是，编码的操作需要计算机来完成，因此会消耗更多的 CPU等资源。</p><h3 id="3-3-1-报文主体和实体主体的差异"><a href="#3-3-1-报文主体和实体主体的差异" class="headerlink" title="3.3.1 报文主体和实体主体的差异"></a>3.3.1 报文主体和实体主体的差异</h3><ul><li><p><strong>报文（message）</strong><br>是HTTP通信中的基本单位，由8位组字节流（<strong>octet sequence</strong>,其中 octet 为8 个比特）组成，通过 HTTP 通信传输</p></li><li><p><strong>实体（entity)</strong><br>作为请求或响应的有效载荷数据（补充项）被传输，其内容由<strong>实体首部和实体主体</strong>组成。</p><p>HTTP报文的主体用于传输请求或响应的实体主体。</p></li></ul><p>通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</p><p>报文和实体这两个术语在之后会经常出现，请事先了解两者的差异。</p><h3 id="3-3-2-压缩传输的内容编码"><a href="#3-3-2-压缩传输的内容编码" class="headerlink" title="3.3.2 压缩传输的内容编码"></a>3.3.2 压缩传输的内容编码</h3><p>​向待发送邮件内增加附件时，为了使邮件容量变小，我们会先用 ZIP压缩文件之后再添加附件发送。 HTTP协议中有一种被称为内容编码的功能也能进行类似的操作。</p><p>​内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。</p><p><img src="/2024/07/07/Web/Http/2510762-20211030115032330-1586078984.png" alt="image-20211030115028056"></p><p>常见的内容编码有以下几种：</p><ul><li><strong>gzip ( GUN zip)</strong></li><li><strong>compress ( UNIX 系统的标准压缩)</strong></li><li><strong>deflate ( zlib)</strong></li><li><strong>identity (不进行编码)</strong></li></ul><h3 id="3-3-3-分割发送的分块传输编码"><a href="#3-3-3-分割发送的分块传输编码" class="headerlink" title="3.3.3 分割发送的分块传输编码"></a>3.3.3 分割发送的分块传输编码</h3><p>​在HTTP 通信过程中，请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面。</p><p>​这种把实体主体分块的功能称为分块传输编码（ <strong>Chunked Transfer Coding</strong>）。</p><p><img src="/2024/07/07/Web/Http/2510762-20211030115624177-183200671.png" alt="image-20211030115620636"></p><p>​分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记块的大小，而实体主体的最后一块会使用“0（CR+LF)”来标记。</p><p>​使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编码前的实体主体。</p><p>​HTTP&#x2F;1.1 中存在一种称为传输编码（<strong>Transfer Coding</strong>）的机制，它可以在通信时按某种编码方式传输，但只定义作用于分块传输编码中。</p><h2 id="3-4-发送多种数据的多部分对象集合"><a href="#3-4-发送多种数据的多部分对象集合" class="headerlink" title="3.4 发送多种数据的多部分对象集合"></a>3.4 发送多种数据的多部分对象集合</h2><p>​发送邮件时，我们可以在邮件里写入文字并添加多份附件。这是因为采用了 <strong>MIME（Multipurpose Internet Mail Extensions，</strong>多用途因特网邮件扩展）机制，它允许邮件处理文本、图片、视频等多个不同类型的数据。例如，图片等二进制数据以 ASCII 码字符串编码的方式指明，就是利用 MIME 来描述标记数据类型。而在 MIME 扩展中会使用一种称为 多部分对象集合（Multipart）的方法，来容纳多份不同类型的数据。</p><p>​相应地，HTTP 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体。通常是在图片或文本文件等上传时使用。</p><p>​多部分对象集合包含的对象如下：</p><ul><li>multipart&#x2F;form-data<br>在 Web 表单文件上传时使用</li><li>multipart&#x2F;byteranges<br>状态码 206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。</li><li>multipart&#x2F;form-data<br><img src="/2024/07/07/Web/Http/2510762-20211105150207535-2084071761.png" alt="image-20211105142318501"></li><li>multipart&#x2F;byteranges<br><img src="/2024/07/07/Web/Http/2510762-20211105150200990-525005895.png" alt="image-20211105142506082"><br><img src="/2024/07/07/Web/Http/2510762-20211105150155095-1084475425.png" alt="image-20211105142522525"></li></ul><p>在HTTP报文中使用多部分对象集合时，需要在首部字段里加上 Content-type。</p><p>​使用 boundary 字符串来划分多部分对象集合指明的各类实体。在 boundary 字符串指定的各个实体的起始行之前“–”  标记（例如：–AaB03x、–THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入“–”标记（例如：–AaB03x–、–THIS_STRING_SEPARATES–）作为结束。</p><p>​多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可以在某个部分中嵌套使用多部分对象集合。</p><h2 id="3-5-获取部分内容的范围请求"><a href="#3-5-获取部分内容的范围请求" class="headerlink" title="3.5 获取部分内容的范围请求"></a>3.5 获取部分内容的范围请求</h2><p>为了解决从前网络中断，重新上传的问题，需要一种可恢复的机制。恢复是指能从之前下载中断处恢复下载。</p><p>要实现该功能需要制定下载的实体范围。像这样，制定范围发送的请求叫做范围请求（Range Request）。</p><p>对一份 10 000字节大小的资源，如果使用范围请求，可以只请求5001~10 000 字节内的资源。</p><p><img src="/2024/07/07/Web/Http/2510762-20211105143759650-822483168.png" alt="image-20211105143754604"></p><p>执行范围请求时，会用到首部字段 Range 来制定资源的 byte 范围。byte 范围的指定形式如下。</p><ul><li>5001~10 000字节<br><code>Range:bytes=5001-10000</code></li><li>从5001字节之后的全部的<br><code>Range:bytes=5001-</code></li><li>从一开始到 3000 字节和5000~7000 字节的多重范围<br><code>Range:bytes=-3000,5000-7000</code></li></ul><p>针对范围请求，响应会返回状态码为 206 Partial Content 的响应报文。另外，对于多重范围的范围请求，响应会在首部字段Content-Type 标明 multipart&#x2F;byteranges 后返回响应报文。</p><p>如果服务器端无法响应范围请求，则会返回状态码 200 OK 和完整的实体内容。</p><h2 id="3-6-内容协商返回最合适的内容"><a href="#3-6-内容协商返回最合适的内容" class="headerlink" title="3.6 内容协商返回最合适的内容"></a>3.6 内容协商返回最合适的内容</h2><p>​同一个Web 网站有可能存在着多份相同内容的页面。比如英语版和中文版的 Web页面，它们内容上虽相同，但使用的语言却不同。</p><p>​当浏览器的默认语言为英文或中文，访问相同URI 的Web页面时，则会显示对应的英语版或中文版的 Web页面。这样的机制称为内容协商（Content Negotiation）。</p><p><img src="/2024/07/07/Web/Http/2510762-20211105145008792-550568640.png" alt="image-20211105145004767"></p><p>​内容协商机制是客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。</p><p>​包含在请求报文中的某些首部字段（如下）就是判断的基准。</p><ul><li>Accept</li><li>Accept-Charset</li><li>Accept-Encoding</li><li>Accept-Language</li><li>Content-Language</li></ul><p>内容协商技术有以下3种类型。</p><p><strong>服务器驱动协商（Server-driven Negotiation）</strong></p><p>由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。但对用户来说，以浏览器发送的信息作为判定的依据，并不一定能筛选出最优内容。</p><p><strong>客户端驱动协商（Agent-driven Negotiation）</strong></p><p>由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript脚本在 Web页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自动切换PC版页面或手机版页面。</p><p><strong>透明协商（Transparent Negotiation）</strong></p><p>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</p><h1 id="四、返回结果的HTTP状态码"><a href="#四、返回结果的HTTP状态码" class="headerlink" title="四、返回结果的HTTP状态码"></a>四、返回结果的HTTP状态码</h1><p>HTTP 状态码负责表示客户端HTTP 请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等。</p><h2 id="4-1-状态码告知从服务器端返回的请求结果"><a href="#4-1-状态码告知从服务器端返回的请求结果" class="headerlink" title="4.1 状态码告知从服务器端返回的请求结果"></a>4.1 状态码告知从服务器端返回的请求结果</h2><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。</p><p>借助状态码，用户可以知道服务器端是否正常处理了请求。</p><p><img src="/2024/07/07/Web/Http/2510762-20211106160125115-236804486.png" alt="image-20211106160119646"></p><p>状态码如 200 OK，以3位数字和原因短语组成。</p><p>数字中的第一位指定了响应类别，后两位无分类。响应类别有5种。</p><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器端错误状态码）</td><td>服务端处理请求出错</td></tr></tbody></table><p>只要遵守状态码类别的定义，即使改变 RFC2616 中定义的状态码，或服务器端自行创建状态码都没问题。</p><p>仅记录在 RFC2616上的 HTTP状态码就达40种，若再加上 <strong>WebDAV（Web-based Distributed Authoring and Versioning，</strong>基于万维网的分布式创作和版本控制）（<strong>RFC4918、5842</strong>）和附加 HTTP 状态码（<strong>RFC6585</strong>）等扩展，数量就达 60 余种。别看种类繁多，实际上经常使用的大概只有14种。</p><h2 id="4-2-2XX-成功"><a href="#4-2-2XX-成功" class="headerlink" title="4.2 2XX 成功"></a>4.2 2XX 成功</h2><p>2XX 的响应结果标明请求被正常处理了。</p><h3 id="4-2-1-200-OK"><a href="#4-2-1-200-OK" class="headerlink" title="4.2.1 200 OK"></a>4.2.1 200 OK</h3><p><img src="/2024/07/07/Web/Http/2510762-20211106160139993-1260457557.png" alt="image-20211106160134780"></p><p>表示从客户端发来的请求在服务器端被正常处理了。</p><p>在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。比如，使用 GET 方法时，对应请求资源的实体会作为响应返回；而使用 HEAD 方法时，对应请求资源的实体首部不随报文主体作为响应返回（即在响应中只返回首部，不会返回实体的主体部分）。</p><h3 id="4-2-2-204-Content"><a href="#4-2-2-204-Content" class="headerlink" title="4.2.2 204 Content"></a>4.2.2 204 Content</h3><p><img src="/2024/07/07/Web/Http/2510762-20211106160157674-1681300911.png" alt="image-20211106160152660"></p><p>该状态码代表服务器端接收的请求<strong>已成功处理</strong>，但在返回的响应报文中<strong>不含实体的主体部分</strong>。另外，也<strong>不允许</strong>返回任何实体的<strong>主体</strong>。</p><p>比如，当从浏览器发出请求处理后，返回204 响应，那么浏览器显示的页面不发生更新。</p><p>一般在只需要从客户端往服务器端发送信息，而对客户端不需要发送新内容的情况下使用。</p><h3 id="4-2-3-206-Partial-Content"><a href="#4-2-3-206-Partial-Content" class="headerlink" title="4.2.3 206 Partial Content"></a>4.2.3 206 Partial Content</h3><p><img src="/2024/07/07/Web/Http/2510762-20211106160325336-612263471.png" alt="image-20211106160319446"></p><p>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含 由 <strong>Content-Range</strong> 指定范围的实体内容。</p><h2 id="4-3-3XX-重定向"><a href="#4-3-3XX-重定向" class="headerlink" title="4.3 3XX 重定向"></a>4.3 3XX 重定向</h2><p>3XX 响应结果标明浏览器需要执行某些特殊的处理已正确处理请求。</p><h3 id="4-3-1-301-Moved-Permanently"><a href="#4-3-1-301-Moved-Permanently" class="headerlink" title="4.3.1 301 Moved Permanently"></a>4.3.1 301 Moved Permanently</h3><p><img src="/2024/07/07/Web/Http/2510762-20211106160331418-171017552.png" alt="image-20211106160326472"></p><p><strong>永久性重定向</strong>。</p><p>该状态码表示请求的资源已被<strong>分配了新的 URI</strong>，以后应使用资源现在所指的 URI。</p><p>也就是说，如果已经把资源对应的 URI 保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</p><p>像下方给出的请求 URI，当制定资源路径的最后忘记添加斜杠“&#x2F;”，就会产生301状态码。</p><p><code>http://example.com/sample</code></p><h3 id="4-3-2-302-Found"><a href="#4-3-2-302-Found" class="headerlink" title="4.3.2 302 Found"></a>4.3.2 302 Found</h3><p><img src="/2024/07/07/Web/Http/2510762-20211106160336766-1741152318.png" alt="image-20211106160332027"></p><p><strong>临时性重定向。</strong></p><p>该状态码表示请求的资源已被分配了新的 URI ，希望用户（本次）能使用新的 URI 访问。</p><p>和 301 Moved Permanently 状态码相似，但302 状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的 URI 将来还有可能发生改变。比如，用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。</p><h3 id="4-3-3-303-See-Other"><a href="#4-3-3-303-See-Other" class="headerlink" title="4.3.3 303 See Other"></a>4.3.3 303 See Other</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107151117108-740128556.png" alt="image-20211107151115421"></p><p>该状态码表示由于请求对应的资源存在着另一个 URI，应使用GET 方法定向获取请求的资源。</p><p>303 状态码和302 Found 状态码有着相同的功能，但303 状态码明确表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。</p><p>比如，当使用 POST方法访问 CGI程序，其执行后的处理结果是希望客户端能以 GET方法重定向到另一个 URI 上去时，返回303 状态码。虽然 302Found 状态码也可以实现相同的功能，但这里使用 303 状态码是最理想的。</p><p><em>当301、302、303响应状态码返回时，几乎所有的浏览器都会把 POST 改为 GET，并删除请求报文内的主体，之后请求会自动再次发送。</em></p><p><em>301、302 标准是禁止将 POST方法改变为 GET 方法的，但实际使用时大家都会这么做。、</em></p><h3 id="4-3-4-304-Not-Modified"><a href="#4-3-4-304-Not-Modified" class="headerlink" title="4.3.4  304 Not Modified"></a>4.3.4  304 Not Modified</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107151124491-1175614407.png" alt="image-20211107151122444"></p><p>该状态码表示客户端发送附带条件的请求时，服务器允许请求访问资源，但未满足条件的情况。304状态码返回时，不包含任何响应的主体部分。304虽然被划分在 3XX类别中，但是和重定向没有关系。</p><h3 id="4-3-5-307-Temporary-Redirect"><a href="#4-3-5-307-Temporary-Redirect" class="headerlink" title="4.3.5 307 Temporary Redirect"></a>4.3.5 307 Temporary Redirect</h3><p>临时重定向。</p><p>该状态码与302 Found 有着相同的含义。尽管302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。</p><p>307 会遵照浏览器标准，不会从 POST 变成 GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。</p><h2 id="4-4-4XX-客户端错误"><a href="#4-4-4XX-客户端错误" class="headerlink" title="4.4 4XX 客户端错误"></a>4.4 4XX 客户端错误</h2><p>4XX 的响应结果表明客户端是发生错误的原因所在。</p><h3 id="4-4-1-400-Bad-Request"><a href="#4-4-1-400-Bad-Request" class="headerlink" title="4.4.1 400 Bad Request"></a>4.4.1 400 Bad Request</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107150947077-551045785.png" alt="image-20211107150945555"></p><p>该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会想 200 OK一样对待该状态码。</p><h3 id="4-4-1-401-Unauthorized"><a href="#4-4-1-401-Unauthorized" class="headerlink" title="4.4.1 401 Unauthorized"></a>4.4.1 401 Unauthorized</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107151000539-1094712677.png" alt="image-20211107150958846"></p><p>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC认证、DIGEST认证）的认证信息。另外若之前已进行过1次请求，则表示用户认证失败。</p><p>返回含有 401 的响应必须包含一个适用于被请求资源 WWW-Authenticate 首部用以质询（challange）用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</p><h3 id="4-4-3-403-Forbidden"><a href="#4-4-3-403-Forbidden" class="headerlink" title="4.4.3 403 Forbidden"></a>4.4.3 403 Forbidden</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107151007287-811437445.png" alt="image-20211107151005388"></p><p>该状态码表明对请求资源的访问被服务器端拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。</p><p>未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源IP地址试图访问）等列举的情况都可能是发生 403 的原因。</p><h3 id="4-4-4-404-Not-Found"><a href="#4-4-4-404-Not-Found" class="headerlink" title="4.4.4 404 Not Found"></a>4.4.4 404 Not Found</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107151012842-1145051920.png" alt="image-20211107151011269"></p><p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p><h2 id="4-5-5XX服务器错误"><a href="#4-5-5XX服务器错误" class="headerlink" title="4.5 5XX服务器错误"></a>4.5 5XX服务器错误</h2><p>5XX 的响应结果表明服务器本身发生错误。</p><h3 id="4-5-1-500-Internal-Server-Error"><a href="#4-5-1-500-Internal-Server-Error" class="headerlink" title="4.5.1 500 Internal Server Error"></a>4.5.1 500 Internal Server Error</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107150744151-375027927.png" alt="image-20211107150742524"></p><p>该状态码表明服务器端在执行请求时发生了错误。也有可能是Web 应用存在的 bug 或某些临时的故障。</p><h3 id="4-5-2-503-Service-Unavailable"><a href="#4-5-2-503-Service-Unavailable" class="headerlink" title="4.5.2 503 Service Unavailable"></a>4.5.2 503 Service Unavailable</h3><p><img src="/2024/07/07/Web/Http/2510762-20211107150737141-1098894320.png" alt="image-20211107150735249"></p><p>该状态码表明服务器端暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上情况需要的时间，最好写入 Retry-After 首部字段再返回给客户端。</p><p><strong>提示</strong></p><p>状态码和状况的不一致</p><p>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。比如 Web应用程序内部发生错误，状态码依然返回 200 OK，这种情况也经常遇到。</p><h1 id="五、与HTTP协作的Web-服务器"><a href="#五、与HTTP协作的Web-服务器" class="headerlink" title="五、与HTTP协作的Web 服务器"></a>五、与HTTP协作的Web 服务器</h1><p>一台 Web服务器可搭建多个独立域名的Web 网站，也可作为通信路径上的中转服务器提升传输效率</p><h2 id="5-1-用单台虚拟主机实现多个域名"><a href="#5-1-用单台虚拟主机实现多个域名" class="headerlink" title="5.1 用单台虚拟主机实现多个域名"></a>5.1 用单台虚拟主机实现多个域名</h2><p>HTTP&#x2F;1.1  规范允许一台 HTTP 服务器搭建多个 Web 站点。比如，提供 Web 托管服务（<strong>Web Hosting Service</strong>）的供应商，可以用一台服务器为多位客户服务，也可以以每位客户持有的域名运行各自不同的网站。这是因为利用了虚拟主机（Virtual Host，又称虚拟服务器）的功能。</p><p>即使物理层面只有一台服务器，但只要使用虚拟主机的功能，则可以假想已具有多台服务器。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160417473-143948403.png" alt="image-20211108160415878"></p><p>客户端使用 HTTP协议访问服务器时，会经常采用类似 <a href="http://www.hackr.jp/">www.hackr.jp</a> 这样的主机名和域名。</p><p>在互联网上，域名通过 DNS 服务映射到 IP 地址（域名解析）之后访问目标网站。可见，当请求发送到服务器时，已经是以 IP 地址形式访问了。</p><p>所以，如果一台服务器内托管了 <a href="http://www.tricorder.jp/">www.tricorder.jp</a> 和 <a href="http://www.hackr.jp/">www.hackr.jp</a> 这两个域名，当受到请求时就需要弄清楚究竟要访问哪个域名。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160446018-1805296237.png" alt="image-20211108160443846"></p><p>在相同的IP地址下，由于虚拟主机可以寄存多个不同主机名和域名的 Web 网站，因此在发送 HTTP 请求时，必须在 Host 首部内完整指定主机名或域名的 URI。</p><h2 id="5-2-通信数据转发程序：代理、网关、隧道"><a href="#5-2-通信数据转发程序：代理、网关、隧道" class="headerlink" title="5.2 通信数据转发程序：代理、网关、隧道"></a>5.2 通信数据转发程序：代理、网关、隧道</h2><p>HTTP 通信时，除客户端和服务器以外，还有一些用于通信数据转发的应用程序，例如代理、网关和隧道。它们可以配合服务器工作。</p><p>这些应用程序和服务器可以将请求转发给通信线路上的下一站服务器，并且能接收从那台服务器发送的响应再转发给客户端。</p><p><strong>代理</strong></p><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</p><p><strong>网关</strong></p><p>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。</p><p><strong>隧道</strong></p><p>隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。</p><h3 id="5-2-1代理"><a href="#5-2-1代理" class="headerlink" title="5.2.1代理"></a>5.2.1代理</h3><p><img src="/2024/07/07/Web/Http/2510762-20211108160459731-1980177940.png" alt="image-20211108160457768"></p><p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求URI，会直接发送给前方持有资源的目标服务器。</p><p>持有资源实体的服务器称为源服务器。从源服务器返回的响应经过代理服务器后再传给客户端。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160516393-1341624324.png" alt="image-20211108160514334"></p><p>在 HTTP 通信过程中，可级联多台代理服务器。请求和响应的转发会经过书台类似锁链一样连接起来的代理服务器。转发时，需要附加 Via 首部字段以标记出经过的主机信息。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160532669-130616731.png" alt="image-20211108160530988"></p><p>使用代理服务器的理由有：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。</p><p>代理有多种使用方法，按两种基准分类。一种是是否使用缓存，另一种是是否会修改报文。</p><p><strong>缓存代理</strong></p><p>代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。</p><p>当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</p><p><strong>透明代理</strong></p><p>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</p><h3 id="5-2-2-网关"><a href="#5-2-2-网关" class="headerlink" title="5.2.2 网关"></a>5.2.2 网关</h3><p><img src="/2024/07/07/Web/Http/2510762-20211108160546809-1553436595.png" alt="image-20211108160545389"></p><p>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。</p><p>利用网关能提高通信的安全性，因为可以在客户端与网关的通信线路上加密以确保连接的安全。比如，网关可以连接数据库，使用 SQL 语句查询数据。另外，在 Web 购物网站上进行信用卡结算时，网关和信用卡结算系统联动。</p><h3 id="5-2-3-隧道"><a href="#5-2-3-隧道" class="headerlink" title="5.2.3 隧道"></a>5.2.3 隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用  SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。</p><p>隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160600061-626184922.png" alt="image-20211108160558724"></p><h2 id="5-3-保存资源的缓存"><a href="#5-3-保存资源的缓存" class="headerlink" title="5.3 保存资源的缓存"></a>5.3 保存资源的缓存</h2><p>缓存是指代理服务器或客户端本地磁盘内保存的资源副本。利用缓存可减少对源服务器的访问，因此也就节省了通信流量和通信时间。</p><p>缓存服务器是代理服务器的一种，并归类在缓存代理类型中。换句话说，当代理转发从服务器返回的响应时，代理服务器将会保存一份资源的副本。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160614444-1437168439.png" alt="image-20211108160612330"></p><p><img src="/2024/07/07/Web/Http/2510762-20211108160624834-2054197264.png" alt="image-20211108160623123"></p><p>缓存服务器的优势在于利用缓存可避免多次从源服务器转发资源。因此客户端可就近从缓存服务器上获取资源，而源服务器也不必多次处理相同的请求了。</p><h3 id="5-3-1-缓存的有效期限"><a href="#5-3-1-缓存的有效期限" class="headerlink" title="5.3.1 缓存的有效期限"></a>5.3.1 缓存的有效期限</h3><p>即便缓存服务器内有缓存，也不能保证每次都会返回对同资源的请求。因为这关系到被缓存资源的有效性问题。</p><p>当遇上源服务器上的资源更新时，如果还是使用不变的缓存，那就会演变成返回更新前的“旧”资源了。</p><p>即便存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。若判断缓存失效，缓存服务器将会再次从源服务器上获取“新”资源。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160641788-1458155838.png" alt="image-20211108160639936"></p><h3 id="5-3-2-客户端的缓存"><a href="#5-3-2-客户端的缓存" class="headerlink" title="5.3.2 客户端的缓存"></a>5.3.2 客户端的缓存</h3><p>缓存不仅可以存在于缓存服务器内，还可以存在客户端浏览器中。以 Internet Explorer 程序为例，把客户端缓存称为<strong>临时网络文件（Temporary Internet File）。</strong></p><p>浏览器缓存如果有效，就不必再向服务器请求相同的资源了，可以直接从本地磁盘内读取。</p><p>另外，和缓存服务器相同的一点是，当判定缓存过期后，会向源服务器确认资源的有效性。若判断浏览器缓存失效，浏览器会再次请求新资源。</p><p><img src="/2024/07/07/Web/Http/2510762-20211108160647965-1834587939.png" alt="image-20211108160646471"></p><h1 id="六、HTTP首部"><a href="#六、HTTP首部" class="headerlink" title="六、HTTP首部"></a>六、HTTP首部</h1><p>HTTP协议的请求和响应报文中必定包含 HTTP 首部，只是我们平时在使用 Web 的过程中感受不到它。</p><h2 id="6-1-HTTP-报文首部"><a href="#6-1-HTTP-报文首部" class="headerlink" title="6.1 HTTP 报文首部"></a>6.1 HTTP 报文首部</h2><img src="/2024/07/07/Web/Http/2510762-20211109154850923-311749554.png" alt="image-20211109154850080" style="zoom:200%;"><p>HTTP协议的请求和响应报文中必定包含 HTTP 首部。</p><p>首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。</p><p>对于客户端用户来说，这些信息中的大部分内容都无须亲自查看。</p><p>报文首部由几个字段构成。</p><p><strong>HTTP</strong>请求报文<br>在请求中，HTTP报文由<strong>方法、URI、HTTP版本、HTTP首部字段</strong>等部分构成。<br><img src="/2024/07/07/Web/Http/2510762-20211109155149321-99794695.png" alt="image-20211109155148498" style="zoom:150%;"></p><p>下面的示例是访问 <a href="http://hackr.jp/">http://hackr.jp</a> 时，请求报文的首部信息。</p><p><img src="/2024/07/07/Web/Http/2510762-20211109165716569-391799150.png" alt="image-20211109165715797"></p><p><img src="/2024/07/07/Web/Http/2510762-20211109155447906-600495622.png" alt="image-20211109155446719"></p><p><strong>HTTP</strong>响应报文</p><p>在响应中，HTTP 报文由 <strong>HTTP 版本、状态码（数字和原因短语）、HTTP 首部字段</strong> 3部分构成。</p><p><img src="/2024/07/07/Web/Http/2510762-20211109155627352-41402619.png" alt="image-20211109155626477"></p><p>在报文众多的字段当中，HTTP 首部字段包含的信息最为丰富。</p><p>首部字段同时存在于请求和响应报文内，并涵盖 HTTP 报文相关的内容信息。因 HTTP 版本或扩展规范的变化，首部字段可支持的字段内容略有不同。</p><p>以下主要涉及 HTTP&#x2F;1.1 及常用的首部字段。</p><h2 id="6-2-HTTP-首部字段"><a href="#6-2-HTTP-首部字段" class="headerlink" title="6.2 HTTP 首部字段"></a>6.2 HTTP 首部字段</h2><h3 id="6-2-1-HTTP-首部字段传递重要信息"><a href="#6-2-1-HTTP-首部字段传递重要信息" class="headerlink" title="6.2.1 HTTP 首部字段传递重要信息"></a>6.2.1 HTTP 首部字段传递重要信息</h3><p>HTTP 首部字段是构成 HTTP 报文的<strong>要素</strong>之一。在客户端与服务器之间以 HTTP 协议进行通信的过程中，无论是请求还是响应都会使用首部字段，它能起到传递额外重要信息的作用。</p><p>使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。</p><p><img src="/2024/07/07/Web/Http/2510762-20211109160213521-596073791.png" alt="image-20211109160212607"></p><h3 id="6-2-2-HTTP-首部字段结构"><a href="#6-2-2-HTTP-首部字段结构" class="headerlink" title="6.2.2 HTTP 首部字段结构"></a>6.2.2 HTTP 首部字段结构</h3><p>HTTP 首部字段是由首部字段名和字段值构成的，中间用冒号“:” 分隔。</p><table>    <tr>        <td><strong>首部字段名：字段值</strong>        </td>    </tr><table>例如，在 HTTP 首部中以 Content-Type 这个字段来表示报文主体的 对象类型。<table>    <tr>        <td><strong>Content-Type: text/html</strong>        </td>    </tr><table>就以上述示例来看，首部字段名为 **Content-Type**， 字符串 **text/html** 是字段值。<p>另外，字段值对应单个 HTTP 首部字段可以有多个值，如下所示。</p><table>    <tr>        <td><strong>Keep-Alive: timeout=15, max=100</strong>        </td>    </tr><table>*当 HTTP 报文首部中出现了两个或两个以上具有相同首部字段名时会怎么样？这种情况在规范内尚未明确，根据浏览器内部处理逻辑的不同，结果可能并不一致。有些浏览器会优先处理第一次出现的首部字段，而有些则会优先处理最后出现的首部字段*<h3 id="6-2-3-4种-HTTP-首部字段类型"><a href="#6-2-3-4种-HTTP-首部字段类型" class="headerlink" title="6.2.3 4种 HTTP 首部字段类型"></a>6.2.3 4种 HTTP 首部字段类型</h3><p>HTTP 首部字段根据实际用途被分为以下 4种类型。</p><p><strong>通用首部字段（General Header Fields）</strong></p><p>请求报文和响应报文两方都会使用的首部。</p><p><strong>请求首部字段（Request Header Fields）</strong></p><p>从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p><p><strong>响应首部字段（Response Header Fields)</strong></p><p>从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p><p><strong>实体首部字段（Entity Header Fields）</strong></p><p>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</p><h3 id="6-2-4-HTTP-1-1-首部字段"><a href="#6-2-4-HTTP-1-1-首部字段" class="headerlink" title="6.2.4 HTTP&#x2F;1.1 首部字段"></a>6.2.4 HTTP&#x2F;1.1 首部字段</h3><p><strong>HTTP&#x2F;1.1 规范定义了如下 47 种首部字段。</strong></p><p>通用首部字段</p><table>    <tr>        <td><strong>首部字段名</strong>        </td>        <td><strong>说明</strong>        </td>    </tr>    <tr>        <td><strong>Cache-Control</strong>        </td>        <td><strong>控制缓存的行为</strong>        </td>    </tr>    <tr>        <td><strong>Connection </strong>        </td>        <td><strong>逐跳首部、连接的管理</strong>        </td>    </tr><tr>        <td><strong>Date</strong>        </td>        <td><strong>创建报文的日期时间</strong>        </td>    </tr>    <tr>        <td><strong>Pragma</strong>        </td>        <td><strong>报文命令</strong>        </td>    </tr>    <tr>        <td><strong>Trailer</strong>        </td>        <td><strong>报文末端的首部一览</strong>        </td>    </tr>    <tr>        <td><strong>Transfer-Encoding</strong>        </td>        <td><strong>指定报文主体的传输编码方式</strong>        </td>    </tr><tr>        <td><strong>Upgrade </strong>        </td>        <td><strong>升级为其他协议</strong>        </td>    </tr>    <tr>        <td><strong>Via </strong>        </td>        <td><strong>代理服务器的相关信息</strong>        </td>    </tr>    <tr>        <td><strong>Warning </strong>        </td>        <td><strong>错误通知</strong>        </td>    </tr><table><p>请求首部字段</p><table>    <tr>        <td><strong>首部字段名</strong>        </td>        <td><strong>说明</strong>        </td>    </tr>    <tr>        <td><strong>Accept </strong>        </td>        <td><strong>用户代理可处理的媒体类型</strong>        </td>    </tr>    <tr>        <td><strong>Accept-Charset</strong>        </td>        <td><strong>优先的字符集</strong>        </td>    </tr>    <tr>        <td><strong>Accept-Encoding </strong>        </td>        <td><strong>优先的内容编码</strong>        </td>    </tr>    <tr>        <td><strong>Accept-Language</strong>        </td>        <td><strong>优先的语言（自然语言）</strong>        </td>    </tr>    <tr>        <td><strong>Authorization </strong>        </td>        <td><strong>Web认证信息</strong>        </td>    </tr>    <tr>        <td><strong>Expect</strong>        </td>        <td><strong>期待服务器的特定行为</strong>        </td>    </tr>    <tr>        <td><strong>From </strong>        </td>        <td><strong>用户的电子邮箱地址</strong>        </td>    </tr>    <tr>        <td><strong>Host </strong>        </td>        <td><strong>请求资源所在服务器</strong>        </td>    </tr>    <tr>        <td><strong>If-Match</strong>        </td>        <td><strong>比较实体标记（ETag）</strong>        </td>    </tr>    <tr>        <td><strong>If-Modified-Since</strong>        </td>        <td><strong>比较资源的更新时间</strong>        </td>    </tr>    <tr>        <td><strong>If-None-Match</strong>        </td>        <td><strong>比较实体标记（与 If-Match 相反）</strong>        </td>    </tr>    <tr>        <td><strong>If-Range</strong>        </td>        <td><strong>资源未更新时发送实体 Byte 的范围请求</strong>        </td>    </tr>    <tr>        <td><strong>If-Unmodified-Since</strong>        </td>        <td><strong>比较资源的更新时间（与If-Modified-Since相反）</strong>        </td>    </tr>    <tr>        <td><strong>Max-Forwards </strong>        </td>        <td><strong>最大传输逐跳数</strong>        </td>    </tr>    <tr>        <td><strong>Proxy-Authorization</strong>        </td>        <td><strong>代理服务器要求客户端的认证信息</strong>        </td>    </tr>    <tr>        <td><strong>Range</strong>        </td>        <td><strong>实体的字节范围请求</strong>        </td>    </tr>    <tr>        <td><strong>Referer </strong>        </td>        <td><strong>对请求中 URI 的原始获取方</strong>        </td>    </tr>    <tr>        <td><strong>TE</strong>        </td>        <td><strong>传输编码的优先级</strong>        </td>    </tr>    <tr>        <td><strong>User-Agent </strong>        </td>        <td><strong>HTTP 客户端程序的信息</strong>        </td>    </tr></table><p>响应首部字段</p><table>    <tr>        <td><strong>首部字段名</strong>        </td>        <td><strong>说明</strong>        </td>    </tr>    <tr>        <td><strong>Accept-Ranges  </strong>        </td>        <td><strong>是否接受字节范围请求</strong>        </td>    </tr>    <tr>        <td><strong>Age </strong>        </td>        <td><strong>推算资源创建经过时间</strong>        </td>    </tr>    <tr>        <td><strong>ETag </strong>        </td>        <td><strong>资源的匹配信息</strong>        </td>    </tr>    <tr>        <td><strong>Location</strong>        </td>        <td><strong>令客户端重定向至指定URI</strong>        </td>    </tr>    <tr>        <td><strong>Proxy-Authenticate</strong>        </td>        <td><strong>代理服务器对客户端的认证信息</strong>        </td>    </tr>    <tr>        <td><strong>Retry-After</strong>        </td>        <td><strong>对再次发起请求的时机要求</strong>        </td>    </tr>    <tr>        <td><strong>Server</strong>        </td>        <td><strong>HTTP服务器的安装信息</strong>        </td>    </tr>    <tr>        <td><strong>Vary </strong>        </td>        <td><strong>代理服务器缓存的管理信息</strong>        </td>    </tr>    <tr>        <td><strong>WWW-Authenticate</strong>        </td>        <td><strong>服务器对客户端的认证信息</strong>        </td>    </tr></table><p>实体首部字段</p><table>    <tr>        <td><strong>首部字段名</strong>        </td>        <td><strong>说明</strong>        </td>    </tr>    <tr>        <td><strong>Allow </strong>        </td>        <td><strong>资源可支持的HTTP方法</strong>        </td>    </tr>    <tr>        <td><strong>Content-Encoding</strong>        </td>        <td><strong>实体主体适用的编码方式</strong>        </td>    </tr>    <tr>        <td><strong>Content-Language</strong>        </td>        <td><strong>实体主体的自然语言</strong>        </td>    </tr>    <tr>        <td><strong>Content-Length</strong>        </td>        <td><strong>实体主体的大小（单位：字节）</strong>        </td>    </tr>    <tr>        <td><strong>Content-Location</strong>        </td>        <td><strong>替代对应资源的URI</strong>        </td>    </tr>    <tr>        <td><strong>Content-MD5</strong>        </td>        <td><strong>实体主体的报文摘要</strong>        </td>    </tr>    <tr>        <td><strong>Content-Range</strong>        </td>        <td><strong>实体主体的位置范围</strong>        </td>    </tr>    <tr>        <td><strong>Content-Type</strong>        </td>        <td><strong>实体主体的媒体类型</strong>        </td>    </tr>    <tr>        <td><strong>Expires</strong>        </td>        <td><strong>实体主体过期的日期时间</strong>        </td>    </tr>    <tr>        <td><strong>Last-Modified</strong>        </td>        <td><strong>资源的最后修改日期时间</strong>        </td>    </tr></table><h3 id="6-2-5-非-HTTP-1-1-首部字段"><a href="#6-2-5-非-HTTP-1-1-首部字段" class="headerlink" title="6.2.5 非 HTTP&#x2F;1.1 首部字段"></a>6.2.5 非 HTTP&#x2F;1.1 首部字段</h3><p>在 HTTP 协议通信交互中使用到的首部字段，不限于 RFC2616 中定义的 47 种首部字段。还有 <strong>Cookie、Set-Cookie 和 Content-Disposition</strong> 等在其他 RFC 中定义的首部字段，它们的使用频率也很高。</p><h3 id="6-2-6-End-to-end-首部和-Hop-by-hop-首部"><a href="#6-2-6-End-to-end-首部和-Hop-by-hop-首部" class="headerlink" title="6.2.6 End-to-end 首部和 Hop-by-hop 首部"></a>6.2.6 End-to-end 首部和 Hop-by-hop 首部</h3><p>HTTP 首部字段将定义成缓存代理和非缓存代理的行为，分成2 种类型。</p><p><strong>端到端首部（End-to-end Header）</strong><br>分在此类别中的首部会转发给请求 &#x2F; 响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。<br><strong>逐跳首部（Hop-by-hop Header）</strong><br>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。HTTP&#x2F;1.1 和之后版本中，如果要使用 hop-by-hop 首部，需提供Connection 首部字段。</p><p>下面列举了 HTTP&#x2F;1.1 中的<strong>逐跳首部</strong>字段。除这 8 个首部字段之外，其他所有字段都属于端到端首部。</p><ul><li><strong>Connection</strong></li><li><strong>Keep-Alive</strong></li><li><strong>Proxy-Authenticate</strong></li><li><strong>Proxy-Authorization</strong></li><li><strong>Trailer</strong></li><li><strong>TE</strong></li><li><strong>Transfer-Encoding</strong></li><li><strong>Upgrade</strong></li></ul><h2 id="6-3-HTTP-1-1-通用首部字段"><a href="#6-3-HTTP-1-1-通用首部字段" class="headerlink" title="6.3 HTTP&#x2F;1.1 通用首部字段"></a>6.3 HTTP&#x2F;1.1 通用首部字段</h2><p>通用首部字段是指，请求报文和响应报文双方都会使用的首部。</p><h3 id="6-3-1-Cache-Control"><a href="#6-3-1-Cache-Control" class="headerlink" title="6.3.1 Cache-Control"></a>6.3.1 Cache-Control</h3><p>通过指定首部字段 Cache-Control 的指令，就能操作缓存的工作机制。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110134322697-1135711430.png" alt="image-20211110134303714"></p><p>指令的参数是可选的，多个指令之间通过“，”分割。首部字段 Cache-Control 的指令可用于请求及响应时。</p><table>    <tr>        <td>Cache-Control:private,max-age=0,no-cache        </td>    </tr></table><ul><li><p>Cache-Control 指令一览</p><p>可用的指令按请求和响应分类如下</p><p><strong>缓存请求指令</strong></p><table>    <tr><td><strong>指令</strong></td>        <td><strong>参数</strong></td>        <td><strong>说明</strong></td>    </tr>    <tr><td><strong>no-cache</strong></td>        <td><strong>无</strong></td>        <td><strong>强制向源服务器再次验证</strong></td>    </tr>    <tr><td><strong>no-store</strong></td>        <td><strong>无</strong></td>        <td><strong>不缓存请求或响应的任何内容</strong></td>    </tr>    <tr><td><strong>max-age= [秒]</strong></td>        <td><strong>必需</strong></td>        <td><strong>响应的最大Age值</strong></td>    </tr>    <tr><td><strong>max-stale( = [ 秒]) </strong></td>        <td><strong>可省略 </strong></td>        <td><strong>接收已过期的响应</strong></td>    </tr>    <tr><td><strong>min-fresh = [ 秒] </strong></td>        <td><strong>必需</strong></td>        <td><strong> 期望在指定时间内的响应仍有效</strong></td>    </tr>    <tr><td><strong>no-transform </strong></td>        <td><strong>无</strong></td>        <td><strong>代理不可更改媒体类型</strong></td>    </tr>    <tr><td><strong>only-if-cached </strong></td>        <td><strong>无</strong></td>        <td><strong>从缓存获取资源</strong></td>    </tr>    <tr><td><strong>cache-extension  </strong></td>        <td><strong>-</strong></td>        <td><strong>新指令标记（token）</strong></td>    </tr></table><p><strong>缓存响应指令</strong></p><table>    <tr><td><strong>指令</strong></td>        <td><strong>参数</strong></td>        <td><strong>说明</strong></td>    </tr>    <tr><td><strong>public</strong></td>        <td><strong>无</strong></td>        <td><strong>可向任意方提供响应的缓存</strong></td>    </tr>    <tr><td><strong>private </strong></td>        <td><strong>可省略</strong></td>        <td><strong>仅向特定用户返回响应</strong></td>    </tr>    <tr><td><strong>no-cache</strong></td>        <td><strong>可省略 </strong></td>        <td><strong>缓存前必须先确认其有效性</strong></td>    </tr>    <tr><td><strong>no-store</strong></td>        <td><strong>无</strong></td>        <td><strong>不缓存请求或响应的任何内容</strong></td>    </tr>    <tr><td><strong>no-transform</strong></td>        <td><strong>无</strong></td>        <td><strong>代理不可更改媒体类型</strong></td>    </tr>    <tr><td><strong>must-revalidate</strong></td>        <td><strong>无</strong></td>        <td><strong>可缓存但必须再向源服务器进行确认</strong></td>    </tr>    <tr><td><strong>proxy-revalidate</strong></td>        <td><strong>无</strong></td>        <td><strong>说要求中间缓存服务器对缓存的响应有效性再进行确认</strong></td>    </tr>    <tr><td><strong>max-age = [ 秒] </strong></td>        <td><strong>必需</strong></td>        <td><strong>响应的最大Age值</strong></td>    </tr>    <tr><td><strong>s-maxage = [ 秒] </strong></td>        <td><strong>必需</strong></td>        <td><strong>公共缓存服务器响应的最大Age值</strong></td>    </tr>    <tr><td><strong>cache-extension</strong></td>        <td><strong>-</strong></td>        <td><strong>新指令标记（token）</strong></td>    </tr></table></li></ul><p><strong>表示是否能缓存的指令</strong></p><p><strong>public</strong>指令</p><table>    <tr>    <td><strong>Cache-Control: public</strong></td>    </tr></table><p>当指定使用 public 指令时，则明确表明其他用户也可利用缓存。</p><p><strong>private</strong>指令</p><p><img src="/2024/07/07/Web/Http/2510762-20211110140126020-594034813.png" alt="image-20211110140124258"></p><p>当指定 private 指令后，响应只以特定的用户作为对象，这与 public 指令的行为相反。<br>缓存服务器会对该特定用户提供资源缓存的服务，对于其他用户发送过来的请求，代理服务器则不会返回缓存。</p><p><strong>no-cache 指令</strong></p><p><img src="/2024/07/07/Web/Http/2510762-20211110140218000-346483807.png" alt="image-20211110140215784"></p><p>使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。<br>客户端发送的请求中如果包含 no-cache 指令，则表示客户端将不会接收缓存过的响应。于是，“中间”的缓存服务器必须把客户端请求转发给源服务器。<br>如果服务器返回的响应中包含 no-cache 指令，那么缓存服务器不能对资源进行缓存。源服务器以后也将不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作。</p><table>    <tr>        <td><strong>Cache-Control: no-cache=Location</strong></td>    </tr></table><p>由服务器返回的响应中，若报文首部字段 Cache-Control 中对 no-cache字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。换言之，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数。</p><p><strong>控制可执行缓存的对象的指令</strong></p><p><strong>no-store</strong>指令</p><table>    <tr>        <td><strong>Cache-Control: no-store</strong></td>    </tr></table><p>当使用 no-store 指令时，暗示请求（和对应的响应）或响应中包含机密信息。</p><p><em>从字面意思上，很容易把 no-cache 误解成为不缓存，但事实上 no-cache 代表不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源，也许称为 do-not-serve-from-cache-without-revalidation 更合适。no-store 才是真正地不进行缓存。</em></p><p>因此，该指令规定缓存不能在本地存储请求或响应的任一部分。</p><p><strong>指定缓存期限和认证的指令</strong></p><p><strong>s-maxage</strong>指令</p><table>    <tr>        <td><strong>Cache-Control: s-maxage=604800（单位：秒）</strong></td>    </tr></table><p>s-maxage 指令的功能和 max-age 指令的相同，它们的不同点是 s-maxage指令只适用于供多位用户使用的公共缓存服务器（代理） 。也就是说，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。</p><p>另外，当使用 s-maxage 指令后，则直接忽略对 Expires 首部字段及 maxage 指令的处理。</p><p><strong>max-age</strong> 指令</p><p><img src="/2024/07/07/Web/Http/2510762-20211110144126017-485159825.png" alt="image-20211110144124220"></p><p>当客户端发送的请求中包含 max-age 指令时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。另外，当指定 max-age 值为 0，那么缓存服务器通常需要将请求转发给源服务器。<br>当服务器返回的响应中包含 max-age 指令时，缓存服务器将不对资源的有效性再作确认，而 max-age 数值代表资源保存为缓存的最长时间。<br>应用 HTTP&#x2F;1.1 版本的缓存服务器遇到同时存在 Expires 首部字段的情况时，会优先处理 max-age 指令，而忽略掉 Expires 首部字段。而HTTP&#x2F;1.0 版本的缓存服务器的情况却相反，max-age 指令会被忽略掉。</p><p><strong>min-fresh</strong> 指令</p><p><img src="/2024/07/07/Web/Http/2510762-20211110144216310-1421484638.png" alt="image-20211110144214653"></p><p>min-fresh 指令要求缓存服务器返回至少还未过指定时间的缓存资源。<br>比如，当指定 min-fresh 为 60 秒后，过了 60 秒的资源都无法作为响应返回了。</p><p><strong>max-stale</strong> 指令</p><table>    <tr>        <td><strong>Cache-Control: max-stale=3600（单位：秒）</strong></td>    </tr></table><p>使用 max-stale 可指示缓存资源，即使过期也照常接收。<br>如果指令未指定参数值，那么无论经过多久，客户端都会接收响应；如果指令中指定了具体数值，那么即使过期，只要仍处于 max-stale 指定的时间内，仍旧会被客户端接收。</p><p><strong>only-if-cached</strong> 指令</p><table>    <tr>        <td><strong>Cache-Control: only-if-cached</strong></td>    </tr></table><p>使用 only-if-cached 指令表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。换言之，该指令要求缓存服务器不重新加载响应，也不会再次确认资源有效性。若发生请求缓存服务器的本地缓存无响应，则返回状态码 504 Gateway Timeout。</p><p><strong>must-revalidate</strong> 指令</p><table>    <tr>        <td><strong>Cache-Control: must-revalidate</strong></td>    </tr></table><p>使用 must-revalidate 指令，代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。<br>若代理无法连通源服务器再次获取有效资源的话，缓存必须给客户端一条 504（Gateway Timeout）状态码。<br>另外，使用 must-revalidate 指令会忽略请求的 max-stale 指令（即使已经在首部使用了 max-stale，也不会再有效果）。</p><p><strong>proxy-revalidate</strong> 指令</p><table>    <tr>        <td><strong>Cache-Control: proxy-revalidate</strong></td>    </tr></table><p>proxy-revalidate 指令要求所有的缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性</p><p><strong>no-transform</strong> 指令</p><table>    <tr>        <td><strong>Cache-Control: no-transform</strong></td>    </tr></table><p>使用 no-transform 指令规定无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型。<br>这样做可防止缓存或代理压缩图片等类似操作。</p><p><strong>Cache-Control 扩展</strong><br><strong>cache-extension token</strong></p><table>    <tr>        <td><strong>Cache-Control: private, community="UCI"</strong></td>    </tr>    </table><p>通过 cache-extension 标记（token），可以扩展 Cache-Control 首部字段内的指令。<br>如上例，Cache-Control 首部字段本身没有 community 这个指令。借助extension tokens 实现了该指令的添加。如果缓存服务器不能理解community 这个新指令，就会直接忽略。因此，extension tokens 仅对能理解它的缓存服务器来说是有意义的。</p><h3 id="6-3-2-Connection"><a href="#6-3-2-Connection" class="headerlink" title="6.3.2 Connection"></a>6.3.2 Connection</h3><p>Connection 首部字段具备如下两个作用。</p><ul><li><p>控制不再转发给代理的首部字段</p></li><li><p>管理持久连接</p></li><li><p>控制不再转发给代理的首部字段<br><img src="/2024/07/07/Web/Http/2510762-20211110145006034-1003769028.png" alt="image-20211110145004186"></p></li><li><p>管理持久连接<br><img src="/2024/07/07/Web/Http/2510762-20211110145044242-329209781.png" alt="image-20211110145042599">HTTP&#x2F;1.1 版本的默认连接都是持久连接。为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，则指定Connection 首部字段的值为 Close。<br><img src="/2024/07/07/Web/Http/2510762-20211110145109240-178818314.png" alt="image-20211110145107494">HTTP&#x2F;1.1 之前的 HTTP 版本的默认连接都是非持久连接。为此，如果想在旧版本的 HTTP 协议上维持持续连接，则需要指定Connection 首部字段的值为 Keep-Alive。</p><p>如上图①所示，客户端发送请求给服务器时，服务器端会像上图②那样加上首部字段 Keep-Alive 及首部字段 Connection 后返回响应。</p></li></ul><h3 id="6-3-3-Date"><a href="#6-3-3-Date" class="headerlink" title="6.3.3 Date"></a>6.3.3 Date</h3><p>首部字段 Date 表明创建 HTTP 报文的日期和时间</p><p><img src="/2024/07/07/Web/Http/2510762-20211110145249996-2013233095.png" alt="image-20211110145248282"></p><h3 id="6-3-4-Pragma"><a href="#6-3-4-Pragma" class="headerlink" title="6.3.4 Pragma"></a>6.3.4 Pragma</h3><p>Pragma  是 HTTP&#x2F;1.1 之前版本的历史遗留字段，仅作为与 HTTP&#x2F;1.0 的向后兼容而定义。</p><p>规范定义的形式唯一，如下所示。</p><table>    <tr>        <td><strong>Pragma: no-cache</strong></td>    </tr></table><p>该首部字段属于通用首部字段，但只用在客户端发送的请求中。客户端<br>会要求所有的中间服务器不返回缓存的资源。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110145454591-1709503359.png" alt="image-20211110145452949"></p><p>所有的中间服务器如果都能以 HTTP&#x2F;1.1 为基准，那直接采用 CacheControl: no-cache 指定缓存的处理方式是最为理想的。但要整体掌握全部中间服务器使用的 HTTP 协议版本却是不现实的。因此，发送的请求会同时含有下面两个首部字段。</p><table>    <tr>        <td><strong>Cache-Control: no-cache</strong></td>    </tr>    <tr><td><strong>Pragma: no-cache</strong></td></tr></table><h3 id="6-3-5-Trailer"><a href="#6-3-5-Trailer" class="headerlink" title="6.3.5 Trailer"></a>6.3.5 Trailer</h3><p><img src="/2024/07/07/Web/Http/2510762-20211110145657895-1381066246.png" alt="image-20211110145656227"></p><p>首部字段 Trailer 会事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在 HTTP&#x2F;1.1 版本分块传输编码时。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110145721362-1407200034.png" alt="image-20211110145719813"></p><p><img src="/2024/07/07/Web/Http/2510762-20211110145734975-861101569.png" alt="image-20211110145733361"></p><h3 id="6-3-6-Transfer-Encoding"><a href="#6-3-6-Transfer-Encoding" class="headerlink" title="6.3.6 Transfer-Encoding"></a>6.3.6 Transfer-Encoding</h3><p><img src="/2024/07/07/Web/Http/2510762-20211110145818759-1321296591.png" alt="image-20211110145817022"></p><p>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p><p>HTTP&#x2F;1.1 的传输编码方式仅对分块传输编码有效。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110145848847-849491838.png" alt="image-20211110145847249"></p><p><img src="/2024/07/07/Web/Http/2510762-20211110145901852-2135533524.png" alt="image-20211110145900347"></p><p>以上用例中，正如在首部字段 Transfer-Encoding 中指定的那样，有效使用分块传输编码，且分别被分成 3312 字节和 914 字节大小的分块数据。</p><h3 id="6-3-7-Upgrade"><a href="#6-3-7-Upgrade" class="headerlink" title="6.3.7 Upgrade"></a>6.3.7 Upgrade</h3><p>首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110145941168-1616501097.png" alt="image-20211110145939433"></p><p>上图用例中，首部字段 Upgrade 指定的值为 TLS&#x2F;1.0。请注意此处两个字段首部字段的对应关系，Connection 的值被指定为 Upgrade。Upgrade首部字段产生作用的 Upgrade 对象仅限于客户端和邻接服务器之间。因此，使用首部字段 Upgrade 时，还需要额外指定 Connection:Upgrade。<br>对于附有首部字段 Upgrade 的请求，服务器可用 101 Switching Protocols<br>状态码作为响应返回。</p><h3 id="6-3-8-Via"><a href="#6-3-8-Via" class="headerlink" title="6.3.8 Via"></a>6.3.8 Via</h3><p>使用首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。</p><p>报文经过代理或网关时，会先在首部字段 Via 中附加该服务器的信息，然后再进行转发。这个做法和 traceroute 及电子邮件的 Received 首部的工作机制很类似。<br>首部字段 Via 不仅用于追踪报文的转发，还可避免请求回环的发生。所以必须在经过代理时附加该首部字段内容。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110150042545-1642928174.png" alt="image-20211110150040809"></p><p>上图用例中，在经过代理服务器 A 时，Via 首部附加了“1.0 gw.hackr.jp(Squid&#x2F;3.1)”这样的字符串值。行头的 1.0 是指接收请求的服务器上应用的 HTTP 协议版本。接下来经过代理服务器 B 时亦是如此，在 Via 首部附加服务器信息，也可增加 1 个新的 Via 首部写入服务器信息。</p><p>Via 首部是为了追踪传输路径，所以经常会和 TRACE 方法一起使用。比如，代理服务器接收到由 TRACE 方法发送过来的请求（其中 MaxForwards: 0）时，代理服务器就不能再转发该请求了。这种情况下，代理服务器会将自身的信息附加到 Via 首部后，返回该请求的响应。</p><h3 id="6-3-9-Warning"><a href="#6-3-9-Warning" class="headerlink" title="6.3.9 Warning"></a>6.3.9 Warning</h3><p>HTTP&#x2F;1.1 的 Warning 首部是从 HTTP&#x2F;1.0 的响应首部（Retry-After）演变过来的。该首部通常会告知用户一些与缓存相关的问题的警告。</p><table>    <tr>        <td><strong>Warning: 113 gw.hackr.jp:8080 "Heuristic expiration" Tue, 03 Jul 2012 </strong></td>    </tr></table><p>Warning 首部的格式如下。最后的日期时间部分可省略。</p><table>    <tr>        <td><strong>Warning: [警告码][警告的主机:端口号]“[警告内容]”([日期时间])</strong></td>    </tr></table><p>HTTP&#x2F;1.1 中定义了 7 种警告。警告码对应的警告内容仅推荐参考。另外，警告码具备扩展性，今后有可能追加新的警告码。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110150358395-1691701923.png" alt="image-20211110150356698"></p><h2 id="6-4-请求首部字段"><a href="#6-4-请求首部字段" class="headerlink" title="6.4 请求首部字段"></a>6.4 请求首部字段</h2><p>请求首部字段是从客户端往服务器端发送请求报文中所使用的字段，用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容。</p><p><img src="/2024/07/07/Web/Http/2510762-20211110150804650-577196972.png" alt="image-20211110150802896"></p><h3 id="6-4-1-Accept"><a href="#6-4-1-Accept" class="headerlink" title="6.4.1 Accept"></a>6.4.1 Accept</h3></table></table></table></table></table></table></table></table>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="/2024/07/07/Web/html/"/>
      <url>/2024/07/07/Web/html/</url>
      
        <content type="html"><![CDATA[<h1 id="零、简介"><a href="#零、简介" class="headerlink" title="零、简介"></a>零、简介</h1><p>HTML</p><p>称为超文本标记语言(HyperText Markup Language,简称HTML)，是一种用于创建网页的标准标记语言。</p><p>使用标记标签来描述网页</p><p>HTML文档也叫<strong>web页面</strong></p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>后缀</strong></p><ul><li><p>html</p></li><li><p>htm</p><p>两种后缀名都可以，没有区别</p></li></ul><p><img src="/2024/07/07/Web/html/2510762-20210917202156254-1724591909.png" alt="image-20210917202147030"></p><p><strong>HTML标签</strong></p><p>HTML标记标签通常被称为HTML标签(HTML tag)</p><ul><li>HTML标签是由尖括号包围的关键字，比如<html></html></li><li>HTML标签通常是成对出现的，比如<b></b></li><li>标签对中的第一个标签是开始标签，第二个是结束标签</li><li>开始和结束标签也被称为<em>开放标签</em>和<em>闭合标签</em></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签&gt;内容&lt;/标签&gt;</span><br></pre></td></tr></table></figure><hr><p><strong>HTML元素</strong></p><p>“HTML标签”和“HTML元素”通常都是描述同样的意思</p><p>但是严格来说，一个HTML元素包含了开始和结束标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>WEB浏览器</strong></p><p>Web浏览器（如谷歌浏览器，Internet Explorer，Firefox，Safari）是用于读取HTML文件，并将其作为网页显示。</p><p>浏览器并不是直接显示的HTML标签，但可以使用标签来决定如何展现HTML页面的内容给用户：</p><p><img src="/2024/07/07/Web/html/2510762-20210917203211387-1394681801.png" alt="image-20210917203208294"></p><p><img src="/2024/07/07/Web/html/2510762-20210917203139613-1763970553.png" alt="image-20210917203135953"></p><p><strong>HTML版本</strong></p><p>从初期的网络诞生后，已经出现了许多HTML版本:</p><table><thead><tr><th align="left">版本</th><th align="left">发布时间</th></tr></thead><tbody><tr><td align="left">HTML</td><td align="left">1991</td></tr><tr><td align="left">HTML+</td><td align="left">1993</td></tr><tr><td align="left">HTML 2.0</td><td align="left">1995</td></tr><tr><td align="left">HTML 3.2</td><td align="left">1997</td></tr><tr><td align="left">HTML 4.01</td><td align="left">1999</td></tr><tr><td align="left">XHTML 1.0</td><td align="left">2000</td></tr><tr><td align="left">HTML5</td><td align="left">2012</td></tr><tr><td align="left">XHTML5</td><td align="left">2013</td></tr></tbody></table><h2 id="声明"><a href="#声明" class="headerlink" title="&lt;!DOCTYPE&gt; 声明"></a>&lt;!DOCTYPE&gt; 声明</h2><!DOCTYPE><p>声明有助于浏览器中正确显示网页。</p><p>网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。</p><p>doctype 声明是不区分大小写的，以下方式均可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!Doctype Html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="通用声明"><a href="#通用声明" class="headerlink" title="通用声明"></a>通用声明</h2><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML-4-01"><a href="#HTML-4-01" class="headerlink" title="HTML 4.01"></a>HTML 4.01</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="XHTML-1-0"><a href="#XHTML-1-0" class="headerlink" title="XHTML 1.0"></a>XHTML 1.0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><span class="line">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p>查看完整网页声明类型 <a href="https://www.runoob.com/tags/tag-doctype.html">DOCTYPE 参考手册</a>。</p><p><strong>中文编码</strong></p><p><img src="/2024/07/07/Web/html/2510762-20210917203728947-793125303.png" alt="image-20210917203726777"></p><h1 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h1><h2 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h2><p>HTML 标题（Heading）是通过</p><h1> - <h6> 标签来定义的。<p></p><h2 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h2><p>HTML 段落是通过标签 </p><p> 来定义的。</p><h2 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h2><p>HTML 链接是通过标签 <a> 来定义的。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.runoob.com&quot;&gt;这是一个链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>​href是Hypertext Reference的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。</p><p>​常用的有：link、a.</p><p>​例如：                                </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;reset.css&quot; rel=&quot;stylesheet&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​浏览器会识别该文档为CSS文档，并行下载该文档，并且不会停止对当前文档的处理。这也是建议使用link，而不是采用@import加载CSS的原因。src是source 的缩写，src 的内容是页面必不可少的一部分，是引入。src指向的内容会嵌入到文档中当前标签所在的位置。如：img、script、iframe</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。这也是将js脚本放在底部而不是头部得原因。</p><p>​简而言之，src 用于替换当前元素；href 用于在当前文档和引用资源之间建立联系。</p><h2 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h2><p>HTML 图像是通过标签 <img> 来定义的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img loading=&quot;lazy&quot; src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt;</span><br></pre></td></tr></table></figure><p>​1、***.html** 文件跟 ***.jpg** 文件(f盘)在不同目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;file:///f:/*.jpg&quot; width=&quot;300&quot; height=&quot;120&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​2、***.html** 文件跟 ***.jpg** 图片在相同目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;*.jpg&quot; width=&quot;300&quot; height=&quot;120&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​3、***.html** 文件跟 ***.jpg** 图片在不同目录下：</p><p>​a、图片 <em><strong>.jpg</strong> 在 <strong>image</strong> 文件夹中，</em>.html 跟 <strong>image</strong> 在同一目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;image/*.jpg/&quot;width=&quot;300&quot; height=&quot;120&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​b、图片 <em><strong>.jpg</strong> 在 <strong>image</strong> 文件夹中，</em><strong>.html</strong> 在 <strong>connage</strong> 文件夹中，<strong>image</strong> 跟 <strong>connage</strong> 在同一目录下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;../image/*.jpg/&quot;width=&quot;300&quot; height=&quot;120&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​4、如果图片来源于网络，那么写绝对路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;300&quot; height=&quot;120&quot;/&gt;</span><br></pre></td></tr></table></figure><p>记录一下 html 相对路径的写法：</p><ul><li>**.&#x2F;**：代表文件所在的目录（可以省略不写）如果写成image&#x2F;background就相当于是在html文件下找image文件夹，当然是找不到的</li><li>**..&#x2F;**：代表文件所在的父级目录</li><li>**..&#x2F;..&#x2F;**：代表文件所在的父级目录的父级目录</li><li>**&#x2F;**：代表文件所在的根目录</li></ul><h1 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h1><h2 id="HTML-元素语法"><a href="#HTML-元素语法" class="headerlink" title="HTML 元素语法"></a>HTML 元素语法</h2><ul><li>HTML 元素以<strong>开始标签</strong>起始</li><li>HTML 元素以<strong>结束标签</strong>终止</li><li><strong>元素的内容</strong>是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li><li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有<strong>属性</strong></li></ul><h2 id="嵌套的-HTML-元素"><a href="#嵌套的-HTML-元素" class="headerlink" title="嵌套的 HTML 元素"></a>嵌套的 HTML 元素</h2><p>大多数 HTML 元素可以嵌套（HTML 元素可以包含其他 HTML 元素）。</p><p>HTML 文档由相互嵌套的 HTML 元素构成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;p&gt;这是第一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>以上实例包含了三个HTML元素。</p><hr><h2 id="HTML-实例解析"><a href="#HTML-实例解析" class="headerlink" title="HTML 实例解析"></a>HTML 实例解析</h2><p> 元素:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;这是第一个段落。&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>这个 </p><p> 元素定义了 HTML 文档中的一个段落。<br>这个元素拥有一个开始标签 </p><p> 以及一个结束标签 </p>.<br>元素内容是: 这是第一个段落。<p></p><p><strong><body> 元素:</body></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;&lt;p&gt;这是第一个段落。&lt;/p&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><body> 元素定义了 HTML 文档的主体。这个元素拥有一个开始标签 <body> 以及一个结束标签 </body>。元素内容是另一个 HTML 元素（p 元素）。<p><strong><html> 元素：</html></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;&lt;p&gt;这是第一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><html> 元素定义了整个 HTML 文档。这个元素拥有一个开始标签 <html> ，以及一个结束标签 </html>.元素内容是另一个 HTML 元素（body 元素）。<hr><h2 id="HTML-空元素"><a href="#HTML-空元素" class="headerlink" title="HTML 空元素"></a>HTML 空元素</h2><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;就是没有关闭标签的空元素（&lt;br&gt; 标签定义换行）。</span><br></pre></td></tr></table></figure><p>在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。</p><p>在开始标签中添加斜杠，比如 <br>，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即使 &lt;br&gt; 在所有浏览器中都是有效的，但使用 &lt;br /&gt; 其实是更长远的保障。</span><br></pre></td></tr></table></figure><hr><h2 id="HTML-提示：使用小写标签"><a href="#HTML-提示：使用小写标签" class="headerlink" title="HTML 提示：使用小写标签"></a>HTML 提示：使用小写标签</h2><p>HTML 标签对大小写不敏感：<P> 等同于 <p>。许多网站都使用大写的 HTML 标签。</p><p>菜鸟教程使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中<strong>推荐</strong>使用小写，而在未来 (X)HTML 版本中<strong>强制</strong>使用小写。</p><hr><h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><p>属性是 HTML 元素提供的附加信息。</p><hr><h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2><ul><li>HTML 元素可以设置<strong>属性</strong></li><li>属性可以在元素中添加<strong>附加信息</strong></li><li>属性一般描述于<strong>开始标签</strong></li><li>属性总是以名称&#x2F;值对的形式出现，**比如：name&#x3D;”value”**。</li></ul><h2 id="属性实例"><a href="#属性实例" class="headerlink" title="属性实例"></a>属性实例</h2><p>HTML 链接由 <a> 标签定义。链接的地址在 <strong>href 属性</strong>中指定：</a></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.runoob.com&quot;&gt;这是一个链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="HTML-属性常用引用属性值"><a href="#HTML-属性常用引用属性值" class="headerlink" title="HTML 属性常用引用属性值"></a>HTML 属性常用引用属性值</h2><p>属性值应该始终被包括在引号内。</p><p>双引号是最常用的，不过使用<strong>单引号</strong>也没有问题。</p><p><img src="/2024/07/07/Web/html/2510762-20210917212205399-290889312.gif" alt="Remark"><strong>提示:</strong> 在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：name&#x3D;’John “ShotGun” Nelson’</p><hr><h2 id="HTML-提示：使用小写属性"><a href="#HTML-提示：使用小写属性" class="headerlink" title="HTML 提示：使用小写属性"></a>HTML 提示：使用小写属性</h2><p>属性和属性值对大小写不敏感。</p><p>不过，万维网联盟在其 HTML 4 推荐标准中推荐小写的属性&#x2F;属性值。</p><p>而新版本的 (X)HTML 要求使用小写属性。</p><hr><h2 id="HTML-属性参考手册"><a href="#HTML-属性参考手册" class="headerlink" title="HTML 属性参考手册"></a>HTML 属性参考手册</h2><p>查看完整的HTML属性列表: <a href="https://www.runoob.com/tags/html-reference.html">HTML 标签参考手册</a>。</p><p>下面列出了适用于大多数 HTML 元素的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td align="left">id</td><td align="left">定义元素的唯一id</td></tr><tr><td align="left">style</td><td align="left">规定元素的行内样式（inline style）</td></tr><tr><td align="left">title</td><td align="left">描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><h1 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h1><p><img src="/2024/07/07/Web/html/2510762-20210920201945473-204532057.png" alt="image-20210920201939823"></p><h1 id="HTML-段落-1"><a href="#HTML-段落-1" class="headerlink" title="HTML 段落"></a>HTML 段落</h1><p><img src="/2024/07/07/Web/html/2510762-20210920202213774-1931615991.png" alt="image-20210920202209182"></p><h1 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h1><p><img src="/2024/07/07/Web/html/2510762-20210920202441586-980461006.png" alt="image-20210920202437916"></p><h2 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h2><center class="half">    <img src="https://img2020.cnblogs.com/blog/2510762/202109/2510762-20210920203104816-1413604649.png" width="450" height="700">    <img src="https://img2020.cnblogs.com/blog/2510762/202109/2510762-20210920203141925-491636297.png" width="450" height="700"></center><h2 id="预格式文本"><a href="#预格式文本" class="headerlink" title="预格式文本"></a>预格式文本</h2><p><img src="/2024/07/07/Web/html/2510762-20210920203355049-1448590122.png" alt="image-20210920203353166"></p><center class="half">    <img src width="450" height="700">    <img src width="450" height="700"></center><h2 id="计算机输出"><a href="#计算机输出" class="headerlink" title="计算机输出"></a>计算机输出</h2><center class="half">    <img src="https://img2020.cnblogs.com/blog/2510762/202109/2510762-20210920203459676-1612015958.png" width="450" height="500">    <img src="https://img2020.cnblogs.com/blog/2510762/202109/2510762-20210920203510067-411819925.png" width="450" height="500"></center><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p><img src="/2024/07/07/Web/html/2510762-20210920203743339-2014466999.png" alt="image-20210920203741362"></p><h2 id="缩写和首字母缩写"><a href="#缩写和首字母缩写" class="headerlink" title="缩写和首字母缩写"></a>缩写和首字母缩写</h2><p><img src="/2024/07/07/Web/html/2510762-20210920203952218-1710730065.png" alt="image-20210920203949955"></p><h2 id="文字方向"><a href="#文字方向" class="headerlink" title="文字方向"></a>文字方向</h2><p><img src="/2024/07/07/Web/html/2510762-20210920204050185-476018345.png" alt="image-20210920204048364"></p><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p><img src="/2024/07/07/Web/html/2510762-20210920204139614-1258528622.png" alt="image-20210920204137681"></p><h2 id="删除字效果和插入字效果"><a href="#删除字效果和插入字效果" class="headerlink" title="删除字效果和插入字效果"></a>删除字效果和插入字效果</h2><p><img src="/2024/07/07/Web/html/2510762-20210920204738007-973658208.png" alt="image-20210920204736302"></p><p><img src="/2024/07/07/Web/html/2510762-20210920204833272-22958626.png" alt="image-20210920204831070"></p><h1 id="HTML-链接-1"><a href="#HTML-链接-1" class="headerlink" title="HTML 链接"></a>HTML 链接</h1><p><img src="/2024/07/07/Web/html/2510762-20210922212742510-1109790311.png" alt="image-20210922212740485"></p><h1 id="HTML头部"><a href="#HTML头部" class="headerlink" title="HTML头部"></a>HTML头部</h1><p><img src="/2024/07/07/Web/html/2510762-20210922213141684-1641379643.png" alt="image-20210922213139969"></p><h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML CSS"></a>HTML CSS</h1><p>CSS(Cascading Style Sheets)用于渲染HTML元素标签的样式</p><p>添加到<head>部分的样式信息对HTML进行格式化</head></p><p><img src="/2024/07/07/Web/html/2510762-20210925152123872-1293016601.png" alt="image-20210925152120957"></p><p>使用style属性制作一个没有下划线的链接</p><p><img src="/2024/07/07/Web/html/2510762-20210925152247935-64564041.png" alt="image-20210925152245622"></p><p>标签链接到一个外部样式表</p><p><img src="/2024/07/07/Web/html/2510762-20210925152537922-1426139709.png" alt="image-20210925152535527"></p><h2 id="如何使用CSS"><a href="#如何使用CSS" class="headerlink" title="如何使用CSS"></a>如何使用CSS</h2><p>CSS是在HTML4开始使用的，是为了更好的渲染HTML元素而引入的</p><p>CSS可以通过以下方式添加到HTML中：</p><ul><li>内联样式-在HTML元素中使用“style”属性</li><li>内部样式表-在HTML文档头部<head>区域使用<style>元素来包含CSS</li><li>外部引用-使用外部CSS文件</li></ul><p>最好的方式是通过外部引用CSS 文件</p><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何CSS属性。</p><p>如下实例显示出如何改变段落的颜色和左外边距</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;margin-left:20px;&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML样式实例-背景颜色"><a href="#HTML样式实例-背景颜色" class="headerlink" title="HTML样式实例-背景颜色"></a>HTML样式实例-背景颜色</h2><p>背景色属性(background-color)定义一个元素的背景颜色：</p><p><img src="/html/2510762-20210925153750199-1643484210.png" alt="image-20210925153747813"></p><p>早期背景色属性(background-color)是使用bgcolor属性定义。</p><h2 id="HTML样式实例-字体，字体颜色，字体大小"><a href="#HTML样式实例-字体，字体颜色，字体大小" class="headerlink" title="HTML样式实例-字体，字体颜色，字体大小"></a>HTML样式实例-字体，字体颜色，字体大小</h2><p>我们可以使用font-family(字体)，color(颜色)，和font-size(字体大小)属性来定义字体的样式。</p><p><img src="/html/2510762-20210925154330233-270552272.png" alt="image-20210925154327843"></p><p>现在通常使用font-family(字体)，color(颜色)，和font-size(字体大小)属性来定义文本样式，而不是<font>标签</p><h2 id="HTML样式实例-文本对齐方式"><a href="#HTML样式实例-文本对齐方式" class="headerlink" title="HTML样式实例-文本对齐方式"></a>HTML样式实例-文本对齐方式</h2><p>使用text-align(文字对齐)属性制定文本的水平与垂直对齐方式：</p><p><img src="/html/2510762-20210925154724464-1644186258.png" alt="image-20210925154722090"></p><p>文本对齐属性text-align取代了旧标签<center></p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在<head>部分通过<style>标签定义内部样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow;&#125;<span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h1><p><img src="/html/2510762-20210926160945875-545401458.png" alt="image-20210926160943981"></p><p><img src="/html/2510762-20210926161124259-494835698.png" alt="image-20210926161122824"></p><h2 id="HTML图像-图像标签-和源属性-Src"><a href="#HTML图像-图像标签-和源属性-Src" class="headerlink" title="HTML图像-图像标签()和源属性(Src)"></a>HTML图像-图像标签(<img>)和源属性(Src)</h2><p>在HTML中，图像由<img>标签定义。</p><p><img>是空表签，意思是，它只包含属性，并且没有闭合标签。</p><p>要在页面上显示图像，需要使用源属性(src)。src指“source”。源属性的值是图像的URL地址</p><p><strong>定义图像的语法是：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;url&quot; alt=&quot;some_text&quot;&gt;</span><br></pre></td></tr></table></figure><p>URL指存储图像的位置。如果名为”pulpit.jpg”的图像位于<a href="http://www.runoob.com的images目录中,那么其url为http//www.runoob.com/images/pulpit.jpg%E3%80%82">www.runoob.com的images目录中，那么其URL为http://www.runoob.com/images/pulpit.jpg。</a></p><p>浏览器将图像显示在文档中图像标签出现的地方。如果将图像标签置于两个段落之间，那么浏览器会首先显示第一个段落，然后显示图片，最后显示第二段。</p><h2 id="HTML图像-Alt属性"><a href="#HTML图像-Alt属性" class="headerlink" title="HTML图像-Alt属性"></a>HTML图像-Alt属性</h2><p>alt属性用来为图像定义一串预备的可替换文本。</p><p>替换文本属性的值是用户定义的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;boat.gif&quot; alt=&quot;Big Boat&quot;&gt;</span><br></pre></td></tr></table></figure><p>在浏览器无法载入图像时，替换文本属性告诉读者他们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。</p><h2 id="HTML图像-设置图像的高度和宽带"><a href="#HTML图像-设置图像的高度和宽带" class="headerlink" title="HTML图像-设置图像的高度和宽带"></a>HTML图像-设置图像的高度和宽带</h2><p>height(高度)与width(宽度)属性用于设置图像的高度与宽度。</p><p>属性值默认单位为像素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;pulpot.jpg&quot; alt=&quot;Pulpit rock&quot; width=&quot;304&quot; height=&quot;228&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>提示</strong>：指定图像的高度和宽度是一个很好的习惯。如果图像指定了高度宽度，页面加载时就会保留指定的尺寸。如果没有指定图片的大小，加载页面时有可能会破坏HTML页面的整体布局。</p><h2 id="有用的提示："><a href="#有用的提示：" class="headerlink" title="有用的提示："></a>有用的提示：</h2><p><strong>注意：</strong>假如某个HTML文件包含十个图像，那么为了正确显示这个页面，需要加载11个文件。加载图片时需要实践的，所以：慎用图片。</p><p><strong>注意：</strong>加载页面时，要注意插入页面图像的路径，如果不能正确设置图像的位置，浏览器无法加载图片，图像标签就会显示一个破碎的图片。</p><p>1、矩形：(左上角顶点坐标为(x1,y1)，右下角顶点坐标为(x2,y2))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;area shape=&quot;rect&quot; coords=&quot;x1,y1,x2,y2&quot; href=url&gt;</span><br></pre></td></tr></table></figure><p>2、圆形：(圆心坐标为(X1,y1)，半径为r)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;area shape=&quot;circle&quot; coords=&quot;x1,y1,r&quot; href=url&gt;</span><br></pre></td></tr></table></figure><p>3、多边形：(各顶点坐标依次为(x1,y1)、(x2,y2)、(x3,y3) ……)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;area shape=&quot;poly&quot; coords=&quot;x1,y1,x2,y2 ......&quot; href=url&gt;</span><br></pre></td></tr></table></figure><p>示例”<a href="https://www.runoob.com/try/try.php?filename=tryhtml_areamap">创建图像映射</a>“中的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;map name=&quot;planetmap&quot;&gt;  &lt;area shape=&quot;rect&quot; coords=&quot;0,0,82,126&quot; alt=&quot;Sun&quot; href=&quot;sun.htm&quot;&gt;  &lt;area shape=&quot;circle&quot; coords=&quot;90,58,3&quot; alt=&quot;Mercury&quot; href=&quot;mercur.htm&quot;&gt;  &lt;area shape=&quot;circle&quot; coords=&quot;124,58,8&quot; alt=&quot;Venus&quot; href=&quot;venus.htm&quot;&gt;&lt;/map&gt;</span><br></pre></td></tr></table></figure><p>该段代码中的shape指的是点击区域的形状，coords指的应该是链接区域在图片中的坐标（像素为单位</p><h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><p><img src="/html/2510762-20210926164215335-1941565402.png" alt="image-20210926164213933"></p><h2 id="HTML表格-1"><a href="#HTML表格-1" class="headerlink" title="HTML表格"></a>HTML表格</h2><p>表格由<table>标签来定义。每个标签均有若干行(由<tr>标签来定义)，每行被分割为若干单元格(由<td>标签定义)。字母td指表格数据(table data) ,即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><p><img src="/html/2510762-20210926164537202-1652884289.png" alt="image-20210926164535918"></p><p>没有边框的表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这个表格没有边框：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>600<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这个表格没有边框：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>600<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&lt;/table</span><br></pre></td></tr></table></figure><h4>这个表格没有边框：</h4><table><tr>    <td>100</td>    <td>200</td>    <td>300</td></tr><tr>    <td>400</td>    <td>500</td>    <td>600</td></tr></table><h4>这个表格没有边框：</h4><table border="0"><tr>    <td>100</td>    <td>200</td>    <td>300</td></tr><tr>    <td>400</td>    <td>500</td>    <td>600</td></tr></table><h2 id="表格中的表头-Heading"><a href="#表格中的表头-Heading" class="headerlink" title="表格中的表头(Heading)"></a>表格中的表头(Heading)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;水平标题：&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Telephone&lt;/th&gt;&lt;th&gt;Telephone&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bill Gates&lt;/td&gt;&lt;td&gt;555 77 854&lt;/td&gt;&lt;td&gt;555 77 855&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;垂直标题：&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;th&gt;First Name:&lt;/th&gt;&lt;td&gt;Bill Gates&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Telephone:&lt;/th&gt;&lt;td&gt;555 77 854&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th&gt;Telephone:&lt;/th&gt;&lt;td&gt;555 77 854&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;th&gt;加粗&lt;td&gt;不加粗</span><br></pre></td></tr></table></figure><h4>水平标题：</h4><table border="1"><tr>    <th>Name</th>    <th>Telephone</th>    <th>Telephone</th></tr><tr>    <td>Bill Gates</td>    <td>555 77 854</td>    <td>555 77 855</td></tr></table><h4>垂直标题：</h4><table border="1"><tr>    <th>First Name:</th>    <td>Bill Gates</td></tr><tr>    <th>Telephone:</th>    <td>555 77 854</td></tr><tr>    <th>Telephone:</th>    <td>555 77 854</td></tr></table><h2 id="带有标题的表格"><a href="#带有标题的表格" class="headerlink" title="带有标题的表格"></a>带有标题的表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;2&quot;&gt;&lt;caption&gt;Monthly savings&lt;/caption&gt;&lt;tr&gt;&lt;th&gt;Month&lt;/th&gt;&lt;th&gt;Savings&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;January&lt;/td&gt;&lt;td&gt;$100&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;February&lt;/td&gt;&lt;td&gt;$50&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;February&lt;/td&gt;&lt;td&gt;$50&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><table border="2">    <caption>Monthly savings</caption>    <tr>        <th>Month</th>        <th>Savings</th>    </tr>    <tr>        <td>January</td>        <td>$100</td>    </tr>    <tr>        <td>February</td>        <td>$50</td>    </tr>    <tr>        <td>February</td>        <td>$50</td>    </tr></table><h2 id="跨行或跨列的表格单元格"><a href="#跨行或跨列的表格单元格" class="headerlink" title="跨行或跨列的表格单元格"></a>跨行或跨列的表格单元格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;单元格跨两列：&lt;/h4&gt;&lt;table border=&quot;2&quot;&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th colspan=&quot;2&quot;&gt;Telephone&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Bill Gates&lt;/td&gt;&lt;td&gt;555 77 854&lt;/td&gt;&lt;td&gt;555 77 855&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4>单元格跨两列：</h4><table border="2"><tr>    <th>Name</th>    <th colspan="2">Telephone</th></tr><tr>    <td>Bill Gates</td>    <td>555 77 854</td>    <td>555 77 855</td></tr></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;单元格跨两行：&lt;/h4&gt;&lt;table border =&quot;2&quot;&gt;&lt;tr&gt;&lt;th&gt;First Name&lt;/th&gt;&lt;td&gt;Bill Gates&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt;Telelphone&lt;/th&gt;&lt;td&gt;555 77 854&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;555 77 855&lt;/td&gt;&lt;/td&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4>单元格跨两行：</h4><table border ="2"><tr>    <th>First Name</th>    <td>Bill Gates</td></tr><tr>    <th rowspan="2">Telelphone</th>    <td>555 77 854</td></tr><tr>    <td>555 77 855</td></td></table><h2 id="表格内的标签"><a href="#表格内的标签" class="headerlink" title="表格内的标签"></a>表格内的标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;这是一个段落&lt;/p&gt;&lt;p&gt;这是另一个段落&lt;/p&gt;&lt;/td&gt;&lt;td&gt;这个单元格包含一个标签：&lt;table border=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;D&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;这个单元格包含一个列表&lt;ul&gt;&lt;li&gt;apples&lt;/li&gt;&lt;li&gt;bananas&lt;/li&gt;&lt;li&gt;pineapples&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;td&gt;HELLO&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><table border="2"><tr>    <td>        <p>这是一个段落</p>        <p>这是另一个段落</p>    </td>    <td>这个单元格包含一个标签：        <table border="2">        <tr>            <td>A</td>            <td>B</td>        </tr>        <tr>            <td>C</td>            <td>D</td>        </tr>        </table>    </td></tr><tr>    <td>这个单元格包含一个列表        <ul>            <li>apples</li>            <li>bananas</li>            <li>pineapples</li>        </ul>    </td>    <td>HELLO</td></tr></table><h2 id="单元格边距-Cell-padding"><a href="#单元格边距-Cell-padding" class="headerlink" title="单元格边距(Cell padding)"></a>单元格边距(Cell padding)</h2><p>使用 Cell padding 来创建单元格内容与其边框之间的空白</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;没有单元格边距&lt;/h4&gt;&lt;table border=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;First&lt;/td&gt;&lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Second&lt;/td&gt;&lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;有单元格边距：&lt;/h4&gt;&lt;table border=&quot;2&quot; cellpadding=&quot;10&quot;&gt;&lt;tr&gt;&lt;td&gt;First&lt;/td&gt;&lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Second&lt;/td&gt;&lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4>没有单元格边距</h4><table border="2">    <tr>        <td>First</td>        <td>Row</td>    </tr>    <tr>        <td>Second</td>        <td>Row</td>    </tr></table><h4>有单元格边距：</h4><table border="2" cellpadding="10">    <tr>        <td>First</td>        <td>Row</td>    </tr>    <tr>        <td>Second</td>        <td>Row</td>    </tr></table><h2 id="单元格间距-Cell-spacing"><a href="#单元格间距-Cell-spacing" class="headerlink" title="单元格间距(Cell spacing)"></a>单元格间距(Cell spacing)</h2><p>使用Cell spacing增加单元格之间的距离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;没有单元格间距:&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;  &lt;td&gt;First&lt;/td&gt;  &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Second&lt;/td&gt;  &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;单元格间距=&quot;0&quot;:&lt;/h4&gt;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;  &lt;td&gt;First&lt;/td&gt;  &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Second&lt;/td&gt;  &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h4&gt;单元格间距=&quot;10&quot;:&lt;/h4&gt;&lt;table border=&quot;1&quot; cellspacing=&quot;10&quot;&gt;&lt;tr&gt;  &lt;td&gt;First&lt;/td&gt;  &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;  &lt;td&gt;Second&lt;/td&gt;  &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><h4>没有单元格间距:</h4><table border="1"><tr>  <td>First</td>  <td>Row</td></tr><tr>  <td>Second</td>  <td>Row</td></tr></table><h4>单元格间距="0":</h4><table border="1" cellspacing="0"><tr>  <td>First</td>  <td>Row</td></tr><tr>  <td>Second</td>  <td>Row</td></tr></table><h4>单元格间距="10":</h4><table border="1" cellspacing="10"><tr>  <td>First</td>  <td>Row</td></tr><tr>  <td>Second</td>  <td>Row</td></tr></table><p>在Typora上显示不出来</p><p><img src="/html/2510762-20210927200155827-2026566359.png" alt="image-20210927200147917"></p><h1 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h1><p>HTML支持有序、无序和定义列表：</p><p><strong>有序列表</strong></p><ol><li>第一个列表项</li><li>第二个列表项</li><li>第三个列表项</li></ol><p>有序列表也是一列项目，列表项目使用数字进行标记。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有序列表始于<span class="tag">&lt;<span class="name">ol</span>&gt;</span>标签，每个列表项始于<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签<span class="tag">&lt;<span class="name">ol</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">&quot;50&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol>    <li>Coffee</li>    <li>Tea</li>    <li>Milk</li></ol><ol start="50">    <li>Coffee</li>    <li>Tea</li>    <li>Milk</li></ol><p><strong>无序列表</strong></p><ul><li>Coffee</li><li>Milk</li></ul><p>无序列表是一个项目的列表，此列项目使用粗体原点(典型的小黑圆圈)进行标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无需标签使用<span class="tag">&lt;<span class="name">ul</span>&gt;</span>标签<span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li>Coffee</li>    <li>Milk</li></ul><p><strong>HTML自定义标签</strong></p><p>自定义标签不仅仅是一列项目，而是项目及其注释的组合。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义列表以<span class="tag">&lt;<span class="name">dl</span>&gt;</span>标签开始，每个自定义项以<span class="tag">&lt;<span class="name">dl</span>&gt;</span>开始，每个自定义列表项以<span class="tag">&lt;<span class="name">dd</span>&gt;</span>开始<span class="tag">&lt;<span class="name">dl</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>- white cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>Coffee</dt>    <dd>- black hot drink</dd>    <dt>Milk</dt>    <dd>- white cold drink</dd></dl><h1 id="HTML区块"><a href="#HTML区块" class="headerlink" title="HTML区块"></a>HTML区块</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTML可以通过&lt;div&gt;和&lt;span&gt;将元素组合起来</span><br></pre></td></tr></table></figure><p>大多数HTML元素被定义为块级元素或内联元素</p><p><strong>区块元素</strong></p><p>块级元素在浏览器显示时，通常会以新行来进行(和结束)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例：&lt;h1&gt;,&lt;p&gt;,&lt;ul&gt;,&lt;table&gt;</span><br></pre></td></tr></table></figure><p><strong>内联元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内联元素在显示时通常不会以新行开始实例：&lt;b&gt;,&lt;td&gt;,&lt;a&gt;,&lt;img&gt;</span><br></pre></td></tr></table></figure><p><strong>HTML&lt; span&gt;元素</strong></p><p>HTML&lt; span &gt;元素是内联元素，可用作文本的容器</p><p>&lt; span&gt;元素也没有特定的含义</p><p>当与CSS一同使用时，&lt; span&gt;元素可用于部分文本设置样式属性</p><p><strong>HTML分组标签</strong></p><table>    <tr>        <td>标签        </td>        <td>描述        </td>    </tr>    <tr>        <td>            < div>                  </td>        <td>定义了文档的区域，块级(block-level)        </td>    </tr>    <tr>        <td>            < span>        </td>        <td>            用来组合文档中的行内元素，内联元素(inline)        </td>    </tr></table><p>标签前面没有空格</p><h1 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h1><p>网页布局对改善网站的外观非常重要</p><p>大多数网站会把内容安排到多个列中（就像杂志或报纸那样）</p><p>大多数网站可以使用<div>或<table>元素来创建多列</p><p>CSS用于对元素进行定位，或者为页面创建背景以及色彩丰富的外观</p><p><strong>使用div元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom:0;&quot;</span>&gt;</span>            主要的网页标题        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFD700;height:200px;width:100px;float:left;&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>        HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span>        CSS<span class="tag">&lt;<span class="name">br</span>&gt;</span>        JavaScript    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;backgroudn-color:#EEEEEE;height:200px;width:400px;float:left;&quot;</span>&gt;</span>        内容在这里    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;clear:both;text-align:center;&quot;</span>&gt;</span>        版权 @ runoob.com    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div id="container" style="width:500px">    <div id="header" style="background-color:#FFA500;">        <h1 style="margin-bottom:0;">            主要的网页标题        </h1>    </div>    <div id="menu" style="background-color:#FFD700;height:200px;width:100px;float:left;">        <b>菜单</b><br>        HTML<br>        CSS<br>        JavaScript    </div>    <div id="content" style="backgroudn-color:#EEEEEE;height:200px;width:400px;float:left;">        内容在这里    </div>    <div id="footer" style="background-color:#FFA500;clear:both;text-align:center;">        版权 @ runoob.com    </div></div><p><strong>使用表格</strong></p><p>使用HTML<table>标签是创建布局的一种简单的方式</p><p>大多数站点可以使用<div>或者<table>元素来创建多列。</p><p>CSS用于对元素进行定位 ，或者为页面创建背景以及色彩丰富的外观</p><p>表格可以用来创建漂亮的布局，但表格的目的是呈现格式化数据-表格不是布局工具</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>            主要的网页标题            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span>        <span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFD700;width:100px;&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>            HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span>            CSS<span class="tag">&lt;<span class="name">br</span>&gt;</span>            JavaScript        <span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background:#eeeeee;height:200px;width:400px;&quot;</span>&gt;</span>        内容在这里        <span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#FFA500;text-align:center;&quot;</span>&gt;</span>        版权 @ runoob.com        <span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table width="500" border="0">    <tr>        <td colspan="2" style="background-color:#FFA500;">        <h1>            主要的网页标题            </h1>        </td>    </tr>    <tr>        <td style="background-color:#FFD700;width:100px;">        <b>菜单</b><br>            HTML<br>            CSS<br>            JavaScript        </td>        <td style="background:#eeeeee;height:200px;width:400px;">            内容在这里        </td>    </tr>    <tr>        <td colspan="2" style="background-color:#FFA500;text-align:center;">        版权 @ runoob.com        </td>    </tr></table><p><strong>有用的提示</strong></p><p>使用CSS最大的好处是，如果把CSS代码存放到外部样式表中，那么站点更易于维护。通过编辑单一的文件，就可以改变所有页面的布局。</p><h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><p>HTML表单用于收集不同类型的用户输入。</p><p><strong>表单</strong></p><p>表单是一个包含表单元素的区域</p><p>表单元素是允许用户在表单中输入内容，比如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等</p><p>表单使用表单标签<form>来设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    input 元素<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单-输入元素</strong></p><p>多数情况下被用到的表单标签是输入标签(<input>)</p><p>输入类型是由类型属性(type)定义的。大多数经常被用到的输入类型如下：</p><p><strong>文本域(Text Fields)</strong></p><p>文本域通过<input type="text">标签来设定，当用户要在表单中输入 字母、数字等内容时，就会用到文本域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    First name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>    Last name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    First name:<input type="text" name="firstname"><br>    Last name:<input type="text" name="lastname"></form><p>注意：表单本身并不可见。同时，在大多数浏览器中，文本域的默认宽度是20个字符。</p><p><strong>密码字段</strong></p><p>密码字段通过标签<input type="password">来定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    Password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    Password:<input type="password" name="pwd"></form><p>注意：密码字段不会明文表示，而是以星号或远点替代。</p><p><strong>单选按钮(Radio Buttons)</strong></p><p><input type="radio">标签定义了表单单选框选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fenale&quot;</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    <input type="radio" name="sex" value="male">Male<br>    <input type="radio" name="sex" value="fenale">Female</form><p><strong>复选框(Checkboxes)</strong></p><p><input type="checkbox">定义了复选框，用户需要从若干给定的选择中选取一个或若干选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bike&quot;</span>&gt;</span>I have a bike<span class="tag">&lt;<span class="name">br</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Car&quot;</span>&gt;</span>I have a car<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    <input type="checkbox" name="vehicle" value="Bike"> I have a bike<br>    <input type="checkbox" name="vehicle" value="Car"> I have a car</form><p><strong>提交按钮(Submit Button)</strong></p><p><input type="submit">定义了提交按钮</p><p>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。</p><p>由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;html_form_action.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span>    Username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form name="input" action="html_form_action.php" method="get">    Username:<input type="text" name="user">    <input type="submit" value="Submit"></form><p>假如您在上面的文本框内键入几个字母，然后点击确认按钮，那么输入数据会传送到 “html_form_action.php” 的页面。该页面将显示出输入的结果。</p><h1 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h1><p>通过使用框架，你可以在同一个浏览窗口中显示不止一个页面。</p><p><strong>iframe语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;url&quot;&gt;&lt;/iframe&gt;该url指向不同的网页</span><br></pre></td></tr></table></figure><p><strong>iframe-设置高度和宽度</strong></p><p>height 和width 属性用来定义 iframe 标签的高度与宽度。</p><p>属性默认以像素为单位，但是你可以指定其按比例显示(如：”80%”)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>iframe-移除边框</strong></p><p>frameborder 属性用来定义 iframe 表示是否显示边框</p><p>设置属性值为”0“一处iframe 的边框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用iframe来显示目标链接页面</strong></p><p>iframe可以显示一个目标链接的页面</p><p>目标链接的属性必须使用iframe的属性，如下实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe_a&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>RUNOOB.COM<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML颜色"><a href="#HTML颜色" class="headerlink" title="HTML颜色"></a>HTML颜色</h1><p>HTML颜色由红色、绿色、蓝色混合而成</p><p><strong>颜色值</strong></p><p>HTML颜色由一个十六进制符号来定义，这个符号由红色、绿色和蓝色的值组成(RGB)</p><p>每种颜色的最小值为0(十六进制：#00)。最大值是255(十六进制：#FF)</p><p><img src="/../../../../assets/image-20211004212812973.png" alt="image-20211004212812973"></p><h1 id="HTML颜色名"><a href="#HTML颜色名" class="headerlink" title="HTML颜色名"></a>HTML颜色名</h1><p>目前所有浏览器都支持以下颜色名</p><p>141个颜色名称是在HTML和CSS颜色规范定义的(17标准颜色，再加124)</p><p>17标准颜色：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色</p><p><img src="/../../../../assets/image-20211004213905909.png" alt="image-20211004213905909"></p><h1 id="HTML颜色值"><a href="#HTML颜色值" class="headerlink" title="HTML颜色值"></a>HTML颜色值</h1><p>颜色值由十六进制来表示红、绿、蓝（RGB）</p><p>每个颜色的最低值为0（十六进制为00），最高值为255（十六进制FF)</p><p>十六进制值的写法为 # 号后跟三个或六个十六进制字符</p><p>三位数表示法为： #RGB ，转换为6位数表示为： #RRGGBB</p><p><img src="/../../../../assets/image-20211005195146519.png" alt="image-20211005195146519"></p><p><img src="/../../../../assets/image-20211005195324531.png" alt="image-20211005195324531"></p><h1 id="HTML脚本"><a href="#HTML脚本" class="headerlink" title="HTML脚本"></a>HTML脚本</h1><p>JavaScript 使  HTML  页面具有更强的动态和交互性</p><p><strong>&lt; script   &gt;标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;标签用于定义客户端脚本，比如JavaScript&lt;script&gt;元素既可包含脚本语句，也可通过src属性指向外部脚本文件</span><br></pre></td></tr></table></figure><p>JavaScript 最常用与图片操作、表单验证以及内容动态更新</p><p><strong>&lt; noscrip t&gt;标签</strong></p><p>&lt; noscript&gt; 标签提供无法使用脚本时的替代内容，比方在浏览器禁用脚本时，或浏览器不支持客户端脚本时。</p><p>&lt; noscript&gt;元素可包含普通HTML页面的body 元素中能够找到的所有元素。</p><p>只有在浏览器不支持脚本或者禁用脚本时，才会显示&lt; noscript&gt;元素中的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello World!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">npscript</span>&gt;</span>抱歉，你的浏览器不支持<span class="tag">&lt;/<span class="name">npscript</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../../../assets/image-20211005201148220.png" alt="image-20211005201148220"></p><h1 id="HTML字符实体"><a href="#HTML字符实体" class="headerlink" title="HTML字符实体"></a>HTML字符实体</h1><p>HTML中的预留字符必须被替换为字符实体</p><p>一些在键盘上找不到的字符也可以使用字符实体来替换</p><p><strong>HTML实体</strong></p><p>在HTML中，某些字符是预留的。</p><p>在HTML中不能使用小于号(&lt;)和大于号(&gt;)，这是因为浏览器会误认为它们是标签</p><p>如果希望正确地显示预留字符，我们必须在HTML源代码中使用字符实体(character entities).</p><p>字符实体类似这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;entity_name;</span><br><span class="line">或</span><br><span class="line">&amp;#entity_number;</span><br><span class="line">如需显示小于号，我们必须这样写：&amp;lt; 或 &amp;#60; 或 &amp;#060</span><br></pre></td></tr></table></figure><p><strong>不间断空格(Non-breaking Space)</strong></p><p>HTML中的常用字符实体是不间断空格(&amp;nbsp ;)</p><p>浏览器总是会截断HTML页面中的空格。如果你在文本中写10个空格，在显示该页面之前，浏览器会删除它们中的9个。如需在页面中增加空格的数量，你需要使用&amp;nbsp ;字符实体</p><p>nbsp后面没有空格，</p><p><strong>结合音标符</strong></p><p><img src="/../../../../assets/image-20211005202518155.png" alt="image-20211005202518155"></p><p><strong>字符实体</strong></p><p><img src="/../../../../assets/image-20211005202615211.png" alt="image-20211005202615211"></p><h1 id="HTML-URL"><a href="#HTML-URL" class="headerlink" title="HTML URL"></a>HTML URL</h1><p><strong>HTML 统一 资源定位器 (Uniform Resource Locators)</strong></p><p>URL是一个网页地址</p><p>URL可以由字母组成，如”runoob.com”，或互联网协议(IP)地址：192.68.20.50。大多数人进入网站使用网站域名来访问，因为 名字比数字更容易 记住。</p><p>Web浏览器通过URL从Web服务器请求页面</p><p>当你点击HTML页面中的某个链接时，对应的<a>标签指向万维网上的一个地址</p><p>一个统一资源定位器(URL)用于定位万维网上的文档。</p><p>一个网页地址实例：<a href="http://www.runoob.com/html/html-tutorial.html">http://www.runoob.com/html/html-tutorial.html</a> 语法规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme://host.domain:port/path/filename</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>scheme-定义因特网服务的类型，最常见的类型是  http</li><li>host - 定义域主机 （http 的默认主机 是 www)</li><li>domain -  定义因特网域名，比如 runoob.com</li><li>:port - 定义主机上的端口号（http 的默认端口号是 80)</li><li>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）</li><li>filename - 定义文档&#x2F;资源的名称</li></ul><p><strong>常见的URL Scheme</strong></p><p>以下是一些URL scheme:</p><table>    <tr >        <td>Scheme        </td>        <td>访问        </td>        <td>用于···        </td>    </tr>    <tr>        <td>http        </td>        <td>超文本传输协议        </td>        <td>以http:// 开头的普通网页。不加密        </td>    </tr>    <tr>        <td>http        </td>        <td>安全超文本传输协议        </td>        <td>安全网页，加密所有信息交换        </td>    </tr>    <tr>        <td>ftp        </td>        <td>文件传输协议        </td>        <td>用于将文件下载或上传至网站        </td>    </tr>    <tr>        <td>file        </td>        <td>        </td>        <td>你计算机上的文件        </td>    </tr></table><p><strong>URL字符编码</strong></p><p>URL只能使用ASCII字符集</p><p>来通过因特网进行发送。由于URL常常会包含ASCII集合之外的字符，URL必须转换为有效的ASCII格式</p><p>URL编码使用“%”其后跟随两位的十六进制数来替换非ASCII字符</p><p>URL不能包含空格。URL编码通常使用 + 来替换空格</p><p><img src="/../../../../assets/image-20211006175615516.png" alt="image-20211006175615516"></p><h1 id="HTML速查列表"><a href="#HTML速查列表" class="headerlink" title="HTML速查列表"></a>HTML速查列表</h1><p><strong>HTML基本文档</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        可见文本······</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>基本标签（Basic Tags）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    最大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    第二大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    第三大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    最四大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span></span><br><span class="line">    第五大的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br><span class="line">    最小的标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span></span><br><span class="line">    这是一个段落。</span><br><span class="line"><span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> 换行</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span> 水平线</span><br><span class="line"><span class="comment">&lt;!-- 这是注释--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>文本格式化（Formatting）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>计算机代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>更小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>更重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>缩写<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>联系信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span>文字方向<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    从另一个源引用的部分</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>工作的名称<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除的文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入的文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>链接（Links）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">普通的链接：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.example.com/&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">图片链接：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.example.com/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换文本&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">邮件链接：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:webmaster@example.com&quot;</span>&gt;</span>发送e-mail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">书签：</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tips&quot;</span>&gt;</span>调到提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>图片（Images）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换文本&quot;</span> <span class="attr">height</span>=<span class="string">&quot;42&quot;</span> <span class="attr">width</span>=<span class="string">&quot;42&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>样式&#x2F;区块（Styles&#x2F;Sections）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    h1 &#123;color=red;&#125;</span><br><span class="line">    p &#123;color=blue:&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    文档中的块级元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文档中的内联元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>无序列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>有序列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目 1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项目 1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>项目 2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项目 2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表格（Tables）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>框架（Iframe）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单（Forms）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post/get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Send&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>樱桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;60&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>实体(Entities)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span> 等同于 &lt;</span><br><span class="line"><span class="symbol">&amp;gt;</span> 等同于 &gt;</span><br><span class="line"><span class="symbol">&amp;#169;</span> 等同于 </span><br></pre></td></tr></table></figure><p>&#169; </p></style></head></li></ul></P></p></html></body></h6></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页</title>
      <link href="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/"/>
      <url>/2024/07/07/Web/%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="第一章、概述"><a href="#第一章、概述" class="headerlink" title="第一章、概述"></a>第一章、概述</h1><h2 id="1-0-网页的本质"><a href="#1-0-网页的本质" class="headerlink" title="1.0 网页的本质"></a>1.0 网页的本质</h2><h3 id="1-0-1、网页的本质就是文本文件"><a href="#1-0-1、网页的本质就是文本文件" class="headerlink" title="1.0.1、网页的本质就是文本文件"></a>1.0.1、网页的本质就是文本文件</h3><p>（1）所见即所得（F5、Ctrl+F5)、主要内容就是 BOM（浏览器对象模型）+DOM（文档对象模型）、纯文本</p><p>（2）一堆标签（元素）的组合、标签间可以嵌套，有属性继承关系</p><p>（3）HTML与CSS没有语言结构</p><p>（4）Chrome 浏览器下，按F12，可以跟组超链接 a 等标签</p><p>（5）一堆网页，通过 a 超链接这个标签（元素）进行关联、跳转</p><p>（6）一切皆文件、一切皆增删查改、最有用的是行列二维表</p><h3 id="1-0-2、网站就是一个链接的页面集合"><a href="#1-0-2、网站就是一个链接的页面集合" class="headerlink" title="1.0.2、网站就是一个链接的页面集合"></a>1.0.2、网站就是一个链接的页面集合</h3><h3 id="1-0-3、记事本可以用来编写HTML文件"><a href="#1-0-3、记事本可以用来编写HTML文件" class="headerlink" title="1.0.3、记事本可以用来编写HTML文件"></a>1.0.3、记事本可以用来编写HTML文件</h3><p>（1）文本编辑器：记事本可以用来编写HTML文件</p><p>（2）文件夹结构</p><p>（3）Web浏览器</p><table><thead><tr><th><strong>缩写HTML</strong></th><th>中文名称</th><th>英文名称</th><th></th></tr></thead><tbody><tr><td>HTML</td><td>超文本标记语言</td><td>Hyper Text Markup Language</td><td>骨架、房屋框架</td></tr><tr><td>CSS</td><td>层叠样式表（或级联样式表）</td><td>Cascading Style Sheets</td><td>血肉、装修</td></tr><tr><td>ECMAScript 6、ES6、JavaScript 2015</td><td>javaScript编程语言（网页脚本语言)</td><td>JavaScript Programming Language</td><td>行动、交互</td></tr><tr><td>BOM</td><td>浏览器对象模型</td><td>Browser Object Model</td><td></td></tr><tr><td>DOM</td><td>文档对象模型</td><td>Document Object Model</td><td></td></tr><tr><td>URL</td><td>统一资源定位符</td><td>Uniform Resoure Locator</td><td></td></tr><tr><td>浏览器 API</td><td>Web 应用程序接口</td><td>Web API</td><td></td></tr><tr><td>HTTP</td><td>超文本传输协议</td><td>Hyper Text Transfer Protocol</td><td></td></tr><tr><td>jSON</td><td>JavaScript对象表示</td><td>JavaScript Object Notation</td><td></td></tr></tbody></table><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20211110174552885-1165403906.png" alt="image-20211110174515478"></p><p>DOM的英文全称是DocumentObjectModel，表示文件对象模型，是W3C组织推荐的处理可扩展置标语言的标准编程接口；</p><p>DOM是HTML文档的内存中对象表示，它提供了使用JavaScript与网页交互的方式。</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211110174617181.png" alt="image-20211110174617181"></p><h2 id="1-1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX"><a href="#1-1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX" class="headerlink" title="1.1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX)"></a>1.1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX)</h2><h3 id="1-1-1、显示文件扩展名"><a href="#1-1-1、显示文件扩展名" class="headerlink" title="1.1.1、显示文件扩展名"></a>1.1.1、显示文件扩展名</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210917091837363-1641051759.png" alt="image-20210917091834339"></p><h3 id="1-1-2、开发工具"><a href="#1-1-2、开发工具" class="headerlink" title="1.1.2、开发工具"></a>1.1.2、开发工具</h3><p>（1）VSCode:  <a href="https://code.vidualstudio.com/%E3%80%81%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6%EF%BC%88MacOS%E4%B8%8B%E5%AE%89%E8%A3%85VSCode.doc)%E3%80%81Emmet%E3%80%81%E5%BF%AB%E6%8D%B7%E9%94%AE">https://code.vidualstudio.com/、配置插件（MacOS下安装VSCode.doc)、Emmet、快捷键</a><br><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211110175049028.png" alt="image-20211110175049028"></p><p>（2）Sublime Text、<a href="http://www.sublimetext.cn/">http://www.sublimetext.cn/</a> (Sublime Text 3 基础配置、插件.doc)</p><h3 id="1-1-3、自学、写作工具"><a href="#1-1-3、自学、写作工具" class="headerlink" title="1.1.3、自学、写作工具"></a>1.1.3、自学、写作工具</h3><p>（1）菜鸟教程：<a href="https://www.runoob.com/">https://www.runoob.com/</a><br>（2）Markdown 写作工具 ：<a href="https://typora.io/">https://typora.io/</a></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211110175248266.png" alt="image-20211110175248266"></p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211110175550207.png" alt="image-20211110175550207" style="zoom:200%;"><h3 id="1-1-4、思维导图工具"><a href="#1-1-4、思维导图工具" class="headerlink" title="1.1.4、思维导图工具"></a>1.1.4、思维导图工具</h3><p>（1）Pandoc：<a href="https://github.com/jpm/pandoc/releases%EF%BC%88%E6%94%AF%E6%8C%81OPML%EF%BC%89">https://github.com/jpm/pandoc/releases（支持OPML）</a></p><p>（2）幕布：<a href="https://mubu.com/%EF%BC%88199%E5%85%83/3%E5%B9%B4%EF%BC%89">https://mubu.com/（199元/3年）</a></p><p>（3）Xmind：<a href="https://www.xmind.cn/%EF%BC%88388%E5%85%83/%E5%B9%B4%EF%BC%89">https://www.xmind.cn/（388元/年）</a></p><h3 id="1-1-5、开源代码托管"><a href="#1-1-5、开源代码托管" class="headerlink" title="1.1.5、开源代码托管"></a>1.1.5、开源代码托管</h3><p>（1）Github：<a href="https://github.com/">https://github.com/</a></p><p>（2）码云：<a href="https://gittee.com/">https://gittee.com/</a></p><p>（3）开放原子开源基金会：<a href="https://www.openatom.org/%EF%BC%88%E5%8D%8E%E4%B8%BA%E9%B8%BF%E8%92%99%E4%BB%A3%E7%A0%81%E6%8D%90%E8%B5%A0%EF%BC%89">https://www.openatom.org/（华为鸿蒙代码捐赠）</a></p><h3 id="1-1-6、程序调试、去除BUG、代码质量"><a href="#1-1-6、程序调试、去除BUG、代码质量" class="headerlink" title="1.1.6、程序调试、去除BUG、代码质量"></a>1.1.6、程序调试、去除BUG、代码质量</h3><p>（1）程序调试<br>        （1.1）Chrome，F12调试模式，修改元素和样式——Element面板<br>        （1.2）Chrome，F12调试模式，Header，看请求参数和返回数据<br>        （1.3）Chrome，F12调试模式，Source，打断点<br>        （1.4）Chrome，F12调试模式，Console，状态栏<br>        （1.5）在html文件里的<code>&lt;script&gt;</code>代码块里，加 console.log()、控制台打印日志<br>        （1.6）<code>console.dir</code>(显示一个对象的所有属性和方法）、<code>console.table</code>（用表格形式显示<br>        （1.7）在 html 文件里的<code>&lt;script&gt;</code>代码块里，加 alert()<br>                     不推荐，alert 会阻碍页面的继续渲染。调试完成后，必须手动清除这些调试代码，有些麻烦。<br>                    alert 只能打印出字符串，如果打印的对象不是 String，则会调用 toString() 方法将该对象转换成字符串（比如转成[object Object]这种）</p><p>​所以除非你打印 String 类型的对象，其他什么信息都获取不到<br>​在 html 文件里的<code>&lt;script&gt;</code>代码质量，写如下方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//此方法相当于初始化（必定会执行）</span></span><br><span class="line"><span class="keyword">debugger</span>;<span class="comment">//写下此语句，浏览器会自动进入断电</span></span><br><span class="line">    $(<span class="string">&#x27;:radio[name=&quot;NTP_SYNC_ONOFF&quot;][value=&quot;ON&quot;]&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​（1.8）浏览器控制台 js 断电测试，在浏览器开发者工具中为 js 代码添加断点，让 js 执行到某一特定位置停住，方便开发者对该处代码段的分析与逻辑处理<br>​（1.9）VSCode 安装 debugger for chrome 插件， launch.json 配置好相关参数，在 vscode 左侧活动栏开始调试<br>​（1.10）抓包<br>​（1.11）多看看代码、找逻辑 bug<br>​（1.12）百度、百度开发者搜索、google、必应、夸克搜索、头条搜索<br>​（1.13）上国内各大技术社区、QQ群搜索、请教<br>​（1.14）关键字转为英文，上 Stack Overflow 搜索，请教<br>（2）去除 BUG<br>​（2.1）<br>​（2.2）</p><p>（3）代码质量</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211110182753442.png" alt="image-20211110182753442"></p><h3 id="1-1-7、程序-bug-的常见分类"><a href="#1-1-7、程序-bug-的常见分类" class="headerlink" title="1.1.7、程序 bug 的常见分类"></a>1.1.7、程序 bug 的常见分类</h3><p>（1）不能服务、连接拒绝、404、500</p><p>（2）严重影响用户体验、功能不好使</p><p>（3）某概率下出问题、给用户不好的体验（兼容）</p><p>（4）某概率的后端数据问题</p><p>（5）现阶段可不支持、后续升级解决</p><h3 id="1-1-8、各种快捷键"><a href="#1-1-8、各种快捷键" class="headerlink" title="1.1.8、各种快捷键"></a>1.1.8、各种快捷键</h3><p>（1）目录</p><p>​Ctrl+A（全选）、Ctrl+F（查找）、Ctrl+H（隐藏和显示额外内容）、Ctrl+G（页面查找）、</p><p>（2）文件</p><p>​Ctrl+N（打开文件或新页面）、Ctrl+鼠标滚轮（改变大小）、Alt+F（打开文件菜单）、Shift+F10（选中文件，打开右键菜单）、Alt+回车（查看文件属性）、Ctrl+Shift+N（新建文件夹）</p><p>（3）窗口</p><p>​Ctrl+Tab（浏览器页面切换）、Ctrl+W（关闭）、Ctrl+D（收藏当前页面）、Alt+Tab（切换窗口）、Alt+F4（关闭当前窗口）、Alt+Tab（切换页面）、Ctrl+Tab（切换浏览器标签页）、</p><p>（4）资源</p><p>​F5（刷新）、Ctrl+F5（强制刷新）、Ctrl+Esc（打开开始菜单）Ctrl+Shift+Esc（任务管理器）、Win+R（打开运行框）、</p><p>（5）网络</p><p>（6）快捷<br>                Ctrl+O（打开）、Ctrl+S（保存）、Ctrl+C（复制）、Ctrl+V（粘贴）、Ctrl+Z（撤销）</p><p>（7）其他</p><p>​Ctrl+P（打印）、Shift（中英文切换）、Win+空格（切换输入法）Win+D（隐藏所有页面）、Win+M（回到桌面）、Win+E（资源管理器）、Win+P（投屏）、Win+上下左右箭头（分屏）、</p><h3 id="1-1-9、程序员分类"><a href="#1-1-9、程序员分类" class="headerlink" title="1.1.9、程序员分类"></a>1.1.9、程序员分类</h3><p>（1）面向简历编程、面向监狱编程（爬虫、黑客、外挂、破解、删库跑路、赌博、乱抽奖、虚拟定位）（背锅、降薪、降职、劳动仲裁）</p><p>（2）面向CV编程</p><p>（3）面向百度编程、面向CSDN、面向博客园编程</p><p>（4）面向SO编程（堆栈溢出是全世界最大的技术社区）、面向Github编程</p><p>（5）面向开源项目编程、面向开发框架编程</p><p>（6）面向兴趣编程、面向防偷编程（防伪艺术化、全栈）（LNMP、LAMP、LNAMP）</p><p>（1）一流程序员：数学</p><p>（2）二流程序员：算法；leetcode,牛客</p><p>（3）三流程序员：逻辑</p><p>（4）四流程序员：SDK</p><p>（5）五流程序员：Google、StackOverFlow</p><p>（6）六流程序员：百度、CSDN</p><h3 id="1-1-10、浏览器历史"><a href="#1-1-10、浏览器历史" class="headerlink" title="1.1.10、浏览器历史"></a>1.1.10、浏览器历史</h3><p>（1）网景浏览器（1994年10月13日）</p><p>（2）互联网真正走入家庭是1994年以后，TCP&#x2F;IP 协议可以在电话线上运行，导致 modern 的真正大范围使用（拨号上网）</p><h3 id="1-1-11、浏览器访问本地-HTML-页面与远程-HTTP-页面的区别"><a href="#1-1-11、浏览器访问本地-HTML-页面与远程-HTTP-页面的区别" class="headerlink" title="1.1.11、浏览器访问本地 HTML 页面与远程 HTTP 页面的区别"></a>1.1.11、浏览器访问本地 HTML 页面与远程 HTTP 页面的区别</h3><p>（1）file 协议是访问你本机的文件资源</p><p>​file协议用于访问本机计算机中的文件，就如同在 Windows 资源管理区中打开文件一样，注意它是针对本地（本机）的。</p><p>​file 协议只能在本地访问。file 只是简单的请求本地文件，与在 Windows 中找到文件，右键，打开方式，用浏览器打开看到的效果是一致的</p><p>（2）HTTP 是搭建了服务器</p><p>​HTTP访问本地 HTML，是在本地起了一台 HTTP 服务器，然后你访问自己电脑上的本地服务器，HTTP服务区再去访问你本机的文件资源。</p><p>​本地搭建了 HTTP 服务器，开放端口之后，别人也可以通过 HTTP 访问到你电脑里的页面，但是 file 协议做不到</p><h3 id="1-1-12、网站"><a href="#1-1-12、网站" class="headerlink" title="1.1.12、网站"></a>1.1.12、网站</h3><p>（1）MDN官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></p><p>（1）兼容测试：<a href="https://caniuse.com/">https://caniuse.com/</a></p><h3 id="1-1-13、在线论文"><a href="#1-1-13、在线论文" class="headerlink" title="1.1.13、在线论文"></a>1.1.13、在线论文</h3><p>（1）<a href="https://www.oalib.com/">https://www.oalib.com/</a></p><p>（2）<a href="https://www.sci-hub.ren/">https://www.sci-hub.ren/</a></p><h3 id="1-1-14、版权信息"><a href="#1-1-14、版权信息" class="headerlink" title="1.1.14、版权信息"></a>1.1.14、版权信息</h3><p>（1）中华人民共和国自然资源部：<a href="http://bzdt.ch.mnr.gov.cn/">http://bzdt.ch.mnr.gov.cn/</a></p><p>（2）阿里巴巴普惠体：<a href="https://alibabafont.taobao.com/">https://alibabafont.taobao.com/</a></p><h2 id="1-2HTML骨架"><a href="#1-2HTML骨架" class="headerlink" title="1.2HTML骨架"></a>1.2HTML骨架</h2><h3 id="1-2-1、HTML骨架标签分类"><a href="#1-2-1、HTML骨架标签分类" class="headerlink" title="1.2.1、HTML骨架标签分类"></a>1.2.1、HTML骨架标签分类</h3><table>    <tr>        <th>标签名</th>        <th>定义</th>        <th>说明</th>    </tr>    <tr>        <td>&lt;html&gt;&lt;/html&gt;</td>        <td>HTML标签</td>        <td>页面中最大的标签</td>    </tr>    <tr>        <td>&lt;head&gt;&lt;/head&gt;</td>        <td>文档的头部</td>        <td>注意在head标签中我们必须要设置的标签是title</td>    </tr>    <tr>        <td>&lt;title&gt;&lt;/title&gt;</td>        <td>文档的标题</td>        <td>让页面拥有一个自己的网页标题</td>    </tr>    <tr>        <td>&lt;body&gt;&lt;/body&gt;</td>        <td>文档的主体</td>        <td>元素包含文档的所有内容，页面内容一般是放到body里面的</td>    </tr></table><h3 id="1-2-2、快速生成-HTML的骨架"><a href="#1-2-2、快速生成-HTML的骨架" class="headerlink" title="1.2.2、快速生成 HTML的骨架"></a>1.2.2、快速生成 HTML的骨架</h3><p>（1）在VS Code 中，新建一个 html 文件，保存（先选扩展名，再输入文件名，再选择保存位置），输入<code>html:5</code>，然后按 Tab 键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在 Sublime Text 中安装 Emmet 插件。新建 html文件，输入<code>html:5</code> ，按 Tab 键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）在 Sublime Text 中安装 Emmet 插件。新建 html文件，输入<code>html:xt</code>，按 Tab</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-基础元素标签、基础属性、style元素、布局类元素"><a href="#1-3-基础元素标签、基础属性、style元素、布局类元素" class="headerlink" title="1.3 基础元素标签、基础属性、style元素、布局类元素"></a>1.3 基础元素标签、基础属性、style元素、布局类元素</h2><p>（1）所有 dom 分 3 类：标签&#x2F;元素，属性，值</p><p>（2）标签名大小写不敏感，CSS class 大小写敏感</p><h3 id="1-3-1、基础元素标签"><a href="#1-3-1、基础元素标签" class="headerlink" title="1.3.1、基础元素标签"></a>1.3.1、基础元素标签</h3><p>table、div、form（表单）、img、a、hr（水平线）、br（换行）</p><h3 id="1-3-2、基础属性"><a href="#1-3-2、基础属性" class="headerlink" title="1.3.2、基础属性"></a>1.3.2、基础属性</h3><p>（1）id、name、class、style、title、align（水平对齐）、valign（数值对齐）、bgcolor（背景颜色）</p><p>​每一个标签、每一个属性、每一个值，都是一个DOM</p><p>（2）getElementByld()（返回指定ID的元素）、getElementsByName()（返回带有指定名称的对象的集合）</p><h3 id="1-3-3、style元素"><a href="#1-3-3、style元素" class="headerlink" title="1.3.3、style元素"></a>1.3.3、style元素</h3><p>大幅减少 DOM 的数量，初步代码封装（多次引用、修改方便）、进一步代码管理（多人协作）</p><p>（1）style满天飞（标签自己使用）</p><p>（2）<code>&lt;style&gt;&lt;/style&gt;</code> （单页面内共享，自己提高开发效率）</p><p>（3）<code>&lt;link&gt;</code>（多页面共享，团队合作）</p><h3 id="1-3-4、布局类元素"><a href="#1-3-4、布局类元素" class="headerlink" title="1.3.4、布局类元素"></a>1.3.4、布局类元素</h3><p>（1）table 标签</p><p>（2）div 标签</p><h3 id="1-3-5、为什么要使用-CSS"><a href="#1-3-5、为什么要使用-CSS" class="headerlink" title="1.3.5、为什么要使用 CSS"></a>1.3.5、为什么要使用 CSS</h3><p>（1）HTML 的缺陷：<br>        （1.1）不能使用多种设备<br>        （1.2）要求浏览器必需智能化足够庞大<br>        （1.3）数据和显示没有分开<br>        （1.4）功能不够强大</p><p>（2）CSS 优点<br>        （2.1）使数据和显示分开<br>        （2.2）降低网络流量<br>        （2.3）使整个网站视觉效果一致<br>        （2.4）使开发效率提高了（耦合性降低，一个人负责写 html,一个人负责写 CSS）</p><h3 id="1-3-6、为什么要初始化-CSS-格式"><a href="#1-3-6、为什么要初始化-CSS-格式" class="headerlink" title="1.3.6、为什么要初始化 CSS 格式"></a>1.3.6、为什么要初始化 CSS 格式</h3><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异</p><p>当然，初始化样式会对SEO（搜索引擎优化）有一定的影响，但鱼与熊掌不可兼得，但力求影响最小的情况下初始化</p><p>最简单的初始化方法：*{padding: 0 ;margin: 0;}（强烈不建议）</p><p>淘宝的样式初始化代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,hr,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,pre,filedest,<span class="selector-tag">legend</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;marging:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>tahoma,arial,\<span class="number">5</span>b8b\<span class="number">4</span>f53;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;<span class="attribute">font-size</span>: <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">address</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">dfn</span>,<span class="selector-tag">em</span>,<span class="selector-tag">var</span>&#123;<span class="attribute">font-style</span>: norma;&#125;</span><br><span class="line"><span class="selector-tag">code</span>,<span class="selector-tag">kbd</span>,pre,<span class="selector-tag">samp</span>&#123;<span class="attribute">font-family</span>:couriernew,courier,monospace;&#125;</span><br><span class="line">small&#123;<span class="attribute">font-size</span>: <span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:underline;&#125;</span><br><span class="line"><span class="selector-tag">sup</span>&#123;<span class="attribute">vertical-align</span>:text-top;&#125;</span><br><span class="line">sub&#123;<span class="attribute">vertical-align</span>:text-bottom;&#125;</span><br><span class="line"><span class="selector-tag">legend</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span><br><span class="line">fieldse,<span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">font-size</span>: <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-认识浏览器第一部分"><a href="#1-4-认识浏览器第一部分" class="headerlink" title="1.4 认识浏览器第一部分"></a>1.4 认识浏览器第一部分</h2><h3 id="1-4-1、浏览器分类"><a href="#1-4-1、浏览器分类" class="headerlink" title="1.4.1、浏览器分类"></a>1.4.1、浏览器分类</h3><p>（1）普通浏览器：Chrome、Edge、Firefox、Safari、Internet Explorer</p><p>（2）无壳浏览器（前端自动化测试工具）：PhantomJS、SlimerJS、CasperJS</p><p>（3）Webview：被本地 OS （操作系统）用来运行网页。把 Web 视图当做 Web 浏览器中的 iframe （在当前HTML页面插入一个文档）或者单个的 Tab运行在移动设备上的本地应用程序中（Hybird，如：iOS、Android、鸿蒙、Windows Mobile）</p><p>（4）常见的五大浏览器：IE、火狐（Firefox）、谷歌（Chrome）、Safari、欧朋（Opera）     </p><p>（5）浏览器份额（2021）<br><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20211107111837253-173431748.png" alt="image-20211107111835517"></p><p>（6）渲染引擎<br>            渲染引擎（浏览器内核）：浏览器中专门对代码进行解析渲染的部分<br>            不同公司推出的浏览器，内核也是不同的</p><table>    <tr>        <td>浏览器        </td>        <td>内核        </td>        <td>备注        </td>    </tr>    <tr>        <td>IE        </td>        <td>Trident        </td>        <td>IE、猎豹、360、百度        </td>    </tr>    <tr>        <td>FireFox        </td>        <td>Gecko        </td>        <td>火狐        </td>    </tr>    <tr>        <td>Safari        </td>        <td>Webkit        </td>        <td>苹果浏览器内核        </td>    </tr>    <tr>        <td>Chrome/Opera        </td>        <td>Blink        </td>        <td>Blink其实是Webkit        </td>    </tr></table><h3 id="1-4-2、Chrome浏览器"><a href="#1-4-2、Chrome浏览器" class="headerlink" title="1.4.2、Chrome浏览器"></a>1.4.2、Chrome浏览器</h3><p>（1）F12调试（追踪CSS样式、查看API（应用程序接口）返回数据的大小、禁用JS、显示已保存登录密码）  </p><p>​<a href="https://www.jianshu.com/p/e1010ead8c96">https://www.jianshu.com/p/e1010ead8c96</a></p><p>​<a href="https://www.cnblogs.com/lxhbky/p/9959587.html">https://www.cnblogs.com/lxhbky/p/9959587.html</a> </p><p>  (2)手机模式浏览（不同的手机浏览器有不同的HTTP_USER_AGENT,爬虫善于伪装这个值）</p><p>  (3)插件、离线安装插件、开发插件</p><p>（4)快捷键：收藏到收藏夹Ctrl+D、显示收藏夹Ctrl+Shift+B</p><p>（5）浏览器代理技术</p><p>（6）浏览器缓存、Web缓存机制（强缓存、协商缓存）</p><h3 id="1-4-3、HTTP的操作过程：从输入网址到获取页面发生了什么？"><a href="#1-4-3、HTTP的操作过程：从输入网址到获取页面发生了什么？" class="headerlink" title="1.4.3、HTTP的操作过程：从输入网址到获取页面发生了什么？"></a>1.4.3、HTTP的操作过程：从输入网址到获取页面发生了什么？</h3><p>（net.cn——&gt;<a href="http://www.net.cn(301)——>https://wanwang.aliyun.com/">www.net.cn(301)——&gt;https://wanwang.aliyun.com/</a>)</p><p>把域名解析位IP</p><p>(1)浏览器分析URL，搜索自己的页面缓存</p><p>(2)查询hosts文件(本机DNS服务)，是否有对应的特定IP</p><p>(3)浏览器搜索自己的DNS缓存，解析目标IP地址</p><p>(4)发起一个本地DNS系统调用</p><p>(5)浏览器以一个随机端口(软件端口号)向目标server发起了TCP连接请求，建立TCP连接(默认80端口)</p><p>(6)如果发起域名不是www开头，Sever给浏览器响应一个301重定向</p><p>(7)Web服务器收到请求，分析http header和http body,找出路由及参数，后端程序开始运行</p><p><strong>返回一个值200成功404地址不对500服务器的API、错了</strong></p><p>(8)后端程序给出一个return (HTML、json、字符串、int)</p><p>(9)负载均衡服务器将http请求发给反向代理服务器web集群</p><p><strong>把返回的结果存到缓存</strong></p><p>(10)Web服务器将结果返回给浏览器，并返回一个http响应(将HTML发送给浏览器)，释放TCP连接</p><p>(11)浏览器将结果放入自己的浏览器缓存</p><p>(12)浏览器分析结果，构建dom树</p><p><strong>渲染</strong></p><p>(13)构建渲染树</p><p>(14)布局渲染树</p><p>(15)绘制到屏幕上(将Web页面显示在显示器的当前浏览器的当前标签页中)</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210917113649515-897394337.png" alt="image-20210917113646493"></p><h3 id="1-4-4、浏览器缓存、缓存机制"><a href="#1-4-4、浏览器缓存、缓存机制" class="headerlink" title="1.4.4、浏览器缓存、缓存机制"></a>1.4.4、浏览器缓存、缓存机制</h3><p>（1）强缓存</p><p>（2）协商缓存</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20211111143139225-1280786605.png" alt="image-20211111143138201"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111143251533.png" alt="image-20211111143251533"></p><h3 id="1-4-5、HTTP-的特点"><a href="#1-4-5、HTTP-的特点" class="headerlink" title="1.4.5、HTTP 的特点"></a>1.4.5、HTTP 的特点</h3><p>(1)C&#x2F;S模式：B&#x2F;S（Server)（服务端模式）是C&#x2F;S（客户端模式）的特例</p><p>(2)无连接：遵从TCP协议、但不进行三次握手</p><p>(3)无状态：</p><p>(4)高可靠</p><p>(5)无状态特性简化了服务器设计</p><p>(6)面向文本的：不会被防火墙拦截</p><p>六个地址：任何一个数据包有两个网卡地址，两个IP地址、两个网口地址、</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111143606074.png" alt="image-20211111143606074"></p><h3 id="1-4-6、URL与URI"><a href="#1-4-6、URL与URI" class="headerlink" title="1.4.6、URL与URI"></a>1.4.6、URL与URI</h3><p>（1）URL：统一资源定位符(俗称网址)、协议</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111143846687.png" alt="image-20211111143846687"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210917114207416-702908882.png" alt="image-20210917114204609"></p><h3 id="1-4-7、MAC地址、IP地址、端口"><a href="#1-4-7、MAC地址、IP地址、端口" class="headerlink" title="1.4.7、MAC地址、IP地址、端口"></a>1.4.7、MAC地址、IP地址、端口</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930154257094-1947262908.png" alt="image-20210930154253425"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930154332411-195920252.png" alt="image-20210930154329373"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930154359058-357103820.png" alt="image-20210930154355978"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930154413482-1150678983.png" alt="image-20210930154410321">统一URL</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930154423337-1451162829.png" alt="image-20210930154419824"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111144200830.png" alt="image-20211111144200830"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111144235686.png" alt="image-20211111144235686"></p><h3 id="1-4-8、Cookie与Session（如何记住回话？HTTP是无状态的）"><a href="#1-4-8、Cookie与Session（如何记住回话？HTTP是无状态的）" class="headerlink" title="1.4.8、Cookie与Session（如何记住回话？HTTP是无状态的）"></a>1.4.8、Cookie与Session（如何记住回话？HTTP是无状态的）</h3><p>Cookie 主要用于以下三个页面：</p><ul><li><p>回话状态管理（如用户登录状态、购物车、或其他需要记录的消息）</p></li><li><p>个性化设置（如用户自定义设置、主题等）</p></li><li><p>浏览器行为跟踪（如跟踪分析用户行为等）<br><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111144817456.png" alt="image-20211111144817456"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111144858313.png" alt="image-20211111144858313"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111144921468.png" alt="image-20211111144921468"></p></li></ul><h3 id="1-5-前端页面数据渲染（网页数据展示方式）"><a href="#1-5-前端页面数据渲染（网页数据展示方式）" class="headerlink" title="1.5 前端页面数据渲染（网页数据展示方式）"></a>1.5 前端页面数据渲染（网页数据展示方式）</h3><h3 id="1-5-1、后端渲染（SSR）"><a href="#1-5-1、后端渲染（SSR）" class="headerlink" title="1.5.1、后端渲染（SSR）"></a>1.5.1、后端渲染（SSR）</h3><p>（1）后端连接 DB 、执行 SQL,生成 RS</p><p>（2）传 RS 给前端</p><p>（3）前端渲染 </p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111145320772.png" alt="image-20211111145320772"></p><h3 id="1-5-2、前端渲染（CSR）"><a href="#1-5-2、前端渲染（CSR）" class="headerlink" title="1.5.2、前端渲染（CSR）"></a>1.5.2、前端渲染（CSR）</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111145430699.png" alt="image-20211111145430699"></p><h2 id="1-6-项目开发岗位分工（开发组织、项目文档中经常要用到）"><a href="#1-6-项目开发岗位分工（开发组织、项目文档中经常要用到）" class="headerlink" title="1.6 项目开发岗位分工（开发组织、项目文档中经常要用到）"></a>1.6 项目开发岗位分工（开发组织、项目文档中经常要用到）</h2><p>（产品、开发、测试、运营）</p><h3 id="1-6-1、管理类"><a href="#1-6-1、管理类" class="headerlink" title="1.6.1、管理类"></a>1.6.1、管理类</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111145723740.png" alt="image-20211111145723740"></p><h3 id="1-6-4、系统类、综合类"><a href="#1-6-4、系统类、综合类" class="headerlink" title="1.6.4、系统类、综合类"></a>1.6.4、系统类、综合类</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111145942587.png" alt="image-20211111145942587"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111150024573.png" alt="image-20211111150024573"></p><h2 id="1-7-开发人员公共能力、公共素质"><a href="#1-7-开发人员公共能力、公共素质" class="headerlink" title="1.7 开发人员公共能力、公共素质"></a>1.7 开发人员公共能力、公共素质</h2><h3 id="1-7-1、道"><a href="#1-7-1、道" class="headerlink" title="1.7.1、道"></a>1.7.1、道</h3><p>（1）坐住板凳</p><p>（2）备份</p><p>（3）自学能力、解决问题的能力</p><h3 id="1-7-2、术"><a href="#1-7-2、术" class="headerlink" title="1.7.2、术"></a>1.7.2、术</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111150239288.png" alt="image-20211111150239288"></p><h2 id="1-8-一个合格前端-Coder的应有技能点"><a href="#1-8-一个合格前端-Coder的应有技能点" class="headerlink" title="1.8 一个合格前端 Coder的应有技能点"></a>1.8 一个合格前端 Coder的应有技能点</h2><h3 id="1-8-1、基本功"><a href="#1-8-1、基本功" class="headerlink" title="1.8.1、基本功"></a>1.8.1、基本功</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111150342007.png" alt="image-20211111150342007"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111150412712.png" alt="image-20211111150412712"></p><p>（6）常见 Web 安全漏洞：SQL 注入、XSS</p><h3 id="1-8-2、基本功加强基础版"><a href="#1-8-2、基本功加强基础版" class="headerlink" title="1.8.2、基本功加强基础版"></a>1.8.2、基本功加强基础版</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151010398.png" alt="image-20211111151010398"></p><h3 id="1-8-3、进阶"><a href="#1-8-3、进阶" class="headerlink" title="1.8.3、进阶"></a>1.8.3、进阶</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151037329.png" alt="image-20211111151037329"></p><h3 id="1-8-4、加分项"><a href="#1-8-4、加分项" class="headerlink" title="1.8.4、加分项"></a>1.8.4、加分项</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151229855.png" alt="image-20211111151229855"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151551144.png" alt="image-20211111151551144"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151655821.png" alt="image-20211111151655821"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151739043.png" alt="image-20211111151739043"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151804578.png" alt="image-20211111151804578"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111151940697.png" alt="image-20211111151940697"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111152003523.png" alt="image-20211111152003523"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111152021021.png" alt="image-20211111152021021"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111152140454.png" alt="image-20211111152140454"></p><h3 id="1-8-5、国内以-BAT-为首的各大互联网公司所用技术基本分析"><a href="#1-8-5、国内以-BAT-为首的各大互联网公司所用技术基本分析" class="headerlink" title="1.8.5、国内以 BAT 为首的各大互联网公司所用技术基本分析"></a>1.8.5、国内以 BAT 为首的各大互联网公司所用技术基本分析</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111152325502.png" alt="image-20211111152325502"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111152357112.png" alt="image-20211111152357112"></p><h3 id="1-9-前端工作流程"><a href="#1-9-前端工作流程" class="headerlink" title="1.9 前端工作流程"></a>1.9 前端工作流程</h3><h3 id="1-9-1、项目开发流程"><a href="#1-9-1、项目开发流程" class="headerlink" title="1.9.1、项目开发流程"></a>1.9.1、项目开发流程</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111154615665.png" alt="image-20211111154615665"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111154645361.png" alt="image-20211111154645361"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111154729166.png" alt="image-20211111154729166"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111154822873.png" alt="image-20211111154822873"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111154835810.png" alt="image-20211111154835810"></p><h3 id="1-9-2、前端切页面的主要工作内容"><a href="#1-9-2、前端切页面的主要工作内容" class="headerlink" title="1.9.2、前端切页面的主要工作内容"></a>1.9.2、前端切页面的主要工作内容</h3><p>（1）与后端约定接口</p><p>（2）基础工作</p><p>（3）命名规范</p><p>（4）公共样式提取</p><p>（5）公共组件封装</p><p>（6）界面分析</p><p>（7）切图、切页面</p><p>（8）PC版：PSD—&gt;HTML、CSS、JS</p><p>（9）手机版：PSD—&gt;HTML、CSS、JS</p><p>（10）Android版、iOS版：PSD—&gt;XML</p><p>（11）微信小程序版：PSD—&gt;HTML、CSS、JS （HTML—&gt;WHTML）、阿里生活号</p><p>（12）响应式设计</p><p>（13）交互UI设计</p><p>（14）浏览器兼容设计</p><p>（15）逻辑交互设计</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111155005483.png" alt="image-20211111155005483"></p><h1 id="第二章、网页开发基础"><a href="#第二章、网页开发基础" class="headerlink" title="第二章、网页开发基础"></a>第二章、网页开发基础</h1><h2 id="2-1-项目开发基础概念（基础知识）（全栈）"><a href="#2-1-项目开发基础概念（基础知识）（全栈）" class="headerlink" title="2.1 项目开发基础概念（基础知识）（全栈）"></a>2.1 项目开发基础概念（基础知识）（全栈）</h2><h3 id="2-1-1、网络基础"><a href="#2-1-1、网络基础" class="headerlink" title="2.1.1、网络基础"></a>2.1.1、网络基础</h3><p>（1）IP（每一个数据包都拥有2个MAC地址、2个IP地址、2个端口号）、域名、备案（CNNIC、GFW）、解析、CDN（内容分发网络）</p><table><thead><tr><th>数据库</th><th>URI</th><th>网络</th><th>服务</th><th>其他</th></tr></thead><tbody><tr><td>Oracle、1521</td><td>http、80</td><td>telnet、23</td><td>Nginx、80</td><td>git、9418</td></tr><tr><td>mysql、3306</td><td>https、443</td><td>windows远程桌面、3389</td><td>Apache、80</td><td>svn、3690</td></tr><tr><td>SQL Server、1433</td><td>ftp、20&#x2F;21</td><td>dns、53</td><td>Tomcat、8080</td><td>pcAnywhere、5632</td></tr><tr><td>DB2、5000</td><td></td><td>ssh、22</td><td>Weblogic、7001</td><td>QQ服务端、8000</td></tr><tr><td>PostgreSQL、5432</td><td></td><td>dhcp、546&#x2F;547</td><td>Elasticsearch、9200</td><td>QQ客户端、4000+、5000+</td></tr><tr><td>redis、6379</td><td></td><td>snmp、161</td><td>FastDFS、22122</td><td></td></tr><tr><td>memcached、11211</td><td></td><td>Socks代理服务、1080</td><td>ZooKeeper、2181</td><td></td></tr><tr><td>mongodb、27017</td><td></td><td>smtp、25(发)</td><td>ActiveMQ、8161</td><td></td></tr><tr><td></td><td></td><td>pop3、110(收)</td><td></td><td></td></tr></tbody></table><p>（2）域名主机记录就是域名前缀，常见用法有：</p><p>​（2.1）www:解析后的域名为<a href="http://www.aliyun.com/">www.aliyun.com</a></p><p>​（2.2）@：直接解析主域名 aliyun.com</p><p>​（2.3）*：泛解析，匹配其他所有域名 *.aliyun.com</p><p>​（2.4）mail:将域名解析为mail.aliyun.com，通常用于解析邮箱服务器</p><p>​（2.5）二级域名：如：abc.aliyun.com，填写abc</p><p>​（2.6）手机网站：如：m.aliyun.com，填写m</p><p>（3）域名记录类型：A(将域名指向一个IPV4地址)、CNAME（将域名指向另外一个域名）</p><p>（4）IP 设置（子网掩码、DNS、网关、DHCP）、代理</p><p>（5）局域网访问、目录共享、内网访问</p><p>（6）hosts文件（本机DNS服务，C：\Windows\System32\drivers\etc)、localhost、127.0.0.1</p><p>（7）防火墙、各种常用端口号（TCP、UDP）、入站规则、出站规则</p><p>（8）基础网络命令（shell&#x2F;CMD）：ping、iponfig&#x2F;Ifonfig、netstat（服务器已启动服务统计）、route print（列出路由表）、</p><p>​   netsh winsock reset（重置winsock目录，恢复网络，重启计算机后，需重新配置IP）、</p><p>​   net user administrator &#x2F;active:yes（启用Windows的超级管理员账号）、net start、net stop、</p><p>​   tracert（查看路由过程）、nslookup（域名解析）、arp</p><p>（9）套接字Socket编程：Socket库，用于调用网络功能的程序组件集合</p><p>（10）其他：NAT</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111155307018.png" alt="image-20211111155307018"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111155325917.png" alt="image-20211111155325917"></p><h3 id="2-2-2系统服务配置"><a href="#2-2-2系统服务配置" class="headerlink" title="2.2.2系统服务配置"></a>2.2.2系统服务配置</h3><p>（配置OS的各种系统服务）（Windows、Linux、MacOS）</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111155425844.png" alt="image-20211111155425844"></p><p>服务器分类：</p><ol><li>本机开发环境部署</li><li>线上开发服务器(内网、外网)、S V N、GIT</li><li>线上测试服务器</li><li>线上体验服务器(兼做灰度发布服务器)</li><li>正式服务器集群（4大Linux:RedHat、<strong>CentOS</strong>、Debian、<strong>Ubuntu</strong>）</li></ol><h3 id="2-2-3、数据库、后端、前端（JS）所使用语言的常用共性知识点"><a href="#2-2-3、数据库、后端、前端（JS）所使用语言的常用共性知识点" class="headerlink" title="2.2.3、数据库、后端、前端（JS）所使用语言的常用共性知识点"></a>2.2.3、数据库、后端、前端（JS）所使用语言的常用共性知识点</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111155717895.png" alt="image-20211111155717895"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111155732636.png" alt="image-20211111155732636"></p><h3 id="2-2-4、前后端交互"><a href="#2-2-4、前后端交互" class="headerlink" title="2.2.4、前后端交互"></a>2.2.4、前后端交互</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20211111155855989-1839814110.png" alt="image-20211111155837372"></p><h3 id="2-2-5、安全"><a href="#2-2-5、安全" class="headerlink" title="2.2.5、安全"></a>2.2.5、安全</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160006246.png" alt="image-20211111160006246"></p><h3 id="2-2-6、性能"><a href="#2-2-6、性能" class="headerlink" title="2.2.6、性能"></a>2.2.6、性能</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160028912.png" alt="image-20211111160028912"></p><h3 id="2-2-7、其他"><a href="#2-2-7、其他" class="headerlink" title="2.2.7、其他"></a>2.2.7、其他</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160124087.png" alt="image-20211111160124087"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160245119.png"></p><h2 id="2-2-网页开发基础概念"><a href="#2-2-网页开发基础概念" class="headerlink" title="2.2 网页开发基础概念"></a>2.2 网页开发基础概念</h2><h3 id="2-2-1、网页分类（网页拓展名）"><a href="#2-2-1、网页分类（网页拓展名）" class="headerlink" title="2.2.1、网页分类（网页拓展名）"></a>2.2.1、网页分类（网页拓展名）</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160522242.png" alt="image-20211111160522242"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930164311615-1389641920.png" alt="image-20210930164308263"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/2510762-20210930164342045-699252132.png" alt="image-20210930164339045"></p><h3 id="2-2-2、正斜杠（-）与反斜杠（-）"><a href="#2-2-2、正斜杠（-）与反斜杠（-）" class="headerlink" title="2.2.2、正斜杠（&#x2F;）与反斜杠（\）"></a>2.2.2、正斜杠（&#x2F;）与反斜杠（\）</h3><h3 id><a href="#" class="headerlink" title></a></h3><table><thead><tr><th>正斜杠（forward slash）（&#x2F;)</th><th>反斜杠（backslash）（\）</th></tr></thead><tbody><tr><td>在Windows中，正斜杠&#x2F;表示除法，用来进行整除运算</td><td>Windows文件浏览器（资源管理器）上使用 反斜杠 \</td></tr><tr><td>在unix系统中，&#x2F;表示目录</td><td>在Windows系统中，\用来表示目录</td></tr><tr><td>由于web遵循unix命名，所以在网址（URL）中，&#x2F;表示目录</td><td>\双反斜线 在Windows里表示绝对地址的第一项，比如后面跟上IP地址的话，就是需要打开这个IP地址的网络共享资源</td></tr><tr><td>http就是正斜杠</td><td>反斜杠”\“是电脑出现了之后为了表示程序设计里的特殊含义才发明的专用标点，就是说，除了程序设计领域外，任何地方你都不应该使用反斜杠的时候，请永远使用正斜杠”&#x2F;“</td></tr></tbody></table><h3 id="2-2-3、绝对路径、相对路径"><a href="#2-2-3、绝对路径、相对路径" class="headerlink" title="2.2.3、绝对路径、相对路径"></a>2.2.3、绝对路径、相对路径</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160703816.png" alt="image-20211111160703816"></p><h3 id="2-2-4、Web-图片格式"><a href="#2-2-4、Web-图片格式" class="headerlink" title="2.2.4、Web 图片格式"></a>2.2.4、Web 图片格式</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160854051.png" alt="image-20211111160854051"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111160957781.png" alt="image-20211111160957781"></p><h3 id="2-2-5、图像技术"><a href="#2-2-5、图像技术" class="headerlink" title="2.2.5、图像技术"></a>2.2.5、图像技术</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161046629.png" alt="image-20211111161046629"></p><h3 id="2-2-6、动图"><a href="#2-2-6、动图" class="headerlink" title="2.2.6、动图"></a>2.2.6、动图</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161204994.png" alt="image-20211111161204994"></p><h3 id="2-2-7、语义化标签及优点"><a href="#2-2-7、语义化标签及优点" class="headerlink" title="2.2.7、语义化标签及优点"></a>2.2.7、语义化标签及优点</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161253406.png" alt="image-20211111161253406"></p><h3 id="2-2-8、网页中的特殊符号"><a href="#2-2-8、网页中的特殊符号" class="headerlink" title="2.2.8、网页中的特殊符号"></a>2.2.8、网页中的特殊符号</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161338369.png" alt="image-20211111161338369"></p><h3 id="2-2-9、长度单位（WebAPP、H5）"><a href="#2-2-9、长度单位（WebAPP、H5）" class="headerlink" title="2.2.9、长度单位（WebAPP、H5）"></a>2.2.9、长度单位（WebAPP、H5）</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161457975.png" alt="image-20211111161457975"></p><h3 id="2-2-10、Android、iOS、鸿蒙中的长度单位（NativeAPP）"><a href="#2-2-10、Android、iOS、鸿蒙中的长度单位（NativeAPP）" class="headerlink" title="2.2.10、Android、iOS、鸿蒙中的长度单位（NativeAPP）"></a>2.2.10、Android、iOS、鸿蒙中的长度单位（NativeAPP）</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161602843.png" alt="image-20211111161602843"></p><h3 id="2-2-11、网页颜色、web-安全色"><a href="#2-2-11、网页颜色、web-安全色" class="headerlink" title="2.2.11、网页颜色、web 安全色"></a>2.2.11、网页颜色、web 安全色</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161654057.png" alt="image-20211111161654057"></p><h3 id="2-2-12、HTML与CSS-的结合方式"><a href="#2-2-12、HTML与CSS-的结合方式" class="headerlink" title="2.2.12、HTML与CSS 的结合方式"></a>2.2.12、HTML与CSS 的结合方式</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161757027.png" alt="image-20211111161757027"><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111161825501.png" alt="image-20211111161825501"></p><h3 id="2-2-13、其他"><a href="#2-2-13、其他" class="headerlink" title="2.2.13、其他"></a>2.2.13、其他</h3><p>（1）注释</p><table><thead><tr><th>HTML注释</th><th><!-- 注释内容--></th></tr></thead><tbody><tr><td>CSS注释</td><td>&#x2F;* 注释内容*&#x2F;</td></tr><tr><td>Javascript 单行注释</td><td>&#x2F;&#x2F;注释内容</td></tr><tr><td>Javascript 多行注释</td><td>&#x2F;* 注释内容 *&#x2F;</td></tr></tbody></table><p>（2）驼峰命名法</p><p>​(2.1)大驼峰：每个单词首字母均大写。（常用于类名、属性、命名空间等、public class DataBaseUser）</p><p>​(2.2)小驼峰：除第一个单词之外，其他单词首字母大写。（变量一般用小驼峰标识、int myStudentCount）</p><p>（3）单引号、双引号、转义符、多重引号</p><p>（4）代码风格：统一命名，非中文、非空格、缩进、格式化</p><p>（5）W3C标准：是一系列标准的集合。网页主要由三部分组成：结构（Structure)、表现（Presentation）和行为（Behavior）</p><h2 id="2-3-HTML"><a href="#2-3-HTML" class="headerlink" title="2.3 HTML"></a>2.3 HTML</h2><h3 id="2-3-1、单标签（自闭和）和双标签"><a href="#2-3-1、单标签（自闭和）和双标签" class="headerlink" title="2.3.1、单标签（自闭和）和双标签"></a>2.3.1、单标签（自闭和）和双标签</h3><p>（1）HTML常见的单标签有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta&gt;&lt;!--可提供有关某个 HTML 元素的元信息 (meta-information)，比如描述、针对搜索引擎的关键词以及刷新频率。--&gt;</span><br><span class="line">&lt;link&gt;&lt;!--定义两个链接文档之间的联系--&gt;</span><br><span class="line">&lt;br&gt;&lt;!--换行--&gt;</span><br><span class="line">&lt;hr&gt;&lt;!--水平线--&gt;</span><br><span class="line">&lt;img&gt;&lt;!--图片--&gt;</span><br><span class="line">&lt;input&gt;&lt;!--规定了用户可以在其中输入数据的输入字段--&gt;</span><br></pre></td></tr></table></figure><p>（2）HTML常见双标签有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="comment">&lt;!--CSS的样式表，一般写在head标签内--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--在其中写入JavaScript代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--段落--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="comment">&lt;!--加粗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="comment">&lt;!--斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="comment">&lt;!--添加下划线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="comment">&lt;!--删除线，在文本中间--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--超链接--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--定义文本中的一个部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!--对行内元素进行组合--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="comment">&lt;!--图表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--图表中的行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!--图表中的单元格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="comment">&lt;!--表头单元格--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="comment">&lt;!--表单--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2、块-行元素和行内-内联元素"><a href="#2-3-2、块-行元素和行内-内联元素" class="headerlink" title="2.3.2、块&#x2F;行元素和行内&#x2F;内联元素"></a>2.3.2、块&#x2F;行元素和行内&#x2F;内联元素</h3><p>（1）常见块&#x2F;行元素 一个标签占一行，自动换行</p><table>    <tr>        <td><strong>块元素的特点</strong></td>    </tr>    <tr>        <td><strong>（1.1）块元素一行一个，独占一行，自动换行。大多数为结构性标签。</strong></td>    </tr>    <tr>        <td><strong>（1.2）不给宽度时，，默认是父亲的100%</strong></td>    </tr>    <tr>        <td><strong>（1.3）可设置宽、高、边距</strong></td>    </tr>    <tr>        <td><strong>（1.4）可以容纳其他块级标签和行内标签（p标签除外），p标签不可以包裹块级标签</strong></td>    </tr></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">ul 无序列表 </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">ol 有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>21<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">dl 自定义列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span><span class="tag">&lt;/<span class="name">marquee</span>&gt;</span><span class="comment">&lt;!--滑动--&gt;</span></span><br></pre></td></tr></table></figure><p>（2）常见行内&#x2F;内联元素：一行可以有多个同类型标签 <strong>display:inline</strong></p><table><thead><tr><th>行内元素的特点：</th></tr></thead><tbody><tr><td>（2.1）相邻行内元素在水平直线上横排显示，一行可以显示多个</td></tr><tr><td>（2.2）width无效，height无效，margin上下无效，padding上下无效（只对自身有效，不影响其他元素）。可以设置 line-height</td></tr><tr><td>（2.3）默认宽度就是它本身内容的宽度，由内容撑开</td></tr><tr><td>（2.4）块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素（a 标签除外）</td></tr><tr><td>（2.5） a 标签不能包含 a 标签</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span>下标</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span>上标</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="comment">&lt;!--为input元素定义标注--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="comment">&lt;!--定义一个多行的文本输入控件--&gt;</span></span><br><span class="line">下拉列表：<span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）行内块元素：<strong>display:inline-block</strong></p><table><thead><tr><th>行内块元素 的特点</th></tr></thead><tbody><tr><td>（1）和相邻行内元素（行内块）在一行上，但是之间会有空白滤掉，一行可以显示多个</td></tr><tr><td>（2）默认宽度就是它本身内容的宽度</td></tr><tr><td>（3）高度、行高、外边距（margin)以及内边框（padding）都可以控制</td></tr></tbody></table><p>（4）总结</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111163358822.png" alt="image-20211111163358822"></p><p>（5）display 的各种值</p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111163500566.png" alt="image-20211111163500566"></p><h3 id="2-3-3、表格"><a href="#2-3-3、表格" class="headerlink" title="2.3.3、表格"></a>2.3.3、表格</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111163604005.png" alt="image-20211111163604005"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111163636030.png" alt="image-20211111163636030"></p><h3 id="2-3-4、DIV-标签"><a href="#2-3-4、DIV-标签" class="headerlink" title="2.3.4、DIV 标签"></a>2.3.4、DIV 标签</h3><p>（1）空的 div 是没有高度的（如果子元素全部浮动，则父盒子会高度塌陷）</p><p>（2）有内容的 div 其高度取决于内容的高度</p><p>（3）如果没有指定 float 属性，div 的宽度将和沾满父元素的宽度（不管是不是空的）</p><p>（4）如果指定了 float 属性，div 的宽度将取决于内部元素的宽度（所以，空的div指定了float属性后既没有高度也没有宽度）</p><h3 id="2-3-5、图像标签img"><a href="#2-3-5、图像标签img" class="headerlink" title="2.3.5、图像标签img"></a>2.3.5、图像标签img</h3><p>&lt;img&gt;是一个可替换元素，它的 display 属性的默认值是 inline。但是它的默认分辨率是由被嵌入的图片的原始高度来确定的，使得它就像 inline-block 一样。</p><p>你可以设置为 border&#x2F;border-radius、padding&#x2F;margin、width、height等CSS属性。</p><p>&lt;img&gt;没有基线（baseline），这意味着，当在一个行内格式的上下文中使用 vertical-align:baseline 时，图像的底部将会与容器的文字基线对齐。</p><p>（1）alt属性指定替代文本，title指的是鼠标移到元素上时给的提示信息</p><p>（2）讲鼠标移至图片位置时显示“提示2”</p><p>（3）当图片路径错误或网速太慢时，图片位置就会显示“提示1”</p><h3 id="2-3-6、超链接、锚点"><a href="#2-3-6、超链接、锚点" class="headerlink" title="2.3.6、超链接、锚点"></a>2.3.6、超链接、锚点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;a.php&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/a.php&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:func_a();&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:a@qq.com&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10086&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（1）_blank 在新窗口中打开被链接文档</p><p>（2）_self 默认，在相同的框架中打开被链接文档</p><p>（3）_parent 在父框架集中打开被链接文档</p><p>（4）_top 在整个窗口中打开被链接文档</p><h3 id="2-3-7、表单、表单基本验证、正则表达式"><a href="#2-3-7、表单、表单基本验证、正则表达式" class="headerlink" title="2.3.7、表单、表单基本验证、正则表达式"></a>2.3.7、表单、表单基本验证、正则表达式</h3><table>    <tr>        <th>form标签</th>        <th>供用户输入的HTML表单</th>    </tr>    <tr>        <td>&lt;input&gt;标签</td>        <td>用户可以在其中输入数据的输入字段</td>    </tr>    <tr>        <td></td>        <td>text<br>            password<br>            hidden<br>            reset<br>            submit<br>            button<br>            file<br>            checkbox<br>            radio<br>            <br>            <br>            color<br>            date<br>            datemine<br>            email<br>            image<br>            month<br>            number<br>            range<br>            search<br>            tel<br>            time<br>            url<br>            week        </td>    </tr>    <tr>        <td>&lt;select&gt;&lt;/select&gt;标签<br>            &lt;option&gt;&lt;/option&gt;标签        </td>        <td>下拉列表，标签定义了列表中的可用选项</td>    </tr>    <tr>        <td>&lt;textarea&gt;&lt;/textarea&gt;标签</td>        <td>多行的文本输入控件</td>    </tr>    <tr>        <td>&lt;button&gt;&lt;/button&gt;标签</td>        <td>按钮</td>    </tr>    <tr>        <td>&lt;label&gt;&lt;/label&gt;标签</td>        <td>为&lt;input&gt;元素定义标注</td>    </tr>    <tr>        <td></td>        <td>label元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性<br>            如果说你在label元素内点击文本，就会触发此控件。<br>            就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。        </td>    </tr></table><h3 id="2-3-8、列表"><a href="#2-3-8、列表" class="headerlink" title="2.3.8、列表"></a>2.3.8、列表</h3><p>（1）ul 无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li>11</li>    <li>12</li></ul><p>（2）ol 有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>21<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol>    <li>21</li>    <li>22</li></ol><p>（3）dl 自定义列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>31</dt></dl><p>导航条常见方案（历史包袱、习惯、兼容、语义化）</p><p>（1）ul&gt;li&gt;a</p><p>（2）nav&gt;a</p><h3 id="2-3-9、iframe-标签"><a href="#2-3-9、iframe-标签" class="headerlink" title="2.3.9、iframe 标签"></a>2.3.9、iframe 标签</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111164444309.png" alt="image-20211111164444309"></p><h3 id="2-4-认识浏览器的第二部分"><a href="#2-4-认识浏览器的第二部分" class="headerlink" title="2.4 认识浏览器的第二部分"></a>2.4 认识浏览器的第二部分</h3><h3 id="2-4-1、浏览器的组成"><a href="#2-4-1、浏览器的组成" class="headerlink" title="2.4.1、浏览器的组成"></a>2.4.1、浏览器的组成</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111164918105.png" alt="image-20211111164918105"></p><h3 id="2-4-2、常见浏览器内核（渲染引擎）"><a href="#2-4-2、常见浏览器内核（渲染引擎）" class="headerlink" title="2.4.2、常见浏览器内核（渲染引擎）"></a>2.4.2、常见浏览器内核（渲染引擎）</h3><table>    <tr>        <td>浏览器        </td>        <td>内核        </td>        <td>备注        </td>    </tr>    <tr>        <td>IE        </td>        <td>Trident        </td>        <td>IE、猎豹、360、百度        </td>    </tr>    <tr>        <td>FireFox        </td>        <td>Gecko        </td>        <td>火狐        </td>    </tr>    <tr>        <td>Safari        </td>        <td>Webkit        </td>        <td>苹果浏览器内核        </td>    </tr>    <tr>        <td>Chrome/Opera        </td>        <td>Blink        </td>        <td>Blink其实是Webkit        </td>    </tr></table><table><thead><tr><th>浏览器</th><th>原内核</th><th>现内核</th><th>备注</th></tr></thead><tbody><tr><td>Safari</td><td>Webkit</td><td>Webkit</td><td>苹果开源项目<br>Safari、脚本使用 JavaScriptCore引擎<br>Chrome、脚本使用Chrome自己的V8引擎</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165053506.png" alt="image-20211111165053506"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165133721.png" alt="image-20211111165133721"></p><h3 id="2-4-3、浏览器工作原理"><a href="#2-4-3、浏览器工作原理" class="headerlink" title="2.4.3、浏览器工作原理"></a>2.4.3、浏览器工作原理</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165214575.png" alt="image-20211111165214575"></p><h3 id="2-4-4、屏幕、浏览器、document的body，三种不同的宽高"><a href="#2-4-4、屏幕、浏览器、document的body，三种不同的宽高" class="headerlink" title="2.4.4、屏幕、浏览器、document的body，三种不同的宽高"></a>2.4.4、屏幕、浏览器、document的body，三种不同的宽高</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165309415.png" alt="image-20211111165309415"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165332458.png" alt="image-20211111165332458"></p><h3 id="2-4-5、请求报文与浏览器响应信息。"><a href="#2-4-5、请求报文与浏览器响应信息。" class="headerlink" title="2.4.5、请求报文与浏览器响应信息。"></a>2.4.5、请求报文与浏览器响应信息。</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165425373.png" alt="image-20211111165425373"></p><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165516792.png" alt="image-20211111165516792"></p><h3 id="2-4-6、HTTP-状态码"><a href="#2-4-6、HTTP-状态码" class="headerlink" title="2.4.6、HTTP 状态码"></a>2.4.6、HTTP 状态码</h3><p><img src="/2024/07/07/Web/%E7%BD%91%E9%A1%B5/image-20211111165632355.png" alt="image-20211111165632355"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考试</title>
      <link href="/2024/07/07/Web/%E8%80%83%E8%AF%95/"/>
      <url>/2024/07/07/Web/%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章、概述"><a href="#第一章、概述" class="headerlink" title="第一章、概述"></a>第一章、概述</h1><h2 id="1-0-网页的本质"><a href="#1-0-网页的本质" class="headerlink" title="1.0 网页的本质"></a>1.0 网页的本质</h2><h3 id="1-0-1、网页的本质就是文本文件"><a href="#1-0-1、网页的本质就是文本文件" class="headerlink" title="1.0.1、网页的本质就是文本文件"></a>1.0.1、网页的本质就是文本文件</h3><p>（1）所见即所得（F5、Ctrl+F5)、主要内容就是 BOM（浏览器对象模型）+DOM（文档对象模型）、纯文本</p><p>（2）一堆标签（元素）的组合、标签间可以嵌套，有属性继承关系</p><p>（3）HTML与CSS没有语言结构</p><p>（4）Chrome 浏览器下，按F12，可以跟组超链接 a 等标签</p><p>（5）一堆网页，通过 a 超链接这个标签（元素）进行关联、跳转</p><p>（6）一切皆文件、一切皆增删查改、最有用的是行列二维表</p><h3 id="1-0-2、网站就是一个链接的页面集合"><a href="#1-0-2、网站就是一个链接的页面集合" class="headerlink" title="1.0.2、网站就是一个链接的页面集合"></a>1.0.2、网站就是一个链接的页面集合</h3><h3 id="1-0-3、记事本可以用来编写HTML文件"><a href="#1-0-3、记事本可以用来编写HTML文件" class="headerlink" title="1.0.3、记事本可以用来编写HTML文件"></a>1.0.3、记事本可以用来编写HTML文件</h3><p>（1）文本编辑器：记事本可以用来编写HTML文件</p><p>（2）文件夹结构</p><p>（3）Web浏览器</p><table><thead><tr><th><strong>缩写HTML</strong></th><th>中文名称</th><th>英文名称</th><th></th></tr></thead><tbody><tr><td>HTML</td><td>超文本标记语言</td><td>Hyper Text Markup Language</td><td>骨架、房屋框架</td></tr><tr><td>CSS</td><td>层叠样式表（或级联样式表）</td><td>Cascading Style Sheets</td><td>血肉、装修</td></tr><tr><td>ECMAScript 6、ES6、JavaScript 2015</td><td>javaScript编程语言（网页脚本语言)</td><td>JavaScript Programming Language</td><td>行动、交互</td></tr><tr><td>BOM</td><td>浏览器对象模型</td><td>Browser Object Model</td><td></td></tr><tr><td>DOM</td><td>文档对象模型</td><td>Document Object Model</td><td></td></tr><tr><td>URL</td><td>统一资源定位符</td><td>Uniform Resoure Locator</td><td></td></tr><tr><td>浏览器 API</td><td>Web 应用程序接口</td><td>Web API</td><td></td></tr><tr><td>HTTP</td><td>超文本传输协议</td><td>Hyper Text Transfer Protocol</td><td></td></tr><tr><td>jSON</td><td>JavaScript对象表示</td><td>JavaScript Object Notation</td><td></td></tr></tbody></table><h2 id="1-1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX"><a href="#1-1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX" class="headerlink" title="1.1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX)"></a>1.1用记事本写一个网页，用浏览器打开这个网页（Markdown、LaTeX)</h2><h3 id="1-1-7、程序-bug-的常见分类"><a href="#1-1-7、程序-bug-的常见分类" class="headerlink" title="1.1.7、程序 bug 的常见分类"></a>1.1.7、程序 bug 的常见分类</h3><p>（1）不能服务、连接拒绝、404、500</p><p>（2）严重影响用户体验、功能不好使</p><p>（3）某概率下出问题、给用户不好的体验（兼容）</p><p>（4）某概率的后端数据问题</p><p>（5）现阶段可不支持、后续升级解决</p><h2 id="1-1-8、各种快捷键-考在浏览器中常用的"><a href="#1-1-8、各种快捷键-考在浏览器中常用的" class="headerlink" title="1.1.8、各种快捷键(考在浏览器中常用的)"></a>1.1.8、各种快捷键(考在浏览器中常用的)</h2><p> <img src="/2024/07/07/Web/%E8%80%83%E8%AF%95/2510762-20211211202650659-143010980.png" alt="image-20211211202647888"></p><h3 id="1-1-11、浏览器访问本地-HTML-页面与远程-HTTP-页面的区别"><a href="#1-1-11、浏览器访问本地-HTML-页面与远程-HTTP-页面的区别" class="headerlink" title="1.1.11、浏览器访问本地 HTML 页面与远程 HTTP 页面的区别"></a>1.1.11、浏览器访问本地 HTML 页面与远程 HTTP 页面的区别</h3><p>（1）file 协议是访问你本机的文件资源</p><p>​file协议用于访问本机计算机中的文件，就如同在 Windows 资源管理区中打开文件一样，注意它是针对本地（本机）的。</p><p>​file 协议只能在本地访问。file 只是简单的请求本地文件，与在 Windows 中找到文件，右键，打开方式，用浏览器打开看到的效果是一致的</p><p>（2）HTTP 是搭建了服务器</p><p>​HTTP访问本地 HTML，是在本地起了一台 HTTP 服务器，然后你访问自己电脑上的本地服务器，HTTP服务区再去访问你本机的文件资源。</p><p>​本地搭建了 HTTP 服务器，开放端口之后，别人也可以通过 HTTP 访问到你电脑里的页面，但是 file 协议做不到</p><h2 id="1-2HTML骨架"><a href="#1-2HTML骨架" class="headerlink" title="1.2HTML骨架"></a>1.2HTML骨架</h2><h3 id="1-2-1、HTML骨架标签分类"><a href="#1-2-1、HTML骨架标签分类" class="headerlink" title="1.2.1、HTML骨架标签分类"></a>1.2.1、HTML骨架标签分类</h3><table>    <tr>        <th>标签名</th>        <th>定义</th>        <th>说明</th>    </tr>    <tr>        <td>&lt;html&gt;&lt;/html&gt;</td>        <td>HTML标签</td>        <td>页面中最大的标签</td>    </tr>    <tr>        <td>&lt;head&gt;&lt;/head&gt;</td>        <td>文档的头部</td>        <td>注意在head标签中我们必须要设置的标签是title</td>    </tr>    <tr>        <td>&lt;title&gt;&lt;/title&gt;</td>        <td>文档的标题</td>        <td>让页面拥有一个自己的网页标题</td>    </tr>    <tr>        <td>&lt;body&gt;&lt;/body&gt;</td>        <td>文档的主体</td>        <td>元素包含文档的所有内容，页面内容一般是放到body里面的</td>    </tr></table><h3 id="1-2-2、快速生成-HTML的骨架"><a href="#1-2-2、快速生成-HTML的骨架" class="headerlink" title="1.2.2、快速生成 HTML的骨架"></a>1.2.2、快速生成 HTML的骨架</h3><p>（1）在VS Code 中，新建一个 html 文件，保存（先选扩展名，再输入文件名，再选择保存位置），输入<code>html:5</code>，然后按 Tab 键</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>留言板</h3><form method="post" action onsubmit="test1();">    姓名：<input type="text" maxlength="10" id="userid" name="userid"><br>    密码：<input type="password" maxlength="15" required id="passwd" name="passid"><br>    日趋：<input type="date"><br>    <textarea name rows="5" cols="40"></textarea><br>    <input type="submit" value="提交" onclick="myFunction()">    <input type="reset" value="重置"></form><script>function myFunction(){    alert("张三\n"+"123456")}</script><h2 id="1-3-基础元素标签、基础属性、style元素、布局类元素"><a href="#1-3-基础元素标签、基础属性、style元素、布局类元素" class="headerlink" title="1.3 基础元素标签、基础属性、style元素、布局类元素"></a>1.3 基础元素标签、基础属性、style元素、布局类元素</h2><p>（1）所有 dom 分 3 类：标签&#x2F;元素，属性，值</p><p>（2）标签名大小写不敏感，CSS class 大小写敏感</p><h3 id="1-3-2、基础属性"><a href="#1-3-2、基础属性" class="headerlink" title="1.3.2、基础属性"></a>1.3.2、基础属性</h3><p>（1）id、name、class、style、title、align（水平对齐）、valign（数值对齐）、bgcolor（背景颜色）</p><p>​每一个标签、每一个属性、每一个值，都是一个DOM</p><h3 id="1-3-3、style元素"><a href="#1-3-3、style元素" class="headerlink" title="1.3.3、style元素"></a>1.3.3、style元素</h3><p>大幅减少 DOM 的数量，初步代码封装（多次引用、修改方便）、进一步代码管理（多人协作）</p><p>（1）style满天飞（标签自己使用）</p><p>（2）<code>&lt;style&gt;&lt;/style&gt;</code> （单页面内共享，自己提高开发效率）</p><p>（3）<code>&lt;link&gt;</code>（多页面共享，团队合作）</p><h3 id="1-3-4、布局类元素"><a href="#1-3-4、布局类元素" class="headerlink" title="1.3.4、布局类元素"></a>1.3.4、布局类元素</h3><p>（1）table 标签</p><p>（2）div 标签</p><h2 id="1-4-认识浏览器第一部分"><a href="#1-4-认识浏览器第一部分" class="headerlink" title="1.4 认识浏览器第一部分"></a>1.4 认识浏览器第一部分</h2><h3 id="1-4-2、Chrome浏览器"><a href="#1-4-2、Chrome浏览器" class="headerlink" title="1.4.2、Chrome浏览器"></a>1.4.2、Chrome浏览器</h3><p>（1）F12调试（追踪CSS样式、查看API（应用程序接口）返回数据的大小、禁用JS、显示已保存登录密码）  </p><p>​<a href="https://www.jianshu.com/p/e1010ead8c96">https://www.jianshu.com/p/e1010ead8c96</a></p><p>​<a href="https://www.cnblogs.com/lxhbky/p/9959587.html">https://www.cnblogs.com/lxhbky/p/9959587.html</a> </p><p>  (2)手机模式浏览（不同的手机浏览器有不同的HTTP_USER_AGENT,爬虫善于伪装这个值）</p><h3 id="1-4-3、HTTP的操作过程：从输入网址到获取页面发生了什么？"><a href="#1-4-3、HTTP的操作过程：从输入网址到获取页面发生了什么？" class="headerlink" title="1.4.3、HTTP的操作过程：从输入网址到获取页面发生了什么？"></a>1.4.3、HTTP的操作过程：从输入网址到获取页面发生了什么？</h3><p>（net.cn——&gt;<a href="http://www.net.cn(301)——>https://wanwang.aliyun.com/">www.net.cn(301)——&gt;https://wanwang.aliyun.com/</a>)</p><p>把域名解析位IP</p><p>(1)浏览器分析URL，搜索自己的页面缓存</p><p>(2)查询hosts文件(本机DNS服务)，是否有对应的特定IP</p><p>(3)浏览器搜索自己的DNS缓存，解析目标IP地址</p><p>(4)发起一个本地DNS系统调用</p><p>(5)浏览器以一个随机端口(软件端口号)向目标server发起了TCP连接请求，建立TCP连接(默认80端口)</p><p>(6)如果发起域名不是www开头，Sever给浏览器响应一个301重定向</p><p>(7)Web服务器收到请求，分析http header和http body,找出路由及参数，后端程序开始运行</p><p><strong>返回一个值200成功404地址不对500服务器的API、错了</strong></p><p>(8)后端程序给出一个return (HTML、json、字符串、int)</p><p>(9)负载均衡服务器将http请求发给反向代理服务器web集群</p><p><strong>把返回的结果存到缓存</strong></p><p>(10)Web服务器将结果返回给浏览器，并返回一个http响应(将HTML发送给浏览器)，释放TCP连接</p><p>(11)浏览器将结果放入自己的浏览器缓存</p><p>(12)浏览器分析结果，构建dom树</p><p><strong>渲染</strong></p><p>(13)构建渲染树</p><p>(14)布局渲染树</p><p>(15)绘制到屏幕上(将Web页面显示在显示器的当前浏览器的当前标签页中)</p><h3 id="1-4-5、HTTP-的特点-简答"><a href="#1-4-5、HTTP-的特点-简答" class="headerlink" title="1.4.5、HTTP 的特点(简答)"></a>1.4.5、HTTP 的特点(简答)</h3><p>(1)C&#x2F;S模式：B&#x2F;S（Server)（服务端模式）是C&#x2F;S（客户端模式）的特例</p><p>(2)无连接：遵从TCP协议、但不进行三次握手</p><p>(3)无状态：</p><p>(4)高可靠</p><p>(5)无状态特性简化了服务器设计</p><p>(6)面向文本的：不会被防火墙拦截</p><h3 id="1-4-6、URL与URI"><a href="#1-4-6、URL与URI" class="headerlink" title="1.4.6、URL与URI"></a>1.4.6、URL与URI</h3><p>（1）URL：统一资源定位符(俗称网址)、协议</p><p><img src="/2024/07/07/Web/%E8%80%83%E8%AF%95/2510762-20211211210831464-155275418.png" alt="image-20211111143846687"></p><h3 id="1-5-前端页面数据渲染（网页数据展示方式）"><a href="#1-5-前端页面数据渲染（网页数据展示方式）" class="headerlink" title="1.5 前端页面数据渲染（网页数据展示方式）"></a>1.5 前端页面数据渲染（网页数据展示方式）</h3><h3 id="1-5-1、后端渲染（SSR）"><a href="#1-5-1、后端渲染（SSR）" class="headerlink" title="1.5.1、后端渲染（SSR）"></a>1.5.1、后端渲染（SSR）</h3><p>（1）后端连接 DB 、执行 SQL,生成 RS</p><p>（2）传 RS 给前端</p><p>（3）前端渲染 </p><p><img src="/2024/07/07/Web/%E8%80%83%E8%AF%95/2510762-20211211211025827-805529882.png" alt="image-20211111145320772"></p><h3 id="1-5-2、前端渲染（CSR）"><a href="#1-5-2、前端渲染（CSR）" class="headerlink" title="1.5.2、前端渲染（CSR）"></a>1.5.2、前端渲染（CSR）</h3><p><img src="/2024/07/07/Web/%E8%80%83%E8%AF%95/image-20211111145430699.png" alt="image-20211111145430699"></p><h2 id="1-6、项目开发岗位分工（开发组织、项目文档中经常要用到）"><a href="#1-6、项目开发岗位分工（开发组织、项目文档中经常要用到）" class="headerlink" title="1.6、项目开发岗位分工（开发组织、项目文档中经常要用到）"></a>1.6、项目开发岗位分工（开发组织、项目文档中经常要用到）</h2><h3 id="1-6-2、前端类"><a href="#1-6-2、前端类" class="headerlink" title="1.6.2、前端类"></a>1.6.2、前端类</h3><p>前段工程师（FE、Front-End Designer）（PC Web端、移动端）</p><h3 id="1-6-3、研发类"><a href="#1-6-3、研发类" class="headerlink" title="1.6.3、研发类"></a>1.6.3、研发类</h3><p>后端工程师（RD、Research and Development）（BE、Back-End）</p><h3 id="1-10-2、前端切页面的主要工作内容"><a href="#1-10-2、前端切页面的主要工作内容" class="headerlink" title="1.10.2、前端切页面的主要工作内容"></a>1.10.2、前端切页面的主要工作内容</h3><p>（1）与后端约定接口</p><p>（2）基础工作</p><p>（3）命名规范</p><p>（4）公共样式提取</p><p>（5）公共组件封装</p><p>（6）界面分析</p><p>（7）切图、切页面</p><p>（8）PC版：PSD—&gt;HTML、CSS、JS</p><p>（9）手机版：PSD—&gt;HTML、CSS、JS</p><p>（10）Android版、iOS版：PSD—&gt;XML</p><p>（11）微信小程序版：PSD—&gt;HTML、CSS、JS （HTML—&gt;WHTML）、阿里生活号</p><p>（12）响应式设计</p><p>（13）交互UI设计</p><p>（14）浏览器兼容设计</p><p>（15）逻辑交互设计</p><h1 id="第二章、开发基础"><a href="#第二章、开发基础" class="headerlink" title="第二章、开发基础"></a>第二章、开发基础</h1><h3 id="2-2-7、其他"><a href="#2-2-7、其他" class="headerlink" title="2.2.7、其他"></a>2.2.7、其他</h3><p>（1）字符集：ASCII、ANSI、GB2312、GBK、UTF-8、Unicode</p><p>​（GB2312、GBK下一个汉字占2个字节、UTF-8下一个汉字占3个字节）</p><p>（2）乱码问题：</p><p>​（2.1）前端页面存储为utf-8字符集</p><p>​（2.2）前端页面用命令控制显示为utf-8字符集</p><p>​（2.3）后端页面存储为utf-8字符集</p><p>​（2.4）后端页面用命令控制显示为utf-8字符集</p><p>​（2.5）数据库存储为utf-8字符集</p><p>​（2.6）后端页面链接数据库的命令里，字符集参数设置为utf-8</p><h2 id="2-2-网页开发基础概念"><a href="#2-2-网页开发基础概念" class="headerlink" title="2.2 网页开发基础概念"></a>2.2 网页开发基础概念</h2><h3 id="2-2-2、正斜杠（-）与反斜杠（-）"><a href="#2-2-2、正斜杠（-）与反斜杠（-）" class="headerlink" title="2.2.2、正斜杠（&#x2F;）与反斜杠（\）"></a>2.2.2、正斜杠（&#x2F;）与反斜杠（\）</h3><table><thead><tr><th>正斜杠（forward slash）（&#x2F;)</th><th>反斜杠（backslash）（\）</th></tr></thead><tbody><tr><td>在Windows中，正斜杠&#x2F;表示除法，用来进行整除运算</td><td>Windows文件浏览器（资源管理器）上使用 反斜杠 \</td></tr><tr><td>在unix系统中，&#x2F;表示目录</td><td>在Windows系统中，\用来表示目录</td></tr><tr><td>由于web遵循unix命名，所以在网址（URL）中，&#x2F;表示目录</td><td>\双反斜线 在Windows里表示绝对地址的第一项，比如后面跟上IP地址的话，就是需要打开这个IP地址的网络共享资源</td></tr><tr><td>http就是正斜杠</td><td>反斜杠”\“是电脑出现了之后为了表示程序设计里的特殊含义才发明的专用标点，就是说，除了程序设计领域外，任何地方你都不应该使用反斜杠的时候，请永远使用正斜杠”&#x2F;“</td></tr></tbody></table><h3 id="2-2-4、Web图片格式"><a href="#2-2-4、Web图片格式" class="headerlink" title="2.2.4、Web图片格式"></a>2.2.4、Web图片格式</h3><p>基本的PS技能、jpeg、png、bmp、gif、svg、webgl、h5 canvas</p><table><thead><tr><th>名称</th><th>简介</th><th>适合场景</th></tr></thead><tbody><tr><td>（1）JPEG</td><td>第一套静态图像压缩标准（11级压缩）、有损压缩</td><td>存储照片颜色丰富的复杂图像、广告、轮播、logo</td></tr><tr><td>（2）PNG</td><td>背景透明、体积小、无损压缩、PNG格式有8位、24位、32位三种格式</td><td>头像、图标</td></tr><tr><td>（3）Gif</td><td>简单动画、颜色少（256种）、无损压缩</td><td>小动画</td></tr><tr><td></td><td></td><td></td></tr><tr><td>（4）其他旧格式</td><td>BMP、TIFF等</td><td></td></tr><tr><td>（5）WebP</td><td>同时提供了有损压缩与无损压缩的图片文件格式、派生自土坯昂编码格式VP8</td><td>暂不成熟</td></tr><tr><td></td><td></td><td></td></tr><tr><td>（6）SVG</td><td>无损缩放矢量图形、SVG图片由直线和曲线以及绘制他们的方法组成</td><td>绘制企业Logo、icon等</td></tr><tr><td>（7）WebGL</td><td>网页3D绘图、JavaScript和OpenGL ES 2.0结合 （TreeJS)</td><td>3D机房、浏览器里借助系统显卡，流程显示3D场景和模型</td></tr><tr><td>（8）H5 Canvas</td><td>H5画布，<code>&lt;canvas&gt;</code>有一个基于JavaScript的绘图API</td><td>手写签名</td></tr></tbody></table><p>9:44</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、操作系统概念"><a href="#一、操作系统概念" class="headerlink" title="一、操作系统概念"></a>一、操作系统概念</h1><p>相关知识点</p><ul><li>单道批处理系统、多道批处理系统、分时系统、实时系统</li><li>并发与并行、虚拟性、共享性和异步性</li><li>进程管理、存储管理、I&#x2F;O管理和文件系统管理 四大部分</li><li>微内核</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220901153317648.png" alt="image-20220901153317648"></p><h2 id="1-1-操作系统的目标和作用"><a href="#1-1-操作系统的目标和作用" class="headerlink" title="1.1 操作系统的目标和作用"></a>1.1 操作系统的目标和作用</h2><p>操作系统的目标与<strong>应用环境</strong>有关。</p><p>不同的环境要求不同的特点。比如，查询系统的OS,强调良好的人-机交互性；工业控制的OS,强调实时性；微机上的OS,强调方便性。</p><h3 id="1-1-1-操作系统的目标"><a href="#1-1-1-操作系统的目标" class="headerlink" title="1.1.1 操作系统的目标"></a>1.1.1 操作系统的目标</h3><h4 id="1-方便性-Convenience"><a href="#1-方便性-Convenience" class="headerlink" title="1.方便性 Convenience"></a>1.方便性 Convenience</h4><p>程序员角度：没有OS，程序员需要写二进制代码；有了OS，写高级语言就可以了<br>用户角度：没有OS，普通用户无法使用；有了OS，就可以使用电脑了</p><h4 id="2-有效性-Availabilty"><a href="#2-有效性-Availabilty" class="headerlink" title="2.有效性 Availabilty"></a>2.有效性 Availabilty</h4><p>（1）提高资源（CPU、I&#x2F;O设备）的利用率：高效调动CPU、I&#x2F;O设备，减少了资源空闲等待的时间<br>（2）提高系统的吞吐量：系统利用率高，单位时间内操作的文件数也就提高了，吞吐量也就提高了</p><blockquote><p>注意：利用率和吞吐量要求计算</p></blockquote><h4 id="3-可扩充性-Scalability"><a href="#3-可扩充性-Scalability" class="headerlink" title="3.可扩充性 Scalability"></a>3.可扩充性 Scalability</h4><p>Micro Kernel：微内核<br>OS采用Micro Kernel，可以很轻松为系统增加新的功能，也可以删减过时、不需要的功能</p><h4 id="4-开放性-Openness"><a href="#4-开放性-Openness" class="headerlink" title="4.开放性 Openness"></a>4.开放性 Openness</h4><p>指系统能遵循世界标准规范，特别是遵循开放系统互连OSI国际标准，方便OS之间的联系。<br>OSI（open system interconnection）</p><h3 id="1-1-2-操作系统的作用"><a href="#1-1-2-操作系统的作用" class="headerlink" title="1.1.2 操作系统的作用"></a>1.1.2 操作系统的作用</h3><h4 id="1-OS作为用户与计算机硬件系统之间的接口"><a href="#1-OS作为用户与计算机硬件系统之间的接口" class="headerlink" title="1. OS作为用户与计算机硬件系统之间的接口"></a>1. OS作为用户与计算机硬件系统之间的接口</h4><p><strong>含义：</strong>OS处于用户与计算机硬件系统之间，用户通过OS来使用计算机系统。<br>用户通过图标-窗口，就是页面进行访问。(GUI：图形用户界面)<br>用户通过命令，就是CMD、PowerShell来访问。<br>或者用户自己编写的应用程序访问。<br>Shell（壳)（kernel：内核）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220901160245327.png" alt="image-20220901160245327"></p><h4 id="2-OS作为计算机系统资源的管理者"><a href="#2-OS作为计算机系统资源的管理者" class="headerlink" title="2. OS作为计算机系统资源的管理者"></a>2. OS作为计算机系统资源的管理者</h4><p>在一个计算机系统中，通常含有多种硬件和软件资源。归纳起来可分为<strong>四类：</strong>处理机（CPU）、存储器、I&#x2F;O设备以及文件（数据和程序）。<br>而OS的主要功能就是管理这四类资源。</p><p>处理机管理：分配和控制处理机<br>存储器管理：负责内存的分配和回收<br>I&#x2F;O设备管理：负责I&#x2F;O设备的分配（回收）与操纵<br>文件管理：实现对文件的存取、共享和保护</p><h4 id="3-OS实现了对计算机资源的抽象"><a href="#3-OS实现了对计算机资源的抽象" class="headerlink" title="3. OS实现了对计算机资源的抽象"></a>3. OS实现了对计算机资源的抽象</h4><p>对于一台完全无软件的计算机系统（即裸机），由于它向用户提供的仅是硬件接口（物理接口），因此，用户必须对物理接口的实现细节有充分的理解。这就导致物理机器难以广泛使用，因为物理接口很复杂，人们很难理解。</p><p>而将裸机上覆盖一层I&#x2F;O设备管理软件后，人们不需要去理解物理接口，只需要发出读写等命令，OS就会自动去完成操作。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220901161817934.png" alt="image-20220901161817934"></p><h3 id="1-1-3-推动操作系统发展的主要动力"><a href="#1-1-3-推动操作系统发展的主要动力" class="headerlink" title="1.1.3 推动操作系统发展的主要动力"></a>1.1.3 推动操作系统发展的主要动力</h3><h4 id="1-不断提高计算机资源利用率"><a href="#1-不断提高计算机资源利用率" class="headerlink" title="1. 不断提高计算机资源利用率"></a>1. 不断提高计算机资源利用率</h4><p>因为计算机的硬件还是比较昂贵，所以希望可以更高效地使用它们，不断改善调度策略，增加吞吐量</p><p>$\displaystyle{CPU的利用率} &#x3D; \displaystyle\frac{CPU有效工作时间}{CPU有效工作时间 + CPU等待时间}$</p><h4 id="2-方便用户"><a href="#2-方便用户" class="headerlink" title="2. 方便用户"></a>2. 方便用户</h4><p>人-机交互</p><h4 id="3-器件的不断更新换代"><a href="#3-器件的不断更新换代" class="headerlink" title="3. 器件的不断更新换代"></a>3. 器件的不断更新换代</h4><p>微机芯片 8位、16位、32位、64位（寄存器长度）。芯片位数的改变，它的运算速度也发生了改变，相应的OS也随之发展。</p><h4 id="4-计算机体系结构的不断发展"><a href="#4-计算机体系结构的不断发展" class="headerlink" title="4. 计算机体系结构的不断发展"></a>4. 计算机体系结构的不断发展</h4><p>单处理机、多处理机（一个主板插多个CPU）、网络操作系统</p><p>多核（一个CPU，有多个核）</p><h4 id="5-不断提出新的应用需求"><a href="#5-不断提出新的应用需求" class="headerlink" title="5. 不断提出新的应用需求"></a>5. 不断提出新的应用需求</h4><p>实时工业控制、多媒体（音频、视频、游戏）、嵌入式</p><h2 id="1-2-操作系统的发展过程"><a href="#1-2-操作系统的发展过程" class="headerlink" title="1.2 操作系统的发展过程"></a>1.2 操作系统的发展过程</h2><p>在20世纪50年代中期，出现了第一个简单的批处理OS；</p><p>60年代中期开发出多道程序批处理系统；不久又推出分时系统，与此同时，用于工业和武器控制的实时OS也相继问世。</p><p>20世纪70到90年代，是VLSI和计算机体系结构大发展的年代，导致了<strong>微型机、多处理机和计算机网络</strong>的诞生和发展，与此相应，也相继开发出了<strong>微机OS、多处理机OS</strong>和<strong>网络OS</strong>，并得到了极为迅猛的发展。</p><h3 id="1-2-1-未配置操作系统的计算机系统"><a href="#1-2-1-未配置操作系统的计算机系统" class="headerlink" title="1.2.1 未配置操作系统的计算机系统"></a>1.2.1 未配置操作系统的计算机系统</h3><h4 id="1-人工操作方式"><a href="#1-人工操作方式" class="headerlink" title="1. 人工操作方式"></a>1. 人工操作方式</h4><p>早期的操作方式是由程序员将事先已穿孔的纸带（或卡片），装入纸带输入机（或卡片输入机），再启动它们将纸带（或卡片）上的程序和数据输入计算机，然后启动计算机运行。仅当程序运行完毕并取走计算结果后，才允许下一个用户上机。</p><p>这种人工操作方式有两个缺点：</p><p>（1）用户独占全机，即一台计算机的全部资源由上机用户所独占。</p><p>（2）CPU等待人工操作。当用户进行装带（卡）、卸带（卡）等人工操作时，CPU及内存等资源是空闲的。</p><h4 id="2-脱机输入-输出（Off-Line-I-O）方式"><a href="#2-脱机输入-输出（Off-Line-I-O）方式" class="headerlink" title="2. 脱机输入&#x2F;输出（Off-Line I&#x2F;O）方式"></a>2. 脱机输入&#x2F;输出（Off-Line I&#x2F;O）方式</h4><p>为了解决人机矛盾及CPU和I&#x2F;O设备之间速度不匹配的矛盾，20世纪50年代末出现了脱机I&#x2F;O技术。</p><p>该技术是事先将装有用户程序和数据的纸带装入纸带输入机，在一台外围机的控制下，把纸带（卡片）上的数据（程序）输入到磁带上。当CPU需要这些程序和数据时，再从磁带上高速地调入内存。</p><p>脱机：不需要CPU带动</p><p>外围机其实替代了人，和主机并行工作，提高了效率。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220901165702131.png" alt="image-20220901165702131"> </p><h3 id="1-2-2-单道批处理系统"><a href="#1-2-2-单道批处理系统" class="headerlink" title="1.2.2 单道批处理系统"></a>1.2.2 单道批处理系统</h3><h4 id="1-单道批处理系统（Simple-Batch-Processing-System）的处理流程"><a href="#1-单道批处理系统（Simple-Batch-Processing-System）的处理流程" class="headerlink" title="1. 单道批处理系统（Simple Batch Processing System）的处理流程"></a>1. 单道批处理系统（Simple Batch Processing System）的处理流程</h4><p>为实现对作业的连续处理，需要先把一批作业以脱机方式输入到磁带上，并在系统中配上监督程序（Monitor），在它的控制下，使这批作业能一个接一个地连续处理。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902143422609.png" alt="image-20220902143422609"></p><h4 id="2-单道批处理系统的缺点"><a href="#2-单道批处理系统的缺点" class="headerlink" title="2. 单道批处理系统的缺点"></a>2. 单道批处理系统的缺点</h4><p>缺点：系统中的资源得不到充分的利用。</p><p>这是因为内存中只有一道程序，每逢该程序在程序中发出I&#x2F;O请求后，CPU便处于等待状态，必须在其I&#x2F;O完成后才继续运行。又因I&#x2F;O设备的低速性，更使CPU的利用率显著降低。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902143719711.png" alt="image-20220902143719711"> </p><h3 id="1-2-3-多道批处理系统"><a href="#1-2-3-多道批处理系统" class="headerlink" title="1.2.3 多道批处理系统"></a>1.2.3 多道批处理系统</h3><p>（Multiprogrammed Batch Processing System）</p><h4 id="1-多道程序设计在基本概念"><a href="#1-多道程序设计在基本概念" class="headerlink" title="1. 多道程序设计在基本概念"></a>1. 多道程序设计在基本概念</h4><p>为了进一步提高资源的利用率和系统吞吐量，在20世纪60年代中期引入了多道程序设计技术，由此形成了多道批处理系统。</p><p>图1-6给出了四道程序时的运行情况。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902144541404.png" alt="image-20220902144541404"> </p><p><strong>例题：</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902145021696.png" alt="image-20220902145021696"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902145041579.png" alt="image-20220902145041579"> </p><p><strong>例题：</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905091017315.png" alt="image-20220905091017315"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902150633188.png" alt="image-20220902150633188"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902153116433.png" alt="image-20220902153116433"></p><p>（3）不是，当进程超过一定限度后，就会由于大量进程之间的切换而浪费大量的CPU资源，所以利用率下降。 </p><p><strong>例题：</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220902150650294.png" alt="image-20220902150650294"> </p><p>（1）输入机使用100个单位时间后，处理机使用20个单位时间，打印机使用40个单位时间。依次循环</p><p>（2）<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20240823145653859.png" alt="image-20240823145653859"></p><p>（3）浪费了大量时间在输入输出上</p><h4 id="2-多道批处理系统的优缺点"><a href="#2-多道批处理系统的优缺点" class="headerlink" title="2. 多道批处理系统的优缺点"></a>2. 多道批处理系统的优缺点</h4><p>多道批处理系统的优缺点如下：</p><p>（１）资源利用率高。　<br>            引入多道批处理能使多道程序交替运行，以保持CPU处于忙碌状态；在内存中装入多道程序可提高内存的利用率；此外还可以提高I&#x2F;O设备的利用率。</p><p>（２）系统吞吐量大<br>        能提高系统吞吐量的原因：①CPU和其他资源保持“忙碌”状态；②仅当作业完成时或运行不下去时才进行切换，系统开销小</p><p>（３）平均周转时间长<br>        周转时间：一个作业进入系统，到离开系统的时间。<br>        由于作业要排队依次进行处理，因而作业的周转时间较长，通常需几个小时，甚至几天。</p><p>（４）无交互能力<br>        用户一旦把作业提交给系统后，直至作业完成，用户都不能与自己的作业进行交互，修改和调试程序极不方便。</p><h4 id="３．多道批处理系统需要解决的问题"><a href="#３．多道批处理系统需要解决的问题" class="headerlink" title="３．多道批处理系统需要解决的问题"></a>３．多道批处理系统需要解决的问题</h4><p>多道批处理系统是一种十分有效，但又非常复杂的系统，为使系统中的多道程序间能协调地运行，系统必须解决下列问题。</p><p>（１）处理机争用问题。<br>        既要能满足各道程序运行的需要，又要提高处理机的利用率。</p><p>（２）内存分配和保护问题<br>        系统应能为每道程序分配必要的内存空间，使它们“各得其所”，且不会因为某道程序出现异常情况而影响其他程序。</p><p>（３）I&#x2F;O设备分配问题<br>        系统应采取适当的策略来分配系统中的I&#x2F;O设备，以达到既能方便用户对设备的使用，又能提高设备利用率的目的。</p><p>（４）文件的组织和管理问题<br>        系统应能有效地组织存放在系统中的大量的程序和数据，使它们既便于用户使用，又能保证数据的安全性。</p><p>（５）作业管理问题<br>        系统中存在着各种作业（应用程序），系统应能对系统中所有的作业进行合理的组织，以满足这些作业用户的不同要求。</p><p>（６）用户与系统的接口问题<br>        为使用户能方便的使用OS，OS还能提供用户与OS之间的接口。</p><h3 id="1-2-4-分时系统"><a href="#1-2-4-分时系统" class="headerlink" title="1.2.4 分时系统"></a>1.2.4 分时系统</h3><p>（Time Sharing System）</p><h4 id="1-分时系统的引入"><a href="#1-分时系统的引入" class="headerlink" title="1. 分时系统的引入"></a>1. 分时系统的引入</h4><p>如果说推动多道批处理系统形成和发展的主要动力是提高资源利用率和系统吞吐量，</p><p>那么，推动分时系统形成和发展的主要动力，则是为了满足用户对人—机交互的需求，由此产生了一种新型的OS，用户的需求体现在以下几个方面：</p><p>（1）人—机交互<br>        每当程序员写好一个新程序时，都需要上机调试，由于新编程序难免存在一些错误或不当之处，需要进行修改，因此用户希望可以像早期计算机一样，独占全机并对它进行直接控制，以方便对程序中的错误进行修改。即用户需要人机交互。</p><p>（2）共享主机<br>        在20世纪60年代，计算机还十分的昂贵，一台计算机要同时供很多用户进行使用。显然，用户们在共享一台计算机时，每人都希望能像独占时一样，不仅可以随时与计算机交互，而且不会感到其他用户的存在。</p><p>综上，分时系统是指：在一台主机上连接了多个配有显示器和键盘的终端，并用此组成的系统，该系统允许多个用户同时通过自己的终端，以交互方式使用计算机，共享主机中的资源。</p><h4 id="2-分时系统实现中的关键问题"><a href="#2-分时系统实现中的关键问题" class="headerlink" title="2. 分时系统实现中的关键问题"></a>2. 分时系统实现中的关键问题</h4><p>​在多道批处理系统中，用户无法与自己的作业进行交互的主要原因是：作业都先驻留在外存上，即使以后被调入内存，也需要较长时间的等待后方能运行，用户无法与自己的作业进行交互。</p><p>​分时系统在设计上实现了以下两方面技术。</p><p>1）及时接收<br>多路卡、类C&#x2F;S模式、64个用户，每个终端停留30ms，则扫描64个终端，需要30ms * 64 &#x3D; 1.92s<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904090224453.png" alt="image-20220904090224453"></p><p>2）及时处理<br>（1）作业直接进入内存<br>（2）采用轮转方式<br>分时系统时间片轮转（RR）原理示意图。sharing “公平”<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904090340998.png" alt="image-20220904090340998"></p><h4 id="3-分时系统的特征"><a href="#3-分时系统的特征" class="headerlink" title="3. 分时系统的特征"></a>3. 分时系统的特征</h4><p> 分时系统的特征有以下四个方面：<br>（1）多路性：分时系统其实可以看做多用户、多任务批处理系统<br>（2）独立性：用户希望自己独享主机，但实际上并不是，只是感觉如此<br>（3）及时性：及时接收、及时处理，不需要像多道批处理系统需要等待传入内存<br>（4）交互性：可以进行交互</p><h3 id="1-2-5-实时系统"><a href="#1-2-5-实时系统" class="headerlink" title="1.2.5 实时系统"></a>1.2.5 实时系统</h3><p>（Real Time System）</p><h4 id="1-实时系统的类型"><a href="#1-实时系统的类型" class="headerlink" title="1. 实时系统的类型"></a>1. 实时系统的类型</h4><p>随着计算机应用的普及，实时系统的类型也相应增多，下面列出当前常见的几种：</p><p>（1）工业（武器）控制系统<br>（2）信息查询系统<br>（3）多媒体系统<br>（4）嵌入式系统</p><p>截至时间：deadline 时间点</p><p>开始截至时间：A time by which a task must start.</p><p>完成截至时间：A time by which a tash must complete.</p><h4 id="2-实时任务的类型"><a href="#2-实时任务的类型" class="headerlink" title="2. 实时任务的类型"></a>2. 实时任务的类型</h4><p>（1）周期性实时任务和非周期性实时任务<br>（2）硬实时任务和软实时任务</p><h4 id="3-实时系统与分时系统特征的比较"><a href="#3-实时系统与分时系统特征的比较" class="headerlink" title="3. 实时系统与分时系统特征的比较"></a>3. 实时系统与分时系统特征的比较</h4><p>（1）多路性<br>（2）独立性<br>（3）及时性<br>（4）交互性<br>（5）可靠性：robust：可以提高可靠的服务</p><h3 id="1-2-6-微机操作系统的发展"><a href="#1-2-6-微机操作系统的发展" class="headerlink" title="1.2.6 微机操作系统的发展"></a>1.2.6 微机操作系统的发展</h3><h4 id="1-单用户单任务操作系统"><a href="#1-单用户单任务操作系统" class="headerlink" title="1. 单用户单任务操作系统"></a>1. 单用户单任务操作系统</h4><p>1）CP&#x2F;M</p><p>2）MS-DOS</p><h4 id="2-单用户多任务操作系统"><a href="#2-单用户多任务操作系统" class="headerlink" title="2. 单用户多任务操作系统"></a>2. 单用户多任务操作系统</h4><p>单用户多任务操作系统的含义是，只允许有一个用户上机，但允许用户把程序分为若干个任务，使它们并发执行，从而有效地改善了系统的性能。</p><h4 id="3-多用户多任务操作系统"><a href="#3-多用户多任务操作系统" class="headerlink" title="3. 多用户多任务操作系统"></a>3. 多用户多任务操作系统</h4><p>多用户多任务操作系统的含义是：允许多个用户通过各自的终端，使用同一台机器，共享主机系统中的各种资源，而每个用户程序又可进一步分为几个任务，使它们能并发执行，从而可进一步提高资源利用率和吞吐量。</p><p>在大、中和小型机中所配置的大多是多用户多任务操作系统，而在32位、64位微机上，也有不少配置的是多用户多任务OS，其中最有代表性的是UNIX OS。</p><h2 id="1-3-OS的基本特性"><a href="#1-3-OS的基本特性" class="headerlink" title="1.3 OS的基本特性"></a>1.3 OS的基本特性</h2><p>​前面所介绍的多道批处理系统、分时系统和实时系统这三种基本操作系统都具有各自不同的特征。如批处理系统有较高的资源利用率和系统吞吐量；分时系统能获得及时响应；实时系统具有实时特征。</p><p>​除此之外，它们还共同具有并发（进程）、共享、虚拟和异步四个基本特征。</p><h3 id="1-3-1-并发（Concurrence）"><a href="#1-3-1-并发（Concurrence）" class="headerlink" title="1.3.1 并发（Concurrence）"></a>1.3.1 并发（Concurrence）</h3><p>正是系统中的程序能并发执行这一特征，才使得OS能有效地提高系统中的资源利用率，增加系统的吞吐量。</p><p>CPU资源</p><h4 id="1-并行与并发"><a href="#1-并行与并发" class="headerlink" title="1. 并行与并发"></a>1. 并行与并发</h4><p>并行性和并发性是既相似又有区别的两个概念。</p><p>并行性是指<strong>两个或多个事件在同一时刻发生</strong></p><p>并发性是指<strong>两个或多个事件在同一时间间隔内发生</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904101715524.png" alt="image-20220904101715524"></p><p><strong>“同时”：</strong>宏观、微观上：每一个时刻，处理机上至多有一个任务执行。</p><h4 id="2-引入进程"><a href="#2-引入进程" class="headerlink" title="2. 引入进程"></a>2. 引入进程</h4><p>​在一个未引入进程的系统中，属于同一个应用程序之间的计算程序和I&#x2F;O程序之间只能是顺序执行，即只有在计算程序执行告一段落后，才允许I&#x2F;O程序执行；反之，在程序执行I&#x2F;O操作时，计算程序也不能执行。</p><p>​但在为计算程序和I&#x2F;O程序分别建立一个<strong>进程（Process）</strong>后，这两个进程便可并发执行。若对内存中的多个程序都分别建立一个进程，它们就可以并发执行，这样便能极大地提高系统资源的利用率，增加系统的吞吐量。</p><h3 id="1-3-2-共享（Sharing）"><a href="#1-3-2-共享（Sharing）" class="headerlink" title="1.3.2 共享（Sharing）"></a>1.3.2 共享（Sharing）</h3><h4 id="1-互斥共享方式-mutual-exclusion-mutex互斥信号量"><a href="#1-互斥共享方式-mutual-exclusion-mutex互斥信号量" class="headerlink" title="1. 互斥共享方式 mutual exclusion (mutex互斥信号量)"></a>1. 互斥共享方式 mutual exclusion (mutex互斥信号量)</h4><p>​系统中的某些资源，如打印机、磁带机等，虽然可以提供给多个进程（线程）使用，但应规定在一段时间内，只允许一个进程访问该资源。</p><p>为此，在系统中应建立一种机制（<strong>同步机制</strong>），以保证多个进程对这类资源的互斥访问。</p><h4 id="2-同时访问方式"><a href="#2-同时访问方式" class="headerlink" title="2. 同时访问方式"></a>2. 同时访问方式</h4><p>​系统中还有另一类资源，允许在一段时间内由多个进程“同时”对它们进行访问。</p><p>这里所谓的“同时”，在单处理机环境下是宏观意义上的，而在微观上，这些进程对该资源的访问是交替进行的。典型的可供多个进程“同时”访问的资源是<strong>磁盘设备</strong>。一些用重入码编写的文件也可以被“同时”共享，即允许若干个用户同时访问该文件。</p><h3 id="1-3-3-虚拟（Virtual）"><a href="#1-3-3-虚拟（Virtual）" class="headerlink" title="1.3.3 虚拟（Virtual）"></a>1.3.3 虚拟（Virtual）</h3><h4 id="1-时分复用技术"><a href="#1-时分复用技术" class="headerlink" title="1. 时分复用技术"></a>1. 时分复用技术</h4><p>（1）虚拟处理机技术<br>分时系统（Round Robin，RR）CPU<br>（2）虚拟设备（I&#x2F;O）技术。Spooling</p><h4 id="2-空分复用技术"><a href="#2-空分复用技术" class="headerlink" title="2. 空分复用技术"></a>2. 空分复用技术</h4><p>离散：分页、分段（第4章）</p><p>虚拟存储器（Virtual Memory,VM）（第5章 虚拟存储技术）</p><p>1G物理内存，1.5G程序</p><p>swap</p><h3 id="1-3-4-异步（Asynchronism）"><a href="#1-3-4-异步（Asynchronism）" class="headerlink" title="1.3.4 异步（Asynchronism）"></a>1.3.4 异步（Asynchronism）</h3><p>OS 并发 本质特征</p><p>在多道程序环境下，系统允许多个进程并发执行。</p><p>在单处理机环境下，由于系统中只有一台处理机，因而每次只允许一个进程执行，其余进程只能等待。</p><p>当正在执行的进程提出某种资源要求时，如打印请求，而此时打印机正在为其它进程打印，由于打印机属于临界资源，因此正在执行的进程必须等待，并释放出处理机，直到打印机空闲时，获得并使用打印机；使用完打印机后，如果还需计算，则要继续获得处理机，该进程方能继续执行。可见，由于资源等因素的限制，使进程的执行通常都不可能“一气呵成”，而是以“停停走走”的方式运行。</p><p><span style="background-color:yellow">同步 synchronism:keep pace with(协议、步调）“人为设计”</span></p><p>信号量机制</p><h2 id="1-4-OS的主要功能"><a href="#1-4-OS的主要功能" class="headerlink" title="1.4 OS的主要功能"></a>1.4 OS的主要功能</h2><p>​引入OS的主要目的是：为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率，方便用户的使用。</p><p>​为此，在传统的OS中应具有处理机管理、存储器管理、设备管理和文件管理等基本功能。此外，为了方便用户使用OS，还需向用户提供方便的用户接口。</p><h3 id="1-4-1-处理机管理功能"><a href="#1-4-1-处理机管理功能" class="headerlink" title="1.4.1 处理机管理功能"></a>1.4.1 处理机管理功能</h3><ol><li>进程控制</li><li>进程同步</li><li>进程通信</li><li>调度<br>（1）作业调度<br>（2）进程调度</li></ol><h3 id="1-4-2-存储器管理功能"><a href="#1-4-2-存储器管理功能" class="headerlink" title="1.4.2 存储器管理功能"></a>1.4.2 存储器管理功能</h3><ol><li>内存分配</li><li>内存保护</li><li>地址映射<br>逻辑地址、物理地址<br>绝对地址、相对地址</li><li>内存扩充<br>内存扩充并非是从物理上去扩大内存的容量，而是借助于虚拟存储技术，从逻辑上扩充内存容量，使用户所感觉到的内存容量比实际内存容量大得多，以便让更多的用户程序能并发运行。这样既满足了用户的需要，又改善了系统的性能。为了能在逻辑上扩充内存，系统必须徐设置内存扩充机制（包含少量的硬件），用于实现下述各功能：<br>（1）请求调入功能<br>（2）置换功能</li></ol><h3 id="1-4-3-设备管理功能"><a href="#1-4-3-设备管理功能" class="headerlink" title="1.4.3 设备管理功能"></a>1.4.3 设备管理功能</h3><ol><li>缓冲管理</li><li>设备分配</li><li>设备处理</li></ol><h3 id="1-4-4-文件管理功能"><a href="#1-4-4-文件管理功能" class="headerlink" title="1.4.4 文件管理功能"></a>1.4.4 文件管理功能</h3><ol><li>文件存储空间的管理</li><li>目录管理</li><li>文件的读&#x2F;写管理和保护</li></ol><h2 id="1-5-OS结构设计"><a href="#1-5-OS结构设计" class="headerlink" title="1.5 OS结构设计"></a>1.5 OS结构设计</h2><p>早期OS的规模很小，只有几十KB，完全可以由一个人以手工方式，用几个月的时间编制出来。此时，编制程序基本上是一种技巧，OS是否是有结构的并不那么重要，重要的是程序员的程序设计技巧。但随着OS规模的愈来愈大，其所具有的代码也愈来愈多，往往需要由数十人或数百人甚至更多的人来参与，分工合作，共同来完成操作系统的设计。这意味着，应采用工程化的开发方法对大型软件进行开发。由此产生了“软件工程学”。</p><h3 id="1-5-1-传统OS结构"><a href="#1-5-1-传统OS结构" class="headerlink" title="1.5.1 传统OS结构"></a>1.5.1 传统OS结构</h3><h4 id="1-无结构OS"><a href="#1-无结构OS" class="headerlink" title="1. 无结构OS"></a>1. 无结构OS</h4><p>在早期开发OS时，设计者只是把他的注意力放在功能的实现和获得高的效率上，缺乏首尾一致的设计思想。此时的OS是为数众多的一组过程的集合，每个过程可以任意地相互调用其它过程，致使OS内部既复杂又混乱。因此，这种OS是无结构的，也有人把它称为整体系统结构。</p><h4 id="2-模块化结构OS"><a href="#2-模块化结构OS" class="headerlink" title="2. 模块化结构OS"></a>2. 模块化结构OS</h4><p>1）模块化程序设计技术的基本概念</p><p>模块化程序设计技术是20世纪60年代出现的一种结构化程序设计技术。该技术基于”分解“和“模块化”的原则来控制大型软件的复杂度。为使OS具有较清晰的结构，OS不再是由众多的过程直接构成的，而是按其功能精心地划分为若干个具有一定独立性和大小的模块。</p><p>下图展现了由模块、子模块等组成的模块化OS结构</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904172826112.png" alt="image-20220904172826112"></p><p>2）模块独立性</p><p>在模块-接口法中，关键问题是模块的划分和规定好模块之间的接口。如果我们在划分模块时将模块划分得太小，虽然可以降低模块本身的复杂性，但会引起模块之间的联系过多，从而会造成系统比较混乱；如果将模块划分得过大，又会增加模块内部的复杂性，使内部的联系增加，因此在划分模块时，应在两者间进行权衡。</p><p>3）模块接口法的优缺点</p><p>利用模块-接口法开发的OS，较之无结构OS具有以下明显的优点：</p><p>（1）提高OS设计的正确性、可理解性和可维护性<br>（2）增强OS的可适应性<br>（3）加速OS的开发过程</p><p>模块化结构设计仍存在下述问题：</p><p>（1）在OS设计时，对各模块间的接口很难满足在模块设计完成后对接口的实际需求。<br>（2）在OS设计阶段，设计者必须做出一系列的决定（决策），每一个决定必须建立在上一个决定的基础上，但模块化结构设计中，各模块的设计齐头并进，无法寻找一个可靠的决定顺序，造成各种决定的“无序性”，这将使程序人员很难做到“设计中的每一步决定”都是建立在可靠的基础上，因此模块-接口法又被称为“无需模块法”。</p><h4 id="3-分层式结构OS"><a href="#3-分层式结构OS" class="headerlink" title="3. 分层式结构OS"></a>3. 分层式结构OS</h4><p>1）分层式结构的基本概念</p><p>为了将模块-接口法中“决定顺序”的无序性变为有序性，引入了有序分层法，分层法的设计任务是，在目标系统An和逻辑系统（又称宿主系统）A0之间，铺设若干个层次的软件A1、A2、A3、…、An-1,使An-1、An-2、…、A2、A1层，最终能在A0上运行。在操作系统中，常采用自底向上法来铺设这些中间层。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904191206455-16622899267891.png" alt="image-20220904191206455"></p><p>2）分层结构的优缺点</p><p>分层结构的主要优点有：<br>（1）易保证系统的正确性<br>（2）易扩充和易维护性</p><p>分层结构的主要缺点是：系统效率降低。由于层次结构是分层单向依赖的，必须在每层之间都建立层次间的通信机制，OS每执行一个功能，通常要自上而下地穿越多个层次，这无疑会增加系统的通信开销，从而导致系统效率的降低。</p><h3 id="1-5-2-客户-服务器模式（Client-Server-Model）简介"><a href="#1-5-2-客户-服务器模式（Client-Server-Model）简介" class="headerlink" title="1.5.2 客户&#x2F;服务器模式（Client&#x2F;Server Model）简介"></a>1.5.2 客户&#x2F;服务器模式（Client&#x2F;Server Model）简介</h3><h4 id="1-客户-服务器模式的由来、组成和类型"><a href="#1-客户-服务器模式的由来、组成和类型" class="headerlink" title="1. 客户&#x2F;服务器模式的由来、组成和类型"></a>1. 客户&#x2F;服务器模式的由来、组成和类型</h4><p>客户&#x2F;服务器系统主要由三部分组成：</p><p>（1）客户机：<br>（2）服务器：<br>（3）网络系统：</p><h4 id="2-客户-服务器之间的交互"><a href="#2-客户-服务器之间的交互" class="headerlink" title="2. 客户&#x2F;服务器之间的交互"></a>2. 客户&#x2F;服务器之间的交互</h4><p>（1）客户发送请求信息<br>（2）服务器接收消息<br>（3）服务器回送消息<br>（4）客户机接收消息</p><h4 id="3-客户-服务器模式的有点（分布式系统）"><a href="#3-客户-服务器模式的有点（分布式系统）" class="headerlink" title="3. 客户&#x2F;服务器模式的有点（分布式系统）"></a>3. 客户&#x2F;服务器模式的有点（分布式系统）</h4><p>（1）数据的分布处理和存储<br>（2）便于集中管理<br>（3）灵活性和可扩充性<br>（4）易于改编应用软件</p><h3 id="1-5-3-面向对象的程序设计（Object-Orientated-Programming）技术简介"><a href="#1-5-3-面向对象的程序设计（Object-Orientated-Programming）技术简介" class="headerlink" title="1.5.3 面向对象的程序设计（Object-Orientated Programming）技术简介"></a>1.5.3 面向对象的程序设计（Object-Orientated Programming）技术简介</h3><h4 id="1-面向对象技术的基本概念"><a href="#1-面向对象技术的基本概念" class="headerlink" title="1. 面向对象技术的基本概念"></a>1. 面向对象技术的基本概念</h4><p>面向对象技术是20世纪80年代初提出并很快流行起来的。</p><p>1）对象</p><p>在面向对象的技术中，是利用被封装的数据结构（变量）和一组对它进行操作的过程（方法）来表示系统中的某个对象的。</p><p>如下图所示，对象中的变量（数据）也称为属性，它可以是单个标量或一张表，面向对象中的方法是用于执行某种功能的过程，它可以改变对象的状态，更新对象中的某些数据值或作用于对象所要访问的外部资源。如果把一个文件作为对象，该对象的变量便是文件类型、文件大小、文件的创建者等。对象中的方法包含对文件的操作，如创建文件、打开文件、读文件、写文件、关闭文件等。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904193326315.png" alt="image-20220904193326315"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904193334034.png" alt="image-20220904193334034"> </p><p>2）对象类</p><p>在实践中，有许多对象可能表示的是同一类事物，每个对象具有自己的变量集合，而它们所具有的方法是相同的。如果为每一个相似的对象都定义一组变量和方法，显然是低效的，由此产生了“对象类”的概念，利用“对象类”来定义一组大体相似的对象。一个类同样定义了一组变量和针对该变量的一组方法，用它们来描述一组对象的共同属性和行为。类是在对象上的抽象，对象则是类的实例。对象类中所定义的变量在实例中均有具体的值。</p><p>3）继承</p><p>在面向对象的技术中，可以根据已有类来定义一个新的类，新类被称为字类（B），原来的类被称为父类(A)，如下图所示。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220904193747786.png" alt="image-20220904193747786"></p><h4 id="2-面向对象技术的优点"><a href="#2-面向对象技术的优点" class="headerlink" title="2. 面向对象技术的优点"></a>2. 面向对象技术的优点</h4><p>在OS设计时，将计算机中的实体作为对象来处理，可带来如下好处：<br>（1）通过“重用”提高产品质量和生产率<br>（2）使系统具有更好的易修改性和易扩展性<br>（3）更易于保证系统的“正确性”和“可靠性”</p><h3 id="1-5-4-微内核OS结构"><a href="#1-5-4-微内核OS结构" class="headerlink" title="1.5.4 微内核OS结构"></a>1.5.4 微内核OS结构</h3><h4 id="1-微内核OS的基本概念"><a href="#1-微内核OS的基本概念" class="headerlink" title="1. 微内核OS的基本概念"></a>1. 微内核OS的基本概念</h4><p>Micro Kernel</p><p>1）足够小的内核</p><p>在微内核OS中，内核是指精心设计的、能实现现代OS最基本核心功能的小型内核，微内核并非是一个完整的OS，而只是将OS中<strong>最基本的部分</strong>放入微内核。</p><p>通常包含有：</p><p>① 与硬件处理紧密相关的部分<br>② 一些较基本的功能<br>③ 客户和服务器之间的通信</p><p>这些OS最基本的部分只是为构建通用OS提供一个重要基础，这样就可以确保把OS内核做得很小。</p><p>2）基于客户&#x2F;服务器模式</p><p>由于客户&#x2F;服务器模式具有非常多的优点，故在单机微内核OS中几乎无一例外地都采用客户&#x2F;服务器模式，将OS中最基本的部分放入内核中，<strong>而把OS 的绝大部分功能都放在微内核外面的一组服务器（进程）中实现</strong>，如用于提供对进程（线程）进行管理的进程（线程）服务器、提供虚拟存储器管理功能的虚拟存储器服务器、提供I&#x2F;O设备管理的I&#x2F;O设备管理服务器等，它们都是被作为进程来实现的，运行在用户态，客户与服务器之间是借助微内核提供的<strong>消息传递机制</strong>来实现信息交互的。</p><p>下图示出了在单机环境下的客户&#x2F;服务器模式。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905091829062.png" alt="image-20220905091829062"> </p><p>3）应用“机制与策略分离”原理</p><p>在现代OS的结构设计中，经常利用“机制与策略分离”的原理来构造OS结构。</p><p>所谓机制，是指实现某一功能的具体执行结构。而策略，则是在机制的基础上借助于某些参数和算法来实现该功能的优化，或达到不同的功能目标。</p><p>4）采用面向对象技术</p><p>OS是一个极其复杂的大型软件系统。我们不仅可以通过结构设计来分解OS的复杂度，还可以基于面向对象技术中的“抽象”和“隐藏”原则控制系统复杂性，再进一步利用“对象”、“封装”和“继承”等概念来确保OS的“正确性”、“可靠性”、“易修改性”、“易扩展性”等，并提高OS的设计速度。正因为面向对象技术能带来如此多的好处，故面向对象技术被广泛应用于现代OS的设计中。</p><h4 id="2-微内核的基本功能"><a href="#2-微内核的基本功能" class="headerlink" title="2. 微内核的基本功能"></a>2. 微内核的基本功能</h4><p>现在一般都采用“机制与策略分离”的原理，将机制部分预计与硬件紧密相关的部分放入微内核中。由此可知微内核通常具有如下几方面的功能：<br>1）进程（线程）管理<br>2）低级存储器管理<br>3）中断和陷入处理</p><h4 id="3-微内核OS的优点"><a href="#3-微内核OS的优点" class="headerlink" title="3. 微内核OS的优点"></a>3. 微内核OS的优点</h4><p>由于微内核OS结构是建立在模块化、层次化结构的基础上的，并采用了客户&#x2F;服务器模式和面向对象的程序设计技术，因此，微内核结构的OS是集各种技术优点之大成，因而使之具有如下优点：<br>（1）提高了系统的可扩展性<br>（2）增强了系统的可靠性<br>（3）可移植性强<br>（4）提供了对分布式系统的支持<br>（5）融入了面向对象技术</p><h4 id="4-微内核OS存在的问题"><a href="#4-微内核OS存在的问题" class="headerlink" title="4. 微内核OS存在的问题"></a>4. 微内核OS存在的问题</h4><p>微内核OS，虽然因为采用非常小的内核、客户&#x2F;服务器模式和消息传递机制给OS带来了很多优点，但也有潜在缺点，其中最主要的就是，微内核OS的运行效率比早期的OS有所降低。</p><p>实际情况是往往还会引起更多的上下文切换。例如，当某个服务器自身尚无能力完成客户请求而需要其它服务器的帮助时，如图1-12所示，其中的文件服务器还需要磁盘服务器的帮助，这时就需要进行8次上下文的切换。</p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905094709458.png" alt="image-20220905094709458"> </p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905094749495.png" alt="image-20220905094749495"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905094840353.png" alt="image-20220905094840353"></p><h1 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h1><p>了解前趋图的概念，使用前驱图分析程序的顺序执行和并发执行，并进行性能分析。进程的概念，PCB，进程的状态转换。同步的定义，记录型信号量，使用信号量解决进程同步问题。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905103554271.png" alt="image-20220905103554271"> </p><h2 id="2-1-程序"><a href="#2-1-程序" class="headerlink" title="2.1 程序"></a>2.1 程序</h2><p>在早期未配置OS的系统和单道批处理系统中，程序的执行方式是顺序执行，即在内存中仅装入一道用户程序，由它独占系统中的所有资源，只有在一个用户程序执行完成后，才允许装入另一个程序并执行。可见，这种方式浪费资源、系统运行效率低等缺点。</p><h3 id="2-1-1-前趋图"><a href="#2-1-1-前趋图" class="headerlink" title="2.1.1 前趋图"></a>2.1.1 前趋图</h3><p>为了能更好地描述程序的顺序和并发执行情况，我们引入了描述程序执行先后顺序的前趋图。</p><p>前趋图（Precedence Graph），是一个<strong>有向无循环图</strong>，可记为<strong>DAG</strong>（Directed Acyclic Graph），它用于描述进程之间执行的先后顺序。图中的每个结点可用来表示一个进程或程序段，乃至一条语句，结点间的有向边则表示两个结点之间存在的偏序（Partial Order)或前趋关系（Precedence Relation）。</p><p>进程（或程序）之间的前趋关系可用“→”来表示，如果进程Pi和Pj存在着前趋关系，可表示为（Pi, Pj)∈→，也可写作Pi→Pj，表示Pj开始执行之前Pi必须完成。此时称Pi是Pj的直接前趋，而称Pj是Pi的直接后继。</p><p>在前趋图中，把没有前趋的结点称为初始结点（Initial Node），把没有后继的结点称为终止结点（Final Node）。此外，每个结点还具有一个重量（Weight），用于表示该结点所含有的程序量或程序的执行时间。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905105940066.png" alt="image-20220905105940066"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905105950970.png" alt="image-20220905105950970"> </p><h3 id="2-1-2-程序顺序执行"><a href="#2-1-2-程序顺序执行" class="headerlink" title="2.1.2 程序顺序执行"></a>2.1.2 程序顺序执行</h3><p>（早期无OS时的系统，单道批处理系统）</p><h4 id="1-程序的顺序执行"><a href="#1-程序的顺序执行" class="headerlink" title="1. 程序的顺序执行"></a>1. 程序的顺序执行</h4><p>通常，一个应用程序由若干个程序段组成，每一个程序段完成特定的功能，它们在执行时，都需要按照某种<strong>先后顺序</strong>执行，仅当前一程序段执行完后，才运行后一程序段。</p><p>即使是一个程序段，也可能存在着执行顺序问题，下面示出了一个包含了三条语句的程序段。</p><p>S1: a :&#x3D;x+y;</p><p>S2: b :&#x3D;a-5;</p><p>S3: c :&#x3D;b+1;</p><p>其中，语句S2必须在语句S1后（即a被赋值）才能执行，语句S3也只能被b被赋值后才能执行，因此，三条语句存在着这样的前趋关系S1→S2→S3，应按前趋图所示的顺序执行。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220917162246583.png" alt="image-20220917162246583"> </p><h4 id="2-程序顺序执行时的特征"><a href="#2-程序顺序执行时的特征" class="headerlink" title="2. 程序顺序执行时的特征"></a>2. 程序顺序执行时的特征</h4><p>在程序顺序执行时，有以下三个特征：</p><p>① <strong>顺序性</strong>：指处理机严格地按照程序所规定的顺序执行，即每一操作必须在下一个操作开始之前结束。</p><p>② <strong>封闭性</strong>：指程序在封闭的环境下运行，即程序运行时独占全机资源，资源的状态（除初始状态外）只有本程序才能改变它，程序一旦开始执行，其执行结果不受外界因素影响。</p><p>③ <strong>可再现性</strong>：指只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都可获得相同的结果。程序顺序执行时的这种特性，为程序员检测和校正程序的错误带来了很大的方便。</p><h3 id="2-1-3-程序并发执行"><a href="#2-1-3-程序并发执行" class="headerlink" title="2.1.3 程序并发执行"></a>2.1.3 程序并发执行</h3><p>（多道批处理系统）</p><h4 id="1-程序的并发执行"><a href="#1-程序的并发执行" class="headerlink" title="1. 程序的并发执行"></a>1. 程序的并发执行</h4><p>如果对于一个程序，每一步都是顺序执行的，那么时间就会拉得非常长。</p><p>比如下面的这个例子中，每个程序都顺序执行输入、计算、打印三个步骤，一共需要9t。但是如果在第一个输入后，就输入第二个数，第一个数的计算不需要第二个，打印也是。那么就可以一个输入完，紧接着就输入下一个。三个程序互不影响。时间只需要5t。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220917162557907.png" alt="image-20220917162557907"></p><p>对于具有下述四条语句的程序段：</p><p>S1：a :&#x3D; x+2<br>S2:  b :&#x3D; y+4<br>S3:  c :&#x3D; a+b<br>S4:  d :&#x3D; c+d</p><p>可画出图2-4所示的前趋关系。可以看出：S3必须在a和b被赋值后方能执行；S4必须在S3之后执行，但S1和S2可以并行执行，因为它们彼此互不依赖。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905165408685.png" alt="image-20220905165408685"></p><p>只要程序不存在前趋关系，就可以并发执行；如果有前趋关系，那么等到前趋执行后，再执行程序。 </p><h4 id="2-程序并发执行时的特征"><a href="#2-程序并发执行时的特征" class="headerlink" title="2. 程序并发执行时的特征"></a>2. 程序并发执行时的特征</h4><p>在引入了程序间的并发功能后，虽然<strong>提高了</strong>系统的吞<strong>吐量和资源利用率</strong>，但由于它们<strong>共享</strong>系统资源，以及它们为完成同一项任务而相互合作，致使在这些并发执行的程序之间必将形成<strong>相互制约</strong>的关系，因此会给程序并发执行带来新的的特征。</p><p>（1）间断性：存在制约关系，如果前面的制约程序没有执行，那么后面的程序会暂停<br>（2）失去封闭性：分享资源，不同的进程使用某些共同资源后，这些资源不再由单个进程控制<br>（3）不可再现性：资源不受单个进程控制，重复执行，但资源的状态已发生改变，无法再现</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905172803269.png" alt="image-20220905172803269"> </p><h2 id="2-2-进程的描述"><a href="#2-2-进程的描述" class="headerlink" title="2.2 进程的描述"></a>2.2 进程的描述</h2><h3 id="2-2-1-进程的定义和特征"><a href="#2-2-1-进程的定义和特征" class="headerlink" title="2.2.1 进程的定义和特征"></a>2.2.1 进程的定义和特征</h3><h4 id="1-进程的定义"><a href="#1-进程的定义" class="headerlink" title="1. 进程的定义"></a>1. 进程的定义</h4><p>在多道程序环境下，程序的执行属于并发执行，此时它们将失去其封闭性，并具有间断性，以及其运行结果不可再现性的特征。由此，决定了通常的程序是不能参与并发执行的，否则，程序的运行也就失去了意义。</p><p>为了使并发执行的程序可以独立运行，在OS中配置了一个专门的数据结构：进程控制块 PCB（Process control block）</p><p>系统利用PCB来描述程序的运行，所以<strong>程序段、数据段、PCB</strong>三者便构成了进程实体，简称<strong>进程</strong>（process）</p><p>进程从不同的角度有不同的<strong>定义</strong>，其中较典型的定义有：</p><p>（1）进程是程序的一次执行<br>（2）进程是一个程序及其数据在处理机上顺序执行时所发生的活动<br>（3）进程是具有独立功能在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p><h4 id="2-进程的特征"><a href="#2-进程的特征" class="headerlink" title="2. 进程的特征"></a>2. 进程的特征</h4><p>进程和程序是两个截然不同的概念，除了进程具有程序所没有的PCB结构外，还具有下面一些特征：</p><p><strong>（1）动态性</strong><br>进程的实质是进程实体的一次执行过程。因此，动态性是进程的最基本的特征。动态性还表现在：“<strong>它由创建而产生，由调度而执行，由撤销而消亡</strong>”。可见，进程实体有一定的生命期，而程序则只是<strong>一组有序指令的集合</strong>，并存放于某种介质上，其本身并不具有运动的含义，因而是静态的。</p><p><strong>（2）并发性</strong><br>这是指多个进程实体同存于内存中，且能在一段时间内同时运行。并发性是进程的重要特征，同时也成为OS的重要特征。引入进程的目的也正是为了使其进程实体能和其它进程实体并发执行；而程序（没有建立PCB）是不能并发执行的。</p><p><strong>（3）独立性</strong><br>在传统的OS中，独立性是指进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单位。凡未建立PCB的程序都不能作为一个独立的单位参与运行。</p><p><strong>（4）异步性</strong><br>这是指进程按各自独立的、不可预知的速度向前推进，或说进程实体按异步方式运行。</p><h3 id="2-2-2-进程的基本状态及转换"><a href="#2-2-2-进程的基本状态及转换" class="headerlink" title="2.2.2 进程的基本状态及转换"></a>2.2.2 进程的基本状态及转换</h3><h4 id="1-进程的三种基本状态"><a href="#1-进程的三种基本状态" class="headerlink" title="1. 进程的三种基本状态"></a>1. 进程的三种基本状态</h4><p>由于多个进程在并发执行时共享系统资源，致使它们在运行过程中呈现间断性的运行规律，所以进程在其生命周期内可能具有多种形态。一般而言，每一个进程至少应处于以下三种基本状态之一：</p><p><strong>（1）就绪（Ready）状态</strong>：进程已分配到除CPU的所有资源，只要获得CPU，可立即执行<br><strong>（2）执行（Running）状态</strong>：已获得CPU，正在执行<br><strong>（3）阻塞（Block）状态</strong>：正在执行的进程因为发生某事件暂时无法继续执行，进程处于暂停状态</p><h4 id="2-三种基本状态的转换"><a href="#2-三种基本状态的转换" class="headerlink" title="2. 三种基本状态的转换"></a>2. 三种基本状态的转换</h4><p>三态转换原因：</p><ul><li>就绪状态➡执行状态：在调度程序为进程分配了处理机之后便可执行</li><li>执行态➡就绪态：正在执行的进程（当前进程）如果因分配给它的时间片已完而被剥夺处理机暂停执行时</li><li>执行态➡阻塞态：如果因发生某事件，致使当前进程的执行受阻（例如进程访问某临界资源，而该资源正被其他进程访问时），使之无法继续执行，则该进程状态将由执行转变为阻塞。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905193936244.png" alt="image-20220905193936244"></p><p>状态转换示例 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905194000383.png" alt="image-20220905194000383"> </p><h4 id="3-创建状态和终止状态（5状态）"><a href="#3-创建状态和终止状态（5状态）" class="headerlink" title="3. 创建状态和终止状态（5状态）"></a>3. 创建状态和终止状态（5状态）</h4><p><strong>1）创建状态</strong><br>如前所述，进程是由创建而产生。创建一个进程是个很复杂的过程，一般要通过多个步骤才能完成：如首先由进程申请一个空白PCB，并向PCB中填写用于控制和管理进程的信息；然后为该进程分配运行时所必须的资源；最后，把该进程转入就绪状态并插入就绪状态中。但如果进程所需的资源尚不能得到满足，比如系统尚无足够的内存使进程无法装入其中，此时创建工作尚未完成，进程不能被调度运行，于是把此时进程所处的状态称为创建状态。</p><p><strong>2）终止状态</strong><br>进程的终止也要通过两个步骤：首先，是等待操作系统进行善后处理，最后将其PCB清零，并将PCB空间返回系统。当一个进程到达了自然结束点，或是出现了无法克服的错误，或是被OS所终结，或是被其他有终止权的进程所终结，它将进入终止状态。进入终止态的进程以后不能再执行，但在OS中仍然保留一个记录，其中<strong>保存状态码和一些计时统计数据</strong>，供其他进程收集。一旦其他进程完成了对其信息的提取之后，OS将删除该进程，即将其PCB清零，并将该空白PCB返还系统。图2-6示出了增加了创建状态和终止状态后进程的五种状态及转换关系图。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220905194952282.png" alt="image-20220905194952282"></p><h3 id="2-2-3-挂起操作的进程状态的转换"><a href="#2-2-3-挂起操作的进程状态的转换" class="headerlink" title="2.2.3 挂起操作的进程状态的转换"></a>2.2.3 挂起操作的进程状态的转换</h3><p>挂起（suspend）：进程在OS中可以定义为暂时被淘汰出内存的进程，机器的资源是有限的，在资源不足的情况下，OS对在内存中的程序进行合理的安排，其中有的进程被暂时调离出内存，当条件允许的时候，会被OS再次调回内存。<br>若原本在执行，暂停执行；<br>若原本处于就绪，暂不接收调度</p><p>与此对应的使<strong>激活操作</strong>。</p><h4 id="1-挂起操作的引入"><a href="#1-挂起操作的引入" class="headerlink" title="1. 挂起操作的引入"></a>1. 挂起操作的引入</h4><p>引入挂起操作的原因，是基于系统和用户的如下需要<br>（1）终端用户的需要：中断用户怀疑程序有问题，希望暂停下来进行修改<br>（2）父进程请求：父进程希望挂起某个子进程，以便考查和修改子进程，或者协调各子进程之间的活动<br>（3）负荷调节的需要：系统中的任务过重，挂起一些不重要的进程，减轻负荷<br>（4）OS的需要：OS有时希望挂起某些进程，以检查资源使用情况或记账</p><h4 id="2-引入挂起原语操作后三个进程状态的转换"><a href="#2-引入挂起原语操作后三个进程状态的转换" class="headerlink" title="2. 引入挂起原语操作后三个进程状态的转换"></a>2. 引入挂起原语操作后三个进程状态的转换</h4><p>（1）活动就绪→静止就绪：当进程处于未被挂起的就绪状态时，称此为活动就绪状态，表示为Readya，此时进程可以接受调度。当用挂起原语Suspend将该进程挂起后，该进程便转变为静止就绪状态，表示为Readys，处于Readys状态的进程不再被调度执行。</p><p>（2）活动阻塞→静止阻塞：当进程处于未被挂起的阻塞状态时，称它是处于活动阻塞状态，表示为Blockeda。当用Suspend原语将它挂起后，进程便转变为静止阻塞状态，表示为Blockeds。处于该状态的进程在其所期待的事件出现后，它将从静止阻塞变为静止就绪Readys状态。</p><p>（3）静止就绪→活动就绪：处于Readys状态的进程若用激活原语Actives激活后，该进程将转变为Readya状态。</p><p>（4）静止阻塞→活动阻塞：处于Blockeds状态的进程若用激活原语Active激活后，进程将转变为Blockeda状态。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220906185645526.png" alt="image-20220906185645526"> </p><h3 id="2-2-4-进程管理中的数据结构"><a href="#2-2-4-进程管理中的数据结构" class="headerlink" title="2.2.4 进程管理中的数据结构"></a>2.2.4 进程管理中的数据结构</h3><h4 id="1-OS中用于管理控制的数据结构"><a href="#1-OS中用于管理控制的数据结构" class="headerlink" title="1. OS中用于管理控制的数据结构"></a>1. OS中用于管理控制的数据结构</h4><p>在计算机系统中，对于每个资源和每个进程都设置了一个数据结构，用于表征其实体，我们称之为<strong>资源信息表</strong>或<strong>进程信息表</strong>，其中包含了资源或进程的标识、描述、状态等信息以及一批指针。</p><p>通过这些指针，可以将同类资源或进程的信息表，或者同一进程所占用的资源信息表分类链接成不同的队列，便于OS进行查找。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220906190830833.png" alt="image-20220906190830833"> </p><h4 id="2-进程控制块PCB的作用"><a href="#2-进程控制块PCB的作用" class="headerlink" title="2. 进程控制块PCB的作用"></a>2. 进程控制块PCB的作用</h4><p>（1）作为独立运行基本单位的标志<br>（2）能实现间断性运行方式<br>（3）提供进程管理所需要的信息<br>（4）提供进程调度所需要的信息<br>（5）实现与其它进程的同步与通信</p><h4 id="3-进程控制块中的信息"><a href="#3-进程控制块中的信息" class="headerlink" title="3. 进程控制块中的信息"></a>3. 进程控制块中的信息</h4><p>在进程控制块中，主要包括下述四个方面的信息。</p><p>1）进程标识符<br>        进程标识符用于唯一地标识一个进程。一个进程通常有两种标识符：<br>        （1）外部标识符：方便用户对进程的访问。每个进程设置一个。由字母、数字组成。<br>        （2）内部标识符：方便系统对进程的使用。通常是一个进程的序号。</p><p>2）处理机状态<br>        处理机状态信息也称为处理机的<strong>上下文</strong>，主要是由处理机的各种寄存器中的内容组成的。（EIP）<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220906192242184.png" alt="image-20220906192242184"> </p><p>3）进程调度信息<br>        在OS进行调度时，必须了解进程的状态及有关进程调度的信息，这些信息包括：<br>        ① 进程状态，指明进程的当前状态，它是作为进程调度和对换时的依据<br>        ② 进程优先级，是用于描述进程使用处理机的优先级别的一个整数，优先级高的进程应优先获得处理机<br>        ③ 进程调度所需的其它信息，它们与所采用的进程调度算法有关，比如，进程已等待CPU的时间总和、进程已执行的时间总和等<br>        ④ 事件，是指进程由执行状态转变为阻塞状态所等待发生的事件，即阻塞原因</p><p>4）进程控制信息<br>        是指用于进程控制所必须的信息，它包括：<br>        ① 程序和数据的地址，进程实体中的程序和数据的内存或外存地（首）址，以便再调度到该进程执行时，能从PCB中找到其程序和数据<br>        ② 进程同步和通信机制，这是实现进程同步和进程通信时必需的机制，如消息队列指针、信号量等，它们可能全部或部分地放在PCB中<br>        ③ 资源清单，在该清单中列出了进程在运行期间所需的全部资源（除CPU以外），另外还有一张已分配到该进程的资源的清单<br>        ④ 链接指针，它给出了本进程（PCB）所在队列中的下一个进程的PCB的首地址</p><h4 id="4-进程控制块的组织方式"><a href="#4-进程控制块的组织方式" class="headerlink" title="4. 进程控制块的组织方式"></a>4. 进程控制块的组织方式</h4><p>​在一个系统中，通常可拥有数十个、数百个乃至数千个PCB。为了能对它们加以有效的管理，应该用适当的方式将这些PCB组织起来。</p><p>目前常用的组织方式有以下三种。</p><p><strong>（1）线性方式</strong>，即将系统中所有的PCB都组织在一张线性表中，将该表的首址存放在内存的一个专用区域中。该方式实现简单、开销小，但每次查找时都需要扫描整张表，因此适合进程数目不多的系统。下图示出了线性表的PCB组织方式。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220906194407666.png" alt="image-20220906194407666"></p><p>（2）<strong>链接方式</strong> ，即把具有相同状态进程的PCB分别通过PCB中的链接字链接成一个队列。这样，可以形成就绪队列、若干个阻塞队列和空白队列等。对就绪队列而言，往往按进程的优先级将PCB从高到低进行排列，将优先级高的进程PCB排在队列的前面。同样，也可把处于阻塞状态进程的PCB根据阻塞原因的不同，排成多个阻塞队列，如等待I&#x2F;O操作完成的队列和等待分配内存的队列等。下图示出了一种链接队列的组织方式。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220906194426935.png" alt="image-20220906194426935"></p><p>（3）<strong>索引方式</strong>，即系统根据所有进程状态的不同，建立几张索引表，例如，就绪索引表、阻塞索引表等，并把各索引表在内存的首地址记录在内存的一些专用单元中。在每个索引表的表目中，记录具有相应状态的某个PCB在PCB表中的地址。下图示出了索引方式的PCB组织。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220917205312110.png" alt="image-20220917205312110"></p><h2 id="2-3-进程控制"><a href="#2-3-进程控制" class="headerlink" title="2.3 进程控制"></a>2.3 进程控制</h2><p>​进程控制是进程管理中最基本的功能，主要包括创建新进程、终止已完成的进程、将因发生异常情况而无法继续运行的进程置于阻塞状态、负责进程运行中的状态转换等功能。如当一个正在执行的进程因等待某事件而暂时不能继续执行时，将其转变为阻塞状态，而在该进程所期待的事件出现后，又将该进程转换为就绪状态等。</p><p>进程控制一般是由OS的内核中的<strong>原语</strong>来实现的。</p><h3 id="2-3-1-OS内核"><a href="#2-3-1-OS内核" class="headerlink" title="2.3.1 OS内核"></a>2.3.1 OS内核</h3><p>OS内核就是OS中最基本、和硬件联系最紧密的一批软件操作。</p><p>目的:对这些软件进行保护，防止遭受其他应用程序的破坏<br>        提高OS的效率</p><p>处理机的执行状态分为系统态和用户态两种：</p><p>①系统态：又称为管态，也叫内核态。具有较高的特权，能执行一切指令，访问所有的寄存器和存储区，传统的OS都在系统态运行。</p><p>②用户态：又称为目态。具有较低特权，仅能执行规定的指令，访问指定的寄存器和存储区。一般情况下，应用程序只能在用户态运行。</p><h4 id="1-支撑功能"><a href="#1-支撑功能" class="headerlink" title="1. 支撑功能"></a>1. 支撑功能</h4><p>（1）中断处理<br>（2）时钟管理<br>（3）原语操作</p><p>原语（Primitive）是由若干条指令组成的，用于完成一定功能的一个过程。它与一般过程的区别在于：它们是“原子操作（Atomic Operation）”。所谓原子操作，是指一个操作中的所有动作要么全做，要么全不做。换言之，它是一个不可分割的基本单位，因此，在执行过程中不允许被中断。原子操作在<strong>管态</strong>下执行，常驻内存。</p><h4 id="2-资源管理功能"><a href="#2-资源管理功能" class="headerlink" title="2. 资源管理功能"></a>2. 资源管理功能</h4><p>（1）进程管理</p><p>（2）存储器管理</p><p>（3）设备管理</p><h3 id="2-3-2-进程的创建"><a href="#2-3-2-进程的创建" class="headerlink" title="2.3.2 进程的创建"></a>2.3.2 进程的创建</h3><h4 id="1-进程的层次结构"><a href="#1-进程的层次结构" class="headerlink" title="1. 进程的层次结构"></a>1. 进程的层次结构</h4><p>在OS中，允许一个进程创建另一个进程，通常把创建进程的进程称为父进程，而把被创建的进程称为子进程。子进程可继续创建更多的孙进程，由此便形成了一个进程的层次结构。如在UNIX中，进程与其子孙进程共同组成一个进程家族（组）。</p><h4 id="2-进程树"><a href="#2-进程树" class="headerlink" title="2. 进程树"></a>2. 进程树</h4><p>进程图（Process Graph）：形象地描述一个进程的家族关系图</p><p>Windows中没有进程树的概念，所有的进程都有相同的地位。</p><p>前趋图和进程树一样吗？</p><p>一个父进程可以有多个子进程，但一个子进程没有多个父进程。不一样</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220906195426044.png" alt="image-20220906195426044"></p><h4 id="3-引起创建进程的事件"><a href="#3-引起创建进程的事件" class="headerlink" title="3. 引起创建进程的事件"></a>3. 引起创建进程的事件</h4><p>为使程序之间能并发运行，应先为它们分别创建进程。</p><p>导致一个进程去创建另一个进程的典型事件有四类：</p><p>（1）用户登录</p><p>（2）作业调度</p><p>（3）提供服务</p><p>（4）应用请求</p><h4 id="4-进程的创建（Creation-of-Process）"><a href="#4-进程的创建（Creation-of-Process）" class="headerlink" title="4. 进程的创建（Creation of Process）"></a>4. 进程的创建（Creation of Process）</h4><p>在系统中每当出现了创建新进程的请求后，OS便调用进程<strong>创建原语Creat</strong>按下述步骤创建一个新进程：</p><p>（1）申请空白PCB，为新进程申请获得唯一的数字标识符，并从PCB集合中索取一个空白PCB。</p><p>（2）为新进程分配其运行所需的资源，包括各种物理和逻辑资源，如内存、文件、I&#x2F;O设备和CPU时间等。</p><p>（3）初始化进程控制块PCB</p><p>（4）如果进程就绪队列能够接纳新进程，便将新进程插入就绪队列</p><h3 id="2-3-3-进程的终止"><a href="#2-3-3-进程的终止" class="headerlink" title="2.3.3 进程的终止"></a>2.3.3 进程的终止</h3><h4 id="1-引起进程终止（Tremination-of-Process）的事件"><a href="#1-引起进程终止（Tremination-of-Process）的事件" class="headerlink" title="1. 引起进程终止（Tremination of Process）的事件"></a>1. 引起进程终止（Tremination of Process）的事件</h4><p>（1）正常结束<br>        表示进程的任务已经完成，准备退出运行。</p><p>（2）异常结束<br>        是指进程在运行时发生了某种异常事件，使程序无法继续运行。<br>        常见的异常事件有：①越界错，程序所访问的存储区，已超出该进程的区域<br>                                            ②保护错，进程试图去访问一个不允许访问的资源或文件<br>                                            ③非法指令，程序试图去执行一条不存在的指令<br>                                            ④特权指令错，用户进程试图去执行一条只允许OS执行的指令。<br>                                            ⑤运行超时，指进程的执行时间超过了指定的最大值<br>                                            ⑥等待超时，进程等待某事件的时间超过了规定的最大值<br>                                            ⑦算术运算错，指进程试图去执行被禁止的运算，比如被0除<br>                                            ⑧I&#x2F;O故障</p><p>（3）外界干预<br>            指进程应外界的请求而终止运行。<br>            这些干预有：①操作员或OS干预，指如果系统中发生了某事件，由操作员或OS解救出来<br>                                    ②父进程请求，指子进程已完成任务，请求父进程结束子进程<br>                                    ③因父进程终止，子进程终止</p><h4 id="2-进程的终止过程"><a href="#2-进程的终止过程" class="headerlink" title="2. 进程的终止过程"></a>2. 进程的终止过程</h4><p>如果系统中发生了要求终止进程的某事件，OS便调用进程<strong>终止原语（halt）</strong>，按下述过程去终止指定的进程：</p><p>（1）根据被终止进程的标识符，从PCB集合中检索出该进程的PCB，从中读出该进程的状态</p><p>（2）若被终止进程正处于执行状态，应立即终止该进程的执行，并置调度标志为真，用于指示该进程被终止后应重新进行调度。</p><p>（3）若该进程还有子孙进程，还应将其所有子孙进程也都予以终止，以防它们称为不可控的进程</p><p>（4）将被终止进程所拥有的全部资源或者归还给其父进程，或者归还给系统</p><p>（5）将被终止进程（PCB）从所在队列（或链表）中移出，等待其它程序来搜集信息</p><h3 id="2-3-4-进程的阻塞与唤醒"><a href="#2-3-4-进程的阻塞与唤醒" class="headerlink" title="2.3.4 进程的阻塞与唤醒"></a>2.3.4 进程的阻塞与唤醒</h3><h4 id="1-引起进程阻塞和唤醒的事件"><a href="#1-引起进程阻塞和唤醒的事件" class="headerlink" title="1. 引起进程阻塞和唤醒的事件"></a>1. 引起进程阻塞和唤醒的事件</h4><p>有下述几类事件会引起进程阻塞或被唤醒</p><p>（1）向系统请求共享资源失败：进程所需的资源不够，无法运行，变为阻塞状态</p><p>（2）等待某种操作的完成</p><p>（3）新数据尚未到达</p><p>（4）等待新任务的到达</p><h4 id="2-进程阻塞过程"><a href="#2-进程阻塞过程" class="headerlink" title="2. 进程阻塞过程"></a>2. 进程阻塞过程</h4><p>正在执行的进程，如果发生了上述某事件，进程便通过调用阻塞原语<strong>block</strong>将<strong>自己阻塞</strong>。可见，阻塞是进程自身的一种主动行为。</p><p>进入block过程后，由于该进程还处于执行状态，所以应先<strong>立即停止执行</strong>，把进程控制块中的现行状态由“执行”改为阻塞，并将PCB插入阻塞队列。如果系统中设置了因不同事件而阻塞的多个阻塞队列，则应将本进程插入到具有相同事件的阻塞队列。。最后，转调度程序进行重新调度，将处理机分配给另一就绪进程，并进行切换，亦即，保留被阻塞进程的处理机状态，按新进程的PCB中的处理机状态设置CPU的环境。</p><h3 id="2-3-5-进程的挂起与激活"><a href="#2-3-5-进程的挂起与激活" class="headerlink" title="2.3.5 进程的挂起与激活"></a>2.3.5 进程的挂起与激活</h3><h4 id="1-进程的挂起"><a href="#1-进程的挂起" class="headerlink" title="1. 进程的挂起"></a>1. 进程的挂起</h4><p>当系统中出现了引起进程挂起的事件时，OS利用挂起原语suspend将指定进程或处于阻塞状态的进程挂起。</p><p>suspend的执行过程：<br>首先检查被挂起进程的状态，若处于活动就绪状态，便将其改为静止就绪；<br>对于活动阻塞状态的进程，则将之改为静止阻塞<br>为了方便用户或父进程考查该进程的运行情况，而把该进程的PCB复制到某指定的内存区域。<br>最后，若被挂起的进程正在执行，则转向调度程序重新调度。</p><h4 id="2-进程的激活过程"><a href="#2-进程的激活过程" class="headerlink" title="2. 进程的激活过程"></a>2. 进程的激活过程</h4><p>当进程发生激活进程的事件时，OS利用激活原语active，将指定进程激活。</p><p>激活原语先将进程从外存调入内存，检查该进程的现行状态，若是静止就绪，改为活动就绪；若为静止阻塞，改为活动阻塞；<br>假如采用的是抢占调度策略，则每当有静止就绪进程被激活而插入就绪队列时，便应检查是否要进行重新调度，即由调度程序将被激活的进程与当前进程两者的优先级进行比较，如果被激活的进程优先级高，立即剥夺当前进程的运行，把处理机分配给刚刚激活的进程。</p><hr><h2 id="2-4-进程同步"><a href="#2-4-进程同步" class="headerlink" title="2.4 进程同步"></a>2.4 进程同步</h2><p>引入进程</p><p><strong>优点：</strong>使系统中的多道程序并发执行，改善资源利用率，提高吞吐量</p><p><strong>缺点：</strong>系统更加复杂，如果没有妥善的管理，极易出现混乱</p><h3 id="2-4-1-进程同步的基本概念"><a href="#2-4-1-进程同步的基本概念" class="headerlink" title="2.4.1 进程同步的基本概念"></a>2.4.1 进程同步的基本概念</h3><p>进程同步机制的基本任务，是对多个相关进程在执行次序上进行协调，使并发执行的诸进程之间能按照一定的规则（或时序）共享系统资源，并能很好地相互合作，从而使程序的执行具有可再现性。</p><h4 id="1-两种形式的制约关系"><a href="#1-两种形式的制约关系" class="headerlink" title="1. 两种形式的制约关系"></a>1. 两种形式的制约关系</h4><p>1）间接相互制约关系</p><p>对于打印机、磁带机这样的临界资源，必须保证进程<strong>互斥访问</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220918102122051.png" alt="image-20220918102122051"> </p><p>2）直接相互制约关系</p><p>进程之间通过<strong>相互合作</strong>完成同一项任务。</p><p>比如输入进程A和计算进程B，它们共享一个缓冲区。进程A通过缓冲区向B提供数据，进程B从缓冲区取出数据，并对数据进行处理。<br>如果缓冲区为空，必须等到进程A将数据输入缓冲区才能唤醒B；<br>反之，当缓冲区已满，进程A不能向缓冲区投放数据而被阻塞，必须等B取出后才被唤醒</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220918102636196.png" alt="image-20220918102636196"> </p><h4 id="2-临界资源（Critical-Resouce）"><a href="#2-临界资源（Critical-Resouce）" class="headerlink" title="2. 临界资源（Critical Resouce）"></a>2. 临界资源（Critical Resouce）</h4><p>临界资源：诸进程间采取互斥方式实现资源共享，比如打印机</p><p><strong>生产者-消费者（producer-consumer）问题：</strong><br>一群生产者生产产品，提供给消费者去消费。为使生产者进程与消费者进程能并发执行，在两者之间设置了一个具有n个缓冲区的缓冲池。<br>生产者进程生产一个产品，放入缓冲区；消费者可从缓冲区取走产品。<br>不允许消费者到空缓冲区取产品，也不允许生产者向满缓冲区放产品。</p><p>利用一个数组buffer代表具有n个缓冲区的缓冲池。<br>每投入一个产品，数组单元指针in加1<br>每取出一个产品，数组单元指针out加1<br>由于buffer数组是被组织成循环缓冲的，如<code>(in+1)%n = out</code>表示缓冲池满，而<code>in=out</code>表示缓冲池空<br>此外，设置一个整型变量counter，初始值为0。表示缓冲池中现有的产品</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220910150205944.png" alt="image-20220910150205944"></p><p>nextp用于暂时存放每次刚刚生产出来的产品；nextc用于存放每次要消费的产品 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220910150857327.png" alt="image-20220910150857327"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220910151104216.png" alt="image-20220910151104216"></p><p>程序并发执行时，因为使用的是共同的资源，程序的执行失去再现性，结果错误。但是如果将counter作为临界资源使用，每次counter只能在一个程序中处理，那结果正确</p><h4 id="3-临界区（critical-section）"><a href="#3-临界区（critical-section）" class="headerlink" title="3. 临界区（critical section）"></a>3. 临界区（critical section）</h4><p>每个进程中访问临界资源的<strong>代码片段</strong>称为临界区</p><p>如果可以保证进程可以互斥地进入临界区，便可实现诸进程对临界资源的互斥访问。</p><p>因此，每个进程在使用临界资源<strong>前</strong>应对临界资源进行检查，而实现这一功能的代码就是<strong>进入区（entry section）</strong></p><p>退出后，也应该加入一段代码，修改临界资源，恢复为未被访问的标志。这就是<strong>退出区（exit section）</strong></p><p>除进入区、退出区、临界区的代码称为<strong>剩余区（remainder section)</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220918110343053.png" alt="image-20220918110343053"> </p><h4 id="4-同步机制应遵循的规则"><a href="#4-同步机制应遵循的规则" class="headerlink" title="4. 同步机制应遵循的规则"></a>4. 同步机制应遵循的规则</h4><p>​为实现进程互斥地进入自己的临界区，可用软件方法，更多的是在系统中设置专门的同步机构来协调各进程间的运行。</p><p>所有同步机制都应遵循下述四条准则：</p><p><strong>（1）空闲让进</strong></p><p><strong>（2）忙则等待</strong></p><p><strong>（3）有限等待</strong>：对要求访问临界资源的进程，应保证在有限时间内能进入临界区，以免陷入“死等”状态。</p><p><strong>（4）让权等待</strong>：当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入“忙等”状态</p><h3 id="2-4-3-信号量机制"><a href="#2-4-3-信号量机制" class="headerlink" title="2.4.3 信号量机制"></a>2.4.3 信号量机制</h3><h4 id="1-整型信号量"><a href="#1-整型信号量" class="headerlink" title="1. 整型信号量"></a>1. 整型信号量</h4><p>最初由Dijkstra把整型信号量定义为一个用于表示资源数目的整型量S，它与一般整型量不同，除初始化外，仅能通过两个标准的原子操作（Atomic Operation）：wait(S)、signal(S)来访问。</p><p>原子操作：在执行时是不可中断的</p><p>很长时间以来，一直被称为P、V操作<br>wait(S)：P(S)<br>signal(S)：V(S)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wait (S)</span><br><span class="line">&#123;</span><br><span class="line">while (S &lt;= 0);//do no-op意思是空指令，满足的时候什么也不做</span><br><span class="line">S--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal (S)</span><br><span class="line">&#123;</span><br><span class="line">S++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-记录型信号量"><a href="#2-记录型信号量" class="headerlink" title="2. 记录型信号量"></a>2. 记录型信号量</h4><p>​在整型信号量机制中的wait操作，只要是信号量S≤0，就会不断测试。因此，<strong>该机制并未遵循“让权等待”的准则，而是使进程处于“忙等”的状态</strong></p><p>​记录型信号量机制则是一种不存在“忙等”现象的进程同步机制。</p><p>​但在采用了“让权等待”的策略后，又会出现多个进程等待访问同一临界资源的情况。为此，在信号量机制中，<strong>除了需要一个用于代表资源数目的整型变量value外，还应增加一个进程链表指针list，用于链接上述的所有等待进程。</strong></p><p>记录型信号量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">int value;</span><br><span class="line">struct process_control_block *list;</span><br><span class="line">&#125;semaphore;</span><br></pre></td></tr></table></figure><p>wait原语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wait (semaphore *S)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;value--;</span><br><span class="line">if (S-&gt;value &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">block(S-&gt;list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>signal原语</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signal (semaphore *S)</span><br><span class="line">&#123;</span><br><span class="line">S-&gt;value++;</span><br><span class="line">if (S-&gt;value &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">wakeup(S-&gt;list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>S-&gt;value初值表示系统中某类<strong>资源的数目</strong>，因而又称为资源信号量，</p><p>对它的每次<strong>wait操作</strong>，意味着进程请求一个单位的该类资源，使系统中可供分配的该类资源数减少一个，因此描述为<strong>S-&gt;value–</strong>;</p><p>当S-&gt;value &lt; 0时，表示该类资源已分配完毕，因此进程应调用block原语进行自我阻塞，放弃处理机，并插入到信号量链表S-&gt;list中。可见，该机制遵循了“让权等待”准则。此时S-&gt;value 的绝对值表示在该信号量链表中已阻塞进程的数目。</p><p>对信号量的每次<strong>signal操作</strong>表示执行进程释放一个单位资源，使系统中可供分配的该类资源数增加一个，故**S-&gt;value++**操作表示资源数目加1.若加1后仍是S-&gt;value ≤0，则表示在该信号量链表中仍有等待该资源的进程被阻塞，故还应调用wakeup原语，将S-&gt;list链表中的第一个等待进程唤醒。如果S-&gt;value 的初值为1，表示只允许一个进程访问临界资源，此时的信号量转化为互斥信号量，用于进程互斥。</p><h4 id="3-AND型信号量"><a href="#3-AND型信号量" class="headerlink" title="3. AND型信号量"></a>3. AND型信号量</h4><p>AND同步机制的基本思想是：将进程在整个运行过程中需要的所有资源，<strong>一次性全部地分配给进程</strong>，待进程使用完后再一起释放。只要有一个资源未能分配给进程，其它所有可能为之分配的资源也不分配给它。亦即，对若干个临界资源的分配采取原子操作方式：要么把它所请求的资源全部分配给进程，要么一个也不分配。</p><p>死锁理论：一个进程需要两个或多个共享资源后方能执行任务，如果按照进程互斥设置，最后可能会出现所有资源锁死的情况，称为死锁。</p><p>wait中加了一个AND条件，所以叫做AND同步，或同时wait操作，即Swait(Simultaneous wait)定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Swait(S1, S2, ..., Sn)</span><br><span class="line">&#123;</span><br><span class="line">while (TRUE)</span><br><span class="line">&#123;</span><br><span class="line">if (Si &gt;= 1 &amp;&amp; ... &amp;&amp; Sn &gt;= 1)</span><br><span class="line">&#123;</span><br><span class="line">for (i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">Si--;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">place the process in the waiting queue associated with the first Si found with Si &lt; 1,</span><br><span class="line">and set the program count of this process to the beginning of Swait operation</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Ssignal(S1, S2, ..., Sn)</span><br><span class="line">&#123;</span><br><span class="line">while (TRUE)</span><br><span class="line">&#123;</span><br><span class="line">for (i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">Si++;</span><br><span class="line">Remove all the process waiting in the queue associated with Si into the ready queue</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-信号量集"><a href="#4-信号量集" class="headerlink" title="4. 信号量集"></a>4. 信号量集</h4><p>在前面的记录型信号量机制中，wait(S)和signal(S)操作仅能施加加1或减1，所以每次只能对某类临界资源进行一个单位的申请或释放。当需要多个单位资源时，多次wait操作是非常低效的，而且会增加死锁的概率。</p><p>因此，为了确保系统的安全性和高效性，当所申请的资源数量低于某一下限值时，进行管制，不予分配。在每次分配前，都必须测试资源的数量，判断是否大于可分配的下限值，再判断是否分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Swait(S1,t1,d1, ..., Sn,tn,dn);</span><br><span class="line">Ssignal(S1, d1, ..., Sn, dn);</span><br><span class="line">ti:下限值</span><br><span class="line">di：需求值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">几种情况</span><br><span class="line">Swait(S, d, d);//只有一个信号量S，允许每次请求d个资源。当现有资源小于d时，不予分配</span><br><span class="line">Swait(S, 1, 1);//此时是记录型信号量（S&gt;1时）或互斥信号量（S = 1时）</span><br><span class="line">Swait(S, 1, 0);//这是一种很特殊且很有用的信号量操作。当S≥1时，允许多个进程进入特定区；当S变为0时，将阻止任何进程进入特定区。相当于一个可控开关</span><br></pre></td></tr></table></figure><h3 id="2-4-4-信号量的应用"><a href="#2-4-4-信号量的应用" class="headerlink" title="2.4.4 信号量的应用"></a>2.4.4 信号量的应用</h3><h4 id="1-利用信号量实现进程互斥"><a href="#1-利用信号量实现进程互斥" class="headerlink" title="1. 利用信号量实现进程互斥"></a>1. 利用信号量实现进程互斥</h4><p>​为使多个进程能互斥地访问某临界资源，只需为该资源设置一互斥信号量mutex，并设其初始值为1，然后将各进程访问该资源的临界区CS置于wait（mutex）和signal（mutex）操作之间即可。</p><p>每个欲访问该临界资源的进程在进入临界区前，都要先对mutex执行wait操作，若资源未被访问，本次wait操作必然成功，进程便可进入自己的临界区，这时其它进程若要访问，wait操作失败，进入阻塞状态。</p><blockquote><p>注意：利用信号量机制实现互斥时，wait和signal操作必须成对出现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mutex：mutual exclusion 表示的是互斥信号量</span><br><span class="line"></span><br><span class="line">初始值可以为2，3</span><br><span class="line"></span><br><span class="line">while (1)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">进入区 =wait(mutex)p()</span><br><span class="line"></span><br><span class="line">临界区（CS）</span><br><span class="line"></span><br><span class="line">退出区 =signal(mutex)v()</span><br><span class="line"></span><br><span class="line">剩余区</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>代码描述</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex.value = 1;</span><br><span class="line">PA()</span><br><span class="line">&#123;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">wait(mutex);</span><br><span class="line">临界区;</span><br><span class="line">signal(mutex);</span><br><span class="line">剩余区;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">PB()</span><br><span class="line">&#123;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">wait(mutex);</span><br><span class="line">临界区;</span><br><span class="line">signal(mutex);</span><br><span class="line">剩余区;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-利用信号量实现前趋关系"><a href="#2-利用信号量实现前趋关系" class="headerlink" title="2. 利用信号量实现前趋关系"></a>2. 利用信号量实现前趋关系</h4><p>还可利用信号量来描述程序或语句之间的前趋关系。设有两个并发执行的进程P1和P2.</p><p>P1中有语句S<sub>1</sub>；P2中有语句S<sub>2</sub>。</p><p>我们希望在S<sub>1</sub>执行后再执行S<sub>2</sub>。为实现这种前趋关系，只需使P1、P2共享一个公用信号量S，并赋予其初值为0，将signal(S)操作放在语句S<sub>1</sub>后面，而在S<sub>2</sub>前面插入wait(S)操作。</p><p>在进程P1中，用S<sub>1</sub>；signal(S);</p><p>在进程P2中，用wait(S);S<sub>2</sub>；</p><p>就是设置信号量为0，直接进行wait操作，mutex-&gt;value &#x3D; -1，不能进入下一行代码，阻塞了。</p><h3 id="2-4-5-管程控制"><a href="#2-4-5-管程控制" class="headerlink" title="2.4.5 管程控制"></a>2.4.5 管程控制</h3><p>信号量机制很是方便，但是每个要访问临界资源的进程都必须自备同步操作wait(S)和signal(S)。这就使大量的同步操作分散在各个进程中。给系统的管理带来了麻烦，如果同步操作使用不当，还会导致系统死锁。</p><p>因此，出现了管程（Monitors）。</p><h4 id="1-管程的定义"><a href="#1-管程的定义" class="headerlink" title="1. 管程的定义"></a>1. 管程的定义</h4><p>系统中的各种硬件资源和软件资源均可用数据结构抽象地描述其资源特性，即用少量信息和对该资源所执行的操作来表征该资源，而忽略它们的内部结构和实现细节。</p><p>由上述的定义可知，管程由四部分组成：① 管程的名称；② 局部于管程的共享数据结构说明；③ 对该数据结构进行操作的一组过程；④ 对局部于管程的共享数据设置初始值的语句。图2-15是一个管程的示意图。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221119104718173.png" alt="image-20221119104718173"> </p><h4 id="2-条件变量"><a href="#2-条件变量" class="headerlink" title="2. 条件变量"></a>2. 条件变量</h4><p>在利用管程实现进程同步时，必须设置同步工具，如两个同步操作原语wait和signal。当某进程通过管程请求获得临界资源而未能满足时，管程便调用wait原语使该进程等待，并将其排在等待队列上，如图2-13所示。仅当另一进程访问完成并释放该资源之后，管程才又调用signal原语，唤醒等待队列中的队首进程。 </p><h2 id="2-5-经典进程的同步问题"><a href="#2-5-经典进程的同步问题" class="headerlink" title="2.5 经典进程的同步问题"></a>2.5 经典进程的同步问题</h2><h3 id="2-5-1-生产者-消费者问题"><a href="#2-5-1-生产者-消费者问题" class="headerlink" title="2.5.1 生产者-消费者问题"></a>2.5.1 生产者-消费者问题</h3><h4 id="1-利用记录型信号量解决"><a href="#1-利用记录型信号量解决" class="headerlink" title="1. 利用记录型信号量解决"></a>1. 利用记录型信号量解决</h4><p>公用缓冲池有n个缓冲区，可利用互斥信号量mutex实现诸进程的互斥使用</p><p>利用信号量empty和full分别表示缓冲池中空缓冲池和满缓冲池的数量。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220913150041538.png" alt="image-20220913150041538"></p><h4 id="2-利用AND信号量解决"><a href="#2-利用AND信号量解决" class="headerlink" title="2. 利用AND信号量解决"></a>2. 利用AND信号量解决</h4><p>用Swait(empty, mutex)来代替wait(empty)和wait(mutex)；</p><p>用Ssignal(mutex, full)来代替signal(mutex)和signal(full) </p><p>用Swait(full, mutex)来代替wait(full)和wait(mutex)；</p><p>用Ssignal(mutex, empty)来代替signal(mutex)和signal(empty) </p><p><strong>描述如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int i = 0, out = 0;</span><br><span class="line">item buffer[n];</span><br><span class="line">semaphore mutex = 1, empty = n, full = 0</span><br><span class="line">void producer()</span><br><span class="line">&#123;</span><br><span class="line">do </span><br><span class="line">&#123;</span><br><span class="line">producer an item nextp;</span><br><span class="line">...</span><br><span class="line">Swait(empty, mutex);</span><br><span class="line">buffer[in] = nextp;</span><br><span class="line">in = (in + 1) % n;</span><br><span class="line">Signal(mutex, full);</span><br><span class="line">&#125;while (TRUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void consumer()</span><br><span class="line">&#123;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">Swait(full, mutex);</span><br><span class="line">nextc = buffer[out];</span><br><span class="line">out = (out + 1) % n;</span><br><span class="line">Ssignal(mutex, empty);</span><br><span class="line">consumer the item in nextc;</span><br><span class="line">...</span><br><span class="line">&#125;while (TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-利用管程"><a href="#3-利用管程" class="headerlink" title="3. 利用管程"></a>3. 利用管程</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211251787.png" alt="image-20220920211251787"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211307870.png" alt="image-20220920211307870"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211318814.png" alt="image-20220920211318814"> </p><h3 id="2-5-2-哲学家进餐问题"><a href="#2-5-2-哲学家进餐问题" class="headerlink" title="2.5.2 哲学家进餐问题"></a>2.5.2 哲学家进餐问题</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211343353.png" alt="image-20220920211343353"></p><h4 id="1-利用记录型信号量解决-1"><a href="#1-利用记录型信号量解决-1" class="headerlink" title="1. 利用记录型信号量解决"></a>1. 利用记录型信号量解决</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211410901.png" alt="image-20220920211410901"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211419938.png" alt="image-20220920211419938"> </p><h4 id="2-利用AND信号量机制解决"><a href="#2-利用AND信号量机制解决" class="headerlink" title="2. 利用AND信号量机制解决"></a>2. 利用AND信号量机制解决</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211448469.png" alt="image-20220920211448469"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211501026.png" alt="image-20220920211501026"> </p><h3 id="2-5-3-读者写者问题"><a href="#2-5-3-读者写者问题" class="headerlink" title="2.5.3 读者写者问题"></a>2.5.3 读者写者问题</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211534229.png" alt="image-20220920211534229"> </p><h4 id="1-利用记录型信号量"><a href="#1-利用记录型信号量" class="headerlink" title="1. 利用记录型信号量"></a>1. 利用记录型信号量</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211556655.png" alt="image-20220920211556655"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211604271.png" alt="image-20220920211604271"> </p><h4 id="2-利用信号量集"><a href="#2-利用信号量集" class="headerlink" title="2. 利用信号量集"></a>2. 利用信号量集</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211623753.png" alt="image-20220920211623753"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220920211631447.png" alt="image-20220920211631447"> </p><h1 id="三、处理机调度与死锁"><a href="#三、处理机调度与死锁" class="headerlink" title="三、处理机调度与死锁"></a>三、处理机调度与死锁</h1><p>在多道环境下，内存中存在多个进程，其数目往往多于处理机数目。</p><p>因此，要求系统按照某种算法，动态地将处理机分配给处于就绪状态的一个进程。</p><p>分配处理机的任务是由<strong>处理机调度程序</strong>完成的。</p><h2 id="3-1-处理机调度的层次和调度算法的目标"><a href="#3-1-处理机调度的层次和调度算法的目标" class="headerlink" title="3.1 处理机调度的层次和调度算法的目标"></a>3.1 处理机调度的层次和调度算法的目标</h2><p>调度的实质是一种资源分配。</p><h3 id="3-1-1-处理机调度的层次"><a href="#3-1-1-处理机调度的层次" class="headerlink" title="3.1.1 处理机调度的层次"></a>3.1.1 处理机调度的层次</h3><h4 id="1-高级调度"><a href="#1-高级调度" class="headerlink" title="1. 高级调度"></a>1. 高级调度</h4><p>High level Scheduling</p><p>高级调度又称为长程调度或作业调度。<br>调度对象：作业</p><p>作业调度往往发生在一批作业已运行完毕并退出系统，又需要重新调入一批作业进入内存，作业调度的周期较长，大约几分钟一次。</p><p>功能：根据某种算法，将外存上处于后备队列中的哪几个作业调入内存，为他们创建进程、分配必要的资源，并将它们放入就绪队列。<br>应用：主要用于多道批处理系统，在分时和实时系统中不设置</p><h4 id="2-低级调度"><a href="#2-低级调度" class="headerlink" title="2. 低级调度"></a>2. 低级调度</h4><p>Low Level Scheduling </p><p>低级调度又称为进程调度或短程调度</p><p>对象：进程（或内核级线程）</p><p>频率：最高，10~100ms便进行一次调度，算法不应太复杂</p><p>功能：根据某种算法，决定就绪队列中的哪个进程可以获得处理机，并由分派程序将处理机分配给被选中的进程</p><p>应用：多道批处理、分时、实时</p><h4 id="3-中级调度"><a href="#3-中级调度" class="headerlink" title="3. 中级调度"></a>3. 中级调度</h4><p>Intermediate Scheduling</p><p>中级调度又称为内存调度</p><p>目的：提高内存利用率和系统吞吐量</p><p>中级调度实际上就是存储器管理中的对换功能。把那些暂时不能运行的进程，调至外存等待，此时进程的状态称为就绪驻外存状态（或挂起状态）。当它们已具备运行条件且内存又稍有空闲时，由中级调度来决定，把外存上的那些已具备运行条件的就绪进程再重新调入内存，并修改其状态为就绪状态。</p><h3 id="3-1-2-处理机调度算法的目标"><a href="#3-1-2-处理机调度算法的目标" class="headerlink" title="3.1.2 处理机调度算法的目标"></a>3.1.2 处理机调度算法的目标</h3><h4 id="1-处理机调度算法的共同目标"><a href="#1-处理机调度算法的共同目标" class="headerlink" title="1. 处理机调度算法的共同目标"></a>1. 处理机调度算法的共同目标</h4><p>（1）资源利用率<br>$$<br>{CPU的利用率}&#x3D;\frac{CPU有效工作时间}{CPU有效工作时间+CPU空闲等待时间}<br>$$<br>（2）公平性<br>        诸进程都获得了合理的CPU时间，不会发生进饥饿现象。</p><p>（3）平衡性<br>        尽可能使系统中的CPU和各种外部设备都经常处于忙碌状态</p><p>（4）策略强制执行<br>        对所指定的策略其中包括安全策略，只要需要，就必须予以准确地执行，即使会造成某些工作的延迟也要执行</p><h4 id="2-批处理系统的目标"><a href="#2-批处理系统的目标" class="headerlink" title="2. 批处理系统的目标"></a>2. 批处理系统的目标</h4><p>（1）平均周转时间短。<br>所谓周转时间，是指从作业被提交到系统开始，到作业完成为止的这段时间间隔（称为作业周转时间）。<br>它包括四部分时间：作业在外存后备队列上等待（作业）调度的时间，<br>进程在就绪队列上等待进程调度的时间，<br>进程在CPU上执行的时间，<br>以及进程等待I&#x2F;O操作完成的时间。其中的后三项在一个作业的整个处理过程中，可能发生多次。</p><p>带权周转时间，即作业的周转时间T与系统为它提供服务的时间T<sub>iS</sub>之比，即W&#x3D;T&#x2F;T<sub>iS</sub>。<br>平均带权周转时间：$\displaystyle{W}&#x3D;\frac{1}{n}{\sum\limits_{i&#x3D;1}^{n}\frac{T_i}{T_{iS}}}$</p><p>（2）系统吞吐量高</p><p>（3）处理机利用率高</p><h4 id="3-分时系统的目标"><a href="#3-分时系统的目标" class="headerlink" title="3. 分时系统的目标"></a>3. 分时系统的目标</h4><p>（1）响应时间快</p><p>（2）均衡性</p><h4 id="4-实时系统的目标"><a href="#4-实时系统的目标" class="headerlink" title="4. 实时系统的目标"></a>4. 实时系统的目标</h4><p>（1）截止时间的保证</p><p>（2）可预测性</p><h2 id="3-2-作业与作业调度"><a href="#3-2-作业与作业调度" class="headerlink" title="3.2 作业与作业调度"></a>3.2 作业与作业调度</h2><p>在多道批处理系统中，作业是用户提交到系统的一项相对独立的工作。操作员把用户提交的作业通过相应的输入设备输入到磁盘存储器，并保存在一个后备作业队列中。再由作业调度程序将其从外存调入内存。</p><h3 id="3-2-1-批处理系统中的作业"><a href="#3-2-1-批处理系统中的作业" class="headerlink" title="3.2.1 批处理系统中的作业"></a>3.2.1 批处理系统中的作业</h3><h4 id="1-作业和作业步"><a href="#1-作业和作业步" class="headerlink" title="1. 作业和作业步"></a>1. 作业和作业步</h4><p>（1）作业（Job）：</p><p>作业不仅包含了通常的程序和数据，而且还应有一份作业说明书，系统根据该说明书来对程序进行控制。在批处理系统中，是以作业为基本单位从外存调入内存的。</p><p>（2）作业步（Job Step）</p><p>在作业运行期间，每个作业都必须经过若干个相对独立，又相互关联的顺序加工步骤才能得到结果。</p><p>每一个加工步骤称为一个作业步，各作业步之间存在联系，往往上一个作业步的输出作为下一个作业步的输入。</p><p>例如：一个典型的作业可分为：“编译”作业步，“链接装配”作业步和“运行”作业步</p><h4 id="2-作业控制块"><a href="#2-作业控制块" class="headerlink" title="2. 作业控制块"></a>2. 作业控制块</h4><p>Job Control Block，JCB</p><p>在多道批处理系统中，为每个作业设置了一个作业控制块JCB，它是作业在系统中存在的标志，保存了系统对作业进行管理和调度所需的全部信息。</p><p>每当一个作业进入系统时，便由“作业注册”程序为该作业建立一个作业控制块JCB。再根据作业类型，将它放到相应的作业后备队列中等待调度。调度程序依据一定的调度算法来调度它们，被调度的作业将被装入内存。在作业运行期间，系统就按照JCB中的信息和作业说明书对作业进行控制。当一个作业执行结束进入完成状态时，系统负责回收已分配给它的资源，撤销该作业控制块。</p><h4 id="3-作业运行的三个阶段和三种状态"><a href="#3-作业运行的三个阶段和三种状态" class="headerlink" title="3. 作业运行的三个阶段和三种状态"></a>3. 作业运行的三个阶段和三种状态</h4><p>作业从进入系统到运行结束，需要经历<strong>收容、运行、完成</strong>三个阶段。</p><p>相应的作业也就有<strong>后备状态、运行状态、完成状态</strong></p><p>（1）收容阶段：<br>            操作员把用户提交的作业输入到硬盘上，建立JCB，放入作业后备队列。此时的状态为”后备状态“</p><p>（2）运行阶段：<br>            当作业被作业调入选中后，分配必要的资源和建立进程，并放入就绪队列。<br>            一个作业从第一次进入就绪状态开始，直到运行结束，都属于运行状态。</p><p>（3）完成状态<br>            当作业运行完成、或发生异常情况而提前结束时，作业便进入完成阶段，此时为”完成状态“<br>            此时的”终止作业“程序将会回收已分配给该作业的作业控制块和所有资源，并将作业运行结果信息形成输出文件后输出。</p><h3 id="3-2-2-作业调度的主要任务"><a href="#3-2-2-作业调度的主要任务" class="headerlink" title="3.2.2 作业调度的主要任务"></a>3.2.2 作业调度的主要任务</h3><p>主要任务：根据JCB的信息，检查系统中的资源能否满足作业对资源的要求，并按照一定的调度算法，从外存的后备队列中选取某些作业调入内存，并为它们创建进程、分配必要的资源。然后再将新创建的进程排在就绪队列上等待调度。</p><p>因此，作业调度也叫接纳调度（Admission Scheduling）。</p><p>在每次执行作业调度时，都需做出以下两个决定。</p><h4 id="1-接纳多少个作业"><a href="#1-接纳多少个作业" class="headerlink" title="1. 接纳多少个作业"></a>1. 接纳多少个作业</h4><p>选取多少作业调入内存，取决于多道程序度（Degree of Multiprogramming），即允许多少格作业同时在内存中运行。</p><h4 id="2-接纳哪些作业"><a href="#2-接纳哪些作业" class="headerlink" title="2. 接纳哪些作业"></a>2. 接纳哪些作业</h4><p>哪些作业被调入，取决于所采用的调度算法。最简单的是先来先服务调度算法。常使用的一种是短作业优先调度算法，是将外村上所需执行时间最短的作业优先调入内存。另一种常用的是基于作业优先级的调度算法。</p><p>比较好的一种算法是”相应比高者优先“的调度算法</p><h3 id="3-2-3-先来先服务（FCFS）和短作业优先（SJF）调度算法"><a href="#3-2-3-先来先服务（FCFS）和短作业优先（SJF）调度算法" class="headerlink" title="3.2.3 先来先服务（FCFS）和短作业优先（SJF）调度算法"></a>3.2.3 先来先服务（FCFS）和短作业优先（SJF）调度算法</h3><h4 id="1-先来先服务（first-come-first-served，FCFS）调度算法"><a href="#1-先来先服务（first-come-first-served，FCFS）调度算法" class="headerlink" title="1. 先来先服务（first-come first-served，FCFS）调度算法"></a>1. 先来先服务（first-come first-served，FCFS）调度算法</h4><p>既可用于作业调度，也可用于进程调度。</p><p>当在作业调度中采用此方法，系统将按照作业到达的先后次序来进行调度。</p><p>当在进程调度中采用此方法，每次调度是从就绪的进程队列中选择一个最先进入该队列的进程，为之分配处理机，使之投入运行。该进程一直运行到完成或发生某事件而阻塞后，进程调度程序才将处理机分配给其它进程。</p><p>FCFS经常和其它调度算法结合使用</p><h4 id="2-短作业优先（short-job-first-SJF）的调度算法"><a href="#2-短作业优先（short-job-first-SJF）的调度算法" class="headerlink" title="2. 短作业优先（short job first, SJF）的调度算法"></a>2. 短作业优先（short job first, SJF）的调度算法</h4><p>在实际作业中，短作业（进程）占有很大比例，为了能使它们比长作业优先执行，而产生了短作业优先调度算法。</p><p>1）短作业优先算法</p><p>SJF算法是以<strong>作业的长短</strong>来计算优先级，作业越短，优先级越高。作业的长短是以作业所要求的运行事件来衡量的。</p><p>SJF算法可分别用于<strong>作业调度</strong>和<strong>进程调度</strong></p><p>2）缺点</p><p>（1）必须预知作业的运行时间</p><p>（2）对长作业非常不利，长作业的周转时间会明显增长</p><p>（3）在采用SJF算法时，人-机无法实现交互</p><p>（4）该调度算法完全未考虑作业的紧迫程度，紧迫性的作业未必能得到及时处理</p><h3 id="3-2-4-优先级调度算法和高响应比优先调度算法"><a href="#3-2-4-优先级调度算法和高响应比优先调度算法" class="headerlink" title="3.2.4 优先级调度算法和高响应比优先调度算法"></a>3.2.4 优先级调度算法和高响应比优先调度算法</h3><h4 id="1-优先级调度算法（priority-scheduling-algorithm，PSA）"><a href="#1-优先级调度算法（priority-scheduling-algorithm，PSA）" class="headerlink" title="1. 优先级调度算法（priority-scheduling algorithm，PSA）"></a>1. 优先级调度算法（priority-scheduling algorithm，PSA）</h4><p>优先级调度算法中，是基于作业的<strong>紧迫程度</strong>，由外部赋予作业相应的<strong>优先级</strong>。</p><p>当采用此算法用于作业调度时，系统是从后备队列中选择若干个优先级最高的作业装入内存</p><h4 id="2-高响应比优先调度算法（Highest-Response-Ratio-Next，HRRM）"><a href="#2-高响应比优先调度算法（Highest-Response-Ratio-Next，HRRM）" class="headerlink" title="2. 高响应比优先调度算法（Highest Response Ratio Next，HRRM）"></a>2. 高响应比优先调度算法（Highest Response Ratio Next，HRRM）</h4><p>FCFS，只考虑了作业的等待时间</p><p>SJF，只考虑了作业的运行时间</p><p>高响应比优先调度算法既考虑了作业的等待时间，又考虑了作业运行时间的调度算法。</p><p>原理：为每个作业引入一个<strong>动态</strong>优先级，既优先级是可以改变的，令它随等待时间延长而增加，这将使长作业的优先级在等待期间不断地增加，等到足够的时间后，必然有机会获得处理机，该优先级的变化规律为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\displaystyle&#123;&#123;优先级&#125;=\frac&#123;等待时间+要求服务时间&#125;&#123;要求服务时间&#125;&#125;$</span><br></pre></td></tr></table></figure><p>等待时间+服务时间&#x3D;响应时间，故优先级又相当于响应比R<sub>p</sub>，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\displaystyle&#123;&#123;R_p&#125;=\frac&#123;等待时间+要求服务时间&#125;&#123;要求服务时间&#125;=\frac&#123;响应时间&#125;&#123;要求服务时间&#125;&#125;$$</span><br></pre></td></tr></table></figure><blockquote><p>每次调度前，都要先做响应比的计算，增加了系统开销</p></blockquote><h2 id="3-3-进程调度"><a href="#3-3-进程调度" class="headerlink" title="3.3 进程调度"></a>3.3 进程调度</h2><h3 id="3-3-1-进程调度的任务、机制和方式"><a href="#3-3-1-进程调度的任务、机制和方式" class="headerlink" title="3.3.1 进程调度的任务、机制和方式"></a>3.3.1 进程调度的任务、机制和方式</h3><h4 id="1-进程调度的任务"><a href="#1-进程调度的任务" class="headerlink" title="1. 进程调度的任务"></a>1. 进程调度的任务</h4><p>（1）保存处理机的现场信息</p><p>（2）按某种算法选取进程</p><p>（3）把处理器分配给进程</p><h4 id="2-进程调度机制"><a href="#2-进程调度机制" class="headerlink" title="2. 进程调度机制"></a>2. 进程调度机制</h4><p>在进程调度机制中，应具有如下三个基本部分:</p><ol><li>排队器</li><li>分派器</li><li>上下文切换器</li></ol><h4 id="3-进程调度方式"><a href="#3-进程调度方式" class="headerlink" title="3. 进程调度方式"></a>3. 进程调度方式</h4><p><strong>非抢占方式（Nonpreemptive Mode）</strong></p><p>这种调度方式下，一旦把处理机分配给某进程后，就一直让它运行下去，绝不会因为时钟中断或任何其它原因抢占当前的处理机，直至该进程完成，或发生某事件而被阻塞时，才把处理机分配给其它进程。</p><p><strong>抢占方式（Preemptive Mode）</strong></p><p>这种调度方式允许调度程序根据某种原则，去暂停某个正在执行的进程，将已分配给该进程的处理机重新分配给另一进程。</p><p>现代OS中广泛采用抢占方式，可以防止一个长进程长时间占用处理机，以确保处理机为所有进程提供更公平的服务</p><p>分时系统中，采用抢占方式可以实现人机交互</p><p>实时系统中，能满足实时任务的需要</p><h3 id="3-3-2-轮转调度算法"><a href="#3-3-2-轮转调度算法" class="headerlink" title="3.3.2 轮转调度算法"></a>3.3.2 轮转调度算法</h3><p>基于时间片的轮转（round robin，RR）调度算法</p><p>时间片 time slice<br>            time quantum</p><p><strong>原理：</strong>每轮，每个进程分配一个时间片</p><p>若一次时间片还未使用完就完成进程，直接进入下一个进程的时间片，这个进程剩余的时间片直接去掉。</p><p><strong>时间片大小：</strong>时间片小，就会频繁地执行进程调度和进程上下文的切换；时间片大，就会使RR算法变为FCFS算法。<br>                    较为可取的时间片大小的略大于一次典型的交互所需要的时间</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220927195428139.png" alt="image-20220927195428139"> </p><h3 id="3-3-3-多级反馈队列调度算法"><a href="#3-3-3-多级反馈队列调度算法" class="headerlink" title="3.3.3 多级反馈队列调度算法"></a>3.3.3 多级反馈队列调度算法</h3><p>multileved feedback queue</p><p>这是目前公认的一种较好的进程调度算法</p><h4 id="1-调度机制"><a href="#1-调度机制" class="headerlink" title="1. 调度机制"></a>1. 调度机制</h4><p>（1）设置多个就绪队列。为每个队列赋予不同的优先级，第一个队列的优先级最高，之后逐次降低。在优先级愈高的队列中，其时间片就愈小。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20220927195854660.png" alt="image-20220927195854660"> </p><p>（2）每个队列都采用FCFS算法</p><p>（3）按队列优先级调度</p><h4 id="2-调度算法的性能"><a href="#2-调度算法的性能" class="headerlink" title="2. 调度算法的性能"></a>2. 调度算法的性能</h4><p>多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需处理的时间，便能很好地满足各种类型用户的需要。</p><p>（1）终端型用户：终端用户提交的多是交互型作业，通常较小，系统可在第一队列便完成。</p><p>（2）短批处理作业用户：第一队列，大部分作业就可以完成；稍长的，二三队列也可以完成</p><p>（3）长批处理作业用户：每次轮转都会运行，不用担心作业长期得不到处理</p><h3 id="3-3-4-基于公平原则的调度算法"><a href="#3-3-4-基于公平原则的调度算法" class="headerlink" title="3.3.4 基于公平原则的调度算法"></a>3.3.4 基于公平原则的调度算法</h3><h4 id="1-保证调度算法"><a href="#1-保证调度算法" class="headerlink" title="1. 保证调度算法"></a>1. 保证调度算法</h4><p>这种算法可以做到<strong>调度的公平性</strong>。比较容易实现的是处理机分配的公平性。</p><p>如果系统中有n个相同类型的进程同时运行，为公平起见，需保证每个进程都获得相同的处理机时间1&#x2F;n。</p><h4 id="2-公平分享调度算法"><a href="#2-公平分享调度算法" class="headerlink" title="2. 公平分享调度算法"></a>2. 公平分享调度算法</h4><p>目的：为了实现用户在公平性，而不仅仅要进程在公平性</p><h2 id="3-4-实时调度"><a href="#3-4-实时调度" class="headerlink" title="3.4 实时调度"></a>3.4 实时调度</h2><p>实时系统中，存在两类不同性质的实时任务，即HRT任务和SRT任务，它们都联系一个截至时间。</p><p>为保证系统能正常工作，实时调度必须能满足实时任务对截止时间的要求。</p><h3 id="3-4-1-实现实时调度的基本条件"><a href="#3-4-1-实现实时调度的基本条件" class="headerlink" title="3.4.1 实现实时调度的基本条件"></a>3.4.1 实现实时调度的基本条件</h3><h4 id="1-提供必要的信息"><a href="#1-提供必要的信息" class="headerlink" title="1. 提供必要的信息"></a>1. 提供必要的信息</h4><p>为了实现实时调度，系统应向调度程序提供有关任务的信息：</p><p>（1）就绪时间，指某任务成为就绪状态的起始时间，在周期任务的情况下，它是事先预知的一串时间序列。</p><p>（2）开始截止时间和完成截止时间：对于实时应用，只需要直到一个即可</p><p>（3）处理时间：一个任务从开始到完成的时间</p><p>（4）资源要求，任务执行时所需要的资源</p><p>（5）优先级，对于错过可能引起故障的程序，赋予绝对优先级；对于无重大影响的程序，赋予相对优先级</p><h4 id="2-系统处理能力强"><a href="#2-系统处理能力强" class="headerlink" title="2. 系统处理能力强"></a>2. 系统处理能力强</h4><p>假定系统中有m个周期性的硬实时任务HRT，它们的处理时间可表示为C<sub>i</sub>，周期时间表示为P<sub>i</sub>，则在单处理机情况下，必须满足下面的限制条件系统才是可调度的：<br>$$<br>\displaystyle{<br>    \sum\limits_{i&#x3D;1}^{m} \frac{C_i}{P_i} \leq {1}<br>}<br>$$</p><p>提高系统处理能力的途径有二：一是采用单处理机系统，但须增强其处理能力，以减少每一个任务的处理时间；二是采用多处理机系统。</p><p>当处理机个数为N时，限制条件：<br>$$<br>\displaystyle{<br>    \sum\limits_{i&#x3D;1}^{m} \frac{C_i}{P_i} \leq {N}<br>}<br>$$</p><h3 id="3-4-2-实时调度算法的分类"><a href="#3-4-2-实时调度算法的分类" class="headerlink" title="3.4.2 实时调度算法的分类"></a>3.4.2 实时调度算法的分类</h3><p>分类：</p><ul><li>按照<strong>实时任务</strong>分类<ul><li>硬实时调度</li><li>软实时调度</li></ul></li><li>按<strong>调度方式</strong>分类<ul><li>非抢占调度</li><li>抢占调度</li></ul></li></ul><h4 id="1-非抢占调度算法"><a href="#1-非抢占调度算法" class="headerlink" title="1. 非抢占调度算法"></a>1. 非抢占调度算法</h4><h3 id="3-4-3-最早截止时间优先EDF-Earliest-Deadline-First-算法（考试涉及）"><a href="#3-4-3-最早截止时间优先EDF-Earliest-Deadline-First-算法（考试涉及）" class="headerlink" title="3.4.3 最早截止时间优先EDF(Earliest Deadline First)算法（考试涉及）"></a>3.4.3 最早截止时间优先EDF(Earliest Deadline First)算法（考试涉及）</h3><h4 id="1-非抢占式调度方式用于非周期实时任务"><a href="#1-非抢占式调度方式用于非周期实时任务" class="headerlink" title="1. 非抢占式调度方式用于非周期实时任务"></a>1. 非抢占式调度方式用于非周期实时任务</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004133347668.png" alt="image-20221004133347668"></p><h4 id="2-抢占式调度方式用于周期实时任务"><a href="#2-抢占式调度方式用于周期实时任务" class="headerlink" title="2. 抢占式调度方式用于周期实时任务"></a>2. 抢占式调度方式用于周期实时任务</h4><p>抢占 周期性</p><p>基于最早完成截止时间</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004133621505.png" alt="image-20221004133621505"></p><h3 id="3-4-4-最低松弛度优先LLF（Least-Laxity-First）算法"><a href="#3-4-4-最低松弛度优先LLF（Least-Laxity-First）算法" class="headerlink" title="3.4.4 最低松弛度优先LLF（Least Laxity First）算法"></a>3.4.4 最低松弛度优先LLF（Least Laxity First）算法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004135558720.png" alt="image-20221004135558720"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004135730151.png" alt="image-20221004135730151"> </p><p>松弛度 &#x3D; 完成截止时间 - 剩余执行时间 - 当前时间</p><table><thead><tr><th>时间</th><th>A的松弛度</th><th>B的松弛度</th><th>调度</th></tr></thead><tbody><tr><td>t &#x3D; 0</td><td>20 - 10 - 0 &#x3D; 10</td><td>50 - 25 - 0 &#x3D; 25</td><td>A1(10)</td></tr><tr><td>t &#x3D; 10 A1完成</td><td>A还未到第二个周期</td><td>50 - 25 - 10 &#x3D; 15</td><td>B1(20)</td></tr><tr><td>t &#x3D; 30 A2松弛度为0</td><td>40 - 10 - 30 &#x3D; 0</td><td>50 - 5 - 30 &#x3D; 15</td><td>A2(10)</td></tr><tr><td>t &#x3D; 40 A2完成</td><td>60 - 10 - 40 &#x3D; 10</td><td>50 - 5 - 40 &#x3D; 5</td><td>B1(5)</td></tr></tbody></table><h3 id="3-4-5-优先级倒置（priority-inversion-problem）"><a href="#3-4-5-优先级倒置（priority-inversion-problem）" class="headerlink" title="3.4.5 优先级倒置（priority inversion problem）"></a>3.4.5 优先级倒置（priority inversion problem）</h3><p>实时 优先级倒置 P1&gt; P3  P3先，P1后</p><h4 id="1-优先级倒置的形成"><a href="#1-优先级倒置的形成" class="headerlink" title="1. 优先级倒置的形成"></a>1. 优先级倒置的形成</h4><p>优先级：P1 &gt; P2 &gt; P3</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004141024059.png" alt="image-20221004141024059"></p><p>P3最先准备就绪，在a时刻进入临界区，<br>P2准备就绪，开始执行<br>P3准备就绪，开始执行，在c时刻进入临界区，但此时P3已经在临界区，P1阻塞<br>此时P2优先级大于P3，执行<br>P2执行结束后，P3执行<br>P3执行结束，P1执行临界区<br>但P1优先级最高，但最后结束，发生了优先级倒置</p><h4 id="2-优先级倒置的解决方法"><a href="#2-优先级倒置的解决方法" class="headerlink" title="2. 优先级倒置的解决方法"></a>2. 优先级倒置的解决方法</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20221004142427076.png" alt="image-20221004142427076"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004142259320.png" alt="image-20221004142259320"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221004142339004.png" alt="image-20221004142339004"> </p><h2 id="3-5-死锁"><a href="#3-5-死锁" class="headerlink" title="3.5 死锁"></a>3.5 死锁</h2><p>死锁的两种原因</p><p>1.资源的竞争——资源分配图——死锁定理</p><p>2.进程推进顺序不当——安全性</p><p>S状态：快照 snapshot</p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/47b558d516cc47f68a247189af46270e">https://www.nowcoder.com/questionTerminal/47b558d516cc47f68a247189af46270e</a><br>来源：牛客网</p><p>产生死锁的四个必要条件：<br> （1） 互斥条件：一个资源每次只能被一个进程使用。<br> （2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br> （3） 不剥夺条件:进程已获得的资源，在使用完之前，不能强行剥夺。<br> （4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p><h2 id="3-7-避免死锁"><a href="#3-7-避免死锁" class="headerlink" title="3.7 避免死锁"></a>3.7 避免死锁</h2><h3 id="3-7-1-系统安全状态"><a href="#3-7-1-系统安全状态" class="headerlink" title="3.7.1 系统安全状态"></a>3.7.1 系统安全状态</h3><h4 id="1-安全状态"><a href="#1-安全状态" class="headerlink" title="1. 安全状态"></a>1. 安全状态</h4><h1 id="四、存储器管理"><a href="#四、存储器管理" class="headerlink" title="四、存储器管理"></a>四、存储器管理</h1><p>连续</p><p>1.单道R</p><p>2.多道<br>（1）固定分区分配<br>（2）动态分区分配<br>        4+1<br>（3）紧凑<br>（4）对换swap<br>        换入 换出</p><hr><p>离散</p><p>分页、分段、段页结合</p><p>分页：对于逻辑地址空间以页（page）进行划分</p><p>页的大小 &#x3D; 块的大小</p><p>块 block &#x3D; 页框 page frame</p><p>页表寄存器-</p><p>页表</p><table><thead><tr><th>页号</th><th>块号</th></tr></thead><tbody><tr><td>0</td><td>3</td></tr><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>7</td></tr></tbody></table><p>逻辑地址——&gt;物理地址<br>（1，100）    （2，100）&#x3D; 2 X 1k + 100</p><p>地址结构</p><p>31                                                                                                 12 11                                                                                                                    0</p><table><thead><tr><th>页号（P）</th><th>位移量（W）</th></tr></thead></table><p>A &#x3D; 2170B 页大小：L &#x3D; 1KB</p><p>P &#x3D; 2                         W &#x3D; 122</p><p>P &#x3D; A&#x2F;L                      W &#x3D; A % L</p><p>快表 TLB 硬件Cache</p><p>EAT：访问内存的有效时间<br>内存的有效访问时间 在基本分页存储管理方式中，等于第一次访问内存时间（查找页表对应的页所消耗的时间t）和第二次访问内存时间（将页表项中的物理块号与页内地址拼接成物理地址所消耗的时间t ）</p><p>EAT &#x3D; t + t &#x3D; 2t</p><p>命中率a  &lambda;表示查找快表所需要的时间<br>EAT &#x3D; a x &lambda; + (t + &lambda;)(1 - a) + t &#x3D; 2t + &lambda;- t x a</p><p>多级页表</p><p><strong>分段存储管理方式</strong></p><h3 id="4-3-6-动态可重定位分区分配"><a href="#4-3-6-动态可重定位分区分配" class="headerlink" title="4.3.6 动态可重定位分区分配"></a>4.3.6 动态可重定位分区分配</h3><h1 id="五、虚拟存储器"><a href="#五、虚拟存储器" class="headerlink" title="五、虚拟存储器"></a>五、虚拟存储器</h1><p>VM：Virtual Memory</p><h2 id="5-1-虚拟存储器概述"><a href="#5-1-虚拟存储器概述" class="headerlink" title="5.1 虚拟存储器概述"></a>5.1 虚拟存储器概述</h2><p>传统的管理方式</p><p>（1）一次性</p><p>（2）驻留性</p><p>虚拟存储器的特征：</p><p>（1）多次性</p><p>（2）对换性</p><p>（3）虚拟性</p><h3 id="5-1-3-虚拟存储器的实现方法"><a href="#5-1-3-虚拟存储器的实现方法" class="headerlink" title="5.1.3 虚拟存储器的实现方法"></a>5.1.3 虚拟存储器的实现方法</h3><h4 id="1-分页请求系统"><a href="#1-分页请求系统" class="headerlink" title="1. 分页请求系统"></a>1. 分页请求系统</h4><p>1）硬件支持</p><p>（1）请求分页的页表机制</p><p>（2）缺页中断机构</p><p>（3）地址变换机构：</p><p>2）实现请求分页的软件</p><h4 id="2-请求分段系统"><a href="#2-请求分段系统" class="headerlink" title="2. 请求分段系统"></a>2. 请求分段系统</h4><h2 id="5-2-请求分页存储管理方式"><a href="#5-2-请求分页存储管理方式" class="headerlink" title="5.2 请求分页存储管理方式"></a>5.2 请求分页存储管理方式</h2><h4 id="1-请求页表机制"><a href="#1-请求页表机制" class="headerlink" title="1. 请求页表机制"></a>1. 请求页表机制</h4><p>在请求分页系统中需要的主要数据是请求页表</p><p>作用：将用户地址空间中的逻辑地址映射为内存空间中的物理地址</p><p>包含6个字段</p><table><thead><tr><th>页号</th><th>物理块号</th><th>状态位P</th><th>访问字段A</th><th>修改位M</th><th>外存地址</th></tr></thead></table><p>Access：次数</p><p>Modification：0 1</p><p>Present：0 1</p><h4 id="2-缺页中断机构"><a href="#2-缺页中断机构" class="headerlink" title="2. 缺页中断机构"></a>2. 缺页中断机构</h4><p>（1）在指令执行期间产生和处理中断信号</p><p>（2）一条指令在执行期间可能产生多次缺页中断</p><p>内存分配策略</p><p>1）固定分配局部置换</p><p>2）可变分配全局置换</p><p>3）可变分配局部置换</p><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2.~"></a>5.2.~</h3><h4 id="4-缺页率"><a href="#4-缺页率" class="headerlink" title="4.缺页率"></a>4.缺页率</h4><p>一个进程的逻辑空间为n页，系统为其分配的内存物理快熟为m（m&leq;n)。</p><p>在进程的运行过程中，访问页面成功的次数为S，访问页面失败的次数为F。</p><p>该进程总的页面访问次数为A &#x3D; S + F。</p><p>在运行过程中的缺页率：$\displaystyle{f &#x3D; \frac{F}{A}}$</p><p>置换 replace</p><p>$\displaystyle{R_{ep} &#x3D; \frac{R}{A}}$</p><p>F &geq;R</p><p>缺页中断 置换</p><p>f &gt; R<sub>ep</sub></p><h2 id="5-3-页面置换算法"><a href="#5-3-页面置换算法" class="headerlink" title="5.3 页面置换算法"></a>5.3 页面置换算法</h2><h3 id="5-3-1-最佳置换算法和先进先出置换算法"><a href="#5-3-1-最佳置换算法和先进先出置换算法" class="headerlink" title="5.3.1 最佳置换算法和先进先出置换算法"></a>5.3.1 最佳置换算法和先进先出置换算法</h3><h4 id="1-最佳置换算法"><a href="#1-最佳置换算法" class="headerlink" title="1. 最佳置换算法"></a>1. 最佳置换算法</h4><p>Optimal</p><p>选择的被淘汰页面以后是永不使用</p><p>该算法是无法实现，但可以作为基准算法去评价其它算法</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20221020162419381.png"> </p><p>$\displaystyle{ {f} &#x3D; \frac{9} {20} \ \ \ \ R_{ep} &#x3D; \frac{6}{20}}$</p><h4 id="2-先进先出页面置换算法"><a href="#2-先进先出页面置换算法" class="headerlink" title="2. 先进先出页面置换算法"></a>2. 先进先出页面置换算法</h4><h3 id="5-3-2-最近最久未使用和最少使用置换算法"><a href="#5-3-2-最近最久未使用和最少使用置换算法" class="headerlink" title="5.3.2 最近最久未使用和最少使用置换算法"></a>5.3.2 最近最久未使用和最少使用置换算法</h3><h3 id="1-LRU（Least-Recently-Used-置换算法的描述"><a href="#1-LRU（Least-Recently-Used-置换算法的描述" class="headerlink" title="1. LRU（Least Recently Used)置换算法的描述"></a>1. LRU（Least Recently Used)置换算法的描述</h3><p>依据的条件是各个页面调入内存的时间，而页面调入的先后并不能</p><h2 id="5-4-“抖动”与工作集"><a href="#5-4-“抖动”与工作集" class="headerlink" title="5.4 “抖动”与工作集"></a>5.4 “抖动”与工作集</h2><h2 id="5-5-请求分段存储管理方式"><a href="#5-5-请求分段存储管理方式" class="headerlink" title="5.5 请求分段存储管理方式"></a>5.5 请求分段存储管理方式</h2><h1 id="六、输入输出系统"><a href="#六、输入输出系统" class="headerlink" title="六、输入输出系统"></a>六、输入输出系统</h1><h1 id="七、文件管理"><a href="#七、文件管理" class="headerlink" title="七、文件管理"></a>七、文件管理</h1><h1 id="八、磁盘存储器的管理"><a href="#八、磁盘存储器的管理" class="headerlink" title="八、磁盘存储器的管理"></a>八、磁盘存储器的管理</h1><h1 id="期末考试"><a href="#期末考试" class="headerlink" title="期末考试"></a>期末考试</h1><p>题型：</p><ol><li><p>选择（20分）20*1</p></li><li><p>判断（20分）10*2</p></li><li><p>简答题（60分，6题）6*10</p></li><li><p><strong>进程三状态变化图、变化原因</strong><br>清楚每种状态含义，转化关系，示意图的方向</p></li><li><p><strong>挂起状态的含义</strong><br>挂起状态的含义，内存空间不够的时候，放到外存<br>挂起：进程在操作系统中可以定义为暂时被淘汰出内存的进程，机器的资源是有限的，在资源不足的情况下，操作系统对在内存中的程序进行合理的安排，其中有的进程被暂时调离出内存，当条件允许的时候，会被操作系统再次调回内存。</p></li><li><p><strong>根据调度算法，计算平均周转时间</strong><br>出题的时候，和例子一样，进程、作业到达时间，服务时间，计算周转时间，平均周转时间（例子）</p></li><li><p><strong>并行和并发的概念</strong><br>第一章</p></li><li><p><strong>根据磁盘调度策略，给出磁道号调度序列、计算平均寻道长度</strong><br>使用策略，来完成磁道号的调度，计算平均寻道长度。课本上给了4个策略</p></li><li><p><strong>同步机制的原则</strong><br>4个原则，最难的是让权等待，答案给出四个原则和解释</p></li><li><p><strong>虚拟存储器的特点</strong><br>名词+解释</p></li><li><p><strong>磁盘访问时间的3部分构成</strong><br>名词+解释</p></li><li><p><strong>抖动及其原因</strong><br>抖动及其原因</p></li><li><p><strong>优先级倒置现象</strong><br>优先级倒置现象 实时调度策略的现象，应该避免的现象，解决方案， 举出一个例子，给出一个解决方案，画示意图</p></li><li><p><strong>进程推进顺序不当产生死锁</strong></p><p>进程推进顺序不当产生死锁  结合图问细节，理解例子</p></li><li><p><strong>多级反馈队列原理</strong><br>多级反馈队列原理 原理描述清楚（多级、反馈、队列各是什么意思）（看书，弄清原理）随着，时间片的变化，。。。</p></li><li><p><strong>银行家算法例题</strong></p><p>银行家算法例题 避免死锁的算法，安全性算法子算法，仅仅抓住例题。某个时刻的实例，完全的实例</p></li><li><p><strong>时间片轮转</strong><br>时间片轮转 计算题 课本上例题Q1Q4</p></li><li><p><strong>高R<sub>p</sub>算法例题</strong><br>高Rp算法例题 14、15本质上是看表，看PPt，课本</p></li><li><p><strong>页面置换算法LRU</strong></p><p>页面置换算法LRU 最佳置换，先进先出，LRU（重点），还有一个 题目：给出一个序列，算缺页率，置换率，。。。可能换下页号，就是题了</p></li><li><p><strong>生产者消费者问题</strong><br>生产者消费者问题 灵活的变形，缓冲区有限，只有一个缓冲区，同步</p></li></ol><h1 id="操作系统（23-32，45，46）"><a href="#操作系统（23-32，45，46）" class="headerlink" title="操作系统（23-32，45，46）"></a><strong>操作系统（23-32，45，46）</strong></h1><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a><strong>第一章 计算机系统概述</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps257.jpg" alt="img"> </p><h3 id="1-1、OS的基本概念"><a href="#1-1、OS的基本概念" class="headerlink" title="1.1、OS的基本概念"></a>1.1、<strong>OS的基本概念</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps258.jpg" alt="img"> </p><p>OS与用户通信接口包含广义指令</p><p>缓存管理对用户不可见，由OS负责</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps259.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps260.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps261.jpg" alt="img"> </p><h3 id="1-2、OS发展历程"><a href="#1-2、OS发展历程" class="headerlink" title="1.2、OS发展历程"></a>1.2、<strong>OS发展历程</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps262.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps263.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps264.jpg" alt="img"> </p><h3 id="1-3、OS运行环境"><a href="#1-3、OS运行环境" class="headerlink" title="1.3、OS运行环境"></a>1.3、<strong>OS运行环境</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps265.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps266.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps267.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps268.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps269.jpg" alt="img"> </p><p>进程调度不需要硬件的支持</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps270.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps271.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps272.jpg" alt="img"> </p><p>系统调用过程：</p><p>①传递系统调用参数</p><p>②执行陷入（trap）指令，将用户态转为内核态，将返回地址压栈</p><p>③内核服务程序</p><p>④返回用户态</p><h3 id="1-6、虚拟机"><a href="#1-6、虚拟机" class="headerlink" title="1.6、虚拟机"></a><strong>1.6、虚拟机</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps273.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps274.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps275.jpg" alt="img"> </p><p>需要和底层硬件打交道的部分，统统放入微内核</p><p>微内核更低效</p><p>Window XP宏内核</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps276.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps277.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps278.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps279.jpg" alt="img"> </p><h2 id="第一章-进程与线程"><a href="#第一章-进程与线程" class="headerlink" title="第一章 进程与线程"></a>第一章 <strong>进程与线程</strong></h2><h3 id="2-1、进程与线程"><a href="#2-1、进程与线程" class="headerlink" title="2.1、进程与线程"></a><strong>2.1、进程与线程</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps280.jpg" alt="img"> </p><p>“管道”就是一种特殊的共享文件</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps281.jpg" alt="img"> </p><p>死锁的时候，所有进程都处于阻塞态</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps282.jpg" alt="img"> </p><p>进程之间可能是无关的，也可能是有交互性的</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps283.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps284.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps285.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps286.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps287.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps288.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps289.jpg" alt="img"> </p><p>两个进程可以通过文件系统、共享内存、消息传递系统 交换数据</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps290.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps291.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps292.jpg" alt="img"> </p><h3 id="2-2、处理机调度"><a href="#2-2、处理机调度" class="headerlink" title="2.2、处理机调度"></a><strong>2.2、处理机调度</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps293.jpg" alt="img"> </p><p>I&#x2F;O型作业的优先权高于计算型作业的优先权</p><p>I&#x2F;O型繁忙型的作业，会先使用CPU，然后IO输入输出和其他的CPU使用并行，提高了利用率</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps294.jpg" alt="img"> </p><p>系统进程的优先权高于用户进程的优先权</p><p>中断向量是中断服务例行程序的入口地址</p><p>中断向量地址是入口地址的地址</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps295.jpg" alt="img"> </p><h3 id="2-3、同步与互斥"><a href="#2-3、同步与互斥" class="headerlink" title="2.3、同步与互斥"></a><strong>2.3、同步与互斥</strong></h3><p>硬件方法实现同步不能实现让权等待</p><p>Peterson算法满足有限等待，但不满足让权等待</p><p>记录型信号量引入阻塞机制，消除了不让权等待的情况，满足让权等待</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps296.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps297.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps298.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps299.jpg" alt="img"> </p><p>临界资源：打印机、共享变量、共享缓冲区</p><p>非临界资源：非共享数据</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps300.jpg" alt="img"> </p><p>管程定义了共享数据结构和各种进程在该数据结构上的全部操作</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps301.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps302.jpg" alt="img"> </p><p>银行家算法：避免死锁</p><p>临界区是进程用来访问临界资源的代码</p><p>实现进程互斥的代码是：进入区和退出区</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps303.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps304.jpg" alt="img"> </p><h3 id="2-4、死锁"><a href="#2-4、死锁" class="headerlink" title="2.4、死锁"></a><strong>2.4、死锁</strong></h3><p>死锁避免的银行家算法虽然会避免进入不安全状态，但不能说它限制用户申请资源的顺序</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps305.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps306.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps307.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps308.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps309.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps310.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps311.jpg" alt="img"> </p><h2 id="第三章-内存管理"><a href="#第三章-内存管理" class="headerlink" title="第三章 内存管理"></a><strong>第三章 内存管理</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps312.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps313.jpg" alt="img"> </p><h3 id="3-1、内存管理概念"><a href="#3-1、内存管理概念" class="headerlink" title="3.1、内存管理概念"></a><strong>3.1、内存管理概念</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps314.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps315.jpg" alt="img"> </p><p>分页分区产生内部碎片，分段产生外部碎片</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps316.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps317.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps318.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps319.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps320.jpg" alt="img"> </p><p>分页是一维的，因为页面大小一定</p><p>分段和段页都是二维的</p><p>每个进程拥有一张页表</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps321.jpg" alt="img"> </p><h3 id="3-2、虚拟内存管理"><a href="#3-2、虚拟内存管理" class="headerlink" title="3.2、虚拟内存管理"></a><strong>3.2、虚拟内存管理</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps322.jpg" alt="img"> </p><p>基本分页需要将作业全部装入内存</p><p>请求分页不需要将作业全部装入内存</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps323.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps324.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps325.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps326.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps327.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps328.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps329.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps330.jpg" alt="img"> </p><p>工作集：工作集大小为6个，最近的6个，减去其中重复的，剩下的就是工作集</p><h2 id="第四章-文件管理"><a href="#第四章-文件管理" class="headerlink" title="第四章 文件管理"></a><strong>第四章 文件管理</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps331.jpg" alt="img"> </p><h3 id="4-1、文件系统基础"><a href="#4-1、文件系统基础" class="headerlink" title="4.1、文件系统基础"></a><strong>4.1、文件系统基础</strong></h3><p>UNIX操作系统中，输入&#x2F;输出设备视为特殊文件</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps332.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps333.jpg" alt="img"> </p><p>文件保护：保证未经文件拥有者授权，任何其他用户不能使用该文件</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps334.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps335.jpg" alt="img"> </p><p>直接存取：随机存取</p><p>连续分配支持随机存取</p><p>最容易导致存储碎片发生的物理文件结构：顺序存放</p><p>记录成组分解技术——不可跨越“块”存储记录</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps336.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps337.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps338.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps339.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps340.jpg" alt="img"> </p><h3 id="4-2、目录"><a href="#4-2、目录" class="headerlink" title="4.2、目录"></a><strong>4.2、目录</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps341.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps342.jpg" alt="img"> </p><h3 id="4-3、文件系统"><a href="#4-3、文件系统" class="headerlink" title="4.3、文件系统"></a><strong>4.3、文件系统</strong></h3><h2 id="第五章-输入输出I-O管理"><a href="#第五章-输入输出I-O管理" class="headerlink" title="第五章 输入输出I&#x2F;O管理"></a><strong>第五章 输入输出I&#x2F;O管理</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps343.jpg" alt="img"> </p><h3 id="5-1、I-O管理概述"><a href="#5-1、I-O管理概述" class="headerlink" title="5.1、I&#x2F;O管理概述"></a><strong>5.1、I&#x2F;O管理概述</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps344.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps345.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps346.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps347.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps348.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps349.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps350.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps351.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps352.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps353.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps354.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps355.jpg" alt="img"> </p><p>通道是硬件</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps356.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps357.jpg" alt="img"> </p><h3 id="5-2、设备独立性软件"><a href="#5-2、设备独立性软件" class="headerlink" title="5.2、设备独立性软件"></a><strong>5.2、设备独立性软件</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps358.jpg" alt="img"> </p><p>专用缓冲：单缓冲、双缓冲、循环缓冲 （只允许某两个进程使用）</p><p>缓冲池，可公用</p><p>高速缓存 Cache 在CPU里</p><p>缓冲区在主存里</p><p>SPOOLING技术的输入井、输出井在外存里</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps359.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps360.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps361.jpg" alt="img"> </p><p>共享设备：磁盘、固态硬盘</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps362.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps363.jpg" alt="img"> </p><p>SPOOLing系统由预输入程序、井管理程序和缓输出程序</p><p>SPOOLing技术以空间换时间</p><p>虚拟存储技术、覆盖交换技术以时间换空间</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/wps364.jpg" alt="img"> </p><h3 id="5-3、磁盘和固态硬盘"><a href="#5-3、磁盘和固态硬盘" class="headerlink" title="5.3、磁盘和固态硬盘"></a><strong>5.3、磁盘和固态硬盘</strong></h3><p>磁盘的扇区分配给文件的大小只能是簇的整数倍，不是换到内存才是整数倍</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="零、要求"><a href="#零、要求" class="headerlink" title="零、要求"></a>零、要求</h1><h2 id="0-1、教材"><a href="#0-1、教材" class="headerlink" title="0.1、教材"></a>0.1、教材</h2><p>参考书</p><ul><li>Date C J, An Introduction to Database System (Ed.7),Addison-Wesley, 2000</li></ul><p>上机软件</p><p>Mysql</p><h2 id="0-2、查看mysql版本"><a href="#0-2、查看mysql版本" class="headerlink" title="0.2、查看mysql版本"></a>0.2、查看mysql版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><h2 id="0-3、安排"><a href="#0-3、安排" class="headerlink" title="0.3、安排"></a>0.3、安排</h2><p>第三章DML语言，重点，多选，选出所有符合的语句</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220301142912710.png" alt="image-20220301142912710"></p><h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><p>B-Tree索引、Hash索引、聚集索引</p><p>B-Tree索引：以B<sub>+</sub>树结构存储数据，可以范围查询</p><p>hash索引只能用在等于的情况下，不能进行范围查询，无法用于排序</p><p>聚集索引：每个表都只有一个聚集索引，创建表的时候自动创建。作用：决定数据在硬盘上的物理存储位置</p><p>一列可以添加多个索引</p><p>事务管理是原子操作，是加锁的，并发执行，如果隔离不合理，可能会出现脏读、不可重复读、幻读（更新3次，结果却更新了4次）</p><p>四个隔离级别   可序列化等</p><p><a href="https://developer.aliyun.com/article/743691">https://developer.aliyun.com/article/743691</a></p><p>set autocommit&#x3D;0开启事务</p><p>commit roll back结束事务</p><p>隔离级别：多个用户之间，你是否有影响</p><ol><li><p>读未提取（READ UNCOMMITTED）<br>允许的用户最多<br>读到别人未提交的数据</p></li><li><p>读已提取（READ COMMITTED）<br>允许的用户次之</p><p>读到别人已提交的数据</p></li><li><p>可重复读（REPEATABLE READ）<br>允许的用户再次之</p><p>保证不会出现不可重复读</p></li><li><p>可串行化（SERLALZABLE）<br>允许的用户最少</p><p>保证不会出现幻读</p></li></ol><hr><p>事务并发可能出现的问题：</p><ul><li>脏读（Dirty Read）<ul><li>一个事务读到了另一个未提交事务修改过的数据</li><li>就是两个用户都先后开始了事务操作，其中一个人进行操作的时候，读取到另一个人修改后的操作，而另一个人的修改操作还未完成，这就叫脏读</li><li>如果允许脏读，就要把隔离级别设到最低，READ_UNCOMMITTED</li></ul></li><li><h2 id="不可重复读（Non-Repeatable-Read）-一个事务只能读到另一个已经提交的事务并修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提取和读已提取隔离级别都可能会出现）-在READ-COMMITTED中，可以读到别人提交的事务，进行同样的操作后，读取后的数据不一样"><a href="#不可重复读（Non-Repeatable-Read）-一个事务只能读到另一个已经提交的事务并修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提取和读已提取隔离级别都可能会出现）-在READ-COMMITTED中，可以读到别人提交的事务，进行同样的操作后，读取后的数据不一样" class="headerlink" title="不可重复读（Non-Repeatable Read）- 一个事务只能读到另一个已经提交的事务并修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提取和读已提取隔离级别都可能会出现）- 在READ_COMMITTED中，可以读到别人提交的事务，进行同样的操作后，读取后的数据不一样"></a>不可重复读（Non-Repeatable Read）<br>- 一个事务只能读到另一个已经提交的事务并修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提取和读已提取隔离级别都可能会出现）<br>- 在READ_COMMITTED中，可以读到别人提交的事务，进行同样的操作后，读取后的数据不一样</h2></li><li>幻读<ul><li>在可重复读级别下，</li><li>进行事务操作，更新操作看不到，但是可以看到新增的插入操作结果</li><li>解决方法：用最高的隔离级别：可串行化</li></ul></li></ul><p>四种隔离级别比较</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608193503585.png" alt="image-20220608193503585"> </p><p>系统恢复采用的机制是日志机制</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306094617422.png" alt="image-20220306094617422"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306094713091.png" alt="image-20220306094713091"></p><h2 id="1-1、数据库系统概述"><a href="#1-1、数据库系统概述" class="headerlink" title="1.1、数据库系统概述"></a>1.1、数据库系统概述</h2><h3 id="1、数据库的四个基本概念"><a href="#1、数据库的四个基本概念" class="headerlink" title="1、数据库的四个基本概念"></a>1、数据库的四个基本概念</h3><h4 id="①、数据（data"><a href="#①、数据（data" class="headerlink" title="①、数据（data)"></a>①、数据（data)</h4><p>数据（Data）是数据库存储的基本对象。</p><p>数据的定义：描述事物的符号记录</p><p>数据的种类：数字、文字、图形、图像、音频、视频、学生的档案记录等</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220305134759382.png" alt="image-20220305134759382"></p><h4 id="②、数据库"><a href="#②、数据库" class="headerlink" title="②、数据库"></a>②、数据库</h4><p>数据库（Database,简称DB）是长期储存在计算机内、有组织的、可共享的大量数据的集合。</p><p>基本特征：</p><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul><h4 id="③、数据库管理系统"><a href="#③、数据库管理系统" class="headerlink" title="③、数据库管理系统"></a>③、数据库管理系统</h4><p>数据库管理系统（DataBase Management System,DBMS）是位于用户与操作系统之间的一层数据管理软件，是计算机的基础软件，是一个大型复杂的软件系统。</p><p>用途：科学地组织和存储数据、高效地获取和维护数据</p><p><strong>功能：</strong></p><ol><li>数据定义功能<ul><li>提供数据定义语言（Data Definition Language,DDL）</li><li>定义数据库中的数据对象</li></ul></li><li>数据组织、存储和管理<ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li><li>索引：</li></ul></li><li>数据操纵功能<ul><li>提供数据操纵语言（Data Manipulation Language,DML）</li><li>实现对数据库的基本操作（查询、插入、删除和修改）</li></ul></li><li>数据库的事务管理和运营管理<ul><li>数据库在建立、运行和维护时由数据库管理系统统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li><li>数据库的建立和维护功能<ul><li>数据库初始数据的转载和转换</li><li>数据库转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li>其他功能<ul><li>数据库管理系统与网络中其他软件系统的通信</li><li>数据库管理系统与另一个系统之间的数据转换</li><li>异构数据库之间的互访和互操作</li></ul></li></ol><h4 id="④、数据库系统"><a href="#④、数据库系统" class="headerlink" title="④、数据库系统"></a>④、数据库系统</h4><p><strong>数据库系统（Database System，简称DBS）</strong>：是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DataBase Administrator,DBA）组成的存储、管理、处理和维护数据的系统。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220305135123827.png" alt="image-20220305135123827"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306095641090.png" alt="image-20220306095641090"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220306100406482.png" alt="image-20220306100406482"></p><h3 id="2、数据管理技术的产生和发展"><a href="#2、数据管理技术的产生和发展" class="headerlink" title="2、数据管理技术的产生和发展"></a>2、数据管理技术的产生和发展</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220305135449795.png" alt="image-20220305135449795"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220305135641990.png" alt="image-20220305135641990"></p><h3 id="3、数据库的特点"><a href="#3、数据库的特点" class="headerlink" title="3、数据库的特点"></a>3、数据库的特点</h3><ol><li><p>数据结构化<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220323185730433.png" alt="image-20220323185730433"></p></li><li><p>数据的共享性高、冗余度低且易扩充</p></li><li><p>数据独立性高</p><ol><li>数据独立性：不会因为系统数据存储与数据逻辑结构的变化而影响应用程序</li><li>物理独立性：指用户的应用程序与数据库中数据的物理存储是相互独立的。也就是，数据在数据库中怎样存储，用户程序不需要了解</li><li>逻辑独立性：用户的应用程序与数据库的逻辑结构是相互独立的。也就是说，数据的逻辑结构改变时，用户程序也可以不变</li></ol></li><li><p>数据由DBMS统一管理和控制</p><ol><li><p>数据的安全性（Security） 保护</p><p>保护数据，以防止不合法的使用造成的数据的泄密和破坏</p></li><li><p>数据的完整性（Integrity）检查</p><p>数据的正确性、有效性和相容性。完整性检查将数据控制在有效的范围内，并保证数据之间满足一定的关系。</p></li><li><p>并发（Concurrency）控制</p><p>对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果</p></li><li><p>数据库恢复（Recovery）</p><p>将数据库从错误状态恢复到某一已知的正确状态</p></li></ol></li></ol><h2 id="1-2、数据模型"><a href="#1-2、数据模型" class="headerlink" title="1.2、数据模型"></a>1.2、数据模型</h2><p>数据库重用数据模型来<strong>抽象、表示和处理</strong>现实世界中的数据和信息。</p><p>数据模型（data model）是对现实世界数据特征的抽象。</p><p>数据模型是数据库系统的核心和基础。</p><p>数据模型应满足三方面要求：</p><ol><li>能比较真实地模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li></ol><h3 id="1、两类数据模型"><a href="#1、两类数据模型" class="headerlink" title="1、两类数据模型"></a>1、两类数据模型</h3><p>根据模型应用的不同目的，可以将这些模型分为两类。</p><p>第一类是<strong>概念模型</strong>，第二类是**逻辑模型和物理模型。</p><p>第一类概念模型（couceptual model)，也称信息模型，是按用户的观点来对数据和信息建模，主要用于数据库设计。<br>                                                                    ER-win powerdesigner</p><p>第二类逻辑模型和物理模型主要包括</p><ul><li>层次模型（hierarchical model)</li><li>网状模型（network model）</li><li>关系模型（relational model）</li><li>面向对象数据模型（object oriented data model）</li><li>对象关系数据模型（object relational data model）</li><li>半结构化数据模型（semistructured data model)</li></ul><p>物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308133328682.png" alt="image-20220308133328682"></p><h3 id="2、概念模型"><a href="#2、概念模型" class="headerlink" title="2、概念模型"></a>2、概念模型</h3><ul><li>概念模型的用途<ul><li>概念模型用于信息世界的建模</li><li>是现实世界到机器世界的一个中间层次</li><li>是数据库设计的有力工具</li><li>数据库设计人员和用户之间进行交流的语言</li></ul></li><li>对概念模型的基本要求<ul><li>较强的语义表达能力</li><li>能够方便、直接地表达应用中的各种语义知识</li><li>简单、清晰、易于用户理解</li></ul></li></ul><p><strong>基本概念</strong></p><ol><li><p>实体（entity）</p><p>客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。</p></li><li><p>属性（attribute）</p><p>实体所具有的某一特性称为属性</p><p>一个实体可以由若干个属性来刻画</p></li><li><p>码（key)</p><p>唯一标识实体的属性集称为码。例如学生的学号</p></li><li><p>域（domain）</p><p>属性的取值范围称为该属性的域</p><p>字符串域，浮点类型</p></li><li><p>实体型（entity type)</p><p>用实体名及其属性名集合来抽象和刻画同类实体称为实体型</p></li><li><p>实体集（entity set）</p><p>同一类型实体的集合称为实体集。例如，全体学生就是一个实体集。</p><p>真实的数据</p></li><li><p>联系（relationship）</p><p>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体内部的联系和实体之间的联系</p><p>实体内部的联系通常是指组成实体的各属性之间的联系</p><p>实体之间的联系通常是指不同实体集之间的联系</p></li></ol><p><strong>实体之间的联系有一对一、一对多和多对多等多种类型。</strong></p><table><thead><tr><th align="center">联系</th><th align="center">定义</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">一对一</td><td align="center">如果对于实体集A中的每一个实体，实体集B中至多有一个（也可以没有）实体与之联系，反之亦然，则称实体集A与实体集B具有一对一联系（1：1）</td><td align="center">一个班级只有一个班长</td></tr><tr><td align="center">一对多</td><td align="center">如果对于实体集A中的每一个实体，实体集B中有n个实体（n&geq;0），反之亦然。（1：n）</td><td align="center">一个班级有若干名学生</td></tr><tr><td align="center">多对多</td><td align="center">如果对于实体集A中的每一个实体，实体集B中有n个实体（n&geq;0）；反之，对于实体集B中的每一个实体，实体集A中有m个实体（m&geq;0）(m:n)</td><td align="center">课程与学生之间的联系：<br> 一门课程同时有若干个学生选修， 一个学生可以同时选修多门课程</td></tr></tbody></table><p><strong>实例</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308141202681.png" alt="image-20220308141202681"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308141355133.png" alt="image-20220308141355133"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308141413915.png" alt="image-20220308141413915"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308142527676.png" alt="image-20220308142527676"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308142537732.png" alt="image-20220308142537732"></p><p><strong>实例</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308142648766.png" alt="image-20220308142648766"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308142932450.png" alt="image-20220308142932450"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308142841137.png" alt="image-20220308142841137"></p><h3 id="3、数据模型的组成要素"><a href="#3、数据模型的组成要素" class="headerlink" title="3、数据模型的组成要素"></a>3、数据模型的组成要素</h3><p>数据模型通常由数据结构、数据操作和数据的完整性约束条件组成。</p><ol><li><p>数据结构</p><p>数据结构描述数据库的组成对象以及对象之间的联系。</p></li><li><p>数据操作</p><p>数据操作是指对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则。</p></li><li><p>数据的完整性约束条件</p><p>数据的完整性约束条件是一组完整性规则。</p></li></ol><h3 id="4、常用的数据模型"><a href="#4、常用的数据模型" class="headerlink" title="4、常用的数据模型"></a>4、常用的数据模型</h3><p>非关系模型</p><ul><li>层次模型（Hierarchical Model）</li><li>网状模型（Network Model）</li></ul><p>关系模型（Relational Model）</p><p>面向对象模型（Object Oriented Model）</p><p>对象关系模型（Object Relational Model）</p><h3 id="5、层次模型"><a href="#5、层次模型" class="headerlink" title="5、层次模型"></a>5、层次模型</h3><p>层次模型是数据库系统中最早出现的数据模型</p><p>层次数据库系统的典型代表是IBM公司的IMS（Information Management System）数据库管理系统</p><p>层次模型用<strong>树形结构</strong>来表示各类实体以及实体间的联系。</p><p><strong>①层次模型的数据结构</strong></p><p>满足下面两个条件的基本层次联系的集合为层次模型：</p><ol><li>有且只有一个结点没有双亲结点，这个结点称为根节点</li><li>根以外的其他结点有且只有一个双亲结点</li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308144107326.png" alt="image-20220308144107326"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220308144608091.png" alt="image-20220308144608091"></p><p>层次模型的特点：</p><ul><li>结点的双亲是唯一的</li><li>只能直接处理一对多的实体联系</li><li>每个记录类型可以定义一个排序字段，也成为码字段</li><li>任何记录值只有按其路径查看时，才能显示它的全部意义</li><li>没有一个子女记录值能够脱离双亲记录值而独立存在</li></ul><p>多对多联系在层次模型中的表示</p><ul><li>用层次模型间接表示多对多联系</li><li>方法<br>讲多对多联系分解成一对多联系</li><li>分解方法<ul><li>冗余结点法</li><li>虚拟结点法</li></ul></li></ul><p>②<strong>层次模型的完整性约束条件</strong></p><p>层次模型的完整性约束条件：</p><ul><li>无相应的双亲结点值就不能插入子女结点值</li><li>如果删除双亲结点值，则相应的子女结点值也被同时删除</li><li>更新操作时，应更新所有相应记录，以保证数据的一致性</li></ul><p>优点：</p><ul><li>层次模型的数据结构比较简单清晰</li><li>查询效率高，性能优于关系模型，不低于网状模型</li><li>层次数据模型提供了良好的完整性支持</li></ul><p>缺点：</p><ul><li>多对多联系表示不自然</li><li>对插入和删除操作的限制多，应用程序的编写比较复杂</li><li>查询子女结点必须通过双亲结点</li><li>由于结构严密，层次命令趋于程序化</li></ul><h3 id="6、网状模型"><a href="#6、网状模型" class="headerlink" title="6、网状模型"></a>6、网状模型</h3><p>网状模型中子女结点与双亲结点的联系可以不唯一</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220310152343215.png" alt="image-20220310152343215"></p><h3 id="7、关系模型"><a href="#7、关系模型" class="headerlink" title="7、关系模型"></a>7、关系模型</h3><p>关系数据库系统采用关系模型作为数据的组织方式。</p><p>1970年美国IBM公司San Jose研究室的研究员E.F.Codd首次提出了数据库系统的关系模型。</p><p>计算机厂商新推出的数据库管理系统几乎都支持关系模型。</p><h4 id="①、关系数据模型的数据结构"><a href="#①、关系数据模型的数据结构" class="headerlink" title="①、关系数据模型的数据结构"></a>①、关系数据模型的数据结构</h4><p>在用户观点下，用户数据模型中数据的逻辑结构是一张二维表，它由行和列组成。</p><ul><li><p>关系（relation）</p><p>一个关系对应通常说的一张表</p></li><li><p>元组（Tuple）</p><p>表中的一行即为一个元组</p></li><li><p>属性（attribute）</p><p>表中的一列即为一个属性</p></li><li><p>主码（key）</p><p>表中的某个属性组，它可以唯一确定一个元组。</p></li><li><p>域（domain）</p><p>属性的取值范围</p></li><li><p>分量</p><p>元组中的一个属性值</p></li><li><p>关系模式</p><p>对关系的描述</p><p>关系名（属性1，属性2，…，属性n）</p><p>学生（学号，姓名，年龄，性别，系，年级）</p></li></ul><p>例1：学生、系、系与学生之间的一对多联系：<br>            学生（学号，姓名，年龄，性别，系号，年级）<br>            （001,x1,15,nan,01,2020）<br>            （002,x2,16,nan,02,2020）</p><p>​系（系号，系名，办公地点）<br>​（01，计算机系，2号楼）<br>​（02，物理系，1号楼）</p><p>例2：系、系主任、系与系主任间的一对一联系<br>            教工（教工号，名称，系号）<br>            系（系号，系名，办公地点，主任教工号）</p><p>例3：学生、课程、学生与课程之间的多对多联系：</p><p>​学生（学号，姓名，年龄，性别，系号，年级）</p><p>​课程（课程号、课程名、学分）</p><p>​选修（学号，课程名，成绩）</p><p>关系必须是规范化的，满足一定的规范条件</p><p>最基本的规范条件：关系的每一个分量必须是一个不可分的数据项，不允许表中还有表</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220606115921025.png" alt="image-20220606115921025"> </p><p>表中的工资和扣除是可分的数据项，不符合关系模型要求。</p><h4 id="②、关系数据模型的操纵与完整性约束"><a href="#②、关系数据模型的操纵与完整性约束" class="headerlink" title="②、关系数据模型的操纵与完整性约束"></a>②、关系数据模型的操纵与完整性约束</h4><p>数据操作是集合操作，操作对象和操作结构都是关系</p><ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul><p>数据操作是集合操作，操作对象和操作结构都是关系，即若干元组的集合</p><p>存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”</p><h4 id="③、关系数据模型的存储结构"><a href="#③、关系数据模型的存储结构" class="headerlink" title="③、关系数据模型的存储结构"></a>③、关系数据模型的存储结构</h4><p>实体及实体间的联系都用表来表示</p><p>表以文件形式存储</p><ul><li>有的DBMS一个表对应一个操作系统文件</li><li>有的DBMS自己设计文件结构</li></ul><h4 id="④、关系数据模型的优缺点"><a href="#④、关系数据模型的优缺点" class="headerlink" title="④、关系数据模型的优缺点"></a>④、关系数据模型的优缺点</h4><p>优点：</p><ul><li>建立在严格的数学概念的基础上</li><li>概念单一<ul><li>实体和各类联系都用联系来表示</li><li>对数据的检索结果也是关系</li></ul></li><li>关系模型的存取路径对拥护透明<ul><li>具有更高的数据独立性，更好的安全保密性</li><li>简化了程序员的工作和数据库开发建立的工作</li></ul></li></ul><p>缺点：</p><ul><li>存取路径对拥护透明导致查询效率往往不如非关系数据模型</li><li>为提高性能，必须对用户的查询请求进行优化，增加了开发DBMS的难度</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220310152343215.png" alt="image-20220310152343215"></p><h1 id="二、关系数据库"><a href="#二、关系数据库" class="headerlink" title="二、关系数据库"></a>二、关系数据库</h1><p>域、投影操作、选择操作、链接操作、自然连接、左右连接</p><p>在关系代数的专门运算中，从表中取出指定的属性（列）的操作称为：投影</p><p>​从表中选出满足某种条件的元组操作称为：选择</p><p>提出关系模型的是美国<strong>IBM</strong>公司的<strong>E.F.Codd</strong></p><ul><li><p>1970年提出关系数据模型</p><p>E.F.Codd，”A Relational Model of Data for Large Shared Data Banks”，《Communication of the ACM》，1970</p></li><li><p>之后，提出了关系代数和关系演算的概念</p></li><li><p>1972年提出了关系的第一、第二、第三范式</p></li><li><p>1974年提出了关系的<strong>BC</strong>范式</p></li></ul><h2 id="2-1、关系数据结构及形式化定义"><a href="#2-1、关系数据结构及形式化定义" class="headerlink" title="2.1、关系数据结构及形式化定义"></a>2.1、关系数据结构及形式化定义</h2><h3 id="1、关系"><a href="#1、关系" class="headerlink" title="1、关系"></a>1、关系</h3><ul><li><p>单一的数据结构——关系</p><p>现实世界的实体以及实体间的各种联系均用关系来表示</p></li><li><p>逻辑结构——二维表</p><p>从用户角度，关系模型中数据的逻辑结构是一张二维表</p></li><li><p>建立在集合代数的基础上</p></li></ul><ol><li><p>域（domain）</p><p>域是一组具有相同数据类型的值的集合。比如：整数、实数、介于某个取值范围的整数，长度指定长度的字符串集合</p></li><li><p>笛卡尔积（Cartesian Product）</p><ol><li><p>给定一组域D<sub>1</sub>，D<sub>2</sub>，。。。，D<sub>n</sub>，这些域中可以有相同的<br>D<sub>1</sub>，D<sub>2</sub>，。。。，D<sub>n</sub>的笛卡尔积为：<br>D<sub>1</sub>&times;D<sub>2</sub>&times;…&times;D<sub>n</sub>&#x3D;{(d<sub>1</sub>,d<sub>2</sub>,…,d<sub>n</sub>)|d<sub>i</sub>&in;D<sub>i</sub>,i &#x3D; 1, 2, .., n}<br>所有域的所有取值的一个组合<br>不能重复</p></li><li><p>基数（Cardinal number）</p><ol><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220607145543179.png" alt="image-20220607145543179"></li></ol></li><li><p>笛卡尔积的表示方法</p><ol><li>笛卡尔积可表示为一个二维表</li><li>表中的每行对应一个元组，表中的每列对应一个域</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220323194920348.png" alt="image-20220323194920348"></li></ol></li></ol></li><li><p>元组（Tuple）</p><p>关系中的每个元素都是关系中的元组，用t表示。</p><p>笛卡尔积中每一个元素（d<sub>1</sub>, d<sub>2</sub>, …, d<sub>n</sub>）叫做一个n元组（n-tuple）或简称元组（Tuple）</p><p>（张庆梅，计算机专业，李勇）是元组</p></li><li><p>分量（Component）</p><ol><li>笛卡尔积元素（d<sub>1</sub>, d<sub>2</sub>, …, d<sub>n</sub>）中的每一个d<sub>i</sub> 都叫做一个分量</li><li>张庆梅、计算机专业、李勇、都是分量</li></ol></li><li><p>关系（Relation）</p><ol><li><p>D<sub>1</sub>&times;D<sub>2</sub>&times;。。。&times;D<sub>n</sub>的子集叫做在域D<sub>1</sub>，D<sub>2</sub>，。。。D<sub>n</sub>上的关系，表示为<br>R(D<sub>1</sub>, D<sub>2</sub>， …, D<sub>n</sub>)<br>            R:关系名<br>            n：关系的目或度（Degree）</p></li><li><p>单元关系与二元关系</p><ol><li>当n&#x3D;1时，称该关系为单元关系或一元关系</li><li>当n&#x3D;2时，称该关系为二元关系</li></ol></li><li><p>关系的表示</p><ol><li>关系是一个二维表，表的每行对应一个元组，表的每列对应一个域</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220607153430860.png" alt="image-20220607153430860"></li></ol></li></ol></li><li><p>属性（attribute）</p><ol><li>关系中不同列可以对应相同的域</li><li>为了加以区分，必须对每列起一个名字，成为属性</li><li>n目关系必有n个属性</li></ol></li><li><p>码（key）</p><ol><li><p>候选码（Candidate key）</p><ol><li>若关系中的某一属性组的值能惟一地标识一个元组，则称该属性组为候选码</li><li>简单的情况：候选码只包含一个属性</li><li>候选码中的属性称为：主属性</li></ol></li><li><p>全码（All-key）</p><ol><li>最极端的情况：关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）</li></ol></li><li><p>主码</p><ol><li>若一个关系有多个候选码，则选定其中一个为主码（Primary key）</li></ol></li><li><p>主属性</p><ol><li>候选码的诸属性成为主属性（Prime attribute）</li><li>不包含在任何候选码中的属性称为非主属性（Non-Prime attribute）或非码属性（Non-key attribute）</li></ol></li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220323195300233.png" alt="image-20220323195300233"></p></li><li><p>三类关系</p><ol><li><p>基本关系（基本表或基表）</p><ol><li>实际存在的表，是实际存储的逻辑表示</li></ol></li><li><p>查询表</p><ol><li>查询结果对应的表</li></ol></li><li><p>视图表</p><ol><li>由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据</li></ol></li></ol></li><li><p>基本关系的性质</p><ol><li><p>列是同质的（Homogeneoous）</p></li><li><p>不同的列可出自同一个域</p><ol><li>其中的每一列称为一个属性</li><li>不同的属性要给予不同的属性名</li></ol></li><li><p>列的顺序无所谓，列的次序可以任意交换</p></li><li><p>任意两个元组的候选码不能相同</p></li><li><p>行的顺序无所谓，行的次序可以任意交换</p></li><li><p>分量必须取原子值</p><ol><li>这是规范条件中最基本的一条</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220607155229751.png" alt="image-20220607155229751"></li></ol></li></ol></li></ol><h3 id="2、关系模式"><a href="#2、关系模式" class="headerlink" title="2、关系模式"></a>2、关系模式</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220315140114688.png" alt="image-20220315140114688"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220323195539185.png" alt="image-20220323195539185"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220323200000827.png" alt="image-20220323200000827"> </p><h2 id="2-2、关系操作"><a href="#2-2、关系操作" class="headerlink" title="2.2、关系操作"></a>2.2、关系操作</h2><h2 id="2-3、关系的完整性"><a href="#2-3、关系的完整性" class="headerlink" title="2.3、关系的完整性"></a>2.3、关系的完整性</h2><h2 id="2-4、关系代数"><a href="#2-4、关系代数" class="headerlink" title="2.4、关系代数"></a>2.4、关系代数</h2><p>关系代数用关系的运算表示查询，主要分为两类集合</p><p>运算和专门的关系运算</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220607155403393.png" alt="image-20220607155403393"></p><h3 id="1、并（Union）"><a href="#1、并（Union）" class="headerlink" title="1、并（Union）"></a>1、并（Union）</h3><p>R和S</p><ul><li>具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域</li></ul><p>R&cup;S</p><ul><li>仍为n目关系，由属于R或属于S的元组组成<br>R&cup;S&#x3D;{t | t&in;R V t&in;S}</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324155112973.png" alt="image-20220324155112973"></p><h3 id="2、差（Difference）"><a href="#2、差（Difference）" class="headerlink" title="2、差（Difference）"></a>2、差（Difference）</h3><p> R和S</p><ul><li>具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域</li></ul><p>R - S</p><ul><li>仍为n目关系，由属于R而不属于S的元组组成<br>R - S&#x3D;{t | t&in;R &wedge;t&notin; S}</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324155802074.png" alt="image-20220324155802074"></p><h3 id="3、交（Intersection）"><a href="#3、交（Intersection）" class="headerlink" title="3、交（Intersection）"></a>3、交（Intersection）</h3><p> R和S</p><ul><li>具有相同的目n（即两个关系都有n个属性）</li><li>相应的属性取自同一个域</li></ul><p>R &cap; S</p><ul><li><p>仍为n目关系，由属于R又属于S的元组组成<br>R &cap; S&#x3D;{t | t&in;R &wedge;t&in; S}</p><p>R &cap; S &#x3D; R - (R - S)</p></li></ul><h3 id="4、笛卡尔积（Cartesian-Product）"><a href="#4、笛卡尔积（Cartesian-Product）" class="headerlink" title="4、笛卡尔积（Cartesian Product）"></a>4、笛卡尔积（Cartesian Product）</h3><p>严格地讲应该是广义的笛卡尔积（Extended Cartesian Product）</p><p>R：n目关系，k<sub>1</sub>个元组</p><p>S：n目关系，k<sub>2</sub>个元组</p><p>R&times;S</p><ul><li>列：（n+m)列元组的集合<ul><li>元组的前n列是关系R的一个元组</li><li>后m列是关系S的一个元组</li></ul></li><li>行：k<sub>1</sub>&times;k<sub>2</sub>个元组<ul><li>R&times;S &#x3D; {t<sub>r</sub>t<sub>s</sub> | t<sub>r</sub>&in; R &wedge; t<sub>s</sub>&in;S}</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324160033196.png" alt="image-20220324160033196"> </p><h3 id="5、专门的关系运算"><a href="#5、专门的关系运算" class="headerlink" title="5、专门的关系运算"></a>5、专门的关系运算</h3><p>（1）R，t&in;R, t[A<sub>i</sub>]<br>            设关系模式为R（A<sub>1</sub>, A<sub>2</sub>, …, A<sub>n</sub>）<br>            它的一个关系设为R<br>            t&in; R表示 t 是R 的一个元组<br>             t[A<sub>i</sub>]则表示元组 t 中相应于属性 A<sub>i</sub>的一个分量</p><p>（2）A， t[A], $\overline{A}$</p><p>​<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220607162449619.png" alt="image-20220607162449619"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324160749147.png" alt="image-20220324160749147"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324160832464.png" alt="image-20220324160832464"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324161126231.png" alt="image-20220324161126231"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324161323339.png" alt="image-20220324161323339"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324162039103.png" alt="image-20220324162039103"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324165558241.png" alt="image-20220324165558241"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324165714957.png" alt="image-20220324165714957"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324170034629.png" alt="image-20220324170034629"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324170157637.png" alt="image-20220324170157637"> </p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324171127657.png" alt="image-20220324171127657"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324171214703.png" alt="image-20220324171214703"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324171524418.png" alt="image-20220324171524418"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324171851215.png" alt="image-20220324171851215"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172130938.png" alt="image-20220324172130938"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172137019.png" alt="image-20220324172137019"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172147978.png" alt="image-20220324172147978"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172210602.png" alt="image-20220324172210602"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172537497.png" alt="image-20220324172537497"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172543966.png" alt="image-20220324172543966"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172906617.png" alt="image-20220324172906617"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324172941073.png" alt="image-20220324172941073"> </p><p>自然连接</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324173116268.png" alt="image-20220324173116268"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324173422580.png" alt="image-20220324173422580"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324185316862.png" alt="image-20220324185316862"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324185327796.png" alt="image-20220324185327796"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324185709823.png" alt="image-20220324185709823"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220324190045237.png" alt="image-20220324190045237"> </p><h2 id="2-5、关系演算（不讲）"><a href="#2-5、关系演算（不讲）" class="headerlink" title="2.5、关系演算（不讲）"></a>2.5、关系演算（不讲）</h2><h2 id="2-6、小结"><a href="#2-6、小结" class="headerlink" title="2.6、小结"></a>2.6、小结</h2><h1 id="三、SQL"><a href="#三、SQL" class="headerlink" title="三、SQL"></a>三、SQL</h1><p>全部是重点、十多分</p><p>&#x3D;NULL错误</p><p>JDBC的操作步骤</p><p>触发器的</p><ol><li>定义事件 before &#x2F; after insert\update\delete </li><li>关键字old\new   after update后两个都可以用<br>after delete用old<br>   before insert用new</li><li>authorization</li></ol><h2 id="3-1、SQL概述"><a href="#3-1、SQL概述" class="headerlink" title="3.1、SQL概述"></a>3.1、SQL概述</h2><h3 id="1、历史"><a href="#1、历史" class="headerlink" title="1、历史"></a>1、历史</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329133219172.png" alt="image-20220329133219172"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329133328971.png" alt="image-20220329133328971"> </p><p>DBMS:MySQL,Oracle,DB2,SQL Sever</p><h3 id="2、SQL的特点"><a href="#2、SQL的特点" class="headerlink" title="2、SQL的特点"></a>2、SQL的特点</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329133912991.png" alt="image-20220329133912991"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329134132726.png" alt="image-20220329134132726"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329134703758.png" alt=" "></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329134904865.png" alt="image-20220329134904865"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329145620253.png" alt="image-20220329145620253"> </p><h2 id="3-2、学生-课程数据库"><a href="#3-2、学生-课程数据库" class="headerlink" title="3.2、学生-课程数据库"></a>3.2、学生-课程数据库</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329145801272.png" alt="image-20220329145801272"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329145832639.png" alt="image-20220329145832639"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329145841031.png" alt="image-20220329145841031"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329145848884.png" alt="image-20220329145848884"> </p><h2 id="3-3、数据定义"><a href="#3-3、数据定义" class="headerlink" title="3.3、数据定义"></a>3.3、数据定义</h2><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329140206316.png" alt="image-20220329140206316"> </p><h3 id="2、基本表的定义、删除与修改"><a href="#2、基本表的定义、删除与修改" class="headerlink" title="2、基本表的定义、删除与修改"></a>2、基本表的定义、删除与修改</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329140315971.png" alt="image-20220329140315971"> </p><p>&lt;&gt;必须有 []可有可无</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329140732529.png" alt="image-20220329140732529"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329140900853.png" alt="image-20220329140900853"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329150033271.png" alt="image-20220329150033271">  </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329141101141.png" alt="image-20220329141101141"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220329145113627.png" alt="image-20220329145113627"></p><p>4、修改基本表 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405133459139.png" alt="image-20220405133459139"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405133633735.png" alt="image-20220405133633735"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405133745468.png" alt="image-20220405133745468"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405135304468.png" alt="image-20220405135304468"></p><h3 id="3、索引的建立与删除"><a href="#3、索引的建立与删除" class="headerlink" title="3、索引的建立与删除"></a>3、索引的建立与删除</h3><p>B+Tree索引、Hash索引、聚集索引</p><p>hash索引只能用在等于的情况下</p><p>如果是范围索引，用不到hash</p><p>聚集索引：每个表都只有一个聚集索引，创建表的时候自动创建。作用：决定数据在硬盘上的物理存储位置</p><p>一列可以添加多个索引</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405135922612.png" alt="image-20220405135922612"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405140529692.png" alt="image-20220405140529692"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405140753608.png" alt="image-20220405140753608"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405140847492.png" alt="image-20220405140847492"></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405142121947.png" alt="image-20220405142121947"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405142229647.png" alt="image-20220405142229647"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405142353663.png" alt="image-20220405142353663"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405142401855.png" alt="image-20220405142401855"> </p><p>更新</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405143544414.png" alt="image-20220405143544414"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220405144327707.png" alt="image-20220405144327707"> </p><p>防止出错 <code>set autocommit = 0;</code></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407151637029.png" alt="image-20220407151637029"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407151906643.png" alt="image-20220407151906643"></p><h2 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407151953162.png" alt="image-20220407151953162"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407152001143.png" alt="image-20220407152001143"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407152040779.png" alt="image-20220407152040779"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407152227071.png" alt="image-20220407152227071"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407152407915.png" alt="image-20220407152407915"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407152514204.png" alt="image-20220407152514204"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407152932148.png" alt="image-20220407152932148"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407153006719.png" alt="image-20220407153006719"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407153057255.png" alt="image-20220407153057255"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407153339228.png" alt="image-20220407153339228"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407153604629.png" alt="image-20220407153604629"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407153655052.png" alt="image-20220407153655052"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220407153827523.png" alt="image-20220407153827523"> </p><p>查找包含%的字符</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412135357794.png" alt="image-20220412135357794"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412140026084.png" alt="image-20220412140026084"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412140455405.png" alt="image-20220412140455405"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412140615313.png" alt="image-20220412140615313"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93.assets/image-20220412140701408.png" alt="image-20220412140701408"></p><h2 id="3-4、数据更新"><a href="#3-4、数据更新" class="headerlink" title="3.4、数据更新"></a>3.4、数据更新</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93.assets/image-20220412140701408.png" alt="image-20220412140701408"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412140719541.png" alt="image-20220412140719541"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412141218564.png" alt="image-20220412141218564"> </p><p>limit 分页查询，指明开始和查几个</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412142419378.png" alt="image-20220412142419378"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412142544689.png" alt="image-20220412142544689"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412142917596.png" alt="image-20220412142917596"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220412143816221.png" alt="image-20220412143816221"> </p><p>having 是分组后的查询</p><p>where是分组前</p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220414152201337.png" alt="image-20220414152201337"> </p><p>左连接</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220414152722945.png" alt="image-20220414152722945"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220414153214620.png" alt="image-20220414153214620"></p><h2 id="3-5、数据查询"><a href="#3-5、数据查询" class="headerlink" title="3.5、数据查询"></a>3.5、数据查询</h2><p>嵌套查询，子查询</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419134617718.png" alt="image-20220419134617718"> </p><p>嵌套查询可以放到select,from,where中</p><p>放到select中，只可以返回一列</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419135355613.png" alt="image-20220419135355613"> </p><p>放到from中</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419135727134.png" alt="image-20220419135727134"> </p><p>n+1查询，</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419141114824.png" alt="image-20220419141114824"> </p><p>在where</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419142631689.png" alt="image-20220419142631689"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419143404437.png" alt="image-20220419143404437"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220419143833277.png" alt="image-20220419143833277"> </p><h2 id="3-6、视图"><a href="#3-6、视图" class="headerlink" title="3.6、视图"></a>3.6、视图</h2><h1 id="四、数据库安全性"><a href="#四、数据库安全性" class="headerlink" title="四、数据库安全性"></a>四、数据库安全性</h1><ol><li>用户鉴别（用户名和密码）</li><li>多层存取控制  （不同的用户进来，看到的表格是不同的）（不同的权限）（root用户的host只能本机用，其他电脑不能用，）（用root用户创建其他用户）</li><li>审计（大量的辅助文件）（在出现问题后，怎么追责）（追责机制）</li><li>视图和数据加密<ol><li>数据加密（比如，你的硬盘等丢失，别人无法打开，复制数据后也不能正常显示）</li><li>表加密（身份证号、手机号密文存储）<br>加密方式AES_EN___(  <em>,  密钥 )</em><br>解密方式AES_DE___( _, 密钥)<br>字符串转换为16进制，方式HEX，二进制UNHEX</li></ol></li></ol><h1 id="五、数据库完整性"><a href="#五、数据库完整性" class="headerlink" title="五、数据库完整性"></a>五、数据库完整性</h1><p>数据库的完整性是指数据库的<strong>正确性</strong>和<strong>相容性</strong></p><p>分类：</p><ol><li>实体完整性</li><li>参照完整性</li><li>用户自定义完整性</li></ol><h1 id="六、关系数据理论"><a href="#六、关系数据理论" class="headerlink" title="六、关系数据理论"></a>六、关系数据理论</h1><p>分值最高</p><p>范式都要掌握2NF,3NF,BCNF,4NF。给你一个表，判断哪个范式</p><p>去掉部分依赖，变成2NF</p><p>去掉传递依赖，变成3NF</p><p>决定因素是码的话，就是BCNF</p><p>BCNF是去掉了主属性之间的函数传递？？？</p><h1 id="七、数据库设计"><a href="#七、数据库设计" class="headerlink" title="七、数据库设计"></a>七、数据库设计</h1><h2 id="7-1、数据库设计的基本步骤"><a href="#7-1、数据库设计的基本步骤" class="headerlink" title="7.1、数据库设计的基本步骤"></a>7.1、数据库设计的基本步骤</h2><p>数据库设计的基本步骤</p><ol><li>需求分析<ol><li>形成需求分析文档</li></ol></li><li>概念结构分析<ol><li>设计出数据结构，画出E-R图</li><li>矩形是实体，椭圆表示实体的属性，菱形表示实体之间的联系</li><li>联系是1：1，1：N， M：N;</li></ol></li><li>逻辑结构分析<ol><li>由E-R图转换成表，像关系模型</li></ol></li><li>物理结构分析<ol><li>采用什么样的模型，是不是受事务管理</li><li>数据保存的位置，需要详细的规划</li></ol></li><li>数据库实施<ol><li>导入一些基本的数据，</li><li>创建表</li></ol></li><li>数据库运行和维护</li></ol><h2 id="7-2、E-R图向关系模型的转换"><a href="#7-2、E-R图向关系模型的转换" class="headerlink" title="7.2、E-R图向关系模型的转换"></a>7.2、E-R图向关系模型的转换</h2><p>逻辑结构设计</p><p>E-R图由实体型、实体的属性和实体型之间的联系组成</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608171814998.png" alt="image-20220608171814998"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608171824428.png" alt="image-20220608171824428"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608171832477.png" alt="image-20220608171832477"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608171854964.png" alt="image-20220608171854964"></p><p>第一种情况，没有合并的形式建了一个表</p><p>第二种情况，一对多</p><p>合并，合并的多的那个表中</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608172017666.png" alt="image-20220608172017666"> </p><p>没有合并的话，就是建了一个新表，但可能会出现一个学生出现多个班级之中，可以通过限定将Sno为唯一值</p><p>第三种情况：多对多，只能建一个新表</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220608172231784.png" alt="image-20220608172231784"> </p><h1 id="四、JDBC"><a href="#四、JDBC" class="headerlink" title="四、JDBC"></a>四、JDBC</h1><p>Java数据库连接（Java Data Base Connectivity）</p><p>用于Java编程语言和数据库之间连接的API  </p><h2 id="4-1、连接数据的步骤"><a href="#4-1、连接数据的步骤" class="headerlink" title="4.1、连接数据的步骤"></a>4.1、连接数据的步骤</h2><ul><li>注册驱动（只做一次）JDBC com.mysql.jdbc.Driver</li><li>建立连接（Connection）</li><li>创建执行SQL的容器（Statement）</li><li>执行语句</li><li>处理执行结果（ResultSet）</li><li>释放资源</li></ul><h2 id="4-2、注册驱动"><a href="#4-2、注册驱动" class="headerlink" title="4.2、注册驱动"></a>4.2、注册驱动</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220426133904971.png" alt="image-20220426133904971"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220426135549340.png" alt="image-20220426135549340"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220426140428680.png" alt="image-20220426140428680"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220426142905753.png" alt="image-20220426142905753"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class TestMain &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/studentmanagement?useUnicode=true&amp;characterEncoding=UTF-8&quot;;</span><br><span class="line">String username = &quot;root&quot;;</span><br><span class="line">String password = &quot;13525681378.Ll&quot;;</span><br><span class="line"></span><br><span class="line">Connection con = DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">Statement st = con.createStatement() ;</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into student(sno,sname) values(&#x27;2----&#x27;,&#x27;成功&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">st.execute(sql);</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">con.close();</span><br><span class="line">System.out.println(&quot;OK&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class TestMain &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/studentmanagement?useUnicode=true&amp;characterEncoding=UTF-8&quot;;</span><br><span class="line">String username = &quot;root&quot;;</span><br><span class="line">String password = &quot;13525681378.Ll&quot;;</span><br><span class="line"></span><br><span class="line">Connection con = DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">Statement st = con.createStatement() ;</span><br><span class="line"></span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入学号&quot;);</span><br><span class="line">String sno = sc.next();</span><br><span class="line">System.out.println(&quot;请输入姓名&quot;);</span><br><span class="line">String sname = sc.next();</span><br><span class="line"></span><br><span class="line">String sql = &quot;insert into student(sno,sname) values(&#x27;&quot;+sno+&quot;&#x27;,&#x27;&quot;+sname+&quot;&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">st.execute(sql);</span><br><span class="line"></span><br><span class="line">st.close();</span><br><span class="line">con.close();</span><br><span class="line">System.out.println(&quot;OK&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、存储过程"><a href="#五、存储过程" class="headerlink" title="五、存储过程"></a>五、存储过程</h1><p>定义：是一段写好的SQL代码，特别的就是它是存在数据库的目录里。所以外部程序可以直接调用数据库里面定义好的存储过程，另外数据库内部的触发器（trigger）、或者其他存储过程也可以调用它。</p><p>优点：</p><ol><li>首先在性能上的提高，比起通过应用程序发送SQL语句给数据库执行，让数据库自己内部执行存储过程效率更高、速度更快（存储过程将SQL编译好后存在数据库目录下）</li><li>存储过程还减少了应用程序同服务器自己的信息<strong>交互频率</strong></li><li>存储过程重用性比较高，并且是透明的，因为保存在数据库里面。所以对任何应用哦哥来说都可以使用。新的应用只需要调用相应的存储过程就可以得到相应的数据服务。</li></ol><p>缺点：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220505170312170.png" alt="image-20220505170312170"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220503141823987.png" alt="image-20220503141823987"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220503141904610.png" alt="image-20220503141904610"> </p><p>where 前面有个from</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220503142206389.png" alt="image-20220503142206389"> </p><p>问题：</p><ol><li>乱码<ol><li>检查编码格式是否一致：表的编码、列的编码、Java端的编码</li></ol></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(给定的值，不能用<span class="keyword">select</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ... select...</span><br><span class="line"><span class="comment">---这种方式将select查询到的值放到前面的表中，但是这个列数一定要匹配</span></span><br><span class="line"></span><br><span class="line">返回学生人数</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>, (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">select</span> <span class="number">1</span>, (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220510134707067.png" alt="image-20220510134707067"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">  #Routine body goes here.  计算学生成绩的总和</span><br><span class="line">  </span><br><span class="line">  DECLARE done int default 0 ;</span><br><span class="line">  DECLARE mcno VARchar(20) ; </span><br><span class="line">  DECLARE mgrade int ; </span><br><span class="line">  DECLARE totalGrade int default 0 ; </span><br><span class="line"></span><br><span class="line">  --将SC表查询的结果集放到CC表中 </span><br><span class="line">  DECLARE cc cursor for select cno,grade from sc ; </span><br><span class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;</span><br><span class="line">  -- done的作用是当判断是否</span><br><span class="line">  </span><br><span class="line">  open cc ; </span><br><span class="line">  </span><br><span class="line">  FETCH cc into mcno,mgrade ; </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  WHile (done != 1) DO</span><br><span class="line">     set totalGrade = totalGrade + mgrade ;</span><br><span class="line">     FETCH cc into mcno,mgrade ; </span><br><span class="line">  END WHILE ; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  close cc ; </span><br><span class="line">  </span><br><span class="line">  select totalGrade from dual ;   </span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><h1 id="七、动态网页"><a href="#七、动态网页" class="headerlink" title="七、动态网页"></a>七、动态网页</h1><p>首先需要下载：Tomcat服务器</p><p>浏览器到服务器请求的配置是WEB协议：</p><ul><li><p>2.5版本之前web.xml方式</p></li><li><p>3.0版本是注解方式（用得比较多）</p></li></ul><p>客户端向服务器端发送request请求，服务器端返回response响应</p><p>需要配置&rightarrow;启动&rightarrow;运行</p><h2 id="7-1、配置Tomcat服务器"><a href="#7-1、配置Tomcat服务器" class="headerlink" title="7.1、配置Tomcat服务器"></a>7.1、配置Tomcat服务器</h2><ol><li>在new里面的other里寻找<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220521201754590.png" alt="image-20220521201754590"></li><li>找到Dynamic Web Project<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220521201940442.png" alt="image-20220521201940442"></li><li>选择服务器和协议号<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220521203259564.png" alt="image-20220521203259564"></li></ol><h2 id="7-2、"><a href="#7-2、" class="headerlink" title="7.2、"></a>7.2、</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8090/TestL/FirstServlet</span></span><br><span class="line"><span class="comment">//配置完成后从浏览器打开</span></span><br></pre></td></tr></table></figure><p>调取参数是用.getParameter(“sno”)方法</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><ol><li><p>在BEFORE，INSERT类型的触发器中，可以使用old关键字。错</p></li><li><p>假设关系R上的A字段上存在一个HASH索引，则当使用条件WHERE A &gt; 10 and A &lt; 20时，并不会使用该索引。对</p></li><li><p>DBMS通常提供授权功能来控制不同用户访问数据的权限，这主要是为了实现数据库的<strong>安全性</strong>。</p></li><li><p>用于数据库恢复的重要文件是（日志文件）</p></li><li><p>系统恢复采用的机制是日志机制</p></li><li><p>聚集索引：每个表只能创建一个该类型的索引</p></li><li><p>候选码中的属性：主属性</p></li><li><p>下列索引中，每个表只能创建一个该类型的索引，这个索引类型是<strong>聚集索引</strong></p></li><li><p>在关系数据库设计中，设计关系模式是<strong>逻辑设计阶段</strong>的任务</p></li><li><p>在关系代数的专门运算中，从表中选出满足某种条件的元组的操作是：<strong>投影</strong></p><p>​从表中选出满足某种条件的元组操作称为：<strong>选择</strong></p></li><li><p>设有关系R和函数依赖F如下：R(A,B,C, D)，F&#x3D;{B&rightarrow;D, AB&rightarrow;C}判断码及其范式，并分解</p><p>码：AB<br>范式：B&rightarrow;D是部分依赖，所以是1NF<br>R1(A,B,C)<br>R2(B,D)—<br>答案：1.AB为关系R的码，且在关系R中不存在传递函数依赖<br>        2.B-&gt;D为关系R中的部分函数依赖<br>        3.R关系可分解为两个关系R1(A,B,C)和R2(B,D)，且分解后至少满足3NF</p><hr></li><li><p>属性的取值称为属性的域。</p></li><li><p>设有属性A,B,C,D，以下表示中不是关系的是：R(A&times;B&times;C&times;D)</p></li><li><p>在数据库中，下列说法是不正确的：<br>数据库避免了一切数据的重复</p></li></ol><hr><ol><li>数据库DB、数据库系统DBS和数据库管理系统DBMS之间的关系是（DBS包括DB和DBMS）</li><li>数据库系统的数据独立性体现在（不会因为数据存储结构与数据逻辑结构的变化而影响用户程序）</li><li>要保证数据库的逻辑数据独立性，需要修改的是（模式与外模式之间的映射）</li><li>X&rightarrow; Y,当下列哪一条成立时，称为平凡的函数依赖（Y&in;X)</li><li>关系数据模型是目前最重要的一种数据模型，它的三个要素分别是（数据结构、关系操作、完整性约束）</li><li>（关系模型）的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立工作。</li><li>一个关系只有一个（主码）</li><li>外码：某个关系的主码相应的属性在另一关系中出现，此时该主码就是另一关系的外码。</li><li>现有如下关系：患者（患者编号，患者姓名，性别，出生日期）医疗（患者编号，医生编号，医生姓名，诊断日期，诊断结果）其中，医疗关系的外码是（患者编号）</li><li>关系数据库管理系统应能实现的专门关系运算包括（选择、投影、连接）</li><li>五种基本关系代数运算是（并&cup;，差-，投影&prod;，选择&sigma;，笛卡尔积&times;）</li><li>从一个数据库文件中取出满足某个条件的所有记录形成一个新的数据库文件的操作是（选择）</li><li>一般情况下，当对关系R和S进行自然连接时，要求R和S含有一个或者多个共有的（属性）</li><li>SQL语言急数据查询、数据操纵、数据定义和数据控制功能于一体，其中，CREATE、DROP、ALTER语句是实现那种功能（数据定义）</li><li>数据流程图是用于数据库设计中（需求分析）阶段的工具。</li><li>若要撤销数据库中已经存在的表S，可用（DELETE TABLE S）</li><li>子模式DDL是用来描述（数据库的局部逻辑结构）</li><li>假设学生关系S（S#, SNAME, SEX），课程关系C （C#, CNAME），学生选课关系 SC（S#,  C#, GRADE）。<br>要查询选修“Computer”课的男生姓名，将涉及到关系（S, C, SC）</li><li>已知关系R（ A, B, C, D, E）及其上的函数依赖集合F&#x3D;{A&rightarrow;D, B&rightarrow;C, E&rightarrow; A},该关系的候选码是（BE）</li><li>在数据库的安全性控制中，授权的数据对象的（范围越小），授权子系统就越灵活。</li><li>关系模式中，满足2NF的模式（必定满足1NF）</li><li>数据库系统是采用了数据库技术的计算机系统，数据库系统由数据库、数据库管理系统、应用系统和（数据库管理员）</li><li>下列四项中，不属于数据库系统特点的是（多用户访问）</li><li>SQL语言的GRANT和REBOKE语句主要用来维护数据库的（安全性）</li><li>数据库设计的概念设计阶段，表示概念结构的常用方法和描述工具是（实体联系法和实体联系图）</li><li>关系数据库的规范化理论主要解决的问题是（如何构建合适的数据逻辑结构）</li><li>数据库设计可划分为六个阶段，每个阶段都有自己的设计内容，“为哪些关系在哪些属性上建什么样的索引”这一设计内容应该属于（物理）设计阶段。</li><li>关系数据库中，实现实体之间的联系是通过关系与关系之间的（属性）</li><li>如何构造出一个合适的数据逻辑结构是（关系数据库规范化理论）主要解决的问题。</li><li>设有关系模式R（S, D, M），其函数依赖集：F&#x3D;{S&rightarrow;D, D&rightarrow; M},则关系模式R的规范化程度最高达到（2NF）</li><li>消除了部分函数依赖的1NF的关系模式，必定是（2NF）</li><li>规范化理论是关系数据库进行逻辑设计的理论论据，根据这个理论，关系数据库中的关系必须满足：每一个属性都是（不可分解的）</li><li>在视图上不能完成的操作是（在视图上定义新的基本表）</li><li>在SQL语言中的视图 VIEW是数据库的（外模式）</li><li>假设有关系 R和S， 关系代数表达式 R-（R-S）表示的是（R&cap;S）</li><li>下面的选项不是关系数据库基本特征的是（不同的列有不同的数据类型）</li><li>关系模型中，一个码是（可有多个或者一个其值能够唯一表示该关系模式中的任何元组的属性组成）</li><li>概念模型是现实世界的第一层抽象，这一类模型中最著名的模型是（实体—关系模型）</li><li>在（网状模型）中一个节点可以有多个双亲，结点之间可以有多种联系</li><li>学生关系模式 S（S#, Sname, Sex, Age），S 的属性分别是学生的学号、姓名、性别、年龄。要在表 S中删除一个属性“年龄”,可选用的SQL语句是（ALTERTABLE S DROP Age）</li><li>关系数据模型中，二维表的列称为（属性&#x2F;字段），二维表的行称为（记录&#x2F;元组）</li><li>数据库数据具有长期存储、有组织和可共享三个基本特点。</li><li>SQL的中文全称是结构化查询语言。</li><li>SQL中的视图机制提高了数据库系统的安全性。</li><li>数据库设计中，设计数据库存储结构，即确定关系、索引、聚簇、日志、备份等数据的存储安排和存储结构，这是数据库设计的<strong>物理设计阶段</strong></li><li>用户选座元组标识的一个候选码为主码，其属性<strong>不能</strong>取空值</li><li>SQL语言除了具有数据查询和数据操纵功能之外，还具有数据定义和数据控制的功能，它是一个综合性的功能强大的语言。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><p>线性结构是一个<em><strong>*有序*<em><strong>数据元素的</strong></em>*集合，元素之间具有一对一的线性关系*</strong></em></p><p>线性结构：线性表、栈、队列、双队列、数组、串</p><p>非线性结构：二维数组、多维数组、广义表、树，图</p><p>程序不一定满足有穷性，如死循环、操作系统等；而算法必须有穷</p><p>算法的五个基本特性：①有穷性②确定性③可行性④输入⑤输出</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217214018703.png" alt="image-20230217214018703"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217214216943.png" alt="image-20230217214216943"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217163656719.png" alt="image-20230217163656719"></p><p>数据结构中，数据从存储结构上可以分成<strong>顺序、链接索引与散列</strong>存储方法</p><h2 id="1-1、数据结构的基本概念"><a href="#1-1、数据结构的基本概念" class="headerlink" title="1.1、数据结构的基本概念"></a>1.1、数据结构的基本概念</h2><h3 id="1-1-1、基本概念和术语"><a href="#1-1-1、基本概念和术语" class="headerlink" title="1.1.1、基本概念和术语"></a>1.1.1、基本概念和术语</h3><p><strong>数据（data）</strong>是描述客观事物的数和字符的集合。</p><p><strong>数据元素（data element）</strong>是数据的基本单位。<br><strong>数据项（data item）</strong>是具有独立含义是数据最小单位，也称为字段或域。<br><strong>数据对象（data object）</strong>是指性质相同的数据元素的集合，它是数据的一个子集。<br><strong>数据结构（data structure）</strong>是指所有数据元素以及数据元素之间的关系。也就是带结构的数据的集合。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217214427128.png" alt="image-20230217214427128"></p><p>比如，20级3班所有学生的所有信息的整体就是数据对象，每个人的所有数据称为数据元素，个人是身高、男女等称作数据项</p><h3 id="1-1-2、数据结构的三要素"><a href="#1-1-2、数据结构的三要素" class="headerlink" title="1.1.2、数据结构的三要素"></a>1.1.2、数据结构的三要素</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217215220757.png" alt="image-20230217215220757"></p><p>数据结构包括3个方面</p><ol><li>数据的逻辑结构（logical structure）：数据元素之间的关系</li><li>数据的存储结构（storage structure）：在计算机存储器上，数据及其关系的表示</li><li>数据的运算（operation）：对数据的操作</li></ol><h4 id="1、逻辑结构"><a href="#1、逻辑结构" class="headerlink" title="1、逻辑结构"></a>1、逻辑结构</h4><ol><li>集合</li><li>线性结构：一对一</li><li>树形结构：一对多</li><li>图形结构：多对多</li></ol><p>同一个集合可以有多种逻辑结构</p><h4 id="2、存储结构"><a href="#2、存储结构" class="headerlink" title="2、存储结构"></a>2、存储结构</h4><p>数据在计算机中的存储方式就是存储结构，逻辑结构映射为存储结构</p><p>①顺序存储结构（sequential storage structure）<br>②链式存储结构（linked storage strucrure）<br>③索引存储结构（indexed storage structure）<br>④哈希（散列）存储结构（hashed storage structure）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217215348912.png" alt="image-20230217215348912"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217215359651.png" alt="image-20230217215359651"> </p><h2 id="1-2、数据类型和抽象数据类型"><a href="#1-2、数据类型和抽象数据类型" class="headerlink" title="1.2、数据类型和抽象数据类型"></a>1.2、数据类型和抽象数据类型</h2><h3 id="1-2-1、数据类型"><a href="#1-2-1、数据类型" class="headerlink" title="1.2.1、数据类型"></a>1.2.1、数据类型</h3><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称</p><ol><li>原子类型。其值不可再分的数据类型</li><li>结构类型。其值可以再分解为若干成分（分量）的数据类型</li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217215922730.png" alt="image-20230217215922730"></p><h3 id="1-2-2、抽象数据类型"><a href="#1-2-2、抽象数据类型" class="headerlink" title="1.2.2、抽象数据类型"></a>1.2.2、抽象数据类型</h3><p>抽象数据类型（Abstract Data Type,ADT）指从求解问题的数学模型中抽象出来的<strong>逻辑数据结构</strong>和<strong>运算</strong>，而不考虑计算机的具体实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类姓名</span><br><span class="line">&#123;</span><br><span class="line">数据对象：数据对象的声明</span><br><span class="line">数据关系：数据关系的声明</span><br><span class="line">基本运算：基本运算的声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220302203523040.png" alt="image-20220302203523040"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220302203531019.png" alt="image-20220302203531019"></p><h2 id="1-3、算法"><a href="#1-3、算法" class="headerlink" title="1.3、算法"></a>1.3、算法</h2><h3 id="1-3-1、算法的基本概念"><a href="#1-3-1、算法的基本概念" class="headerlink" title="1.3.1、算法的基本概念"></a>1.3.1、算法的基本概念</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217220544100.png" alt="image-20230217220544100"></p><p>算法（Algorithm）</p><ol><li>有穷性：在有穷步之后结束</li><li>确定性：没有歧义，相同的输入可以得到相同的输出</li><li>可行性：基本运算可以有限次执行，每个动作可以机械执行</li><li>有输入：零个或多个</li><li>有输出：一个或多个</li></ol><p>好的算法的特质</p><ul><li>正确性。算法能够正确地求解问题</li><li>可读性：算法具有良好的可读性，以帮助人们理解</li><li>健壮性：输入非法数据时，算法可以适当地做出反应，而不会产生莫名其妙的输出结果</li><li>高效率与低存储需求</li><li>*<em>空间复杂度</em>S(n)<em><strong>——根据算法写成的程序在执行时</strong>占用存储单元的长度。</em>*这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限，造成程序非正常中断。</li><li>*<em>时间复杂度</em>T(n)<em><strong>——根据算法写成的程序在执行时</strong>耗费时间的长度</em>*。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效算法可能导致我们在有生之年都等不到运行结果。</li></ul><h3 id="1-3-2、时间复杂度"><a href="#1-3-2、时间复杂度" class="headerlink" title="1.3.2、时间复杂度"></a>1.3.2、时间复杂度</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217220840975.png" alt="image-20230217220840975"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217220915022.png" alt="image-20230217220915022"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217220937724.png" alt="image-20230217220937724"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217220951366.png" alt="image-20230217220951366"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217221008668.png" alt="image-20230217221008668"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217221025002.png" alt="image-20230217221025002"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217221111085.png" alt="image-20230217221111085"> </p><h3 id="1-3-3、空间复杂度"><a href="#1-3-3、空间复杂度" class="headerlink" title="1.3.3、空间复杂度"></a>1.3.3、空间复杂度</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20230217221346443.png" alt="image-20230217221346443"> </p><h1 id="二、线性表"><a href="#二、线性表" class="headerlink" title="二、线性表"></a>二、线性表</h1><p>线性表是一种典型的线性结构，也是一种常用的数据结构。</p><p>一个线性表是n个具有相同特性的****数据元素****的有限序列</p><p>数据项：一个数据元素由若干数据项组成</p><p>数据元素：组成数据对象的基本单位</p><p>数据对象：性质相同的数据元素的集合（类似数组）</p><h2 id="2-1、基本概念"><a href="#2-1、基本概念" class="headerlink" title="2.1、基本概念"></a>2.1、基本概念</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p><strong>线性表（linear list）是具有相同特性的数据元素的一个有限序列。</strong></p><p><strong>相同特性</strong>：所有元素属于同一数据类型。<br><strong>有限</strong>：数据元素个数是有限的。<br><strong>序列</strong>：数据元素由逻辑序号唯一确定。一个线性表中可以有相同值的元素。</p><p>该序列所含元素的个数叫做线性表的长度，用n表示,n &geq; 0。当 n&#x3D;0 时，表示线性表是一个空表，不含任何元素。</p><p>线性表的每个数据元素由逻辑序号确定，设序列中的第 <em>i</em>（<em>i</em> 表示逻辑序号）个元素为 <em>a<sub>i</sub></em> (1&leq; i &leq; n)，则线性表的一般表示为$(a_1,a_2,···,a_n)$</p><h3 id="2、运算"><a href="#2、运算" class="headerlink" title="2、运算"></a>2、运算</h3><p>线性表的9个基本运算</p><ol><li>初始化线性表 **InitList(&amp;L)**：构造一个空的线性表L</li><li>销毁线性表 **DestroyList(&amp;L)**：释放线性表L占用的内存空间</li><li>判断线性表是否为空表 **ListEmpty(L)**：若L 为空表，返回真；反之，返回假</li><li>求线性表的长度 **ListLength(L)**：返回L中元素个数n</li><li>输出线性表 **DispList(L)**：输出线性表每个节点的值域</li><li>求线性表L 中指定位置的某个数据元素 **GetElem(L, i, &amp;e)**：用e返回L 中第i个元素的值</li><li>定位查找 **LocateElem(L, e)**：返回L 中第一个值域与 e 相等的逻辑位序，若不存在，返回0</li><li>插入一个数据元素 **ListInsert(&amp;L, i, e)**：在L 的第i 个元素之前插入新的元素 e，L长度加1</li><li>删除数据元素 **ListDelete(&amp;L, i, &amp;e)**：删除第i个元素，并用 e 返回其值，L的长度减1</li></ol><p>线性表的作用：</p><ol><li>程序员可以直接用它来存放数据，即作为存放数据的容器</li><li>可以使用它的基本运算来完成更复杂的功能</li></ol><h3 id="3、知识结构"><a href="#3、知识结构" class="headerlink" title="3、知识结构"></a>3、知识结构</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220304190319097.png" alt="image-20220304190319097"></p><p>线性表的重要知识点：</p><ul><li>线性表两类存储结构的差异。</li><li>每种存储结构中基本运算的实现算法。</li><li>利用线性表求解实际问题。</li><li>利用有序表特性设计高效算法。</li></ul><h2 id="2-2、顺序表"><a href="#2-2、顺序表" class="headerlink" title="2.2、顺序表"></a>2.2、顺序表</h2><h3 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h3><p>线性表的顺序存储结构：把线性表中的所有元素按照逻辑顺序依次存储到从计算机存储器中指定存储位置开始的一块连续的存储空间中。</p><p>线性表逻辑上相邻的两个元素在对应的顺序表中存储位置也相邻，称为<strong>直接映射</strong></p><p><strong>随机存取</strong>的存储结构，就是可以通过首地址加逻辑序号直接在某个位置，存储或取出数据</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220304190525056.png" alt="image-20220304190525056"></p><p>顺序表类型定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];<span class="comment">//ElemType是自定义数据类型，是自己定义的，可以是int ,char等等</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//length成员存放线性表的实际长度</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//data成员存放元素</span></span><br><span class="line"><span class="comment">//逻辑位序和物理位序相差1</span></span><br></pre></td></tr></table></figure><h3 id="2、运算的实现"><a href="#2、运算的实现" class="headerlink" title="2、运算的实现"></a>2、运算的实现</h3><p>建立顺序表</p><p>a[0..n-1]——整体创建顺序表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList</span><span class="params">(SqLiST *&amp;L,ElemType a[],<span class="type">int</span> n)</span><span class="comment">//由a中的n个元素建立顺序表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>,k = <span class="number">0</span>;<span class="comment">//k表示L中的元素个数，初始值为0</span></span><br><span class="line">    L = (SqList * )<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SqList));<span class="comment">//分配存放线性表的空间</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)<span class="comment">//i扫描数字a的元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[k] = a[i];<span class="comment">//将元素a[i]存放到L中</span></span><br><span class="line">        k++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length = k;<span class="comment">//设置L的长度k</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// *&amp;L是引用类型指针，它代表的是原指针，它和原指针的关系 就相当于 两台手机共用一个账号，信息是共享的</span></span><br><span class="line"><span class="comment">//*L是指针变量，存放的是内存地址，在函数中，它是形参，是单方向的，它的修改，改变了内存地址，但不会对原地址进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sizeof是一个操作符，返回一个内存空间的大小</span></span><br><span class="line"><span class="comment">//sizeof(SqList)返回SqList的内存空间大小</span></span><br><span class="line"><span class="comment">//malloc(sizeof(SqList))是分配一个这样的内存空间，并返回首地址</span></span><br><span class="line"><span class="comment">//(SqList * )malloc(sizeof(SqList)):将这个首地址作为SqList的指针</span></span><br></pre></td></tr></table></figure><h3 id="3、基本运算算法"><a href="#3、基本运算算法" class="headerlink" title="3、基本运算算法"></a>3、基本运算算法</h3><p>（1）初始化线性表<strong>InitList(&amp;L)</strong></p><p>该运算的结构是构建一个空的线性表 L。实际上只需将 length 成员设置为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList *&amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//分配线性表的存储空间</span></span><br><span class="line">    L = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）销毁线性表 <strong>DestroyList(L)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(SqList *&amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(L);<span class="comment">//释放线性表L 的内存空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）判定是否为空表 <strong>ListEmpty(L)</strong></p><p>该运算返回一个值表示L是否为空表。若L 是空表，返回true, 否则返回 false.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListEmpty</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>(L-&gt;length == <span class="number">0</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）求线性表的长度 <strong>ListLength(L)</strong></p><p>该运算返回顺序表L的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>(L-&gt;length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）输出线性表 <strong>DispList(L)</strong></p><p>该运算当线性表L不为空时，顺序显示 L 中各元素的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DispList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(ListEmpty(L))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, L-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）求线性表L 中指定位置的某个数据元素 **GetElem(L, i, &amp;e)**：用e返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">GetElem</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本算法的时间复杂度为 O(1),体现了顺序表的随机存取特性</span></span><br></pre></td></tr></table></figure><p>（7）L中第i个元素的值定位查找 **LocateElem(L, e)**：返回L 中第一个值域与 e 相等的逻辑位序，若不存在，返回0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SqList *L, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; L-&gt;length &amp;&amp; L-&gt;data[i] != e)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（8）插入一个数据元素 <strong>ListInsert(&amp;L, i, e)</strong></p><p>在顺序表的第 <em>i</em> 个位置插入新元素 e。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList *&amp;L, <span class="type">int</span> i, ElemType e)</span></span><br><span class="line">&#123;    <span class="type">int</span> j;    </span><br><span class="line"> <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>)    </span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果 i 值不正确，返回 false,    </span></span><br><span class="line">    &#125;    </span><br><span class="line"> i--;    </span><br><span class="line"> <span class="keyword">for</span>(j = L-&gt;length; j &gt; i; j--)    </span><br><span class="line">    &#123;        </span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j - <span class="number">1</span>];<span class="comment">//插入位置后面的元素向后移一个位置    </span></span><br><span class="line">    &#125;    </span><br><span class="line"> L-&gt;data[i] = e;    </span><br><span class="line"> L-&gt;length++;    </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="comment">//平均时间复杂度为 O(n)</span></span><br></pre></td></tr></table></figure><p>（9）删除数据元素<em><em>ListDelete</em>(&amp;L,i,&amp;e)</em>**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList *&amp;L,<span class="type">int</span> i,ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;    </span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L-&gt;length)        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//参数错误时返回false    </span></span><br><span class="line">    i--;<span class="comment">//将顺序表逻辑序号 转化为 物理序号    </span></span><br><span class="line">    e=L-&gt;data[i];    </span><br><span class="line">    <span class="keyword">for</span>(j=i;i&lt;L-&gt;length<span class="number">-1</span>;j++)        </span><br><span class="line">        L-&gt;data[j]=L-&gt;data[j+<span class="number">1</span>];    </span><br><span class="line">    L-&gt;length--;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">//平均时间复杂度为 O(n)</span></span><br></pre></td></tr></table></figure><h3 id="4、算法设计"><a href="#4、算法设计" class="headerlink" title="4、算法设计"></a>4、算法设计</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309201510278-16468281114641.png" alt="image-20220309201510278"></p><p>空间复杂度与临时变量有关，一个临时变量，空间复杂度为O(1)</p><p><strong>解法一：（重建法）</strong>设删除A中所有值等于x元素后的顺序表为 A1，显然A1包含在A中，为此A1重建A的空间</p><p>思路：扫描顺序表A，重建A只包含不等于x的元素</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309201619591.png" alt="image-20220309201619591"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delnode1</span><span class="params">(SqList *&amp;A, ElemType x)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i;<span class="comment">//k记录值不等于X的元素个数    </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; A-&gt;length; i++)    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A-&gt;data[i] != x)<span class="comment">//若当前元素不为x，将其插入A中        </span></span><br><span class="line">        &#123;</span><br><span class="line">            A-&gt;data[k] = A-&gt;data[i];             </span><br><span class="line">            k++;<span class="comment">//不等于x的元素增1        </span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    A-&gt;length = k;<span class="comment">//顺序表A的长度等于k&#125;</span></span><br></pre></td></tr></table></figure><p><strong>解法二（前移法）：</strong>用k记录顺序表A中等于x的元素个数，一边扫描A一边统计k值。</p><p>思路：将不为x的元素前移k 个位置，最后修改A的长度。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309201745130.png" alt="image-20220309201745130"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delnode2</span><span class="params">(SqList *&amp;A, ElemType x)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>;<span class="comment">//k记录值等于x的元素个数    </span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; A-&gt;length)    </span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="keyword">if</span>(A-&gt;data[i] == x)        </span><br><span class="line">        &#123;            </span><br><span class="line">            k++;<span class="comment">//当前元素值为x时，k增1        </span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;            </span><br><span class="line">            A-&gt;data[i - k] = A-&gt;data[i];<span class="comment">//当前元素不为x时将其前移k个位置        </span></span><br><span class="line">        &#125;        </span><br><span class="line">        i++;</span><br><span class="line">    &#125;    </span><br><span class="line">    A-&gt;length -= k;<span class="comment">//顺序表A的长度减K</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、链表"><a href="#2-3、链表" class="headerlink" title="2.3、链表"></a>2.3、链表</h2><p>线性表的链式存储结构</p><p>链表是数据结构之一，其中的数据呈线性排列。在链表中，数据的添加和删除都较为方便，就是访问比较耗费时间。</p><ul><li>每个数据都有一个指针</li><li>数据分散在内存中，无需存储在连续空间中</li><li>访问时，只能从第一个数据开始，一一向下访问</li><li>添加数据时，只需要改变添加位置前后的指针就可以了，删除也是</li></ul><h3 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h3><p>线性表的链式存储结构称为<strong>链表</strong>（linked list）</p><p>线性表中每个结点有唯一的前驱结点和后继结点。</p><p><strong>数据域</strong>：存储结点中元素本身的信息</p><p><strong>指针域</strong>：元素之间的逻辑关系，用指针表示</p><p><strong>单链表：</strong>每个物理结点增加一个指向后继结点的指针域</p><p><strong>双链表：</strong>每个物理结点增加一个指向后继结点的指针域和一个指向前驱结点的指针域</p><p><strong>头指针（head pointer）</strong>：每个链表都带有一个头结点，头结点的指针指向这个链表，头结点的指针就是头指针</p><p><strong>首指针（first pointer）</strong>：首结点的指针</p><p><strong>尾指针（tail pointer）</strong>：尾结点的指针</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309201830626.png" alt="image-20220309201830626"></p><p>单链表增加一个头结点的优点：</p><ul><li>第一个结点的操作和表中其他结点的操作相一致，无需进行特殊处理</li><li>无论链表是否为空，都有一个头结点，因此空表和非空表的处理也统一了</li></ul><p><strong>存储密度</strong>是指 结点数据本身所占的空间 和 整个结点结构中所占的空间之比。</p><p>存储密度越大，存储空间的利用率就越高。显然，顺序表的存储密度为1，而链表的存储密度小于1.</p><h3 id="2、单链表"><a href="#2、单链表" class="headerlink" title="2、单链表"></a>2、单链表</h3><p>结点类型定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//存放元素值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指向后继结点</span></span><br><span class="line">&#125;LinkNode;<span class="comment">//单链表结点类型</span></span><br></pre></td></tr></table></figure><p>单链表访问过一个结点后，只能接着访问它的后继结点，而无法访问它的前驱结点。</p><h4 id="①、插入结点和删除结点操作"><a href="#①、插入结点和删除结点操作" class="headerlink" title="①、插入结点和删除结点操作"></a>①、<strong>插入结点和删除结点操作</strong></h4><p>1）插入结点</p><p>插入操作：将值为x的新结点 *s 插入到 *p结点之后</p><p>特点：只需修改相关结点的指针域，不需要移动结点</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309202103149.png" alt="image-20220309202103149"></p><p>2）删除结点</p><p>删除操作：删除*p结点之后的一个结点</p><p>特点：只需修改相关结点的指针域，不需要移动结点</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309202142377.png" alt="image-20220309202142377"></p><h4 id="②、建立单链表"><a href="#②、建立单链表" class="headerlink" title="②、建立单链表"></a>②、建立单链表</h4><p>（1）头插法建表</p><ul><li>从一个空表开始，创建一个头结点</li><li>依次读取字符数组a中的元素，生成新结点</li><li>将新结点插入到当前链表的<strong>表头</strong>上，直到结束为止</li><li>注意：链表的顺序与逻辑顺序 相反</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220331142715683.png" alt="image-20220331142715683"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插法算法如下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateListF</span><span class="params">(LinkNode *&amp;L, ElemType a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode *s;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L = (LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//创建头结点，其next域置为NULL</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//循环建立数据结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = (LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">        s-&gt;data = a[i];<span class="comment">//建立数据结点*s</span></span><br><span class="line">        s-&gt;next = L-&gt;next;<span class="comment">//将*s插在原开始结点之前，头结点之后</span></span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）尾插法建表</p><ul><li>从一个空表开始，创建一个头结点</li><li>依次读取字符数组a中的元素，生成新结点</li><li>将新结点插入到当前链表的表尾上，直到结束</li><li>链表的结点顺序与逻辑次序<strong>相同</strong></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220331143016713.png" alt="image-20220331143016713"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateListR</span><span class="params">(LinkNode *&amp;L, ElemType a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">LinkNode *s, *r;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));<span class="comment">//创建头结点</span></span><br><span class="line">    r = L;<span class="comment">//r始终指向尾结点，开始时指向头结点</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//循环建立数据结点</span></span><br><span class="line">    &#123;</span><br><span class="line">s = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">         s-&gt;data = a[i]; <span class="comment">//创建数据结点 *s</span></span><br><span class="line">         r-&gt;next = s;<span class="comment">//将*s 插入 *r之后</span></span><br><span class="line">         r = s;<span class="comment">//s就是新的r，r的指针右移了</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;<span class="comment">//尾结点next域置为NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③、线性表基本运算在单链表上的实现"><a href="#③、线性表基本运算在单链表上的实现" class="headerlink" title="③、线性表基本运算在单链表上的实现"></a>③、线性表基本运算在单链表上的实现</h4><p>（1）初始化线性表 InitList(L)</p><p>该运算建立一个空的单链表，即创建一个头结点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(LinkNode *&amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">L = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));<span class="comment">//创建头结点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）销毁线性表 DestroyList(L)</p><p>释放单链表L占用的空间。即逐一释放全部结点的空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(LinkNode *&amp;L)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *pre = L, *p = L-&gt;next;<span class="comment">//pre指向*p的前驱结点</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)<span class="comment">//扫描单链表L</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pre);<span class="comment">//释放*pre结点</span></span><br><span class="line">        pre = p;<span class="comment">//pre、p同步后移一个结点</span></span><br><span class="line">        p = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pre);<span class="comment">//循环结束时，p为NULL，pre指向尾结点，释放它</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）判断线性表是否为空表 ListEmpty(L)</p><p>若单链表L 没有数据结点，则返回真，否则返回假。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListEmpty</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>(L-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）求线性表的长度 ListLength(L)</p><p>返回单链表L中数据结点的个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ListLenth</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L;<span class="comment">//p指向头结点，n置为0（头结点的序号为0）</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(n);<span class="comment">//循环结束，p指向尾结点，其序号n为结点个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）输出线性表 DispList(L)</p><p>逐一扫描单链表L 的每个数据结点，并显示各结点的 data域值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DispList</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p = L-&gt;next; <span class="comment">//p指向开始结点</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)<span class="comment">//p不为NULL，输出 *p 结点的 data域</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;<span class="comment">//p移向下一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    pirintf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）求线性表L中位置 i 的数据元素 GetElme(L, i, &amp;e)</p><p>思路： 在单链表L中从头开始找到第 i 个结点，若存在第 i 个数据结点，则将其 data 域值赋给变量 e。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">GetElem</span><span class="params">(LinkNode *L, <span class="type">int</span> i, ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L;<span class="comment">//p指向头结点，j置为0（即头结点的序号为0）</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; i &amp;&amp; p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;<span class="comment">//找出第i个结点*p</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不存在第i个数据结点，返回false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        e = p-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//存在第 i个数据结点，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（7）按元素值查找 LocateElem(L, e)</p><p>思路：在单链表L中从头开始找第1个值域与e相等的结点，若存在这样的结点，则返回位置，否则返回0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(LinkNode *L, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    LinkNode *p = L-&gt;next;<span class="comment">//p指向开始结点，i置为1</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;<span class="comment">//查找data值为e的结点，其序号为i</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">0</span>);<span class="comment">//不存在元素值为e的结点，返回0</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(i);<span class="comment">//存在元素值为e的结点，返回其逻辑序号i</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//算法的时间复杂度为O(n)，不具有随机存取特性</span></span><br></pre></td></tr></table></figure><p>（8）插入数据元素 ListInsert(&amp;L, i, e)</p><p>思路：先在单链表L中找到第 i-1 个结点 *p,若存在这样的结点，将值为e的结点 *s 插入到其后。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkNode *&amp;L, <span class="type">int</span> i, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkNode *P = L, *s;<span class="comment">//p指向头结点，j置为0</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;<span class="comment">//查找第 i-1个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//未找到第 i-1 个结点，返回false</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//找到第 i-1个结点 *p,插入新结点并返回true</span></span><br><span class="line">        s = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">        s-&gt;data = e;<span class="comment">//创建新结点 *s, 其 data 域置为 e </span></span><br><span class="line">        s-&gt;next = p-&gt;next;<span class="comment">//将 *s 插入到 *p 之后</span></span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（9）删除数据元素 ListDelete(&amp;L, i, &amp;e)</p><p>思路：先在单链表 L中找到第 i-1 个结点 *p,若存在这样的结点，且也存在后继结点，则删除该后继结点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(LinkNode *&amp;L, <span class="type">int</span> i, ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L, *q;<span class="comment">//p指向头结点，j置为0</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>)<span class="comment">//查找第 i-1 个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//未找到第 i-1 个结点，返回false</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//找到第 i-1 个结点*p</span></span><br><span class="line">        q = p-&gt;next;<span class="comment">//q指向第i 个结点</span></span><br><span class="line">        <span class="keyword">if</span>(q == <span class="literal">NULL</span>)<span class="comment">//若不存在第 i 个结点，返回false</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e = q-&gt;data;</span><br><span class="line">        p-&gt;next = q-&gt;next;<span class="comment">//从单链表中删除 *q结点</span></span><br><span class="line">        <span class="built_in">free</span>(q);<span class="comment">//释放*q结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回true表示成功删除第 i 个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④、单链表的算法设计方法"><a href="#④、单链表的算法设计方法" class="headerlink" title="④、单链表的算法设计方法"></a>④、<strong>单链表的算法设计方法</strong></h4><p>Ⅰ、以查找为基础的算法设计</p><ul><li>按照条件进行结点查找</li><li>进行插入或者删除操作</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309202839799.png" alt="image-20220309202839799"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delmaxnode</span><span class="params">(LinkNode *&amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode *p = L-&gt;next, *pre = L, *maxp = p, *maxpre = pre;</span><br><span class="line">    <span class="comment">//查找最大值结点的前驱结点*maxpre</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(maxp-&gt;data &lt; p-&gt;data)<span class="comment">//若找到一个更大的结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxp = p;<span class="comment">//更改maxp</span></span><br><span class="line">            maxpre = pre;<span class="comment">//更改maxpre</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;<span class="comment">//p,pre同步后移一个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    maxpre-&gt;next = maxp-&gt;next;<span class="comment">//删除*maxp结点</span></span><br><span class="line">    <span class="built_in">free</span>(maxp);<span class="comment">//释放*maxp结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309202856189.png" alt="image-20220309202856189"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(LinkNode *&amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode *p, *pre, *q;</span><br><span class="line">    p = L-&gt;next-&gt;next;<span class="comment">//p指向L的第2个数据结点</span></span><br><span class="line">    L-&gt;next-&gt;next = <span class="literal">NULL</span>;<span class="comment">//构造只含一个数据结点的有序表</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;<span class="comment">//q保持*p结点后继结点的指针</span></span><br><span class="line">        pre = L;<span class="comment">//从有序表开头进行比较，pre指向插入*p的前驱结点</span></span><br><span class="line">        <span class="keyword">while</span>(pre-&gt;next != <span class="literal">NULL</span> &amp;&amp; pre-&gt;next-&gt;data &lt; p-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre-&gt;next;<span class="comment">//在有序表中找插入*p的前驱结点*pre</span></span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = pre-&gt;next;</span><br><span class="line">        pre-next = p;</span><br><span class="line">        p = q;<span class="comment">//扫描原单链表余下的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ⅱ、以建表算法为基础的算法设计</p><ul><li>单链表有尾插法和头插法两种建表算法</li></ul><h3 id="3、双链表"><a href="#3、双链表" class="headerlink" title="3、双链表"></a>3、双链表</h3><p>在线性表的链式存储结构中，每个物理结点增加一个指向后继结点的指针域和一个指向前驱结点的指针域。</p><p>优点：</p><ul><li>从任一结点出发可以快速找到其前驱结点和后继结点</li><li>从任一结点出发可以访问其他结点</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203010006.png" alt="image-20220309203010006"></p><p>类型定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span><span class="comment">//双链表结点类型</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *prior;<span class="comment">//指向前驱结点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">DNode</span> *next;<span class="comment">//指向后继结点</span></span><br><span class="line">&#125;DLinkNode;</span><br><span class="line"><span class="comment">//数据 前驱结点 后继结点</span></span><br></pre></td></tr></table></figure><h4 id="①、双链表中结点的插入和删除"><a href="#①、双链表中结点的插入和删除" class="headerlink" title="①、双链表中结点的插入和删除"></a>①、双链表中结点的插入和删除</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203055324.png" alt="image-20220309203055324"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203129973.png" alt="image-20220309203129973"></p><h4 id="②、建立双链表"><a href="#②、建立双链表" class="headerlink" title="②、建立双链表"></a>②、建立双链表</h4><p>整体建立双链表也有两种方法：头插法和尾插法。</p><p>与单链表的建表算法相似主要是插入和删除的不同。</p><p><strong>头插法</strong>建立双链表：由含有n个元素的数组a创建带头结点的双链表L。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateListF</span><span class="params">(DLinkNode *&amp;L, ElemType a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DLinkNode *s;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L = (DLinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLinkNode));<span class="comment">//创建头结点</span></span><br><span class="line">    L-&gt;prior = L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//前后指针域置为NULL</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//循环建立数据结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        s =(DLinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLinkNode));</span><br><span class="line">        s-&gt;data= a[i];<span class="comment">//创建结点*s</span></span><br><span class="line">        s-&gt;next = L-&gt;next;<span class="comment">//将*s 插入到头结点之后</span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;next != <span class="literal">NULL</span>)<span class="comment">//若L存在数据结点，修改前驱指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;next-&gt;prior = s;</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">        s-&gt;prior = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>尾插法</strong>建立双链表：由含有n个元素的数组a创建带头结点的双链表L。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateListR</span><span class="params">(DLinkNode *&amp;L, ElemType a[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DLinkNode *s, *r;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L = (DLinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLinkNode));<span class="comment">//创建头结点</span></span><br><span class="line">    r = L;<span class="comment">//r始终指向尾结点，开始时指向头结点</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//循环建立数据结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = (DLinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLinkNode));</span><br><span class="line">        s-&gt;data = a[i];<span class="comment">//创建数据结点*s</span></span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        s-&gt;prior = r;<span class="comment">//将*s 插入 *r之后</span></span><br><span class="line">        r = s;<span class="comment">//r指向尾结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    r-next = <span class="literal">NULL</span>;<span class="comment">//尾结点next域置为NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③、线性表基本运算在双链表中的实现"><a href="#③、线性表基本运算在双链表中的实现" class="headerlink" title="③、线性表基本运算在双链表中的实现"></a>③、线性表基本运算在双链表中的实现</h4><p>和单链表相比，双链表主要是<strong>插入和删除</strong>运算不同</p><p><strong>插入算法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(DLinkNode *&amp;L, <span class="type">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    DLinkNode *p = L, *s;<span class="comment">//p指向头结点，j置为0</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>)<span class="comment">//查找第 i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//未找到第 i-1 个结点，返回false</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//找到第 i-1 个结点，在其后插入新结点 *s</span></span><br><span class="line">        s = (DLinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DLinkNode));</span><br><span class="line">        s-&gt;data = e;<span class="comment">//创建新结点 *s</span></span><br><span class="line">        s-&gt;next = p-&gt;next;<span class="comment">//在*p结点之后插入 *s结点</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>)<span class="comment">//并存在后继结点，修改其前驱指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next-&gt;prior = s;</span><br><span class="line">        &#125;</span><br><span class="line">        s-prior = p;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除算法</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(DLinkNode *&amp;L, <span class="type">int</span> i, ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    DLinkNode *p = L, *q;<span class="comment">//p指向头结点，j设置为0</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>)<span class="comment">//查找第 i-1个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//未找到第 i-1 个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//找到第 i-1 个结点</span></span><br><span class="line">        q = p-&gt;next;<span class="comment">//q指向第 i个结点</span></span><br><span class="line">        <span class="keyword">if</span>(q == <span class="literal">NULL</span>)<span class="comment">//当不存在第 i个结点时返回false</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e = q-&gt;data;</span><br><span class="line">        p-&gt;next = q-&gt;next;<span class="comment">//删除*q结点</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next != <span class="literal">NULL</span>)<span class="comment">//修改前驱指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next-&gt;prior = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(q);<span class="comment">//释放*q结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><p>有一个带头结点的双链表L，设计一个算法将其所有元素逆置，即第一个元素变为最后一个元素，。。。最后一个变为第一个。</p><p>采用头插法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Reverse</span><span class="params">(DLinkNode *&amp;L)</span><span class="comment">//双链表结点逆置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DLinkNOde *p = L-&gt;next, *q;<span class="comment">//p指向头结点后的第一个结点</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//构造只有头结点的双链表</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)<span class="comment">//扫描L的数据结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;<span class="comment">//用q保存其后继结点</span></span><br><span class="line">        p-&gt;next = L-&gt;next;<span class="comment">//采用头插法将 *p 结点插入</span></span><br><span class="line">        <span class="keyword">if</span>(L-&gt;next != <span class="literal">NULL</span>)<span class="comment">//修改其前驱指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-next-&gt;piror = p;</span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;next = p;<span class="comment">//将新结点作为首结点</span></span><br><span class="line">        p-&gt;prior = L;</span><br><span class="line">        p = q;<span class="comment">//让p 重新指向其后继指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、循环链表"><a href="#4、循环链表" class="headerlink" title="4、循环链表"></a>4、循环链表</h3><p><strong>循环单链表：</strong>将表中尾结点的指针域改为指向表头结点，整个链表形成一个环。</p><p><strong>循环双链表：</strong>形成两个环</p><p>结点的类型都相同</p><h4 id="①循环单链表"><a href="#①循环单链表" class="headerlink" title="①循环单链表"></a>①循环单链表</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402150932798.png" alt="image-20220402150932798"></p><p>与非循环单链表相比，循环单链表：</p><ul><li>链表中没有空指针域</li><li>p所指结点为尾结点的条件：<code>p-&gt;next == L</code></li></ul><h4 id="②、循环双链表"><a href="#②、循环双链表" class="headerlink" title="②、循环双链表"></a>②、循环双链表</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220402151316623.png" alt="image-20220402151316623"></p><p>与非循环双链表相比，循环双链表：</p><ul><li>链表中没有空指针域</li><li>p所指结点为尾结点的条件：<code>p-&gt;next == L</code></li><li>一步操作即<code>L-&gt;prior</code>可以找到尾结点</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203414139.png" alt="image-20220309203414139"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203420408.png" alt="image-20220309203420408"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Equal</span><span class="params">(DLinkNode *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> same = <span class="number">1</span>;</span><br><span class="line">    DLinkNode *p = L-&gt;next;<span class="comment">//p指向第一个数据结点</span></span><br><span class="line">    DLinkNode *q = L-&gt;prior;<span class="comment">//q指向最后数据结点</span></span><br><span class="line">    <span class="keyword">while</span>(same == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data != q-data)</span><br><span class="line">        &#123;</span><br><span class="line">            same = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p == <span class="number">1</span> || p == q-&gt;prior)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                q = q-&gt;prior;<span class="comment">//q迁移</span></span><br><span class="line">                p = p-&gt;next;<span class="comment">//p后移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> same;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4、应用"><a href="#2-4、应用" class="headerlink" title="2.4、应用"></a>2.4、应用</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203449108.png" alt="image-20220309203449108"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203457379.png" alt="image-20220309203457379"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203503918.png" alt="image-20220309203503918"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203510588.png" alt="image-20220309203510588"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203517057.png" alt="image-20220309203517057"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.assets/image-20220309203524847.png" alt="image-20220309203524847"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203533625-16468293383074.png" alt="image-20220309203533625"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203548685.png" alt="image-20220309203548685"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203555052.png" alt="image-20220309203555052"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.assets/image-20220309203602245.png" alt="image-20220309203602245"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203609324.png" alt="image-20220309203609324"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203616972.png" alt="image-20220309203616972"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203623781.png" alt="image-20220309203623781"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203630741.png" alt="image-20220309203630741"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203639092.png" alt="image-20220309203639092"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203646217.png" alt="image-20220309203646217"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203657516.png" alt="image-20220309203657516"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203705818.png" alt="image-20220309203705818"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309203712953.png" alt="image-20220309203712953"></p><h1 id="三、栈和队列"><a href="#三、栈和队列" class="headerlink" title="三、栈和队列"></a>三、栈和队列</h1><h3 id="3-1、栈"><a href="#3-1、栈" class="headerlink" title="3.1、栈"></a><strong>3.1、栈</strong></h3><p>栈和队列的逻辑结构相同，都是线性结构</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps5.jpg" alt="img"> </p><p>标识符只能以字母或下划线开头</p><h3 id="3-2、队列"><a href="#3-2、队列" class="headerlink" title="3.2、队列"></a><strong>3.2、队列</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps6.jpg" alt="img"> </p><p>链式队列指针是从队首指向队尾的</p><p>如果是循环单链表，只需要一个队尾指针就可以了</p><h2 id="3-1、栈-1"><a href="#3-1、栈-1" class="headerlink" title="3.1、栈"></a>3.1、栈</h2><p>栈也是一种线性排列，但是只能访问最新的数据。</p><ul><li>添加数据时，新数据会放在最上面，添加数据称为入栈</li><li>取出数据时，这个操作称为出栈</li><li>“后进先出”的结构，称为<strong>Last In First Out</strong>，简称<strong>LIFO</strong></li></ul><h3 id="1、定义-3"><a href="#1、定义-3" class="headerlink" title="1、定义"></a>1、定义</h3><ul><li>栈顶：允许进行插入、删除操作的一端</li><li>表的另一端成为栈底</li><li>空栈：栈中没有数据元素</li><li>插入数据：入栈（Push）</li><li>删除数据：出栈（Pop）</li></ul><p>设计基本运算算法</p><p>①CreateTable(HList *&amp;L):交互式创建单链表</p><p>②DestroyTable(HList *&amp;L):销毁单链表</p><p>③DispTable(HList *h):输出单链表</p><p>④LinkTable(HList *h1, HList *h2, HList *&amp;h):实现两个单链表的自然选择运算</p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309204045836.png" alt="image-20220309204045836" style="zoom:150%;"><h3 id="2、栈的顺序存储结构及其基本运算实现"><a href="#2、栈的顺序存储结构及其基本运算实现" class="headerlink" title="2、栈的顺序存储结构及其基本运算实现"></a>2、栈的顺序存储结构及其基本运算实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309204138724.png"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220309204148492.png" alt="image-20220309204148492"></p><p>顺序栈4要素：</p><ul><li>栈空条件：top&#x3D;-1</li><li>栈满条件：top&#x3D;MaxSize-1</li><li>进栈e操作：top++；将e放在top 处</li><li>退栈操作：从top处取出元素e；top–;</li></ul><p><strong>基本运算算法</strong></p><p>（1）初始化栈 InitStack(&amp;s)</p><p>建立一个新的空栈s,实际上是将栈顶指针指向 -1 即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack *&amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = (SqStack *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SqStack));</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）销毁栈 DestroyStack(&amp;s)</p><p>释放栈s占用的存储空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyStack</span><span class="params">(SqStack *&amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）判断栈是否为空 StackEmpty(s)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈空的条件是 s-&gt;top == -1</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(s-&gt;top == <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）进栈Push(&amp;s, e)</p><p>在栈不满的条件下，先将栈指针增1，然后在该位置上插入元素e.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack *&amp;s, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == MaxSize - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈满的情况，即栈上溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;top++;<span class="comment">//栈顶指针增1</span></span><br><span class="line">    s-&gt;data[s-&gt;top] = e;<span class="comment">//元素e放在栈顶指针处</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）出栈Pop(&amp;s, &amp;e)</p><p>在栈不为空的条件下，先将栈顶元素赋给e,然后将栈顶指针减1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack *&amp;s, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈为空的情况，即栈下溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    e = s-&gt;data[s-top];<span class="comment">//取栈顶指针元素的元素</span></span><br><span class="line">    s-&gt;top--;<span class="comment">//栈顶指针减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）取栈顶元素 GetTop(s, &amp;e)</p><p>在栈不为空的条件下，将栈顶元素赋给e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack *s, ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈为空的情况下，即栈下溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    e = s-&gt;data[s-&gt;top];<span class="comment">//取栈顶指针元素的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：判断一个字符串对称</p><p>算法设计思路：字符串str 的所有元素依次进栈，产生的出栈序列正好与 str的顺序相反</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">symmetry</span><span class="params">(ElemType str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    SqStack *st;</span><br><span class="line">    <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++)<span class="comment">//将串所有元素进栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Push</span>(st, str[i]);<span class="comment">//元素进栈</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Pop</span>(st, e);<span class="comment">//退栈元素e</span></span><br><span class="line">        <span class="keyword">if</span>(str[i] != e)<span class="comment">//若e与当前串元素不同则不是对称串</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DestroyStack</span>(st);<span class="comment">//销毁栈</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DestroyStack</span>(st);<span class="comment">//销毁栈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316104300445.png" alt="image-20220316104300445"></p><h3 id="3、栈的链式存储结构及其基本运算的实现"><a href="#3、栈的链式存储结构及其基本运算的实现" class="headerlink" title="3、栈的链式存储结构及其基本运算的实现"></a>3、栈的链式存储结构及其基本运算的实现</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220403144003173.png" alt="image-20220403144003173"></p><p>链栈的4要素：</p><ul><li>栈空条件：s-&gt;next &#x3D; NULL</li><li>栈满条件：不考虑</li><li>进栈e操作：将包含e的结点插入到头结点之后</li><li>退栈操作：取出头结点之后结点的元素并删除之</li></ul><p><strong>数据结点的类型定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">linknode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">linknode</span> *next;<span class="comment">//指针域</span></span><br><span class="line">&#125;LinkStNode;</span><br></pre></td></tr></table></figure><p><strong>基本运算算法</strong></p><p>（1）初始化栈 initStack(&amp;s)</p><p>建立一个空栈s。实际上是创建链栈的头结点，并将其next域置为 NULL。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(LinkStNode *&amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = (LiStaInitStack *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkStNode));</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）销毁栈 DestroyStack(&amp;s)</p><p>释放栈s占用的全部存储空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyStack</span><span class="params">(LinkStNode *&amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkStNode *p = s, *q = s-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(q != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = q;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//此时p指向尾结点，释放其空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）判断栈是否为空 StackEmpty(s)</p><p>栈S为空的条件是 s-&gt;next &#x3D;&#x3D; NULL,即单链表中没有数据结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(LinkStNode *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(s-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）进栈 Push(&amp;s, e)</p><p>将新数据结点插入到头结点之后。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(LinkStNode *&amp;s, ElmeType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStNode *p;</span><br><span class="line">    p = (LinkStNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkStNode));</span><br><span class="line">    p-&gt;data = e;<span class="comment">//新建元素e对应的结点*p</span></span><br><span class="line">    p-&gt;next = s-&gt;next;<span class="comment">//插入*p结点作为开始结点</span></span><br><span class="line">    s-&gt;next = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）出栈 Pop(&amp;s, &amp;e)</p><p>在栈不为空的条件下，将头结点后继数据结点的数据域赋给e，然后将其删除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(LinkStNode *&amp;s, ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkStNode *p;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;next == <span class="literal">NULL</span>)<span class="comment">//栈空的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = s-&gt;next;<span class="comment">//p指向开始结点</span></span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    s-&gt;next = p-&gt;next;<span class="comment">//删除*p结点</span></span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//释放*p结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）取栈顶元素 GetTop(s, e)</p><p>在栈不为空的条件下，将头结点后继数据结点的数据域赋给e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(LinkStNode *s, ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;next == <span class="literal">NULL</span>)<span class="comment">//栈空的情况</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = s-&gt;next-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子：编写一个算法判断输入的表达式中括号是否配对（假设只含有左、右圆括号）</strong></p><p>算法设计思路：</p><p>一个表达式中的左右括号是按<strong>最近位置配对</strong>的。所以利用一个栈来进行求解。这里采用链栈。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327152317009.png" alt="image-20220327152317009"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327152356188.png" alt="image-20220327152356188"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Match</span><span class="params">(<span class="type">char</span> exp[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> e;</span><br><span class="line">    <span class="type">bool</span> match = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    LinkStNode *st;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; match)<span class="comment">//扫描exp中所有字符。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(exp[i] = <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="built_in">Push</span>(st, exp[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exp[i] == <span class="string">&#x27;)&#x27;</span>)<span class="comment">//当前括号为右括号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">GetTop</span>(st, e) == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(e != <span class="string">&#x27;(&#x27;</span>)<span class="comment">//当栈顶元素不为左括号时，表示不匹配</span></span><br><span class="line">                &#123;</span><br><span class="line">                    match = <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">Pop</span>(st, e);<span class="comment">//将栈顶元素出栈</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                match = <span class="literal">false</span>;<span class="comment">//无法取栈顶元素时表示不匹配</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;<span class="comment">//继续处理其他字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">StackEmpty</span>(st))<span class="comment">//栈不空时表示不匹配</span></span><br><span class="line">        &#123;</span><br><span class="line">            match = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">DestroyStack</span>(st);</span><br><span class="line">    <span class="keyword">return</span> match;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、应用"><a href="#4、应用" class="headerlink" title="4、应用"></a>4、应用</h3><h5 id="简单表达式求值"><a href="#简单表达式求值" class="headerlink" title="简单表达式求值"></a>简单表达式求值</h5><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327153249582.png" alt="image-20220327153249582"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327153339878.png" alt="image-20220327153339878"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316111013699.png" alt="image-20220316111013699"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316111213152.png" alt="image-20220316111213152"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316111353122.png" alt="image-20220316111353122"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327153755871.png" alt="image-20220327153755871"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327153853518.png" alt="image-20220327153853518"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316111520306.png" alt="image-20220316111520306"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154149019.png" alt="image-20220327154149019"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154317159.png" alt="image-20220327154317159"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154615934.png" alt="image-20220327154615934"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154701766.png" alt="image-20220327154701766"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154713370.png" alt="image-20220327154713370"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154817603.png" alt="image-20220327154817603"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327154931802.png" alt="image-20220327154931802"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155028385.png" alt="image-20220327155028385"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155136786.png" alt="image-20220327155136786"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155226310.png" alt="image-20220327155226310"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155255984.png" alt="image-20220327155255984"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155358833.png" alt="image-20220327155358833"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155546656.png" alt="image-20220327155546656"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155600385.png" alt="image-20220327155600385"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316114140768.png" alt="image-20220316114140768"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316114214687.png" alt="image-20220316114214687"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316114237997.png" alt="image-20220316114237997"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316114309300.png" alt="image-20220316114309300"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155913383.png" alt="image-20220327155913383"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327155927065.png" alt="image-20220327155927065"></p><h3 id="5、链栈"><a href="#5、链栈" class="headerlink" title="5、链栈"></a>5、链栈</h3><p>存储类型定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Linknode</span>&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Linknode</span> *<span class="title">next</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125;*LiStack;<span class="comment">//栈类型定义</span></span><br></pre></td></tr></table></figure><p> 初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LiStack <span class="title function_">Init_LiStack</span><span class="params">()</span>&#123;</span><br><span class="line">    LiStack top = (Linknode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Linknode));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (top != null)&#123;</span><br><span class="line">        top-&gt;next = null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断栈是否为空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">LiStack_Empty</span><span class="params">(L)</span></span><br></pre></td></tr></table></figure><h2 id="3-2、队列-1"><a href="#3-2、队列-1" class="headerlink" title="3.2、队列"></a>3.2、队列</h2><p>队列也是线性结构，但是添加和删除都是在两端进行。</p><ul><li>“先进先出”的结构，称为<strong>First In First Out</strong>,简称<strong>FIFO</strong></li></ul><h3 id="1、定义-4"><a href="#1、定义-4" class="headerlink" title="1、定义"></a>1、定义</h3><p>只能选取一个端点进行插入操作，另一个端点进行删除操作。</p><p><strong>队尾</strong>（rear）：进行插入的一端</p><p><strong>队首</strong>或<strong>队头</strong>（front）：进行删除的一端</p><p><strong>进队</strong>或<strong>入队</strong>：向队列中插入新元素</p><p><strong>出队</strong>或<strong>离队</strong>：从队列中删除元素</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220316114904281.png" alt="image-20220316114904281"></p><h3 id="2、顺序队及实现"><a href="#2、顺序队及实现" class="headerlink" title="2、顺序队及实现"></a>2、顺序队及实现</h3><p>顺序队类型SqQueue 定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front,rear;<span class="comment">//队首和队尾指针</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"><span class="comment">//因为队列两端都在变化，所以需要两个指针来标识队列的状态。</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220321152336259.png" alt="image-20220321152336259"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220403154358925.png" alt="image-20220403154358925"></p><p>总结：</p><ul><li>约定rear总是指向队尾元素</li><li>元素进队，rear增1</li><li>约定front指向当前队中队头元素的前一位置</li><li>当rear&#x3D;MaxSize-1时不能再进队</li></ul><p>顺序队的4要素（初始时front&#x3D;rear&#x3D;-1）</p><ul><li>队空条件：front &#x3D; rear</li><li>队满条件：rear &#x3D; MaxSize - 1</li><li>元素e进队：rear++; data[rear]&#x3D;e;</li><li>元素e出队：front++;  e&#x3D;data[front];</li></ul><p><strong>基本运算实现</strong></p><p>（1）初始化队列 InitQueue(q)</p><p>构造一个空队列q。将front和rear指针均设置成初始状态即-1值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue *&amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q = (SqQueue *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SqQueue));</span><br><span class="line">    q-&gt;front = q-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）销毁队列 DestroyQueue(q)</p><p>释放队列q占用的存储空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyQueue</span><span class="params">(SqQueue *&amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）判断队列是否为空 QueueEmpty(q)</p><p>若队列q满足q-&gt;front &#x3D;&#x3D; q-&gt;rear条件，则返回true;否则返回false。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(q-&gt;front == q-&gt;rear);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）进队列enQueue(q,e)</p><p>在队列不满的条件下，先将队尾指针rear循环增1，然后将元素添加到该位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">enQueue</span><span class="params">(SqQueue *&amp;q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;rear == MaxSize<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//队列上溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;rear++;</span><br><span class="line">    q-&gt;data[q-rear] = e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（5）出队列deQueue(q,e)</p><p>在队列q不为空的条件下，将队首指针front循环增1，开始将该位置的元素值赋给e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">deQueue</span><span class="params">(SqQueue *&amp;q,ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;front == q-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//队列下溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;front++;</span><br><span class="line">    e = q-&gt;data[q-&gt;front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、环形队列"><a href="#3、环形队列" class="headerlink" title="3、环形队列"></a>3、环形队列</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220403160454429.png" alt="image-20220403160454429"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170203169.png" alt="image-20220327170203169"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170235754.png" alt="image-20220327170235754"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170258322.png" alt="image-20220327170258322"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170542192.png" alt="image-20220327170542192"></p><p>环形队列的四要素：</p><ul><li>队空条件：front &#x3D; rear</li><li>队满条件：(rear + 1) % MaxSize &#x3D; front</li><li>进队e操作：rear &#x3D; (rear + 1) % MaxSize;将e放在rear处</li><li>出队操作：front &#x3D; (front + 1) % MaxSize; 取出front处元素e</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170608731.png" alt="image-20220327170608731"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170719251.png" alt="image-20220327170719251"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327170954589.png" alt="image-20220327170954589"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171056495.png" alt="image-20220327171056495"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171334573.png" alt="image-20220327171334573"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171410926.png" alt="image-20220327171410926"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171635426.png" alt="image-20220327171635426"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171743169.png" alt="image-20220327171743169"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171751450.png" alt="image-20220327171751450"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327171807278.png" alt="image-20220327171807278"></p><h3 id="4、链队"><a href="#4、链队" class="headerlink" title="4、链队"></a>4、链队</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327172701573.png" alt="image-20220327172701573"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327172743231.png" alt="image-20220327172743231"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327172756188.png" alt="image-20220327172756188"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327173543865.png" alt="image-20220327173543865"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327173927558.png" alt="image-20220327173927558"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327173940590.png" alt="image-20220327173940590"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174000521.png" alt="image-20220327174000521"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174206566.png" alt="image-20220327174206566"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174239629.png" alt="image-20220327174239629"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174357071.png" alt="image-20220327174357071"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174406061.png" alt="image-20220327174406061"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174417550.png" alt="image-20220327174417550"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174429047.png" alt="image-20220327174429047"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174439669.png" alt="image-20220327174439669"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174502319.png" alt="image-20220327174502319"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220327174534416.png" alt="image-20220327174534416"> </p><h1 id="六、数组和广义表"><a href="#六、数组和广义表" class="headerlink" title="六、数组和广义表"></a>六、数组和广义表</h1><h2 id="6-1、数组"><a href="#6-1、数组" class="headerlink" title="6.1、数组"></a>6.1、数组</h2><p>数组也是数据呈线性排列的一种数据结构。在数组中，<strong>访问数据十分简单</strong>，而添加和删除数据比较耗费功夫。</p><ul><li>数据是存储在连续的空间中，所以数据的内存地址可以根据数组下标直接访问</li><li>添加时，需要先确保增加的内存空间，再将数据一个个往后移</li><li>删除时，需要先删除数据，再一个一个往前移，最后删除多余的空间</li></ul><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>从<strong>逻辑结构</strong>上看，一维数组A是n（n&gt;1)个相同类型数据元素a<sub>1</sub>、a<sub>2</sub>、…、a<sub>n</sub>构成的优先序列，其逻辑表示为：$A&#x3D;(a_1,a_2,…,a_n)$其中，a<sub>i</sub>（1&leq;i&leq;n)表示数组A的第i个元素。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404152845227.png"> </p><p>数组抽象数据类型＝逻辑结构＋基本运算（运算描述）</p><p>数组的基本运算：</p><ul><li><code>Value(A,index1,index2,…,indexd)</code>：即A(index1,index2,…,indexd)&#x3D;e，元素赋值。</li><li><code>Assign(A,e,index1,index2,…,indexd)</code>：即e&#x3D; A(index1,index2,…,indexd)，取元素值。</li><li><code>ADisp(A,b1,b2,…,bd)</code>：输出d维数组A的所有元素值。</li></ul><h3 id="2、数组的存储结构"><a href="#2、数组的存储结构" class="headerlink" title="2、数组的存储结构"></a>2、数组的存储结构</h3><p>　将数组的所有元素存储在一块地址连续的内存单元中，这是一种顺序存储结构。　</p><p>几乎所有的计算机语言都支持数组类型，以C&#x2F;C++语言为例，其中数组数据类型具有以下性质：</p><ul><li>数组中的数据元素数目固定。</li><li>数组中的所有数据元素具有相同的数据类型。</li><li>数组中的每个数据元素都有一组唯一的下标。</li><li>数组是一种随机存储结构。可随机存取数组中的任意数据元素。</li></ul><p> 一维数组：一旦a1的存储地址LOC(a1)确定，并假设每个数据元素占用k个存储单元，则任一数据元素ai的存储地址LOC(ai)就可由以下公式求出：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430090447281.png" alt="image-20220430090447281"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430090557224.png" alt="image-20220430090557224"></p><h4 id="①、以行序为主序的存储"><a href="#①、以行序为主序的存储" class="headerlink" title="①、以行序为主序的存储"></a>①、以行序为主序的存储</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430090706818.png" alt="image-20220430090706818"> </p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430090805422.png" alt="image-20220430090805422"></p><h4 id="②、以列序为主序的存储"><a href="#②、以列序为主序的存储" class="headerlink" title="②、以列序为主序的存储"></a>②、以列序为主序的存储</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430090855626.png" alt="image-20220430090855626"> </p><h3 id="3、特殊矩阵的压缩存储"><a href="#3、特殊矩阵的压缩存储" class="headerlink" title="3、特殊矩阵的压缩存储"></a>3、特殊矩阵的压缩存储</h3><p>特殊矩阵的主要形式有：<br>（1）对称矩阵<br>（2）上三角矩阵／下三角矩阵<br>（3）对角矩阵<br>它们都是方阵，即行数和列数相同。</p><h4 id="①、对称矩阵的压缩存储"><a href="#①、对称矩阵的压缩存储" class="headerlink" title="①、对称矩阵的压缩存储"></a>①、对称矩阵的压缩存储</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430091243914.png" alt="image-20220430091243914"> </p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430091605053.png" alt="image-20220430091605053">  </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430092121426.png" alt="image-20220430092121426"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404173500963.png" alt="image-20220404173500963"></p><h4 id="②、三角矩阵的压缩存储"><a href="#②、三角矩阵的压缩存储" class="headerlink" title="②、三角矩阵的压缩存储"></a>②、三角矩阵的压缩存储</h4><p>上三角矩阵</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430092329950.png" alt="image-20220430092329950"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430092348976.png" alt="image-20220430092348976"> </p><p>下三角矩阵</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430092437872.png" alt="image-20220430092437872"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404174422580.png" alt="image-20220404174422580"></p><h4 id="③、对角矩阵的压缩存储"><a href="#③、对角矩阵的压缩存储" class="headerlink" title="③、对角矩阵的压缩存储"></a>③、对角矩阵的压缩存储</h4><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430093123892.png" alt="image-20220430093123892"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430093140292.png" alt="image-20220430093140292"> </p><h2 id="6-2、稀疏矩阵"><a href="#6-2、稀疏矩阵" class="headerlink" title="6.2、稀疏矩阵"></a>6.2、稀疏矩阵</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175020977.png" alt="image-20220404175020977"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175159469.png" alt="image-20220404175159469"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175315291.png" alt="image-20220404175315291"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175625621.png" alt="image-20220404175625621"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175741363.png" alt="image-20220404175741363"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175837135.png" alt="image-20220404175837135"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404175856214.png" alt="image-20220404175856214"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404180004795.png" alt="image-20220404180004795"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404180027557.png" alt="image-20220404180027557"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404180227105.png" alt="image-20220404180227105"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404194743210.png" alt="image-20220404194743210"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404194751615.png" alt="image-20220404194751615"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404194819897.png" alt="image-20220404194819897"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404194832691.png" alt="image-20220404194832691"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220404194845128.png" alt="image-20220404194845128"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406190524283.png" alt="image-20220406190524283"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406191106932.png" alt="image-20220406191106932"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406191430680.png" alt="image-20220406191430680"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406191751823.png" alt="image-20220406191751823"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406191854055.png" alt="image-20220406191854055"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406191913744.png" alt="image-20220406191913744"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406192017584.png" alt="image-20220406192017584"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406192138400.png" alt="image-20220406192138400"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406192153848.png" alt="image-20220406192153848"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406192517644.png" alt="image-20220406192517644"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220406192621446.png" alt="image-20220406192621446"> </p><h2 id="6-3、广义表"><a href="#6-3、广义表" class="headerlink" title="6.3、广义表"></a>6.3、广义表</h2><h3 id="1、定义-5"><a href="#1、定义-5" class="headerlink" title="1、定义"></a>1、定义</h3><p> 广义表是线性表的推广，是有限个元素的序列，其逻辑结构采用括号表示法表示如下：</p><p>GL&#x3D;（a<sub>1</sub>，a<sub>2</sub>，…，a<sub>i</sub>，…，a<sub>n</sub>）</p><ul><li>若n&#x3D;0时称为空表</li><li>ai为广义表的第i个元素。如果ai属于原子类型，称之为广义表GL的原子</li><li>如果ai又是一个广义表，称之为广义表GL的子表</li></ul><p>广义表重要概念：</p><ul><li>广义表的长度定义为最外层包含元素个数。</li><li>广义表的深度定义为所含括弧的重数。其中，原子的深度为0，空表的深度为1 。</li><li>广义表GL的表头为第一个元素a1，其余部分(a2，…，an)为GL的表尾。一个广义表的表尾始终是一个广义表。空表无表头表尾。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430102236456.png" alt="image-20220430102236456"> </p><p> 操作——取表头、取表尾 </p><p>F&#x3D;(b,(c,d,e))</p><p>GetHead(F)&#x3D;b<br>GetTail(F)&#x3D;((c,d,e))&#x3D;F1<br>GetHead(F1)&#x3D;(c,d,e)&#x3D;F2，GetTail(F1)&#x3D;( )<br>GetHead(F2)&#x3D;c，GetTail(F2)&#x3D;(d,e)&#x3D;F3<br>GetHead(F3)&#x3D;d，GetTail(F3)&#x3D;(e)&#x3D;F4<br>GetHead(F4)&#x3D;e，GetTail(F4)&#x3D;( )</p><ul><li>两个操作只对非空表有意义；</li><li>取表头的结果可能是原子，也可能是个广义表；</li><li>取表尾”必定”是个广义表，但可能是个空的广义表。</li></ul><h3 id="2、存储结构-1"><a href="#2、存储结构-1" class="headerlink" title="2、存储结构"></a>2、存储结构</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430102622939.png" alt="image-20220430102622939"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430102633779.png" alt="image-20220430102633779"> </p><p> 广义表的结点类型GLNode</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">lnode</span></span><br><span class="line">&#123;      <span class="type">int</span> tag;<span class="comment">//结点类型标识</span></span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        &#123;ElemType data;<span class="comment">//存放原子值</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">lnode</span> *sublist;<span class="comment">//指向子表的指针</span></span><br><span class="line">        &#125; val;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lnode</span> *link;<span class="comment">//指向下一个元素</span></span><br><span class="line">&#125;  GLNode;<span class="comment">//广义表的结点类型</span></span><br></pre></td></tr></table></figure><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430102844707.png" alt="image-20220430102844707"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430102958350.png" alt="image-20220430102958350"> </p><p>存储结构中的几种情况：<br>（1）除空表的表头指针为空外，对于任何非空列表，其表头指针均指向一个表结点，且该结点中的hp域指示列表表头（原子结点或表结点），tp域指向表尾（非空即表结点）<br>（2）容易分清列表中原子和子表所在的层次。<br>（3）最高层的表结点的个数即为列表的长度。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430103044415.png" alt="image-20220430103044415"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430103125103.png" alt="image-20220430103125103"> </p><h3 id="3、广义表的运算"><a href="#3、广义表的运算" class="headerlink" title="3、广义表的运算"></a>3、广义表的运算</h3><h4 id="①、广义表算法设计方法"><a href="#①、广义表算法设计方法" class="headerlink" title="①、广义表算法设计方法"></a>①、广义表算法设计方法</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430103218439.png" alt="image-20220430103218439"> </p><p>子表的处理和整个广义表的处理是相似的。从这个角度出发设计求解广义表递归算法的一般格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">(GLNode *g)</span><span class="comment">//g为广义表头结点指针</span></span></span><br><span class="line"><span class="function"></span>&#123;       GLNode *g1=g-&gt;val.sublist;<span class="comment">//g1指向第一个元素</span></span><br><span class="line">         <span class="keyword">while</span> (g1!=<span class="literal">NULL</span>)<span class="comment">//元素未处理完循环</span></span><br><span class="line">         &#123;      <span class="keyword">if</span> (g1-&gt;tag==<span class="number">1</span>)<span class="comment">//为子表时</span></span><br><span class="line">           <span class="built_in">fun1</span>(g1);<span class="comment">//递归处理子表</span></span><br><span class="line">   <span class="keyword">else</span><span class="comment">//为原子时</span></span><br><span class="line">           原子处理语句;<span class="comment">//实现原子操作</span></span><br><span class="line">        gl=g1-&gt;link;<span class="comment">//处理兄弟</span></span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430103509094.png" alt="image-20220430103509094"> </p><p>兄弟的处理与整个广义表的处理是相似的；对于子表结点，其元素的处理与整个广义表的处理是相似的。从这个角度出发设计求解广义表递归算法的一般格式如下： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">(GLNode *g)</span><span class="comment">//g为广义表结点指针</span></span></span><br><span class="line"><span class="function"></span>&#123;      <span class="keyword">if</span> (g!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;<span class="keyword">if</span> (g-&gt;tag==<span class="number">1</span>)<span class="comment">//为子表时</span></span><br><span class="line">         <span class="built_in">fun2</span>(g-&gt;val.sublist);<span class="comment">//递归处理其元素</span></span><br><span class="line"><span class="keyword">else</span><span class="comment">//为原子时 </span></span><br><span class="line">         原子处理语句;<span class="comment">//实现原子操作</span></span><br><span class="line"> <span class="built_in">fun2</span>(g-&gt;link);<span class="comment">//递归处理其兄弟</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="②、广义表基本算法设计"><a href="#②、广义表基本算法设计" class="headerlink" title="②、广义表基本算法设计"></a>②、广义表基本算法设计</h4><p>（1）求广义表的长度</p><p>​      在广义表中，同一层次的每个结点是通过link域链接起来的，所以可把它看做是由link域链接起来的单链表。这样,求广义表的长度就是求单链表的长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GLLength</span><span class="params">(GLNode *g)</span><span class="comment">//求广义表g的长度</span></span></span><br><span class="line"><span class="function"></span>&#123;     <span class="type">int</span> n=<span class="number">0</span>;<span class="comment">//累计元素个数，初始值为0</span></span><br><span class="line">       GLNode *g1;</span><br><span class="line">       g1=g-&gt;val.sublist;<span class="comment">//g1指向广义表的第一个元素</span></span><br><span class="line">       <span class="keyword">while</span> (g1!=<span class="literal">NULL</span>)<span class="comment">//扫描所有元素结点</span></span><br><span class="line">       &#123;n++;<span class="comment">//元素个数增1</span></span><br><span class="line">g1=g1-&gt;link;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> n;<span class="comment">//返回元素个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> （2）求广义表的深度</p><p>​    　对于带头结点的广义表g，广义表深度的递归定义是它等于所有子表中表的最大深度加1。若g为原子，其深度为0。<br>​      求广义表深度的递归模型f()如下： </p><p>f(g)&#x3D;0 g为原子<br>f(g)&#x3D;1 g为空表<br>f(g)&#x3D;MAX{f(subg)}+1其他情况 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GLDepth</span><span class="params">(GLNode *g)</span><span class="comment">//求广义表g的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;     GLNode *g1;  <span class="type">int</span> maxd=<span class="number">0</span>，dep;</span><br><span class="line">       <span class="keyword">if</span> (g-&gt;tag==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//为原子时返回0</span></span><br><span class="line">       g1=g-&gt;val.sublist;<span class="comment">//g1指向第一个元素</span></span><br><span class="line">       <span class="keyword">if</span> (g1==<span class="literal">NULL</span>)  <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//为空表时返回1</span></span><br><span class="line">       <span class="keyword">while</span> (g1!=<span class="literal">NULL</span>)<span class="comment">//遍历表中的每一个元素</span></span><br><span class="line">       &#123;<span class="keyword">if</span> (g1-&gt;tag==<span class="number">1</span>)<span class="comment">//元素为子表的情况</span></span><br><span class="line">&#123;       dep=<span class="built_in">GLDepth</span>(g1);<span class="comment">//递归调用求出子表的深度</span></span><br><span class="line">        <span class="keyword">if</span> (dep&gt;maxd)<span class="comment">//maxd为同层子表深度的最大值</span></span><br><span class="line">maxd=dep;</span><br><span class="line">&#125;</span><br><span class="line">g1=g1-&gt;link;<span class="comment">//使g1指向下一个元素</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>(maxd<span class="number">+1</span>);<span class="comment">//返回表的深度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430104205487.png" alt="image-20220430104205487"> </p><p>​       解：需要扫描广义表g中的所有结点，可以采用前面介绍的广义表算法设计方法中的两种解法来实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用解法1的方法（子表的处理和整个广义表的处理是相似）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Count1</span><span class="params">(GLNode *g)</span><span class="comment">//求广义表g的原子个数</span></span></span><br><span class="line"><span class="function"></span>&#123;     <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">      GLNode *g1=g-&gt;val.sublist;</span><br><span class="line">       <span class="keyword">while</span> (g1!=<span class="literal">NULL</span>)<span class="comment">//对每个元素进行循环处理</span></span><br><span class="line">        &#123;<span class="keyword">if</span> (g1-&gt;tag==<span class="number">0</span>)<span class="comment">//为原子时</span></span><br><span class="line">       n++;<span class="comment">//原子个数增1</span></span><br><span class="line"><span class="keyword">else</span><span class="comment">//为子表时</span></span><br><span class="line">       n+=<span class="built_in">Count1</span>(g1);<span class="comment">//累加元素的原子个数</span></span><br><span class="line">g1=g1-&gt;link;<span class="comment">//累加兄弟的原子个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;<span class="comment">//返回总原子个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//采用解法2的方法（兄弟的处理与整个广义表的处理是相似）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Count2</span><span class="params">(GLNode *g)</span><span class="comment">//求广义表g的原子个数</span></span></span><br><span class="line"><span class="function"></span>&#123;      <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g!=<span class="literal">NULL</span>)<span class="comment">//对每个元素进行循环处理</span></span><br><span class="line">        &#123;<span class="keyword">if</span> (g-&gt;tag==<span class="number">0</span>)<span class="comment">//为原子时</span></span><br><span class="line">      n++;<span class="comment">//原子个数增1</span></span><br><span class="line"><span class="keyword">else</span><span class="comment">//为子表时</span></span><br><span class="line">       n+=<span class="built_in">Count2</span>(g-&gt;val.sublist);<span class="comment">//累加元素的原子个数</span></span><br><span class="line">n+=<span class="built_in">Count2</span>(g-&gt;link);<span class="comment">//累加兄弟的原子个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;<span class="comment">//返回总原子个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、树和二叉树"><a href="#五、树和二叉树" class="headerlink" title="五、树和二叉树"></a>五、树和二叉树</h1><h3 id="5-1、树的基本概念"><a href="#5-1、树的基本概念" class="headerlink" title="5.1、树的基本概念"></a><strong>5.1、树的基本概念</strong></h3><p>树根到每一结点的路径长度的最大值是树的高度减1</p><p>树的路径长度是所有结点的路径长度之和</p><p>二叉树可以所有结点只有一个子树</p><h3 id="5-2、二叉树的概念"><a href="#5-2、二叉树的概念" class="headerlink" title="5.2、二叉树的概念"></a><strong>5.2、二叉树的概念</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps7.jpg" alt="img"> </p><h3 id="5-3、二叉树的遍历和线索二叉树"><a href="#5-3、二叉树的遍历和线索二叉树" class="headerlink" title="5.3、二叉树的遍历和线索二叉树"></a><strong>5.3、二叉树的遍历和线索二叉树</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps8.jpg" alt="img"> </p><p>二叉树是一种逻辑结构。</p><p>线索二叉树指明了存储方式，是物理结构</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps9.jpg" alt="img"> </p><p>一颗线索二叉树，最多有两个空链域</p><p>后序线索二叉树的遍历需要栈的支持</p><h3 id="5-4、树、森林"><a href="#5-4、树、森林" class="headerlink" title="5.4、树、森林"></a><strong>5.4、树、森林</strong></h3><p>森林中，右边子树没有说是根节点的右兄弟，只是画是这样画的</p><h3 id="5-5、树与二叉树的应用"><a href="#5-5、树与二叉树的应用" class="headerlink" title="5.5、树与二叉树的应用"></a><strong>5.5、树与二叉树的应用</strong></h3><p>哈夫曼树不唯一：比如左右子树互换</p><p>并查集</p><p>逻辑上：双亲表示法的树</p><p>存储：数组</p><p>并查集常用于克鲁斯卡尔kruskal算法、判断图的连通性（无向图）</p><p>在长度为n的并查集中，查找操作，未优化的时间复杂度为O(n)，优化之后才为O(log2n)</p><h2 id="7-1、树的概念"><a href="#7-1、树的概念" class="headerlink" title="7.1、树的概念"></a>7.1、树的概念</h2><h3 id="1、树的定义"><a href="#1、树的定义" class="headerlink" title="1、树的定义"></a>1、树的定义</h3><p><strong>形式化定义</strong></p><p>树：T&#x3D;{D，R}。D是包含n个结点的有限集合（n≥0）。当n&#x3D;0时为空树，否则关系R满足以下条件:       </p><ul><li>有且仅有一个结点d0∈D，它对于关系R来说没有前驱结点，结点d0称作树的根结点。</li><li>除根结点外，每个结点有且仅有一个前驱结点。</li><li>D中每个结点可以有零个或多个后继结点。.</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430110715720.png" alt="image-20220430110715720"> </p><h3 id="2、树的逻辑表示"><a href="#2、树的逻辑表示" class="headerlink" title="2、树的逻辑表示"></a>2、树的逻辑表示</h3><p>（1）树形表示法</p><p>使用一棵倒置的树表示树结构，非常直观和形象。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430110808521.png" alt="image-20220430110808521"> </p><p>（2）文氏图表示法。使用集合以及集合的包含关系描述树结构。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430110835529.png" alt="image-20220430110835529"> </p><p>（3）凹入表示法。使用线段的伸缩关系描述树结构。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430110903433.png" alt="image-20220430110903433"> </p><p>（4）括号表示法。用一个字符串表示树。<br>          基本形式:<br>                   根(子树1，子树2，…，子树m)</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430110920824.png" alt="image-20220430110920824"> </p><h3 id="3、树的基本术语"><a href="#3、树的基本术语" class="headerlink" title="3、树的基本术语"></a>3、树的基本术语</h3><p>1、结点的度与树的度：树中一个结点的子树的个数称为该结点的度。树中各结点的度的最大值称为树的度，通常将度为m的树称为m次树或者m叉树。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111035849.png" alt="image-20220430111035849"> </p><p>2、分支结点与叶结点：度不为零的结点称为非终端结点，又叫分支结点。度为零的结点称为终端结点或叶结点（或叶子结点）。<br>       度为1的结点称为单分支结点；度为2的结点称为双分支结点，依此类推。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111106995.png" alt="image-20220430111106995"> </p><p> 3、路径与路径长度：两个结点di和dj的结点序列（di，di1，di2，…，dj）称为路径。其中&lt;dx，dy&gt;是分支。<br>     路径长度等于路径所通过的结点数目减1（即路径上分支数目）。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111144420.png" alt="image-20220430111144420"> </p><p>4、孩子结点、双亲结点和兄弟结点：在一棵树中，每个结点的后继，被称作该结点的孩子结点（或子女结点）。相应地，该结点被称作孩子结点的双亲结点（或父母结点）。<br>     具有同一双亲的孩子结点互为兄弟结点。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111204265.png" alt="image-20220430111204265"> </p><p>5、子孙结点和祖先结点：在一棵树中，一个结点的所有子树中的结点称为该结点的子孙结点。<br>       从根结点到达一个结点的路径上经过的所有结点被称作该结点的祖先结点。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111223604.png" alt="image-20220430111223604"> </p><p>6、结点的层次和树的高度：树中的每个结点都处在一个层次上。结点的层次从树根开始定义，根结点为第1层，它的孩子结点为第2层，以此类推，一个结点所在的层次为其双亲结点所在的层次加1。<br>        树中结点的最大层次称为树的高度（或树的深度）。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111306241.png" alt="image-20220430111306241"> </p><p>7、有序树和无序树：若树中各结点的子树是按照一定的次序从左向右安排的，且相对次序是不能随意变换的，则称为有序树，否则称为无序树。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111322153.png" alt="image-20220430111322153"> </p><p>8、森林：n（n＞0）个互不相交的树的集合称为森林。<br>        只要把树的根结点删去就成了森林。<br>        反之，只要给n棵独立的树加上一个结点，并把这n棵树作为该结点的子树，则森林就变成了一颗树。 </p><p>独木也成林！！！</p><h3 id="4、树的性质"><a href="#4、树的性质" class="headerlink" title="4、树的性质"></a>4、树的性质</h3><p>性质1  树中的结点数等于所有结点的度数之和加1。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111451262.png" alt="image-20220430111451262"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111509376.png" alt="image-20220430111509376"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111724769.png" alt="image-20220430111724769"> </p><p>性质2  度为m的树中第i层上至多有mi-1个结点（i≥1）。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111756707.png" alt="image-20220430111756707"> </p><p>性质3  高度为h的m次树至多有 $\frac{m^h-1}{m-1}$个结点。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111909537.png" alt="image-20220430111909537"> </p><p>性质4  具有n个结点的m次树的最小高度为[logm(n(m-1)+1)]。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430111940388.png" alt="image-20220430111940388"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430112028973.png" alt="image-20220430112028973"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430112257750.png" alt="image-20220430112257750"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430112309304.png" alt="image-20220430112309304"> </p><h3 id="5、树的基本运算"><a href="#5、树的基本运算" class="headerlink" title="5、树的基本运算"></a>5、树的基本运算</h3><p> 树的运算主要分为三大类：</p><ul><li>查找满足某种特定关系的结点，如查找当前结点的双亲结点等；</li><li>插入或删除某个结点，如在树的当前结点上插入一个新结点或删除当前结点的第i个孩子结点等；</li><li>遍历树中每个结点。</li></ul><p><strong>树的遍历</strong></p><p>树的遍历运算是指按某种方式访问树中的每一个结点且每一个结点只被访问一次。</p><p>主要的遍历方法</p><ul><li>先根遍历（先序遍历）<ul><li>若树不空，则先访问根结点，然后依次先根遍历各棵子树。 </li><li>在二叉树中，是根节点，左子树，右子树</li></ul></li><li>中序遍历<ul><li>左，跟，右</li></ul></li><li>后跟遍历<ul><li>若树不空，则先依次后根遍历各棵子树，然后访问根结点。</li><li>在二叉树中，是左子树，右子树，根节点</li></ul></li><li>层次遍历<ul><li>若树不空，则自上而下、自左至右访问树中每个结点。</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220413113228766.png" alt=" "></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430142807444.png" alt="image-20220430142807444"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220413113352259.png" alt="image-20220413113352259"></p><h3 id="6、树的存储结构"><a href="#6、树的存储结构" class="headerlink" title="6、树的存储结构"></a>6、树的存储结构</h3><h4 id="①、双亲存储结构"><a href="#①、双亲存储结构" class="headerlink" title="①、双亲存储结构"></a>①、双亲存储结构</h4><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430143559376.png" alt="image-20220430143559376"> </p><p>双亲存储结构的类型声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">&#123;　 ElemType data;<span class="comment">//结点的值,左边的</span></span><br><span class="line">　   <span class="type">int</span> parent;<span class="comment">//指向双亲的位置，右边的</span></span><br><span class="line">&#125; PTree[MaxSize];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="②、孩子链存储结构"><a href="#②、孩子链存储结构" class="headerlink" title="②、孩子链存储结构"></a>②、孩子链存储结构</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430143812780.png" alt="image-20220430143812780"> </p><p>孩子链存储结构的结点类型声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;      ElemType data;      <span class="comment">//结点的值</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">node</span> *sons[MaxSons];      <span class="comment">//指向孩子结点</span></span><br><span class="line">&#125;  TSonNode;</span><br><span class="line"><span class="comment">//其中，MaxSons为最多的孩子结点个数。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思考题：<br>（1）n个结点的m次树有多少个空指针域？<br>（2）孩子链存储结构的优缺点？</p><h4 id="③、孩子兄弟链存储结构"><a href="#③、孩子兄弟链存储结构" class="headerlink" title="③、孩子兄弟链存储结构"></a>③、孩子兄弟链存储结构</h4><p>左子树是孩子，右子树是兄弟</p><p>孩子兄弟链存储结构是为每个结点设计3个域： </p><ul><li>一个数据元素域</li><li>第一个孩子结点指针域</li><li>一个兄弟结点指针域</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430195437441.png" alt="image-20220430195437441"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430195559031.png" alt="image-20220430195559031"></p><p>左孩子，右兄弟 </p><p>兄弟链存储结构中结点的类型声明如下： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">tnode</span> </span><br><span class="line">&#123;      ElemType data;<span class="comment">//结点的值，中间</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">tnode</span> *hp;  <span class="comment">//指向兄弟，右边</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">tnode</span> *vp;  <span class="comment">//指向孩子结点，左边</span></span><br><span class="line">&#125; TSBNode;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每个结点固定只有两个指针域！！！</p><h2 id="7-2、二叉树的概念"><a href="#7-2、二叉树的概念" class="headerlink" title="7.2、二叉树的概念"></a>7.2、二叉树的概念</h2><h3 id="1、二叉树的定义"><a href="#1、二叉树的定义" class="headerlink" title="1、二叉树的定义"></a>1、二叉树的定义</h3><p>递归定义：二叉树是有限的结点集合</p><ul><li>这个集合或者是空。</li><li>或者由一个根结点和两棵互不相交的称为左子树和右子树的二叉树组成。</li></ul><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430144655044.png" alt="image-20220430144655044"> </p><p>二叉树是可以采用树的逻辑结构表示法，其4种表示法如下：</p><ul><li>　树形表示法</li><li>　文氏图表示法</li><li>　凹入表示法</li><li>　括号表示法</li></ul><h3 id="2、两种特殊的二叉树"><a href="#2、两种特殊的二叉树" class="headerlink" title="2、两种特殊的二叉树"></a>2、两种特殊的二叉树</h3><h4 id="①、满二叉树"><a href="#①、满二叉树" class="headerlink" title="①、满二叉树"></a>①、满二叉树</h4><p>在一棵二叉树中：</p><p>如果所有分支结点都有双分结点;<br>并且叶结点都集中在二叉树的最下一层。</p><p>高度为h的二叉树恰好有2<sup>h</sup>-1 个结点。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430145224262.png" alt="image-20220430145224262"> </p><h4 id="②、完全二叉树"><a href="#②、完全二叉树" class="headerlink" title="②、完全二叉树"></a>②、完全二叉树</h4><p>在一棵二叉树中：</p><p>最多只有下面两层的结点的度数小于2<br>并且最下面一层的叶结点都依次排列在该层最左边的位置上。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430145410474.png" alt="image-20220430145410474"> </p><p>完全二叉树实际上是对应的满二叉树删除叶结点层最右边若干个结点得到的。</p><h3 id="3、二叉树性质"><a href="#3、二叉树性质" class="headerlink" title="3、二叉树性质"></a>3、二叉树性质</h3><p>​    <strong>性质1</strong>   非空二叉树上叶结点数等于双分支结点数加1。即：n<sub>0</sub>&#x3D;n<sub>2</sub>+1。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430145516259.png" alt="image-20220430145516259"> </p><p>求解二叉树的结点个数问题：通常利用二叉树的性质1，即n<sub>0</sub>&#x3D;n<sub>2</sub>+1来求解这类问题，常利用以下关系求解：<br>        n&#x3D;n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub><br>       度之和&#x3D;n-1<br>       度之和&#x3D;n<sub>1</sub>+2n<sub>2</sub><br>所以有：<br>        n&#x3D;n<sub>1</sub>+2n<sub>2</sub>+1</p><p><strong>性质2</strong>  非空二叉树上第i层上至多有2<sup>i-1</sup>个结点（i≥1）。</p><p> <strong>性质3</strong>  高度为h的二叉树至多有2<sup>h</sup>-1个结点（h≥1），最少为h个结点。</p><p><strong>性质4</strong>  完全二叉树性质（含n为结点）：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150108280.png" alt="image-20220430150108280"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150119115.png" alt="image-20220430150119115"> </p><h3 id="4、二叉树与树、森林之间的转换"><a href="#4、二叉树与树、森林之间的转换" class="headerlink" title="4、二叉树与树、森林之间的转换"></a>4、二叉树与树、森林之间的转换</h3><h4 id="①、森林、树转换为二叉树"><a href="#①、森林、树转换为二叉树" class="headerlink" title="①、森林、树转换为二叉树"></a>①、森林、树转换为二叉树</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150257167.png" alt="image-20220430150257167"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150343993.png" alt="image-20220430150343993"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150755428.png" alt="image-20220430150755428"> </p><h4 id="②、二叉树还原为森林、树"><a href="#②、二叉树还原为森林、树" class="headerlink" title="②、二叉树还原为森林、树"></a>②、二叉树还原为森林、树</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150917956.png" alt="image-20220430150917956"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150935416.png" alt="image-20220430150935416"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150943502.png" alt="image-20220430150943502"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430150953443.png" alt="image-20220430150953443"> </p><h2 id="7-3、二叉树的存储结构"><a href="#7-3、二叉树的存储结构" class="headerlink" title="7.3、二叉树的存储结构"></a>7.3、二叉树的存储结构</h2><h3 id="1、二叉树的顺序存储结构"><a href="#1、二叉树的顺序存储结构" class="headerlink" title="1、二叉树的顺序存储结构"></a>1、二叉树的顺序存储结构</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164007717.png" alt="image-20220430164007717"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164017785.png" alt="image-20220430164017785"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164035944.png" alt="image-20220430164035944"> </p><p><strong>二叉树顺序存储结构的特点：</strong></p><ul><li>对于完全二叉树来说，其顺序存储是十分合适的。</li><li>对于一般的二叉树，特别是对于那些单分支结点较多的二叉树来说是很不合适的，因为可能只有少数存储单元被利用，特别是对退化的二叉树（即每个分支结点都是单分支的），空间浪费更是惊人。</li><li>在顺序存储结构中，找一个结点的双亲和孩子都很容易。</li></ul><h3 id="2、二叉树的链式存储结构"><a href="#2、二叉树的链式存储结构" class="headerlink" title="2、二叉树的链式存储结构"></a>2、二叉树的链式存储结构</h3><p>在二叉树的链式存储中，结点的类型定义:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;     ElemType data;</span><br><span class="line">       <span class="keyword">struct</span> <span class="title class_">node</span> *lchild， *rchild;<span class="comment">//指向的都是二叉树，递归性</span></span><br><span class="line">&#125;   BTNode;   </span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164302741.png" alt="image-20220430164302741"> </p><p> 二叉链存储结构的特点： </p><p>除了指针外，二叉链比较节省存储空间。占用的存储空间与树形没有关系，只与树中结点个数有关。<br>在二叉链中，找一个结点的孩子很容易，但找其双亲不方便。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164407858.png" alt="image-20220430164407858"> </p><h2 id="7-4、二叉树基本运算及其实现"><a href="#7-4、二叉树基本运算及其实现" class="headerlink" title="7.4、二叉树基本运算及其实现"></a>7.4、二叉树基本运算及其实现</h2><h3 id="1、二叉树的基本运算概述"><a href="#1、二叉树的基本运算概述" class="headerlink" title="1、二叉树的基本运算概述"></a>1、二叉树的基本运算概述</h3><p>二叉树的基本运算</p><ul><li>​        创建二叉树CreateBTNode(<em>b，</em>str)：根据二叉树括号表示法字符串str生成对应的二叉链存储结构b。</li><li>​        销毁二叉链存储结构DestroyBT(*b)：销毁二叉链b并释放空间。</li><li>​        查找结点FindNode(*b，x)：在二叉树b中寻找data域值为x的结点，并返回指向该结点的指针。 </li><li>​         找孩子结点LchildNode(p)和Rchild-Node(p)：分别求二叉树中结点 * p 的左孩子结点和右孩子结点。</li><li>​     求高度BTNodeDepth( * b)：求二叉树b的高度。若二叉树为空，则其高度为0；否则，其高度等于左子树与右子树中的最大高度加l。</li><li>​       输出二叉树DispBTNode(*b)：以括号表示法输出一棵二叉树。</li></ul><h3 id="2、二叉树的基本运算算法实现"><a href="#2、二叉树的基本运算算法实现" class="headerlink" title="2、二叉树的基本运算算法实现"></a>2、二叉树的基本运算算法实现</h3><p>（1）创建二叉树<code>CreateBTNode(*b，*str)</code> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164719709.png" alt="image-20220430164719709"> </p><p>正确的二叉树括号表示串中只有4类字符:</p><ul><li>单个字符：结点的值</li><li>(：表示一棵左子树的开始</li><li>)：表示一棵子树的结束</li><li>，：表示一棵右子树的开始</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164755835.png" alt="image-20220430164755835"> </p><p>用ch扫描采用括号表示法表示二叉树的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">① 若ch=‘(’：则将前面刚创建的结点作为双亲结点进栈，并置k=1，表示开始处理左孩子结点；</span><br><span class="line">② 若ch=‘)’：表示栈顶结点的左、右孩子结点处理完毕，退栈；</span><br><span class="line">③ 若ch=‘，’：表示开始处理右孩子结点，置k=2；</span><br><span class="line">④ 其他情况（结点值）：</span><br><span class="line">　　     创建*p结点用于存放ch；</span><br><span class="line">        当k=1时，将*p结点作为栈顶结点的左孩子结点；</span><br><span class="line">        当k=2时，将*p结点作为栈顶结点的右孩子结点。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430164850493.png" alt="image-20220430164850493"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBTNode</span><span class="params">(BTNode * &amp;b，<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;      <span class="comment">//由str  二叉链b</span></span><br><span class="line">        BTNode *St[MaxSize]， *p;</span><br><span class="line">        <span class="type">int</span> top=<span class="number">-1</span>，  k ， j=<span class="number">0</span>;  </span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        b=<span class="literal">NULL</span>;<span class="comment">//建立的二叉链初始时为空</span></span><br><span class="line">        ch=str[j];</span><br><span class="line">        <span class="keyword">while</span> (ch!=<span class="string">&#x27;\0&#x27;</span>)  <span class="comment">//str未扫描完时循环</span></span><br><span class="line">        &#123;     <span class="keyword">switch</span>(ch) </span><br><span class="line">               &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: top++; St[top]=p; k=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//可能有左孩子结点，进栈</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>: top--;  <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">&#x27;，&#x27;</span>: k=<span class="number">2</span>;  <span class="keyword">break</span>; <span class="comment">//后面为右孩子结点</span></span><br><span class="line">        <span class="keyword">default</span>:         <span class="comment">//遇到结点值</span></span><br><span class="line">                p=(BTNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BTNode));</span><br><span class="line">  p-&gt;data=ch;  p-&gt;lchild=p-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span>  (b==<span class="literal">NULL</span>)    <span class="comment">//p为二叉树的根结点</span></span><br><span class="line">       b=p;</span><br><span class="line">  <span class="keyword">else</span>    <span class="comment">//已建立二叉树根结点</span></span><br><span class="line">                &#123;     <span class="keyword">switch</span>(k) </span><br><span class="line">                       &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:  St[top]-&gt;lchild=p;  <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:  St[top]-&gt;rchild=p;  <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         j++;  ch=str[j];<span class="comment">//继续扫描str</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）销毁二叉链<code>DestroyBT(*b)</code>：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430165047893.png" alt="image-20220430165047893"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应算法如下</span></span><br><span class="line"><span class="function"><span class="type">void</span>   <span class="title">DestroyBT</span><span class="params">(BTNode *&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">      <span class="keyword">if</span> (b==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;     <span class="built_in">DestroyBT</span>(b-&gt;lchild);</span><br><span class="line">             <span class="built_in">DestroyBT</span>(b-&gt;rchild);</span><br><span class="line">             <span class="built_in">free</span>(b);      <span class="comment">//剩下一个结点*b，直接释放</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）查找结点<code>FindNode(*b，x)</code></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430165142884.png" alt="image-20220430165142884"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算法</span></span><br><span class="line"><span class="function">BTNode *<span class="title">FindNode</span><span class="params">(BTNode *b，ElemType x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     BTNode *p;</span><br><span class="line">      <span class="keyword">if</span> (b==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;data==x) <span class="keyword">return</span> b;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;     p=<span class="built_in">FindNode</span>(b-&gt;lchild，x);</span><br><span class="line">            <span class="keyword">if</span> (p!=<span class="literal">NULL</span>) <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">FindNode</span>(b-&gt;rchild，x);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（4）找孩子结点<code>LchildNode(p)</code>和<code>RchildNode(p)</code></p><p>直接返回*p结点的左孩子结点或右孩子结点的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BTNode *<span class="title">LchildNode</span><span class="params">(BTNode *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode *<span class="title">RchildNode</span><span class="params">(BTNode *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（5）求高度<code>BTNodeDepth(*b)</code></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430165319197.png" alt="image-20220430165319197"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BTNodeDepth</span><span class="params">(BTNode *b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     <span class="type">int</span> lchilddep，rchilddep;</span><br><span class="line">      <span class="keyword">if</span> (b==<span class="literal">NULL</span>) <span class="keyword">return</span>(<span class="number">0</span>); <span class="comment">//空树的高度为0</span></span><br><span class="line">      <span class="keyword">else</span>  </span><br><span class="line">      &#123;     lchilddep=<span class="built_in">BTNodeDepth</span>(b-&gt;lchild);</span><br><span class="line"><span class="comment">//求左子树的高度为lchilddep</span></span><br><span class="line">            rchilddep=<span class="built_in">BTNodeDepth</span>(b-&gt;rchild);</span><br><span class="line"><span class="comment">//求右子树的高度为rchilddep</span></span><br><span class="line">            <span class="keyword">return</span>(lchilddep&gt;rchilddep)? (lchilddep<span class="number">+1</span>):(rchilddep<span class="number">+1</span>));</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（6）输出二叉树<code>DispBTNode(*b)</code></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430165354172.png" alt="image-20220430165354172"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>   <span class="title">DispBTNode</span><span class="params">(BTNode *b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     <span class="keyword">if</span> (b!=<span class="literal">NULL</span>)</span><br><span class="line">      &#123;       <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>，b-&gt;data);</span><br><span class="line">              <span class="keyword">if</span> (b-&gt;lchild!=<span class="literal">NULL</span> || b-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">              &#123;    <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">     <span class="built_in">DispBTNode</span>(b-&gt;lchild);　<span class="comment">//递归处理左子树</span></span><br><span class="line">     <span class="keyword">if</span> (b-&gt;rchild!=<span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;，&quot;</span>);</span><br><span class="line">     <span class="built_in">DispBTNode</span>(b-&gt;rchild);　<span class="comment">//递归处理右子树</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根节点（左子树，右子树）</span></span><br></pre></td></tr></table></figure><h2 id="7-5、二叉树的遍历"><a href="#7-5、二叉树的遍历" class="headerlink" title="7.5、二叉树的遍历"></a>7.5、二叉树的遍历</h2><h3 id="1、二叉树遍历的概念"><a href="#1、二叉树遍历的概念" class="headerlink" title="1、二叉树遍历的概念"></a>1、二叉树遍历的概念</h3><p>　　二叉树遍历是指按照一定次序访问树中所有结点，并且每个结点仅被访问一次的过程。<br>　　遍历是二叉树最基本的运算，是二叉树中其他运算的基础。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430165703818.png" alt="image-20220430165703818"> </p><h4 id="①、先序遍历"><a href="#①、先序遍历" class="headerlink" title="①、先序遍历"></a>①、先序遍历</h4><ul><li>根节点</li><li>左子树</li><li>右子树</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430165859604.png"> </p><h4 id="②、中序遍历"><a href="#②、中序遍历" class="headerlink" title="②、中序遍历"></a>②、中序遍历</h4><ul><li>左子树</li><li>根节点</li><li>右子树</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170040399.png" alt="image-20220430170040399"> </p><h4 id="③、后序遍历"><a href="#③、后序遍历" class="headerlink" title="③、后序遍历"></a>③、后序遍历</h4><ul><li>左子树</li><li>右子树</li><li>根节点</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170121008.png" alt="image-20220430170121008"> </p><h3 id="2、二叉树3种遍历的递归算法"><a href="#2、二叉树3种遍历的递归算法" class="headerlink" title="2、二叉树3种遍历的递归算法"></a>2、二叉树3种遍历的递归算法</h3><p>先序遍历的递归算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;     <span class="keyword">if</span> (b!=<span class="literal">NULL</span>)  </span><br><span class="line">      &#123;     <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，b-&gt;data); <span class="comment">//访问根结点</span></span><br><span class="line">             <span class="built_in">PreOrder</span>(b-&gt;lchild);</span><br><span class="line">             <span class="built_in">PreOrder</span>(b-&gt;rchild);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    上述访问是直接输出结点值。实际上，访问结点可以对该结点进行各种操作，如计数、删除结点等。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170242138.png" alt="image-20220430170242138"> </p><p> 中序遍历的递归算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;       <span class="keyword">if</span> (b!=<span class="literal">NULL</span>)  </span><br><span class="line">        &#123;      <span class="built_in">InOrder</span>(b-&gt;lchild);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，b-&gt;data); <span class="comment">//访问根结点</span></span><br><span class="line"> <span class="built_in">InOrder</span>(b-&gt;rchild);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 后序遍历的递归算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BTNode *b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;      <span class="keyword">if</span> (b!=<span class="literal">NULL</span>)  </span><br><span class="line">        &#123;      <span class="built_in">PostOrder</span>(b-&gt;lchild);</span><br><span class="line"> <span class="built_in">PostOrder</span>(b-&gt;rchild);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，b-&gt;data); <span class="comment">//访问根结点</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二叉树3种递归遍历算法的应用</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170353523.png" alt="image-20220430170353523"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170401143.png" alt="image-20220430170401143"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170409771.png" alt="image-20220430170409771"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170418570.png" alt="image-20220430170418570"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170425487.png" alt="image-20220430170425487"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170432964.png" alt="image-20220430170432964"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170441800.png" alt="image-20220430170441800"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170450624.png" alt="image-20220430170450624"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170458012.png" alt="image-20220430170458012"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170505956.png" alt="image-20220430170505956"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170513278.png" alt="image-20220430170513278"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170521632.png" alt="image-20220430170521632"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170531876.png" alt="image-20220430170531876"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170540047.png" alt="image-20220430170540047"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170547751.png" alt="image-20220430170547751"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170554459.png" alt="image-20220430170554459"> </p><h3 id="3、二叉树3种遍历的非递归算法"><a href="#3、二叉树3种遍历的非递归算法" class="headerlink" title="3、二叉树3种遍历的非递归算法"></a>3、二叉树3种遍历的非递归算法</h3><h4 id="①、先序遍历非递归算法1"><a href="#①、先序遍历非递归算法1" class="headerlink" title="①、先序遍历非递归算法1"></a>①、先序遍历非递归算法1</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170651120.png" alt="image-20220430170651120"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (当前b树不空)</span><br><span class="line">&#123;</span><br><span class="line">　  根结点b进栈;</span><br><span class="line">      <span class="keyword">while</span> (栈不空)</span><br><span class="line">      &#123;</span><br><span class="line">           出栈结点p并访问之;</span><br><span class="line">           若p结点有右孩子，将其右孩子进栈； </span><br><span class="line">           若p结点有左孩子，将其左孩子进栈；</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430170950439.png" alt="image-20220430170950439"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder1</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;     BTNode *p;</span><br><span class="line">       SqStack *st;<span class="comment">//定义栈指针st</span></span><br><span class="line">       <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈st</span></span><br><span class="line">       <span class="keyword">if</span> (b!=<span class="literal">NULL</span>) </span><br><span class="line">       &#123;<span class="built_in">Push</span>(st，b);<span class="comment">//根结点进栈</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(st))<span class="comment">//栈不为空时循环</span></span><br><span class="line">&#123;      <span class="built_in">Pop</span>(st，p);<span class="comment">//退栈结点p并访问它</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;rchild!=<span class="literal">NULL</span>)<span class="comment">//有右孩子时将其进栈</span></span><br><span class="line">  <span class="built_in">Push</span>(st，p-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;lchild!=<span class="literal">NULL</span>)<span class="comment">//有左孩子时将其进栈</span></span><br><span class="line">   <span class="built_in">Push</span>(st，p-&gt;lchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">DestroyStack</span>(st);<span class="comment">//销毁栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="②、先序遍历非递归算法2"><a href="#②、先序遍历非递归算法2" class="headerlink" title="②、先序遍历非递归算法2"></a>②、先序遍历非递归算法2</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171047640.png" alt="image-20220430171047640"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  p＝b;</span><br><span class="line">  <span class="keyword">while</span> (栈不空或者p!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;      访问p所指结点;将p进栈；</span><br><span class="line">                p=p-&gt;lchild</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="comment">//以下考虑栈顶结点</span></span><br><span class="line">        <span class="keyword">if</span> (栈不空) </span><br><span class="line">　　&#123;      出栈p；</span><br><span class="line">　　　    p＝p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171115419.png" alt="image-20220430171115419"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171126419.png" alt="image-20220430171126419"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder2</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;       BTNode *p;  SqStack *st;<span class="comment">//定义一个顺序栈指针st</span></span><br><span class="line">         <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈st</span></span><br><span class="line">         p=b;</span><br><span class="line">         <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(st) || p!=<span class="literal">NULL</span>)</span><br><span class="line">          &#123;    <span class="keyword">while</span> (p!=<span class="literal">NULL</span>) <span class="comment">//访问结点p及其所有左下结点并进栈</span></span><br><span class="line">     &#123;<span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，p-&gt;data);<span class="comment">//访问结点p</span></span><br><span class="line"><span class="built_in">Push</span>(st，p);<span class="comment">//结点p进栈</span></span><br><span class="line">p=p-&gt;lchild;<span class="comment">//移动到左孩子</span></span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">//以下考虑栈顶结点</span></span><br><span class="line">     <span class="keyword">if</span> (!<span class="built_in">StackEmpty</span>(st))<span class="comment">//若栈不空</span></span><br><span class="line">      &#123;<span class="built_in">Pop</span>(st，p);<span class="comment">//出栈结点p</span></span><br><span class="line">p=p-&gt;rchild;<span class="comment">//转向处理其右子树</span></span><br><span class="line">      &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">           <span class="built_in">DestroyStack</span>(st);<span class="comment">//销毁栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="③、中序遍历非递归算法"><a href="#③、中序遍历非递归算法" class="headerlink" title="③、中序遍历非递归算法"></a>③、中序遍历非递归算法</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171207128.png" alt="image-20220430171207128"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p＝b;</span><br><span class="line"><span class="keyword">while</span> (栈不空或者p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">       &#123;     将p进栈；</span><br><span class="line">               p=p-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以下考虑栈顶结点</span></span><br><span class="line">       <span class="keyword">if</span> (栈不空) </span><br><span class="line">       &#123;      出栈p并访问之；</span><br><span class="line">　　       p＝p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171225781.png" alt="image-20220430171225781"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171234043.png" alt="image-20220430171234043"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder1</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *p;  SqStack *st;<span class="comment">//定义一个顺序栈指针st</span></span><br><span class="line">        <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈st</span></span><br><span class="line">        p=b;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(st) || p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;<span class="keyword">while</span> (p!=<span class="literal">NULL</span>)<span class="comment">//扫描结点p的所有左下结点并进栈</span></span><br><span class="line">&#123;      <span class="built_in">Push</span>(st，p);<span class="comment">//结点p进栈</span></span><br><span class="line">        p=p-&gt;lchild;<span class="comment">//移动到左孩子</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//以下考虑栈顶结点</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">StackEmpty</span>(st))<span class="comment">//若栈不空</span></span><br><span class="line">&#123;      <span class="built_in">Pop</span>(st，p);<span class="comment">//出栈结点p，访问结点p</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，p-&gt;data);</span><br><span class="line">        p=p-&gt;rchild;<span class="comment">//转向处理其右子树</span></span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">DestroyStack</span>(st);<span class="comment">//销毁栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="④、后序遍历非递归算法"><a href="#④、后序遍历非递归算法" class="headerlink" title="④、后序遍历非递归算法"></a>④、后序遍历非递归算法</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171311781.png" alt="image-20220430171311781"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171318970.png" alt="image-20220430171318970"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历非递归过程</span></span><br><span class="line">p=b;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;      <span class="keyword">while</span> (结点p有左孩子)</span><br><span class="line">        &#123;将结点p进栈;</span><br><span class="line">p=p-&gt;lchild;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">//此时栈顶结点(尚未访问)没有左孩子或左子树已遍历过</span></span><br><span class="line">        <span class="keyword">while</span> (栈不空且结点p是栈顶结点)</span><br><span class="line">        &#123;取栈顶结点p;</span><br><span class="line"><span class="keyword">if</span> (结点p的右子树已访问)</span><br><span class="line">&#123;      访问结点p;</span><br><span class="line">        退栈;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> p=p-&gt;rchild;     <span class="comment">//转向处理其右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (栈不空);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171357627.png" alt="image-20220430171357627"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历非递归算法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder1</span><span class="params">(BTNode *b)</span><span class="comment">//后序非递归遍历算法</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *p，*r;</span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        SqStack *st;<span class="comment">//定义一个顺序栈指针st</span></span><br><span class="line">        <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈st</span></span><br><span class="line">        p=b;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;<span class="keyword">while</span> (p!=<span class="literal">NULL</span>)<span class="comment">//扫描结点p的所有左下结点并进栈</span></span><br><span class="line">&#123;       <span class="built_in">Push</span>(st，p);<span class="comment">//结点p进栈</span></span><br><span class="line">         p=p-&gt;lchild;<span class="comment">//移动到左孩子</span></span><br><span class="line">&#125;</span><br><span class="line">r=<span class="literal">NULL</span>;<span class="comment">//r指向刚刚访问的结点，初始时为空</span></span><br><span class="line">flag=<span class="literal">true</span>;<span class="comment">//flag为真表示正在处理栈顶结点</span></span><br><span class="line">       <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(st) &amp;&amp; flag)</span><br><span class="line">        &#123;      <span class="built_in">GetTop</span>(st，p);         <span class="comment">//取出当前的栈顶结点p</span></span><br><span class="line"> <span class="keyword">if</span> (p-&gt;rchild==r)        <span class="comment">//若结点p的右孩子为空或者为刚访问结点</span></span><br><span class="line">            &#123;       <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，p-&gt;data);     <span class="comment">//访问结点p</span></span><br><span class="line">         <span class="built_in">Pop</span>(st，p);</span><br><span class="line">         r=p; <span class="comment">//r指向刚访问过的结点</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;      p=p-&gt;rchild;<span class="comment">//转向处理其右子树</span></span><br><span class="line">       flag=<span class="literal">false</span>;<span class="comment">//表示当前不是处理栈顶结点</span></span><br><span class="line">&#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(st));<span class="comment">//栈不空循环</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="built_in">DestroyStack</span>(st);<span class="comment">//销毁栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​       从上述过程可知，栈中保存的是当前结点p的所有祖先结点（均未访问过）。<br>​        例如，求一个结点的所有祖先结点等。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171617193.png" alt="image-20220430171617193"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AllPath1</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *p，*r;</span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        SqStack *st;<span class="comment">//定义一个顺序栈指针st</span></span><br><span class="line">        <span class="built_in">InitStack</span>(st);<span class="comment">//初始化栈st</span></span><br><span class="line">        p=b;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123; <span class="keyword">while</span> (p!=<span class="literal">NULL</span>)<span class="comment">//扫描结点p的所有左下结点并进栈</span></span><br><span class="line"> &#123;      <span class="built_in">Push</span>(st，p);<span class="comment">//结点p进栈</span></span><br><span class="line">         p=p-&gt;lchild;<span class="comment">//移动到左孩子</span></span><br><span class="line"> &#125;</span><br><span class="line"> r=<span class="literal">NULL</span>;<span class="comment">//r指向刚刚访问的结点，初始时为空</span></span><br><span class="line"> flag=<span class="literal">true</span>;<span class="comment">//flag为真表示正在处理栈顶结点</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171639931.png" alt="image-20220430171639931"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171647183.png" alt="image-20220430171647183"> </p><h3 id="4、层次遍历算法"><a href="#4、层次遍历算法" class="headerlink" title="4、层次遍历算法"></a>4、层次遍历算法</h3><p>层次遍历过程：</p><p>　　对于一颗二叉树，从根结点开始，按从上到下、从左到右的顺序访问每一个结点。<br>        每一个结点仅仅访问一次。</p><p>算法设计思路：</p><p>使用一个队列。</p><ol><li>将根结点进队；</li><li>队不空时循环：从队列中出列一个结点*p，访问它；<ol><li>若它有左孩子结点，将左孩子结点进队；</li><li>若它有右孩子结点，将右孩子结点进队。</li></ol></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应算法如下</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">&#123;      BTNode *data[MaxSize];<span class="comment">//存放队中元素</span></span><br><span class="line">       <span class="type">int</span> front，rear;<span class="comment">//队头和队尾指针</span></span><br><span class="line">&#125; SqQueue;<span class="comment">//环形队列类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *p;</span><br><span class="line">        SqQueue *qu;<span class="comment">//定义环形队列指针</span></span><br><span class="line">        <span class="built_in">InitQueue</span>(qu);<span class="comment">//初始化队列</span></span><br><span class="line">        <span class="built_in">enQueue</span>(qu，b);<span class="comment">//根结点指针进入队列</span></span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">QueueEmpty</span>(qu))<span class="comment">//队不为空循环</span></span><br><span class="line">        &#123;<span class="built_in">deQueue</span>(qu，p);<span class="comment">//出队结点p</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>，p-&gt;data);<span class="comment">//访问结点p</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild!=<span class="literal">NULL</span>)<span class="comment">//有左孩子时将其进队</span></span><br><span class="line">       <span class="built_in">enQueue</span>(qu，p-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild!=<span class="literal">NULL</span>)<span class="comment">//有右孩子时将其进队</span></span><br><span class="line">       <span class="built_in">enQueue</span>(qu，p-&gt;rchild);</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171835596.png" alt="image-20220430171835596"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应算法如下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AllPath2</span><span class="params">(BTNode *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;       <span class="type">int</span> k;</span><br><span class="line">        BTNode *p;</span><br><span class="line">        NodeType qelem;</span><br><span class="line">        QuType *qu;    <span class="comment">//定义非非环形队列指针</span></span><br><span class="line">        <span class="built_in">InitQueue</span>(qu);    <span class="comment">//初始化队列</span></span><br><span class="line">        qelem.pt=b; qelem.parent=<span class="number">-1</span>;   <span class="comment">//创建根结点对应的队列元素</span></span><br><span class="line">        <span class="built_in">enQueue</span>(qu，qelem);    <span class="comment">//根结点进队</span></span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">QueueEmpty</span>(qu))<span class="comment">//队不空循环</span></span><br><span class="line">         &#123;<span class="built_in">deQueue</span>(qu，qelem);<span class="comment">//出队元素在队中下标为qu-&gt;front</span></span><br><span class="line">p=qelem.pt;<span class="comment">//取元素qelem对应的结点p</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; p-&gt;rchild==<span class="literal">NULL</span>)  </span><br><span class="line">&#123;      k=qu-&gt;front;<span class="comment">//输出结点p到根结点的路径逆序列</span></span><br><span class="line">       <span class="keyword">while</span> (qu-&gt;data[k].parent!=<span class="number">-1</span>)</span><br><span class="line">       &#123;<span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;&quot;</span>，qu-&gt;data[k].pt-&gt;data);</span><br><span class="line">k=qu-&gt;data[k].parent;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>，qu-&gt;data[k].pt-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">             <span class="keyword">if</span> (p-&gt;lchild!=<span class="literal">NULL</span>)<span class="comment">//结点p有左孩子</span></span><br><span class="line">             &#123;      qelem.pt=p-&gt;lchild;<span class="comment">//创建左孩子对应的队列元素</span></span><br><span class="line">      qelem.parent=qu-&gt;front; <span class="comment">//其双亲位置为qu-&gt;front</span></span><br><span class="line">      <span class="built_in">enQueue</span>(qu，qelem);<span class="comment">//结点p的左孩子进队</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (p-&gt;rchild!=<span class="literal">NULL</span>)<span class="comment">//结点p有右孩子</span></span><br><span class="line">             &#123;      qelem.pt=p-&gt;rchild;<span class="comment">//创建右孩子对应的队列元素</span></span><br><span class="line">      qelem.parent=qu-&gt;front;<span class="comment">//其双亲位置为qu-&gt;front</span></span><br><span class="line">      <span class="built_in">enQueue</span>(qu，qelem);<span class="comment">//结点p的右孩子进队</span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171916368.png" alt="image-20220430171916368"> </p><h2 id="7-6、二叉树的构造"><a href="#7-6、二叉树的构造" class="headerlink" title="7.6、二叉树的构造"></a>7.6、二叉树的构造</h2><p>　 同时给定一棵二叉树的先序序列和中序序列就能唯一确定这棵二叉树。 √<br>　 同时给定一棵二叉树的中序序列和后序序列就能唯一确定这棵二叉树。 √<br>　 同时给定一棵二叉树的先序序列和后序序列就能唯一确定这棵二叉树。 ×</p><p>​      定理7.1：任何n（n&gt;0）个不同结点的二又树，都可由它的中序序列和先序序列唯一地确定。     </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184858197.png" alt="image-20220430184858197"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184913353.png" alt="image-20220430184913353"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由上述定理得到以下构造二叉树的算法：</span></span><br><span class="line"></span><br><span class="line"><span class="function">BTNode *<span class="title">CreateBT1</span><span class="params">(<span class="type">char</span> *pre，<span class="type">char</span> *in，<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *s;  <span class="type">char</span> *p;  <span class="type">int</span> k;</span><br><span class="line">       <span class="keyword">if</span> (n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">       s=(BTNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BTNode));            <span class="comment">//创建根结点</span></span><br><span class="line">       s-&gt;data=*pre;</span><br><span class="line">       <span class="keyword">for</span> (p=in;p&lt;in+n;p++)             <span class="comment">//在in中找为*pre的位置k</span></span><br><span class="line"> <span class="keyword">if</span> (*p==*pre)</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">       k=p-in; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184951612.png" alt="image-20220430184951612"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185002186.png" alt="image-20220430185002186"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185009768.png" alt="image-20220430185009768"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由上述定理得到以下构造二叉树的算法：</span></span><br><span class="line"><span class="function">BTNode *<span class="title">CreateBT2</span><span class="params">(<span class="type">char</span> *post，<span class="type">char</span> *in，<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *b;  <span class="type">char</span> r，*p;  <span class="type">int</span> k;</span><br><span class="line">       <span class="keyword">if</span> (n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">       r=*(post+n<span class="number">-1</span>);     <span class="comment">//根结点值</span></span><br><span class="line">       b=(BTNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BTNode));    <span class="comment">//创建二叉树结点*b</span></span><br><span class="line">       b-&gt;data=r;</span><br><span class="line">       <span class="keyword">for</span> (p=in;p&lt;in+n;p++)     <span class="comment">//在in中查找根结点</span></span><br><span class="line"><span class="keyword">if</span> (*p==r)  <span class="keyword">break</span>;</span><br><span class="line">       k=p-in;     <span class="comment">//k为根结点在in中的下标   </span></span><br><span class="line">       b-&gt;lchild=<span class="built_in">CreateBT2</span>(post，in，k);        <span class="comment">//递归构造左子树</span></span><br><span class="line">       b-&gt;rchild=<span class="built_in">CreateBT2</span>(post+k，p<span class="number">+1</span>，n-k<span class="number">-1</span>);   <span class="comment">//递归构造右子树</span></span><br><span class="line">       <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185038845.png" alt="image-20220430185038845"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185047042.png" alt="image-20220430185047042"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应的递归算法如下： 先序遍历</span></span><br><span class="line"><span class="function">BTNode *<span class="title">trans</span><span class="params">(SqBTree a，<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;      BTNode *b;</span><br><span class="line">　　<span class="keyword">if</span> (i&gt;MaxSize)  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">　　<span class="keyword">if</span> (a[i]==<span class="string">&#x27;#&#x27;</span>)  <span class="keyword">return</span> <span class="literal">NULL</span>;       <span class="comment">//当结点不存在时返回NULL</span></span><br><span class="line">　　b=(BTNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BTNode));    <span class="comment">//创建根结点</span></span><br><span class="line">　　b-&gt;data=a[i];</span><br><span class="line">　　b-&gt;lchild=<span class="built_in">trans</span>(a，<span class="number">2</span>*i);<span class="comment">//递归创建左子树</span></span><br><span class="line">　　b-&gt;rchild=<span class="built_in">trans</span>(a，<span class="number">2</span>*i<span class="number">+1</span>);  <span class="comment">//递归创建右子树</span></span><br><span class="line">　　<span class="keyword">return</span>(b);<span class="comment">//返回根结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185129792.png" alt="image-20220430185129792"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历的思路</span></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">trans1</span><span class="params">(BTNode *b，SqBTree a，<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;       a[i]=b-&gt;data; <span class="comment">//创建根结点</span></span><br><span class="line">                <span class="built_in">trans1</span>(b-&gt;lchild，a，<span class="number">2</span>*i); <span class="comment">//递归创建左子树</span></span><br><span class="line">                <span class="built_in">trans1</span>(b-&gt;rchild，a，<span class="number">2</span>*i<span class="number">+1</span>); <span class="comment">//递归创建右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171935232.png" alt="image-20220430171935232"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171943188.png" alt="image-20220430171943188"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430171950080.png" alt="image-20220430171950080"> </p><h2 id="7-7、线索二叉树"><a href="#7-7、线索二叉树" class="headerlink" title="7.7、线索二叉树"></a>7.7、线索二叉树</h2><h3 id="1、线索二叉树的概念"><a href="#1、线索二叉树的概念" class="headerlink" title="1、线索二叉树的概念"></a>1、线索二叉树的概念</h3><p>回顾</p><ul><li>对于具有n个结点的二叉树，采用二叉链存储结构时，每个结点有两个指针域，总共有2n个指针域。</li><li>其中只有n-1个结点被有效指针所指向，即有n-1个非空指针域。</li><li>所以共有2n-(n-1) &#x3D; n+1个空链域。</li></ul><p>相关概念</p><ul><li>采用某种方法遍历二叉树的结果是一个结点的线性序列。</li><li>修改空链域改为存放指向结点的前驱和后继结点的地址。</li><li>这样的指向该线性序列中的“前驱”和“后继”的指针，称作线索（thread）。</li><li>创建线索的过程称为线索化。</li><li>线索化的二叉树称为线索二叉树。</li><li>显然线索二叉树与采用的遍历方法相关，有先序线索二叉树、中序线索二叉树和后序线索二叉树。</li><li>线索二叉树的目的是提高该遍历过程的效率。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430172049809.png" alt="image-20220430172049809"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线索化二叉树中结点的类型定义</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> </span><br><span class="line">  &#123;      ElemType data;<span class="comment">//结点数据域</span></span><br><span class="line">         <span class="type">int</span> ltag，rtag;      <span class="comment">//增加的线索标记</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="title class_">node</span> *lchild;<span class="comment">//左孩子或线索指针</span></span><br><span class="line">         <span class="keyword">struct</span> <span class="title class_">node</span> *rchild;<span class="comment">//右孩子或线索指针</span></span><br><span class="line">  &#125;  TBTNode;　　　<span class="comment">//线索树结点类型定义 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430172531696.png" alt="image-20220430172531696"> </p><h3 id="2、线索化二叉树"><a href="#2、线索化二叉树" class="headerlink" title="2、线索化二叉树"></a>2、线索化二叉树</h3><p>建立某种次序的线索二叉树过程： </p><ul><li>以该遍历方法遍历一棵二叉树。</li><li>在遍历的过程中，检查当前访问结点的左、右指针域是否为空：<ul><li>如果左指针域为空，将它改为指向前驱结点的线索；</li><li>如果右指针域为空，将它改为指向后继结点的线索。</li></ul></li></ul><p>以中序线索二叉树为例，讨论建立线索二叉树的算法。  </p><p> <strong>建立中序线索二叉树的算法</strong></p><ul><li>CreatThread(b)算法：对以二叉链存储的二叉树b进行中序线索化，并返回线索化后头结点的指针root。</li><li>Thread(p)算法：对以*p为根结点的二叉树子树的中序线索化。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184607768.png" alt="image-20220430184607768"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184617351.png" alt="image-20220430184617351"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TBTNode *pre;   <span class="comment">//全局变量</span></span><br><span class="line"><span class="function">TBTNode *<span class="title">CreatThread</span><span class="params">(TBTNode *b)</span>     <span class="comment">//中序线索化二叉树</span></span></span><br><span class="line"><span class="function"></span>&#123;    TBTNode *root;</span><br><span class="line">     root=(TBTNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(TBTNode));  <span class="comment">//创建头结点</span></span><br><span class="line">     root-&gt;ltag=<span class="number">0</span>; root-&gt;rtag=<span class="number">1</span>;  root-&gt;rchild=b;</span><br><span class="line">     <span class="keyword">if</span> (b==<span class="literal">NULL</span>) root-&gt;lchild=root;<span class="comment">//空二叉树</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;        root-&gt;lchild=b;</span><br><span class="line">pre=root;             <span class="comment">//pre是*p的前驱结点，供加线索用</span></span><br><span class="line"><span class="built_in">Thread</span>(b);   <span class="comment">//中序遍历线索化二叉树</span></span><br><span class="line">pre-&gt;rchild=root;    <span class="comment">//最后处理，加入指向头结点的线索</span></span><br><span class="line">pre-&gt;rtag=<span class="number">1</span>;</span><br><span class="line">root-&gt;rchild=pre;    <span class="comment">//头结点右线索化</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> root;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Thread</span><span class="params">(TBTNode *&amp;p)</span>    <span class="comment">//对二叉树b进行中序线索化</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">if</span> (p!=<span class="literal">NULL</span>)</span><br><span class="line">     &#123;  </span><br><span class="line">             <span class="built_in">Thread</span>(p-&gt;lchild);           <span class="comment">//左子树线索化</span></span><br><span class="line">             <span class="keyword">if</span> (p-&gt;lchild==<span class="literal">NULL</span>)          <span class="comment">//前驱线索化</span></span><br><span class="line">             &#123;     p-&gt;lchild=pre; p-&gt;ltag=<span class="number">1</span>;  &#125;<span class="comment">//建立当前结点的前驱线索</span></span><br><span class="line">             <span class="keyword">else</span>  p-&gt;ltag=<span class="number">0</span>;</span><br><span class="line">             <span class="keyword">if</span>  (pre-&gt;rchild==<span class="literal">NULL</span>)     <span class="comment">//后继线索化</span></span><br><span class="line">            &#123;     pre-&gt;rchild=p;pre-&gt;rtag=<span class="number">1</span>;&#125;<span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">            <span class="keyword">else</span>  pre-&gt;rtag=<span class="number">0</span>;</span><br><span class="line">            pre=p;</span><br><span class="line">           <span class="built_in">Thread</span>(p-&gt;rchild);  <span class="comment">//递归调用右子树线索化</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、遍历线索后二叉树"><a href="#3、遍历线索后二叉树" class="headerlink" title="3、遍历线索后二叉树"></a>3、遍历线索后二叉树</h3><p>　　 遍历某种次序的线索二叉树，就是从该次序下的开始结点出发，反复找到该结点在该次序下的后继结点，直到头结点。  　　 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184710915.png" alt="image-20220430184710915"> </p><p>在中序线索二叉树中中序遍历的过程： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p指向根结点；</span><br><span class="line"><span class="keyword">while</span> p ≠root时循环</span><br><span class="line">&#123;</span><br><span class="line">        找开始结点*p；</span><br><span class="line">        访问*p结点；</span><br><span class="line">        <span class="keyword">while</span> (*p结点有右线索)   </span><br><span class="line">                 一直访问下去；</span><br><span class="line">        p转向右孩子结点；</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430184735896.png" alt="image-20220430184735896"> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThInOrder</span><span class="params">(TBTNode *tb)</span></span></span><br><span class="line"><span class="function"></span>&#123;      TBTNode *p=tb-&gt;lchild;<span class="comment">//p指向根结点</span></span><br><span class="line">       <span class="keyword">while</span> (p!=tb)</span><br><span class="line">       &#123;     </span><br><span class="line">              <span class="keyword">while</span> (p-&gt;ltag==<span class="number">0</span>)   p=p-&gt;lchild;<span class="comment">//找开始结点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>，p-&gt;data);<span class="comment">//访问开始结点</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;rtag==<span class="number">1</span> &amp;&amp; p-&gt;rchild!=tb)</span><br><span class="line">&#123;     p=p-&gt;rchild;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>，p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;rchild;</span><br><span class="line">      &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//优点：中序遍历算法既没有递归也没有用栈，空间效率得到提高。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-8、哈夫曼树"><a href="#7-8、哈夫曼树" class="headerlink" title="7.8、哈夫曼树"></a>7.8、哈夫曼树</h2><p>具有最小带权路径长度的二叉树称为赫夫曼树（也称最优树）。</p><h3 id="1、最优二叉树"><a href="#1、最优二叉树" class="headerlink" title="1、最优二叉树"></a>1、最优二叉树</h3><h4 id="①、定义"><a href="#①、定义" class="headerlink" title="①、定义"></a>①、定义</h4><p>　　设二叉树具有n个带权值的叶结点，那么从根结点到各个叶结点的路径长度与相应结点权值的乘积的和，叫做二叉树的带权路径长度。       </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185312519.png" alt="image-20220430185312519"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185359040.png" alt="image-20220430185359040"> </p><h3 id="2、构造赫夫曼树的原则"><a href="#2、构造赫夫曼树的原则" class="headerlink" title="2、构造赫夫曼树的原则"></a>2、构造赫夫曼树的原则</h3><ul><li>权值越大的叶结点越靠近根结点。</li><li>权值越小的叶结点越远离根结点。</li></ul><h3 id="3、构造赫夫曼树的过程："><a href="#3、构造赫夫曼树的过程：" class="headerlink" title="3、构造赫夫曼树的过程："></a>3、构造赫夫曼树的过程：</h3><p>​     （1）给定的n个权值{W1，W2，…，Wn}构造n棵只有一个叶结点的二叉树，从而得到一个二叉树的集合F&#x3D;{T1，T2，…，Tn}。<br>​     （2）在F中选取根结点的权值最小和次小的两棵二叉树作为左、右子树构造一棵新的二叉树，这棵新的二叉树根结点的权值为其左、右子树根结点权值之和。<br>​     （3）在集合F中删除作为左、右子树的两棵二叉树，并将新建立的二叉树加入到集合F中。<br>​     （4）重复（2）、（3）两步，当F中只剩下一棵二叉树时，这棵二叉树便是所要建立的赫夫曼树。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185550175.png" alt="image-20220430185550175"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185600049.png" alt="image-20220430185600049"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185610759.png" alt="image-20220430185610759"> </p><h3 id="4、Huffman编码"><a href="#4、Huffman编码" class="headerlink" title="4、Huffman编码"></a>4、Huffman编码</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185708137.png" alt="image-20220430185708137"> </p><p>（1）编码<br>    思想：根据字符出现频率编码，利用赫夫曼树构造一种不等长的二进制编码，使电文总长最短<br>    编码：根据字符出现频率构造Huffman树，然后将树中结点引向其左孩子的分支标“0”，引向其右孩子的分支标“1”；每个字符的编码即为从根到每个叶子的路径上得到的0、1序列</p><p>​         构造所得的赫夫曼编码是一种最优前缀编码，即使所传电文的总长度最短。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185746384.png"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185802631.png" alt="image-20220430185802631"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185811811.png" alt="image-20220430185811811"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220430185818382.png" alt="image-20220430185818382"> </p><h1 id="六、图"><a href="#六、图" class="headerlink" title="六、图"></a>六、图</h1><h3 id="6-1、图的基本概念"><a href="#6-1、图的基本概念" class="headerlink" title="6.1、图的基本概念"></a><strong>6.1、图的基本概念</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps10.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps11.jpg" alt="img"> </p><p>极大连通子图：包含所有的边</p><p>极小连通子图：保持图连通，同时边数最小</p><p>无向图的极大连通子图称为连通分量</p><p>（如果本身就是连通图则本身就是其连通分量，而非连通图的各个连通图作为其组成部分均为其连通分量）</p><p>生成树：包含所有顶点的一个极小连通子图</p><p>树：n个顶点，n-1条边</p><p>森林：顶点树-边数&#x3D;树的个数</p><h3 id="6-3、图的遍历"><a href="#6-3、图的遍历" class="headerlink" title="6.3、图的遍历"></a><strong>6.3、图的遍历</strong></h3><p>当各边的权值相等时，广度优先算法可以解决单源最短路径问题</p><p>对一个有n个顶点e条边的图采用邻接表表示时，进行DFS遍历的时间复杂度为 O(n+e),空间复杂度为 O(n)</p><p>进行BFS遍历的时间复杂度为 O(n+e),空间复杂度为 O(n)</p><p>临界矩阵的话，N*N，不管是DFS，还是BFS，都需要走完这个矩阵，复杂度：O(n2)</p><p>判断有向图存在回路：</p><p>1、拓扑排序</p><p>2、最短路径的Digkstra算法</p><p>3、深度优先：如果遍历的点已在栈中，说明有回路</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps12.jpg" alt="img"> </p><h3 id="6-4、图的应用"><a href="#6-4、图的应用" class="headerlink" title="6.4、图的应用"></a><strong>6.4、图的应用</strong></h3><p>生成树：树的极小连通子图，有****所有的顶点****和尽可能少的边</p><p>最小生成树：生成树中权值最小的，所有的顶点和最少的边</p><p>无向连通图中最小生成树必定存在</p><p>简单路径（顶点不重复出现）</p><p>最短路径一定是简单路径</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps13.jpg" alt="img"> </p><p>简单路径：顶点不重复出现</p><p>最短路径一定是简单路径</p><p>Floyd算法求两个顶点的最短路径时，pathk-1不一定是pathk的子集。因为还要对原有顶点的各个路径进行判断，是否由新顶点更近</p><p>判断一个有向图是否有环（回路）</p><p>1、深度优先</p><p>2、拓扑排序（本身就是判断是否有回路）</p><p>3、关键路径（的前提是无环，有争议）</p><p>Prim算法：点</p><p>Krushal算法：边</p><h2 id="8-1、图的概念"><a href="#8-1、图的概念" class="headerlink" title="8.1、图的概念"></a>8.1、图的概念</h2><h3 id="1、图的定义"><a href="#1、图的定义" class="headerlink" title="1、图的定义"></a>1、图的定义</h3><p>图（Graph）G由顶点集合V(G)和边集合E(G)构成。</p><p>对于n个顶点的图，对每个顶点连续编号，，即顶点的编号为0~n-1。通过编号唯一确定一个顶点。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504103935453.png" alt="image-20220504103935453"> </p><h3 id="2、图的基本术语"><a href="#2、图的基本术语" class="headerlink" title="2、图的基本术语"></a>2、图的基本术语</h3><h4 id="①、端点和邻接点"><a href="#①、端点和邻接点" class="headerlink" title="①、端点和邻接点"></a>①、端点和邻接点</h4><p>无向图：若存在一条边(i,j)，顶点 i 和顶点 j 为端点，互为邻接点。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504104551916.png" alt="image-20220504104551916"> </p><p>有向图：若存在一条边&lt;i,j&gt;，顶点 i 为起始端点（起点），顶点 j 为终止端点（终点），互为邻接点。<br>                边&lt;i,j&gt;称为弧，i 为弧尾（tail），j 为弧头（head）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504104602459.png" alt="image-20220504104602459"> </p><h4 id="②、-顶点的度、入度和出度"><a href="#②、-顶点的度、入度和出度" class="headerlink" title="②、 顶点的度、入度和出度"></a>②、 顶点的度、入度和出度</h4><p>无向图：与顶点 i 为端点的边数称为该顶点的度。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504104854120.png" alt="image-20220504104854120"> </p><p>有向图：与顶点 i 为终点的边数称为该顶点的入度；与顶点 i 为起点的边数称为该顶点的出度。出度与入度之和为该顶点的度。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504104907204.png" alt="image-20220504104907204"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504105013204.png" alt="image-20220504105013204"> </p><p>度之和是边数的2倍</p><h4 id="③、完全图"><a href="#③、完全图" class="headerlink" title="③、完全图"></a>③、完全图</h4><p>无向图：每两个顶点之间都存在一条边，称为完全无向图。包含$\frac{n(n-1)}{2}$条边。</p><p>有向图：每两个顶点之间都存在方向相反的两条边，称为完全有向图。包含${n(n-1)}$条边。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504105328481.png" alt="image-20220504105328481"> </p><h4 id="④、稀疏图、稠密图"><a href="#④、稀疏图、稠密图" class="headerlink" title="④、稀疏图、稠密图"></a>④、稀疏图、稠密图</h4><p>稀疏图：一个图含有较少的边数</p><p>稠密图：一个图接近完全图，但不是完全图</p><h4 id="⑤、子图"><a href="#⑤、子图" class="headerlink" title="⑤、子图"></a>⑤、子图</h4><p>设有两个图G &#x3D; (V，E)和G’ &#x3D;(V’ , E’)，V’是V的子集，E’是E的子集，则称G’是G的子集。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504105826544.png" alt="image-20220504105826544"> </p><h4 id="⑥、路径和路径长度"><a href="#⑥、路径和路径长度" class="headerlink" title="⑥、路径和路径长度"></a>⑥、路径和路径长度</h4><p>在一个</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504105934646.png" alt="image-20220504105934646"> </p><h4 id="⑦、回路或环"><a href="#⑦、回路或环" class="headerlink" title="⑦、回路或环"></a>⑦、回路或环</h4><p>回路或环：一条路径上的开始点和结束点为同一个顶点</p><p>简单回路或简单环：开始点和结束点相同的简单路径 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504110257288.png" alt="image-20220504110257288"> </p><h4 id="⑧、连通、连通图和连通分量"><a href="#⑧、连通、连通图和连通分量" class="headerlink" title="⑧、连通、连通图和连通分量"></a>⑧、连通、连通图和连通分量</h4><p>针对无向图</p><p>连通：无向图中从顶点 i 到顶点 j 有路径，则称 顶点 i 和 j 连通</p><p>连通图：任意两个顶点都连通（有路径，不一定有边直接相连）</p><p>连通分量：无向图的极大连通子图称为它的连通分量。连通图的连通分量只有一个，即本身。非连通图有多个连通分量。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504111200323.png" alt="image-20220504111200323"> </p><h4 id="⑨、强连通图和强连通分量"><a href="#⑨、强连通图和强连通分量" class="headerlink" title="⑨、强连通图和强连通分量"></a>⑨、强连通图和强连通分量</h4><p>有向图：从顶点 i 到顶点 j 有路径，则称 从顶点 i 到 j 是连通的</p><p>强连通图：任意两个顶点i 和 j 都连通，从i 到 j 和 从j 到i都存在路径。</p><p>强连通分量：有向图的极大连通子图称为它的连通分量。强连通图的强连通分量只有一个，即本身。非强连通图有多个强连通分量。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504111751944.png" alt="image-20220504111751944"> </p><p><strong>在一个非强连通图中找强连通分量</strong></p><ol><li>找到一个有向环</li><li>扩展该有向环：如果某个顶点到环中任一顶点有路径，并且该环中任一顶点到该顶点也有路径，则加入这个顶点。</li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504112059071.png" alt="image-20220504112059071"> </p><h4 id="⑩、权和网"><a href="#⑩、权和网" class="headerlink" title="⑩、权和网"></a>⑩、权和网</h4><p>权：每条边附带的数值，可以表示表示一个顶点到另一个顶点到的时间或花费</p><p>边上带有权的图称为<strong>带权图</strong>，或<strong>网</strong>。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504112257436.png" alt="image-20220504112257436"> </p><h2 id="8-2、图的存储结构和基本运算算法"><a href="#8-2、图的存储结构和基本运算算法" class="headerlink" title="8.2、图的存储结构和基本运算算法"></a>8.2、图的存储结构和基本运算算法</h2><p>图的逻辑结构要映射为图的存储结构，逻辑结构不涉及物理存储。</p><p>图的存储结构：存储每个顶点的信息，存储每条边的信息</p><p>图的两种存储结构：</p><ol><li>邻接矩阵</li><li>邻接表</li></ol><h3 id="1、邻接矩阵存储方法"><a href="#1、邻接矩阵存储方法" class="headerlink" title="1、邻接矩阵存储方法"></a>1、邻接矩阵存储方法</h3><p>一般采用顺序存储</p><h4 id="①、定义-1"><a href="#①、定义-1" class="headerlink" title="①、定义"></a>①、定义</h4><p>邻接矩阵是表示顶点之间相邻关系的矩阵。设 G &#x3D; (V , E)是具有n(n&gt;0)个顶点的图，顶点的编号一次为0~n-1。</p><p>G的邻接矩阵A是 n 阶方阵。其定义如下：</p><p>（1）无向图<br>            $若(i，j)\in E(G),A[i][j] &#x3D; 1:有边；A[i][j] &#x3D; 0:无边$</p><p>（2）有向图<br>            $若&lt;i，j&gt;\in E(G),A[i][j] &#x3D; 1:i到j有边；A[i][j] &#x3D; 0:无边$</p><p>（3）带权无向图<br>            $若(i，j)\in E(G),A[i][j] &#x3D; w_{ij} \ \ 0:i&#x3D;j；\infty:其他$</p><p>（4）带权无向图<br>            $若&lt;i，j&gt;\in E(G),A[i][j] &#x3D; w_{ij} \ \ 0:i&#x3D;j；\infty:其他$</p><p>无向图</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504114400573.png" alt="image-20220504114400573"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504114415100.png" alt="image-20220504114415100"> </p><p>邻接矩阵的特点：</p><ul><li>一个图的邻接矩阵表示是唯一的</li><li>适合稠密图的存储</li><li>邻接矩阵的存储空间为O(n<sup>2</sup>)</li></ul><h4 id="②、存储类型定义"><a href="#②、存储类型定义" class="headerlink" title="②、存储类型定义"></a>②、存储类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图的邻接矩阵存储类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXV <span class="string">&lt;最大顶点个数&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//声明顶点的类型</span></span><br><span class="line">    <span class="type">int</span> no; <span class="comment">//顶点编号</span></span><br><span class="line">    InfoType info;<span class="comment">//顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明的邻接矩阵类型</span></span><br><span class="line"><span class="comment">//图的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> edges[MAXV][MAXV];<span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="type">int</span> n, e;<span class="comment">//顶点数，边数</span></span><br><span class="line">    VertexType vexs[MAXV];<span class="comment">//存放顶点信息</span></span><br><span class="line">&#125;MatGraph;</span><br></pre></td></tr></table></figure><h3 id="2、邻接表存储方法"><a href="#2、邻接表存储方法" class="headerlink" title="2、邻接表存储方法"></a>2、邻接表存储方法</h3><h4 id="①、定义-2"><a href="#①、定义-2" class="headerlink" title="①、定义"></a>①、定义</h4><ul><li>对图中的每个顶点都建立一个单链表，将该顶点的所有邻接点都连接起来</li><li>每个单链表添加一个表头（表示顶点信息）。并将所有表头结点构成一个数组，下标为i 的元素表示顶点i的表头结点。</li><li>图的邻接表存储方法是一种顺序存储与链式存储相结合的存储方法<ul><li>头结点顺序存储，边结点链式存储</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504120843315.png" alt="image-20220504120843315"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504140837162.png" alt="image-20220504140837162"> </p><p><strong>邻接表的特点</strong></p><ul><li>邻接表不一致</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504140918776.png" alt="image-20220504140918776"> </li><li>存储空间为O(n+e)</li><li>适合于稀疏图存储</li></ul><p>逆邻接表</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504141943569.png" alt="image-20220504141943569"></p><h4 id="②、存储类型"><a href="#②、存储类型" class="headerlink" title="②、存储类型"></a>②、存储类型</h4><p>图的邻接表存储类型定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明边结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> adjvex;<span class="comment">//该边的终点编号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> *<span class="title">nextarc</span>;</span><span class="comment">//指向下一条边的指针</span></span><br><span class="line">    InfoType info;<span class="comment">//该边的权值等信息</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明邻接表头结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Vertex data;<span class="comment">//顶点信息</span></span><br><span class="line">    ArcNode *firstarc;<span class="comment">//指向第一条边</span></span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明图邻接表类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VNode adjlist[MAXV];<span class="comment">//邻接表</span></span><br><span class="line">    <span class="type">int</span> n, e;<span class="comment">//图中顶点数n和边数e</span></span><br><span class="line">&#125;AdjGraph;</span><br></pre></td></tr></table></figure><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504141657987.png" alt="image-20220504141657987"></p><p><strong>邻接矩阵和邻接表的优缺点</strong>：</p><p>邻接矩阵的优点是可以快速判断两个顶点之间是否存在边，可以快速添加边或者删除边。而其缺点是如果顶点之间的边比较少，会比较浪费空间。因为是一个 n∗nn∗n 的矩阵。</p><p>而邻接表的优点是节省空间，只存储实际存在的边。其缺点是关注顶点的度时，就可能需要遍历一个链表。还有一个缺点是，对于无向图，如果需要删除一条边，就需要在两个链表上查找并删除。</p><h3 id="3、图基本运算算法设计"><a href="#3、图基本运算算法设计" class="headerlink" title="3、图基本运算算法设计"></a>3、图基本运算算法设计</h3><h4 id="①、创建图的运算算法"><a href="#①、创建图的运算算法" class="headerlink" title="①、创建图的运算算法"></a>①、创建图的运算算法</h4><p>根据邻接矩阵数组A、顶点个数n和边数e来建立图的邻接表G。（采用邻接表指针方式）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建图的邻接表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateAdj</span><span class="params">(AdjGraph *&amp;G, <span class="type">int</span> A[MAXV][MAXV], <span class="type">int</span> n, ine)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    G = (AdjGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//给邻接表中所有头结点的指针域置初值</span></span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;<span class="comment">//检查邻接矩阵中每个元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;<span class="comment">//存在一条边</span></span><br><span class="line">                p = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));<span class="comment">//创建一个结点p</span></span><br><span class="line">                p-&gt;adjvex = j;<span class="comment">//存放邻接点</span></span><br><span class="line">                p-&gt;weight = A[i][j];<span class="comment">//存放权</span></span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;<span class="comment">//采用头插法插入结点p</span></span><br><span class="line">                <span class="comment">//让p的nextarc指向 头结点刚刚指向的位置</span></span><br><span class="line">                <span class="comment">//再让头结点指向p</span></span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②、输出图的运算算法"><a href="#②、输出图的运算算法" class="headerlink" title="②、输出图的运算算法"></a>②、输出图的运算算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出邻接表G</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DispAdj</span><span class="params">(AdjGraph *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]→&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③、销毁图的运算算法"><a href="#③、销毁图的运算算法" class="headerlink" title="③、销毁图的运算算法"></a>③、销毁图的运算算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyAdj</span><span class="params">(AdjGraph *&amp;G)</span><span class="comment">//销毁邻接表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ArcNode *pre, *p;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;<span class="comment">//扫描所有的单链表</span></span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;<span class="comment">//pre指向第i个单链表的首结点</span></span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="literal">NULL</span>) &#123;<span class="comment">//释放第i个单链表的所有边结点</span></span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = pre-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);<span class="comment">//释放头结点数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504175405148.png" alt="image-20220504175405148"> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MatToList</span><span class="params">(MatGraph g, AdjGraph *&amp;G)</span></span><br><span class="line"><span class="comment">//将邻接矩阵g转换为邻接表G</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    G = (AdjGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;<span class="comment">//将邻接表中所有头结点的指针域置初值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;<span class="comment">//检查邻接矩阵的每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (j = g.n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != <span class="number">0</span> &amp;&amp; g.edges[i][j] != INF) &#123;<span class="comment">//存在一条边</span></span><br><span class="line">                p = (ArcNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));<span class="comment">//建一个边结点</span></span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = g.edges[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;<span class="comment">//采用头插法插入结点p</span></span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    G-&gt;n = g.n;</span><br><span class="line">    G-&gt;e = g.e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504180124222.png" alt="image-20220504180124222">  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListToMat</span><span class="params">(AdjGraph *G, MatGraph &amp;g)</span></span><br><span class="line"><span class="comment">//将邻接表G转换为邻接矩阵g</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;<span class="comment">//扫描所有的单链表</span></span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;<span class="comment">//p指向第i个单链表的首结点</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            g.edges[i][p-&gt;adjvex] = p-&gt;weight;</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    g.n = G-&gt;n;</span><br><span class="line">    g.e = G-&gt;e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504180704782.png" alt="image-20220504180704782"> </p><h3 id="4、图的其他存储方法"><a href="#4、图的其他存储方法" class="headerlink" title="4、图的其他存储方法"></a>4、图的其他存储方法</h3><h4 id="①、十字链表"><a href="#①、十字链表" class="headerlink" title="①、十字链表"></a>①、十字链表</h4><p>十字链表是有向图的另外一种存储结构，它是邻接表和逆邻接表的结合。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504181214554.png" alt="image-20220504181214554"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504181416383.png" alt="image-20220504181416383"> </p><h4 id="②、邻接多重表"><a href="#②、邻接多重表" class="headerlink" title="②、邻接多重表"></a>②、邻接多重表</h4><p>邻接多重表是无向图的另外一种存储结构，与十字链表类似。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504181628550.png" alt="image-20220504181628550"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220504182015539.png" alt="image-20220504182015539"> </p><h2 id="8-3、图的遍历"><a href="#8-3、图的遍历" class="headerlink" title="8.3、图的遍历"></a>8.3、图的遍历</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>从给定图中任意指定的顶点（称为初始点）出发，按照某种搜索方法沿着图的边访问图中的所有顶点，使每个顶点仅被访问一次，这个过程称为图的遍历。</p><p>图的遍历得到的顶点序列称为图遍历序列。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509152819840.png" alt="image-20220509152819840"> </p><p>根据搜索方法的不同，图的遍历方法有两种：</p><ul><li>深度优先遍历（DFS）<ul><li>深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为止，然后再折返，开始搜索下一条候补路径。</li></ul></li><li>广度优先遍历（BFS）</li></ul><h3 id="2、深度优先遍历算法"><a href="#2、深度优先遍历算法" class="headerlink" title="2、深度优先遍历算法"></a>2、深度优先遍历算法</h3><p>深度优先遍历过程：</p><p>（1）从图中某个初始顶点v出发，首先访问初始顶点v。</p><p>（2）选择一个与顶点v相邻且没被访问过的顶点w，再从w出发进行深度优先搜索，直到图中与当前顶点v邻接的所有顶点都被访问过为止。</p><p><strong>算法设计思路：</strong></p><p>深度优先遍历的过程体现出<strong>后进先出</strong>的特点：用栈或递归方式实现。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509153932738.png" alt="image-20220509153932738"></p><p>如何确定一个顶点是否被访问过？设置一个<code>visited[]</code>全局数组，<code>visited[i]=0</code>表示顶点v没有访问；等于1表示已经访问过</p><p>采用邻接表的DFS算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(AdjGraph *G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="type">int</span> w;</span><br><span class="line">    visited[v] = <span class="number">1</span>;<span class="comment">//置已访问标记</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, v);<span class="comment">//输出被访问顶点的编号</span></span><br><span class="line">    p = G-&gt;adjlist[v].firstarc;<span class="comment">//p指向顶点v的第一条边的边头结点</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        w = p-&gt;adjvex;<span class="comment">//边结点的编号</span></span><br><span class="line">        <span class="keyword">if</span> (visited[w] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(G, w);<span class="comment">//若W顶点未访问，递归访问它</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;nextarc;<span class="comment">//p指向顶点v的下一条边的边头结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509155333937.png"> </p><h3 id="3、广度优先遍历算法"><a href="#3、广度优先遍历算法" class="headerlink" title="3、广度优先遍历算法"></a>3、广度优先遍历算法</h3><p>广度优先遍历的过程：</p><p>（1）访问初始点v，节奏访问v的所有未被访问过的邻接点v<sub>1</sub>,v<sub>2</sub>,…v<sub>t</sub>。</p><p>（2）按照v<sub>1</sub>,v<sub>2</sub>,…v<sub>t</sub>的次序，访问每一个顶点的所有未被访问过的邻接点。</p><p>（3）依次类推，直到图中所有和初始点v有路径想通的顶点都被访问过为止。</p><p><strong>算法设计思路：</strong></p><p>广度优先遍历的过程体现出<strong>先进先出</strong>的特点：用<strong>队列</strong>实现。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509161105059.png" alt="image-20220509161105059"></p><p>如何确定一个顶点是否被访问过？设置一个<code>visited[]</code>全局数组，<code>visited[i]=0</code>表示顶点v没有访问；等于1表示已经访问过</p><p>采用邻接表的BFS算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(AdjGraph *G, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> w, i;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    SqQueue *qu;<span class="comment">//定义环形队列指针</span></span><br><span class="line">    <span class="built_in">InitQueue</span>(qu);<span class="comment">//初始化队列</span></span><br><span class="line">    <span class="type">int</span> visited[MAXV];<span class="comment">//定义顶点访问标记数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;<span class="comment">//访问标记数组初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>, v);<span class="comment">//输出被访问结点的编号</span></span><br><span class="line">    visited[v] = <span class="number">1</span>;<span class="comment">//置已访问标记</span></span><br><span class="line">    <span class="built_in">enQueue</span>(qu, v);<span class="comment">//让V进队</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">QueueEmpty</span>(qu))<span class="comment">//队不空循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">deQueue</span>(qu, w);<span class="comment">//出队一个顶点w</span></span><br><span class="line">        p = G-&gt;adjlist[w].firstarc;<span class="comment">//指向w的第一个邻接点</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)<span class="comment">//查找w的所有邻接点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[p-&gt;adjvex] == <span class="number">0</span>)<span class="comment">//若当前邻接点未被访问</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>, p-&gt;adjvex);<span class="comment">//访问该邻接点</span></span><br><span class="line">         visited[p-&gt;adjvex] = <span class="number">1</span>;<span class="comment">//置已访问标记</span></span><br><span class="line">                <span class="built_in">enQueue</span>(qu, p-&gt;adjvex);<span class="comment">//该顶点进队</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;nextarc;<span class="comment">//找下一个邻接点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509163412556.png" alt="image-20220509163412556"> </p><h3 id="4、非连通图的遍历"><a href="#4、非连通图的遍历" class="headerlink" title="4、非连通图的遍历"></a>4、非连通图的遍历</h3><ul><li>无向连通图：调用一次DFS或BFS，能够访问到图中的所有顶点</li><li>无相非连通图：调用一次DFS或BFS，只能访问到初始点所在联通分量中的所有顶点，不可能访问到其他连通分量中的顶点。可以分别遍历每个连通分量，才能够访问到图中的所有顶点。</li></ul><p>采用广度优先遍历遍历非连通图的算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS1</span><span class="params">(AdjGraph *G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++)<span class="comment">//遍历所有未被访问过的顶点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">BFS</span>(G, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非连通图：调用BFS()的次数恰好等于连通分量的个数</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509164258769.png" alt="image-20220509164258769"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509164439582.png" alt="image-20220509164439582"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509164506200.png" alt="image-20220509164506200"> </p><h2 id="8-4、生成树和最小生成树"><a href="#8-4、生成树和最小生成树" class="headerlink" title="8.4、生成树和最小生成树"></a>8.4、生成树和最小生成树</h2><h3 id="1、生成树的概念"><a href="#1、生成树的概念" class="headerlink" title="1、生成树的概念"></a>1、生成树的概念</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509164831118.png" alt="image-20220509164831118"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509165121272.png" alt="image-20220509165121272"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509165128684.png" alt="image-20220509165128684"> </p><p>最小生成树的概念：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509165226936.png" alt="image-20220509165226936"> </p><h3 id="2、非连通图和生成树"><a href="#2、非连通图和生成树" class="headerlink" title="2、非连通图和生成树"></a>2、非连通图和生成树</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509171745984.png" alt="image-20220509171745984">   </p><h3 id="3、普里姆算法"><a href="#3、普里姆算法" class="headerlink" title="3、普里姆算法"></a>3、普里姆算法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509172458434.png" alt="image-20220509172458434"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509173010636.png" alt="image-20220509173010636"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509173739332.png" alt="image-20220509173739332"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509173946932.png" alt="image-20220509173946932"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174002829.png" alt="image-20220509174002829"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174022264.png" alt="image-20220509174022264"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174035459.png" alt="image-20220509174035459"> </p><h3 id="4、克鲁斯卡尔算法"><a href="#4、克鲁斯卡尔算法" class="headerlink" title="4、克鲁斯卡尔算法"></a>4、克鲁斯卡尔算法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174109174.png" alt="image-20220509174109174"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174126383.png" alt="image-20220509174126383"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174135039.png" alt="image-20220509174135039"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174231260.png" alt="image-20220509174231260"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174239167.png" alt="image-20220509174239167"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174247474.png" alt="image-20220509174247474"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174258722.png" alt="image-20220509174258722"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174310847.png" alt="image-20220509174310847"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174335574.png" alt="image-20220509174335574"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174348675.png" alt="image-20220509174348675"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174403187.png" alt="image-20220509174403187"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174417743.png" alt="image-20220509174417743"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174428749.png" alt="image-20220509174428749"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174440302.png" alt="image-20220509174440302"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220509174455323.png" alt="image-20220509174455323"></p><h2 id="8-5、最短路径"><a href="#8-5、最短路径" class="headerlink" title="8.5、最短路径"></a>8.5、最短路径</h2><h3 id="1、路径的概念"><a href="#1、路径的概念" class="headerlink" title="1、路径的概念"></a>1、路径的概念</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102039773.png" alt="image-20220511102039773"></p><h3 id="2、从一个顶点到其余各顶点的最短路径"><a href="#2、从一个顶点到其余各顶点的最短路径" class="headerlink" title="2、从一个顶点到其余各顶点的最短路径"></a>2、从一个顶点到其余各顶点的最短路径</h3><p>单源最短路径问题：Dijkstra算法</p><p>问题描述：给定一个带权有向图G与源点v，求从v到G中其他顶点的最短路径，并限定各边上的权值大于或等于0.</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102119621.png" alt="image-20220511102119621"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102318940.png" alt="image-20220511102318940"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102343523.png" alt="image-20220511102343523"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102350987.png" alt="image-20220511102350987"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102358743.png" alt="image-20220511102358743"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102410532.png" alt="image-20220511102410532"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102420210.png" alt="image-20220511102420210"></p><p>算法设计（解决2个问题）</p><ul><li>存放最短路径</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102439266.png" alt="image-20220511102439266"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102456385.png" alt="image-20220511102456385"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102509575.png" alt="image-20220511102509575"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102551920.png" alt="image-20220511102551920"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102610247.png" alt="image-20220511102610247"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102627857.png" alt="image-20220511102627857"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102647776.png" alt="image-20220511102647776"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102713721.png" alt="image-20220511102713721"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102724770.png" alt="image-20220511102724770"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102742984.png" alt="image-20220511102742984"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511102948722.png" alt="image-20220511102948722"> </p><h2 id="8-6、拓扑排序"><a href="#8-6、拓扑排序" class="headerlink" title="8.6、拓扑排序"></a>8.6、拓扑排序</h2><p>AOV网是有向无环图</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103011043.png" alt="image-20220511103011043"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103019840.png" alt="image-20220511103019840"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103030076.png" alt="image-20220511103030076"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103213539.png" alt="image-20220511103213539"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103222239.png" alt="image-20220511103222239"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103247960.png" alt="image-20220511103247960"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103257749.png" alt="image-20220511103257749"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103316292.png" alt="image-20220511103316292"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103322658.png" alt="image-20220511103322658"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103331936.png" alt="image-20220511103331936"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103339002.png" alt="image-20220511103339002"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103353804.png" alt="image-20220511103353804"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103400761.png" alt="image-20220511103400761"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103410064.png" alt="image-20220511103410064"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103418843.png" alt="image-20220511103418843"> </p><h2 id="8-7、AOE网"><a href="#8-7、AOE网" class="headerlink" title="8.7、AOE网"></a>8.7、AOE网</h2><h3 id="1、AOE"><a href="#1、AOE" class="headerlink" title="1、AOE"></a>1、AOE</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103447552.png" alt="image-20220511103447552"></p><h3 id="2、关键路径"><a href="#2、关键路径" class="headerlink" title="2、关键路径"></a>2、关键路径</h3><p>从AOE网中源点到汇点的最长路径，具有最大长度的路径叫关键路径</p><p>关键路径是由关键活动构成的，关键路径可能不唯一。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103513116.png" alt="image-20220511103513116"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103523636.png" alt="image-20220511103523636"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103537133.png" alt="image-20220511103537133"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103553020.png" alt="image-20220511103553020"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103611913.png" alt="image-20220511103611913"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103622128.png" alt="image-20220511103622128"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103633222.png" alt="image-20220511103633222"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103647320.png" alt="image-20220511103647320"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103716614.png" alt="image-20220511103716614"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103658852.png" alt="image-20220511103658852"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103806632.png" alt="image-20220511103806632"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103823863.png" alt="image-20220511103823863"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103841173.png" alt="image-20220511103841173"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20220511103851483.png" alt="image-20220511103851483"> </p><h1 id="七、查找"><a href="#七、查找" class="headerlink" title="七、查找"></a>七、查找</h1><h3 id="7-2、顺序查找和折半查找"><a href="#7-2、顺序查找和折半查找" class="headerlink" title="7.2、顺序查找和折半查找"></a><strong>7.2、顺序查找和折半查找</strong></h3><p>折半查找的判定树是平衡二叉树</p><p>折半查找判定树高度为<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps14.jpg" alt="img"></p><h3 id="7-3、树形查找"><a href="#7-3、树形查找" class="headerlink" title="7.3、树形查找"></a><strong>7.3、树形查找</strong></h3><p>二叉排序树BST</p><p>平衡二叉树AVL</p><p>二叉排序树的删除和平衡二叉树的插入可能导致树的分裂组合</p><p>二叉排序树，查找失败时直接在失败处插入，不会导致树的分裂组合</p><p>二叉排序树进行中序遍历可以得到有序数列</p><p>平衡二叉树深度<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps15.jpg" alt="img"></p><p>C1&#x3D;1</p><p>C2&#x3D;2</p><p>C3&#x3D;C1+C2+1&#x3D;4</p><p>C4&#x3D;C2+C3+1&#x3D;7</p><p>C5&#x3D;C3+C4+1&#x3D;12</p><p>C6&#x3D;C4+C5+1&#x3D;20</p><p>红黑树插入最多旋转两次，删除最多旋转3次</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps16.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps17.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps18.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps19.jpg" alt="img"> </p><p>LL型，父和爷都染色</p><p>RR型，父和爷都染色</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps20.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps21.jpg" alt="img"> </p><p>红黑树是排序树，不一定是平衡二叉树，</p><p>红黑树的所有结点都是黑色的，那么它一定是满二叉树</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps22.jpg" alt="img"> </p><h3 id="7-4、B树和B-树"><a href="#7-4、B树和B-树" class="headerlink" title="7.4、B树和B+树"></a><strong>7.4、B树和B+树</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps23.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps24.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps25.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps26.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps27.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps28.jpg" alt="img"> </p><p>插入关键字，已达上限还要加时必须分裂</p><p>删除关键字，已至下限还要减时必须合并</p><p>具有n个关键字的m阶B树，应有N+1个叶节点</p><p>B树中，叶节点指最下面的空节点（不画的结点），查找失败的结点</p><p>中断结点是倒数第二层的结点</p><p>B树逻辑上是一棵树，不支持顺序查找</p><p>B+树支持顺序查找</p><p>B+树应用：OS的文件索引和数据库索引</p><p>编译器的词法分析使用有穷自动机和语法树</p><p>网络中的路由表快速查找主要靠高速缓存、路由表压缩技术和快速查找算法</p><p>系统一般采用空闲空间链表管理磁盘空闲块</p><h3 id="7-5、散列表"><a href="#7-5、散列表" class="headerlink" title="7.5、散列表"></a><strong>7.5、散列表</strong></h3><p>装填因子α：表中记录&#x2F;散列表长度</p><p>存储效率：哈希表中实际存储的元素个数与哈希表长度的比值</p><p>散列表在查找成功时的平均查找长度与表长无关</p><p>若在散列表中删除一个元素，不能简单地将该元素删除</p><p>再散列法处理冲突时不易产生聚集（两个散列函数）</p><p>链地址法处理冲突时不会产生聚集</p><h2 id="9-1、"><a href="#9-1、" class="headerlink" title="9.1、"></a>9.1、</h2><h2 id="9-4、哈希表的查找"><a href="#9-4、哈希表的查找" class="headerlink" title="9.4、哈希表的查找"></a>9.4、哈希表的查找</h2><h3 id="1、哈希表的概念"><a href="#1、哈希表的概念" class="headerlink" title="1、哈希表的概念"></a>1、哈希表的概念</h3><h4 id="①、哈希表适合情况"><a href="#①、哈希表适合情况" class="headerlink" title="①、哈希表适合情况"></a>①、哈希表适合情况</h4><p>哈希表是一种存储结构，并非适合所有情况，主要适合记录的关键字与存储地址存在某种函数关系的数据。</p><h4 id="②、几个概念"><a href="#②、几个概念" class="headerlink" title="②、几个概念"></a>②、几个概念</h4><p>哈希表：长度为m的连续存储单元</p><p>哈希地址：哈希表中的位置</p><p>哈希函数：把关键字为k<sub>i</sub>的对象存放在相应的哈希地址中</p><p>哈希冲突：对于两个关键字分别为ki和kj（i≠j）的记录，有ki≠kj，但h(ki)&#x3D;h(kj)。把这种现象叫做哈希冲突（同义词冲突）。</p><h4 id="③、哈希表设计"><a href="#③、哈希表设计" class="headerlink" title="③、哈希表设计"></a>③、哈希表设计</h4><p> 哈希表主要用来解决哈希冲突</p><ul><li>与装填因子有关。装填因子α&#x3D;存储的记录个数&#x2F;哈希表的大小&#x3D;n&#x2F;m  α越小，冲突的可能性就越小； α越大（最大可取1），冲突的可能性就越大。通常使最终的控制在0.6～0.9的范围内。</li><li>与所采用的哈希函数有关。好的哈希函数会减少冲突的发生；不好的哈希函数会增加冲突的发生。</li><li>与解决冲突方法有关。好的哈希冲突解决方法会减少冲突的发生。</li></ul><h1 id="十一、数组的查找"><a href="#十一、数组的查找" class="headerlink" title="十一、数组的查找"></a>十一、数组的查找</h1><h2 id="11-1、线性查找"><a href="#11-1、线性查找" class="headerlink" title="11.1、线性查找"></a>11.1、线性查找</h2><p>线性查找就是在数组中从头开始依次往下查找</p><p>时间复杂度为O(n)</p><h2 id="11-2、二分查找"><a href="#11-2、二分查找" class="headerlink" title="11.2、二分查找"></a>11.2、二分查找</h2><p>二分查找是一种在数组中查找数据的方法。</p><p>二分查找只能在已排好序的数组中进行查找，时间复杂度为O(log n)，</p><p>虽然比线性查找速度更快，但二分查找必须在已排好序的数组中查找，相比线性查找需要更多的时间去维护</p><p>二分查找的条件：在一个已排好序的数组中找到一个元素</p><p>[left, right]，需要设置一个中间量mid&#x3D;left + (right-left)&#x2F;2，int类型防止溢出</p><p>如果mid比查找的值大，表示查找的值在mid的左边，右边界right &#x3D; mid-1,再次取半，查找<br>如果mid比查找的值小，表示查找的值在mid的右边，左边界left &#x3D; mid + 1，取半，查找</p><h1 id="八、排序"><a href="#八、排序" class="headerlink" title="八、排序"></a>八、排序</h1><p>稳定排序：冒泡排序、插入排序、归并排序、基数排序</p><p>不稳定排序：希尔排序、快速排序、堆排序、选择排序</p><h2 id="8-1、排序的基本概念"><a href="#8-1、排序的基本概念" class="headerlink" title="8.1、排序的基本概念"></a><strong>8.1、排序的基本概念</strong></h2><p>排序算法的稳定性与优劣无关</p><p>排序算法：顺序表，链表都可实现。但是如果应用了随机存取特性，就不能在链表上实现</p><h2 id="8-2、冒泡排序"><a href="#8-2、冒泡排序" class="headerlink" title="8.2、冒泡排序"></a>8.2、冒泡排序</h2><p>冒泡排序就是重复“从序列右边开始比较相邻两个元素的大小，再根据结果交换两个元素的位置”这一操作的算法</p><p>第一轮比较n-1次，第二轮比较n-2次，第n-1轮比较1次。</p><p>总的比较次数约为$\frac{n^2}{2}$，时间复杂度为$O(n^2)$</p><h2 id="8-3、选择排序"><a href="#8-3、选择排序" class="headerlink" title="8.3、选择排序"></a>8.3、选择排序</h2><ol><li>从待排序的数据中寻找最值，</li><li>将最值放在前面有序部分的末尾</li></ol><p>时间复杂度为$O(n^2)$</p><h2 id="8-4、插入排序"><a href="#8-4、插入排序" class="headerlink" title="8.4、插入排序"></a>8.4、插入排序</h2><p>插入排序是一种从序列左端开始依次对数据进行排序的算法。</p><p>插入排序的思路就是从右侧的未排序区域内取出一个数据，然后将它插入到已排序区域内的合适位置上</p><p>主要的插入排序方法：<br>（1）直接插入排序<br>（2）折半插入排序<br>（3）希尔排序</p><h3 id="1、直接插入排序"><a href="#1、直接插入排序" class="headerlink" title="1、直接插入排序"></a>1、直接插入排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)<span class="comment">//每次排好一个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从第二个数开始排，这个数之前的数都是排好的，</span></span><br><span class="line"><span class="comment">//只要它比之前的数小，就要插入；不小于的话，直接进行下一个数</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将待插入的数保存到temp中，它一定在左边某两个数之间</span></span><br><span class="line">temp = arr[i];</span><br><span class="line">j = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将排好的数右移，直到发现比待插入的temp小的数</span></span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125; <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp);</span><br><span class="line"><span class="comment">//插入temp</span></span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">insertSort</span>(arr, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、折半插入排序"><a href="#2、折半插入排序" class="headerlink" title="2、折半插入排序"></a>2、折半插入排序</h3><p>先对已经排序的算法进行折半比较，再进行插入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 折半插入排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, low, high, mid;</span><br><span class="line">    <span class="comment">// A[]数组为A[0]~A[n],A[0]放置比较值</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)<span class="comment">// 依次将A[2]~A[n]插入前面的已排序序列</span></span><br><span class="line">    &#123;</span><br><span class="line">        A[<span class="number">0</span>] = A[i];<span class="comment">// A[0]暂存到A[0]</span></span><br><span class="line">        low = <span class="number">1</span>;</span><br><span class="line">        high = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;<span class="comment">// 取中间点</span></span><br><span class="line">            <span class="keyword">if</span> (A[mid] &gt; A[<span class="number">0</span>])</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">// 找到排序位置</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= high + <span class="number">1</span>; --j)</span><br><span class="line">            A[j + <span class="number">1</span>] = A[j];<span class="comment">// 统一后移元素，空出插入位置</span></span><br><span class="line">        A[high + <span class="number">1</span>] = A[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、希尔排序"><a href="#3、希尔排序" class="headerlink" title="3、希尔排序"></a>3、希尔排序</h3><p>希尔排序的组内排序采用的是直接插入排序</p><h2 id="8-5、堆排序"><a href="#8-5、堆排序" class="headerlink" title="8.5、堆排序"></a>8.5、堆排序</h2><p>排序就是利用了数据结构中的堆。</p><p>将一组数据构建堆，取出数据，重新构造堆。</p><p>堆排序一开始需要将n个数据存进堆中，所需时间为<em>*<em>O</em>(<em>n</em>log*n</em>)**</p><p>插入数据<em>*<em>O</em>(log*n</em>)**</p><p>时间复杂度<em>*<em>O</em>(<em>n</em>log*n</em>)**</p><p>建堆的时间复杂度：O(n)</p><p>O(log2n):堆排、快排、归并、快排最好</p><p>n个记录堆排：建堆、取堆顶，重排</p><p>建堆：O（N）</p><p>单次删除O(log2n)</p><p>时间复杂度O（nlogn)</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps1.jpg" alt="img"></p><h2 id="8-6、归并排序"><a href="#8-6、归并排序" class="headerlink" title="8.6、归并排序"></a>8.6、归并排序</h2><p>归并排序会把序列分成长度相同的两个子序列，当无法继续往下分时，就对子序列进行排序。</p><p>归并指的是把两个排好的子序列合并成一个有序序列。该操作会一直重复进行，直到所有子序列都归并为一个整体为止。</p><p>时间复杂度O(nlog<em>n</em>)</p><p>归并排序既是内部排序，又是外部排序</p><h2 id="8-7、基数排序"><a href="#8-7、基数排序" class="headerlink" title="8.7、基数排序"></a>8.7、基数排序</h2><p>基数排序必须为整数</p><h2 id="8-8、快速排序"><a href="#8-8、快速排序" class="headerlink" title="8.8、快速排序"></a>8.8、快速排序</h2><p>当基本有序时，反而不好</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>快速排序其实就是从一组数中选出一个数（基准数）</li><li>小于基准数的放左边，大于基准数的放右边，一次操作结束</li><li>然后重复操作第二步，直到所有的数据都已排好</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以一个一维数组a[10]为例，取第一个数为<strong>基准数</strong></p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>48</td><td>85</td></tr></tbody></table><p>1.此时将 基准值赋值为 <code>x = a[0]</code><br>2.设<code>left = 0, right = 9</code>进行计算<br>3.从右边开始向前 和 基准数 比较大小<br>大于基准数，<code>right--</code>;大于基准数，暂停，将这个数赋给左边<code>a[left]</code>下的数<code>a[left] = a[right]</code><br>4.然后从左边开始和基准数进行比较，<br>小于基准数，<code>left++</code>;大于基准数，暂停，将这个数赋给刚刚从右边比较暂停的数，<code>a[right] = a[left]</code><br>5.循环上两步操作<br>6.直到<code>left &gt;= right</code>,将基准值赋给<code>a[left]</code>,一次排序结束，将基准值插入到正确的位置上，<br>7.重复以上操作，直到所有的数据都已排好<br><strong>一次操作</strong><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2510762-20220326104341352-1854258240.png"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2510762-20220326104604748-268284983.png"><br>此时基准值在正确的位置上，左边都小于基准值，右边都大于基准值，递归重复此类操作</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="keyword">if</span>(left &lt;right)    </span><br><span class="line">&#123;        <span class="comment">//最后需要递归操作，从left到基准值，基准值到right，        </span></span><br><span class="line">        <span class="comment">//left和right是变化的，所以需要保存下来        </span></span><br><span class="line">        <span class="type">int</span> L = left, R =right;        <span class="type">int</span> x = a[left];    <span class="comment">//基准值        </span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)        </span><br><span class="line">        &#123;            </span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; a[right] &gt;= x)    <span class="comment">//从右边找第一个小于基准值的数            </span></span><br><span class="line">            &#123;                </span><br><span class="line">                right--;            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">if</span>(left &lt; right)            </span><br><span class="line">            &#123;                </span><br><span class="line">                a[left] = a[right];             </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; a[left] &lt;= x) <span class="comment">//从左边寻找            </span></span><br><span class="line">            &#123;                </span><br><span class="line">                left++;            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">if</span>(left &lt; right)            </span><br><span class="line">            &#123;                </span><br><span class="line">                a[right] = a[left];            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">if</span>(left &gt;= right)   <span class="comment">//将基准值赋到正确的位置上            </span></span><br><span class="line">            &#123;                </span><br><span class="line">                a[left] = x;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        QuickSort(a, L, left<span class="number">-1</span>);    <span class="comment">//递归操作        </span></span><br><span class="line">        QuickSort(a, left+<span class="number">1</span>, R);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n log<em>n</em>)</p><h3 id="8-6、各种内部排序算法的比较和应用"><a href="#8-6、各种内部排序算法的比较和应用" class="headerlink" title="8.6、各种内部排序算法的比较和应用"></a><strong>8.6、各种内部排序算法的比较和应用</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps2.jpg" alt="img"> </p><p>归并排序的代码比插入排序的代码更为复杂</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps3.jpg" alt="img"> </p><p>堆是用于排序的，不可以查找</p><h3 id="8-7、外部排序"><a href="#8-7、外部排序" class="headerlink" title="8.7、外部排序"></a><strong>8.7、外部排序</strong></h3><p>置换-选择排序用于生成外排序的初始归并段</p><p>初始归并段不定长</p><p>最佳归并树设计m路归并排序的优化方案</p><p>m路平衡归并排序，m个输入缓冲，1个输出缓冲</p><p>为实现输入&#x2F;内部归并&#x2F;输出的并行处理，设置2m个输入缓冲，2个输出缓冲</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/wps4.jpg" alt="img"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理(2)</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20-%20%E5%89%AF%E6%9C%AC%20(2)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言与接口技术</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一、微型计算机概述"><a href="#一、微型计算机概述" class="headerlink" title="一、微型计算机概述"></a>一、微型计算机概述</h1><p>第一章<br>三种总线<br>五种组成部分</p><p>计算机没有时分秒的概念，只有振动的概念</p><h2 id="1-1-微型计算机的概念"><a href="#1-1-微型计算机的概念" class="headerlink" title="1.1 微型计算机的概念"></a>1.1 微型计算机的概念</h2><p>微型计算机是由大规模集成电路组成的、体积较小的电子计算机。</p><p>它是以<strong>微处理器</strong>为基础，配以<strong>内存储器</strong>及<strong>输入输出(I&#x2F;0)接口电路</strong>和相应的辅助电路而构成的裸机。</p><h3 id="1-1-1-特点"><a href="#1-1-1-特点" class="headerlink" title="1.1.1 特点"></a>1.1.1 特点</h3><p>微型计算机的特点：</p><ol><li><p>体积小重量轻</p><p>由于采用大规模集成电路（LSI）和超大规模集成电路（VLSI），使微型机所含的器件数目大为减少，体积大为缩小。50年代需要庞大的计算机实现的功能，在当今，已被内部只含几十片集成电路的微型机所取代。近年来，微型机已从台式发展到便携式及笔记本。</p></li><li><p>价格低廉</p><p>当前，一台PC微型机只需几千元。</p></li><li><p>可靠性高，结构灵活</p><p>由于所含器件数目少，所以连线比较少，这样，微型机的可靠性高，结构灵活方便。</p></li><li><p>应用面广</p><p>现在，微型机不仅占领了原来使用小型机的各个领域，而且广泛应用于过程控制等场合。此外，微型机还进入了过去计算机无法进入的领域，如测量仪器、仪表、教育、医疗和家用电器等。</p></li></ol><h3 id="1-1-2-微型计算机分类"><a href="#1-1-2-微型计算机分类" class="headerlink" title="1.1.2 微型计算机分类"></a>1.1.2 微型计算机分类</h3><p><strong>1 按机器组成分类</strong></p><ul><li>位片式</li><li>单片式</li><li>多片式</li></ul><p><strong>2 按制造工艺分类</strong></p><ul><li>MOS（metal oxide semiconductor）型</li><li>双极性TTL</li></ul><h3 id="1-1-3-微处理器、微型计算机和微型计算机系统的区别"><a href="#1-1-3-微处理器、微型计算机和微型计算机系统的区别" class="headerlink" title="1.1.3 微处理器、微型计算机和微型计算机系统的区别"></a>1.1.3 微处理器、微型计算机和微型计算机系统的区别</h3><p>微处理器：微处理器是微型计算机的核心组成部件</p><p>微型计算机：微处理器配上存储器、系统总线、输入&#x2F;输出接口电路等组成微型计算机</p><p>微型计算机系统：微型计算机配上相应的外围设备、软件、辅助电路等组成微型计算机系统</p><h2 id="1-2-微处理机的产生和发展"><a href="#1-2-微处理机的产生和发展" class="headerlink" title="1.2 微处理机的产生和发展"></a>1.2 微处理机的产生和发展</h2><p>第一代（1971~1973)，4位和低档8位，Intel 4004&#x2F;8008主要用于计算机、家用电器和简单控制</p><p>第二代（1973~1978)，8位，Intel 8080, Motorola MC6800，Z80</p><p>第三代（1978~1984)，16位， Intel 8086, Motorola MC68000IBM首先用Intel的芯片组成个人计算机PC</p><p>第四代（1985~1992)，32位, 80286 &#x2F;80386&#x2F;8048680386是intel的第一个32CPU，80486CPU内部集成了浮点运算部件</p><p>第五代（1993年以后）32&#x2F;64位，pentium II&#x2F;III&#x2F;IV</p><h2 id="1-3-计算机系统的组成"><a href="#1-3-计算机系统的组成" class="headerlink" title="1.3 计算机系统的组成"></a>1.3 计算机系统的组成</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910161412678.png" alt="image-20220910161412678"></p><h3 id="1-3-1-硬件系统"><a href="#1-3-1-硬件系统" class="headerlink" title="1.3.1 硬件系统"></a>1.3.1 硬件系统</h3><p>由冯·诺依曼在1940年最早提出的，各个部件功能如下：</p><ul><li>控制器：发布各种操作命令、控制信号等。</li><li>运算器：主要进行算术和逻辑运算。</li><li>存储器：存储程序、数据、中间结果和运算结果。</li><li>输入&#x2F;输出（I&#x2F;O）接口：原始数据和程序等通过输入接口送到存储器，而处理结果、控制信号等通过输出接口送出。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910161607836.png" alt="image-20220910161607836"></p><h4 id="1-微处理器CPU"><a href="#1-微处理器CPU" class="headerlink" title="1. 微处理器CPU"></a>1. 微处理器CPU</h4><p>CPU在内部结构上包含下面这些部分： </p><ul><li>运算器：算术逻辑部件ALU；</li><li>控制器：时序和控制部件；</li><li>累加器和通用寄存器组；</li><li>程序计数器(指令指针)、指令寄存器和译码器；</li><li>总线接口部件：指令队列缓冲器、存储地址形成部件等</li></ul><p><strong>CPU功能</strong>： </p><ul><li>可以进行算术和逻辑运算</li><li>可保存较少量数据</li><li>能对指令进行译码并执行规定的动作；</li><li>能和存储器、外设交换数据</li><li>提供整个系统所需要的定时和控制</li><li>可以响应其他部件发来的中断请求</li></ul><p>CPU总线包含三种不同功能的总线：</p><ol><li>数据总线DB(data bus)：传输数据</li><li>地址总线AB(address bus)：传送地址信息</li><li>控制总线CB(control bus) ：传输控制信号</li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910161714280.png" alt="image-20220910161714280"></p><h4 id="2-存储器"><a href="#2-存储器" class="headerlink" title="2.存储器"></a>2.存储器</h4><p>用来存储程序、原始数据、中间结果和最终结果<br>目前多由<strong>半导体存储器</strong>组成<br>分为：随机存取型存储器RAM和只读型存储器ROM </p><h4 id="3-输入输出设备"><a href="#3-输入输出设备" class="headerlink" title="3.输入输出设备"></a>3.输入输出设备</h4><p>键盘、显示器、行式打印机、CRT显示设备、盒式磁带机、软硬磁盘、A&#x2F;D与D&#x2F;A转换器等等 </p><h3 id="1-3-2-软件系统"><a href="#1-3-2-软件系统" class="headerlink" title="1.3.2 软件系统"></a>1.3.2 软件系统</h3><p>   软件系统是微型计算机为了方便用户使用和充分发挥微机硬件效能所必备的各种程序的总称。<br>1．系统软件<br>2．程序设计语言<br>3．应用软件</p><h4 id="1、系统软件"><a href="#1、系统软件" class="headerlink" title="1、系统软件"></a>1、系统软件</h4><p><strong>（1）监控程序</strong><br>        又称管理程序，其主要功能是对主机和外部设备的操作进行合理的安排，接收、分析各种命令，实现人机联系</p><p><strong>（2）操作系统</strong><br>操作系统是在监控程序的基础上，由许多控制程序所组成的大型程序系统<br>合理地组织整个计算机的工作流程，管理和调度各种软、硬件资源和软件，检查程序和机器的故障<br>是用户和裸机间的接口 </p><p><strong>（3）语言处理程序</strong><br>   ① 汇编程序<br>把用汇编语言编写的源程序翻译成机器语言表示的目标程序。<br>汇编程序可存放在ROM中，被称为驻留的汇编程序。<br>   ② 解释程序<br>把用某种程序设计语言编写的源程序翻译成机器语言的目标程序，翻译一句就执行一句，边解释边执行。<br>   ③ 编译程序<br>把用高级语言编写的源程序翻译成为机器语言的目标程序<br>编译程序也需经服务程序的加工才能得到可执行的程序文件。<br>（4）服务程序<br>文本编辑程序、连接程序、定位程序、调试程序和排错程序等</p><h4 id="2-程序设计语言"><a href="#2-程序设计语言" class="headerlink" title="2.程序设计语言"></a>2.程序设计语言</h4><p>（1）机器语言<br>机器语言是能够直接被计算机识别和执行的语言<br>用二进制代码编写的代码序列<br>机器语言因难于交流，在实际应用中很不方便，很少直接采用。</p><p>（2）汇编语言<br>用助记符表示的机器语言为汇编语言<br>用助记符指令编写的汇编语言程序（称源程序）<br>将汇编语言源程序翻译成与之对应的机器语言程序（称目标程序），需要用汇编程序。</p><p>（3）高级语言<br>高级语言又称为算法语言。<br>用高级语言编写的源程序需翻译成机器语言表示的目标程序后，计算机才能执行，需要相应的解释程序或编译程序。</p><p>（4）面向对象的语言<br>利用面向对象中的封装、继承、多态等机制，可以提高程序的正确性、易维护性、可读性和可重用性，有利于程序开发中的分工合作。<br>常用的面向对象语言如JAVA、VFP、Visual C、Visual B等。 </p><h4 id="3．应用软件"><a href="#3．应用软件" class="headerlink" title="3．应用软件"></a>3．应用软件</h4><p>  应用软件是用户利用计算机及其所提供的系统软件、程序设计语言为解决各种实际问题而编写的程序。</p><h2 id="1-4-系统总线"><a href="#1-4-系统总线" class="headerlink" title="1.4 系统总线"></a>1.4 系统总线</h2><h3 id="1-4-1-概述"><a href="#1-4-1-概述" class="headerlink" title="1.4.1 概述"></a>1.4.1 概述</h3><p>总线是将信息以一个或多个源部件传送到一个或多个目的部件的一组传输线。 </p><p>一般情况下，可把总线分为：</p><ul><li><strong>内部总线</strong>（简称内总线)：用于连接CPU内部的各个部件（如算术逻辑单元ALU、通用寄存器、专用寄存器等）</li><li><strong>外部总线</strong>（简称外总线或系统总线）：用于连接CPU和各功能部件（如内存、各种外围设备的接口等），系统总线是微机系统中最重要的总线，人们平常所说的微机总线就是指系统总线，如PC总线、AT总线（ISA总线）、PCI总线等。</li></ul><p> 　</p><p>系统总线上传送的信息包括<strong>数据</strong>信息、<strong>地址</strong>信息、<strong>控制</strong>信息，因此，系统总线包含有三种不同功能的总线，即数据总线DB（Data Bus）、地址总线AB（Address Bus）和控制总线CB（Control Bus）。</p><p>数据总线DB用于传送数据信息。数据总线是<strong>双向三态</strong>形式的总线<br>地址总线AB是专门用来传送地址的，由于地址只能从CPU传向外部存储器或I／O端口，所以地址总线总是<strong>单向三态</strong>的，这与数据总线不同。地址总线的位数决定了CPU可直接寻址的内存空间大小。<br>控制总线CB用来传送控制信号和时序信号。控制信号中，有的是微处理器送往存储器和I／O接口电路的，如读／写信号，中断响应信号等，有的是其它部件反馈给CPU的，如中断申请信号、复位信号、总线请求信号、准备就绪信号等。</p><p><strong>三态：高电平、低电平、高阻态（隔离）</strong></p><h3 id="1-4-2-总线技术"><a href="#1-4-2-总线技术" class="headerlink" title="1.4.2 总线技术"></a>1.4.2 总线技术</h3><p>常用的几种微机系统总线技术</p><p>1．ISA总线 　<br>2．EISA总线<br>3．VESA总线<br>4．PCI总线<br>5．Compact PCI 　　</p><h1 id="二、80X86微处理器"><a href="#二、80X86微处理器" class="headerlink" title="二、80X86微处理器"></a>二、80X86微处理器</h1><p>第二章<br>8086那个图EU\BIU<br>标志寄存器3个控制标志不重要，6个状态标志<br>管脚图、多少个管脚、NMI，复用都不考、最大都不考、M&#x2F;IO<br>补充知识考<br>25页最小工作模式下的图<br>33页基本概念<br>48页存储器组织</p><p>16位微处理器</p><p>16根数据线，20跟地址线</p><h2 id="2-1-8086微处理器"><a href="#2-1-8086微处理器" class="headerlink" title="2.1 8086微处理器"></a>2.1 8086微处理器</h2><h3 id="2-1-1-8086内部结构"><a href="#2-1-1-8086内部结构" class="headerlink" title="2.1.1 8086内部结构"></a>2.1.1 8086内部结构</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164044021.png" alt="image-20220910164044021"> </p><p>从功能上，8086分为两部分，即<br> 1.总线接口单元(bus interface unit，BIU)<br> 2.执行部件(execution unit，EU)</p><p>在8086中，由于BIU和EU是分开的，所以取指和执行可以重叠进行。BIU负责取指令，EU负责执行，提高了CPU的利用率。</p><h4 id="1-总线接口部件BIU"><a href="#1-总线接口部件BIU" class="headerlink" title="1. 总线接口部件BIU"></a>1. 总线接口部件BIU</h4><p>BIU负责CPU与存储器之间的信息传送。</p><p>BIU负责从内存的指定单元取出指令，送至指令流队列中排队（8086的指令流队列是6个字节）；在执行指令时所需的操作数，也由BIU从内存的指定区域取出，传送至EU.</p><p>由下列3部分组成：</p><ol><li><p>指令队列缓冲器<br>作用：暂存指令<br>由6个8位寄存器组成，最多可保存6B的指令码，采用“先进先出”原则</p></li><li><p>16位的指令指针寄存器(IP Instruction Pointer)<br>总是保存EU要执行的<strong>下一条指令的偏移地址</strong><br>IP不能直接由程序进行存取，但可以进行修改</p></li><li><p>地址产生器和段寄存器<br>因为IP和通用寄存器只有16位，编址范围为64KB，而8086访存空间为1MB，因此设置产生20位实际地址，PA（物理地址）的地址产生器机构。</p><ul><li>4个段地址寄存器（CS、DS、ES、SS）：存放各种段的首地址</li><li>20位的地址加法器，如右图<br>产生执行指令的地址，PA就将IP中的16位指令指针与代码段寄存器左移4位后的内容在地址产生器中相加。<br>产生某一操作数的PA，首先由ALU计算出该操作数的16位偏移地址（EA），然后在地址产生器中与数据段寄存器左移4位后的内容相加。<br>PA的计算公式：PA &#x3D; (段首址 X 16) + 偏移地址<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164222567.png" alt="image-20220910164222567"></li></ul></li><li><p>总线控制逻辑<br>8086的引脚线比较紧张，<br>用20条总线，传送16位数据信号D<sub>0</sub>~D<sub>15</sub>、20位地址信号A<sub>0</sub> ~A<sub>19</sub>和4位状态信号S<sub>3</sub> ~ S<sub>6</sub><br>采用分时传送</p></li></ol><h4 id="2-执行部件-EU"><a href="#2-执行部件-EU" class="headerlink" title="2. 执行部件 EU"></a>2. 执行部件 EU</h4><p>执行部件负责指令的执行 ，</p><p>由下列5部分组成：</p><ol><li><p>通用寄存器组</p><ul><li><p>4个通用寄存器，即AX、BX、CX、DX</p></li><li><p>4个专用寄存器，即</p><ul><li><p>堆栈指针寄存器SP(stack pointer)：用于堆栈操作，给出栈顶的偏移量</p></li><li><p>基址指针寄存器BP（base pointer）：存放位于堆栈段中的一个数据区基址的偏移量</p></li><li><p>目的变址寄存器DI(destination index)：存放目标操作数地址的偏移量</p></li><li><p>源变址寄存器SI(source index)：存放源操作数地址的偏移量<br>偏移量是相当于段起始地址（段首址）的距离</p></li></ul></li></ul></li><li><p>状态标志寄存器（flag寄存器）（FLAGS）<br>字长16位，存放ALU运算结果的特征状态，或存放一些控制标志</p></li><li><p>算术逻辑部件ALU(arithmetic logic unit)。<br>进行算术逻辑运算<br>按指令寻址方式计算寻址单元16位的偏移地址EA（Effect Address），并将EA送到BIU形成一个20位的实际地址（Physical Address, PA)，以对1MB的存储空间进行寻址</p></li><li><p>EU控制单元<br>接收从BIU指令队列中送出的指令码，并经过译码，形成完成该指令所需的各种控制信号，控制EU的各个部件在规定时间完成规定的操作</p></li><li><p>暂存寄存器<br>协助ALU进行各种运算，对数据进行暂存</p></li></ol><h3 id="2-1-2-寄存器组"><a href="#2-1-2-寄存器组" class="headerlink" title="2.1.2 寄存器组"></a>2.1.2 寄存器组</h3><p>1、通用寄存器<br>    ① 数据寄存器 :AX、BX、CX、DX<br>    ② 变址和指针寄存器 ：SP、BP、SI、DI<br>2、段寄存器 CS、DS、SS、ES<br>3、状态标志寄存器FLAGS<br>4、指令指针寄存器IP</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164305955.png" alt="image-20220910164305955"> </p><h4 id="1、通用寄存器"><a href="#1、通用寄存器" class="headerlink" title="1、通用寄存器"></a>1、通用寄存器</h4><p>作用：存放操作数和指针</p><ul><li>AX：操作数和结果的累加器</li><li>BX：在DS段中数据的指针</li><li>CX：串和循环操作的计数器</li><li>DX：I&#x2F;O指针</li><li>SP：堆栈指针（在SS段中）<ul><li>与段寄存器SS一起确定在堆栈操作时堆栈在内存中的位置</li></ul></li><li>BP：堆栈上数据指针（在SS段中）<ul><li>寻址堆栈操作数时，是寻址堆栈段。</li></ul></li><li>SI：指向DS寄存器段中的数据指针、串操作的源指针</li><li>DI：指向ES寄存器段中的数据（目标）的指针、串操作的目标指针</li></ul><p>前四种属于数据寄存器，存放操作数。又可分为AH,BH,CH,DH（高字节）和AL,BL,CL,DL（低字节）等8位寄存器使用</p><p>SP和BP都用来只是位于当前堆栈段中数据的偏移地址，称为指针寄存器。<br>SP指示入栈指令（PUSH）和出栈指令（POP）操作时栈顶的偏移地址，称为堆栈指针寄存器<br>BP指示存放于堆栈段中的一个数据区基址的偏移地址，故称为基址指针寄存器。</p><p>SI和DI用来存放当前数据段中数据的偏移地址，称为变址寄存器。<br>SI存放源操作数地址的偏移量，称为源变址寄存器<br>DI存放目标操作数地址的偏移量，称为目的变址寄存器。<br>例如：在数据串操作指令中，被处理的源数据串的偏移地址放入SI，而处理后得到的结果数据串的偏移地址放入DI。</p><h4 id="2、段寄存器"><a href="#2、段寄存器" class="headerlink" title="2、段寄存器"></a>2、段寄存器</h4><p>作用：存放段首地址</p><p>8086运行一个汇编语言程序需要用到4个现行段，<br>代码段存放程序的代码<br>数据段用来存放当前使用的数据<br>堆栈段为入栈出栈数据提供存放空间<br>附加段存放处理后的结果数据</p><p>段寄存器（CS、DS、SS、ES）保留16位段选择子。一个段选择子是标志内存中一个段的特殊指针。为访问在内存中的具体段，此段的段选择子必须存在于适当的段寄存器中。</p><h4 id="3-状态标志（FLAGS）寄存器"><a href="#3-状态标志（FLAGS）寄存器" class="headerlink" title="3 状态标志（FLAGS）寄存器"></a>3 状态标志（FLAGS）寄存器</h4><p>标志寄存器共有16位，9个作为标志位（6个状态标志位，3个控制标志位）其中7位未用，所用的各位含义如下：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164329385.png" alt="image-20220910164329385"></p><p><strong>状态标志</strong>有6个，即SF、ZF、PF、CF、AF和OF </p><ol><li>进位标志CF(carry flag) ：若CF&#x3D;1，表示结果的最高位产生一个进位或借位,无符号数</li><li>奇偶标志PF(parity flag) ：如果运算结果的低8位中所含的1的个数为偶数，则PF为1，否则为0</li><li>辅助进位标志AF (auxiliary carry flag) ：若AF&#x3D;1，表示结果的低4位产生一个进位或借位</li><li>零标志ZF(zero flag)：如果当前的运算结果为0，则零标志为1；否则为0</li><li>符号标志SF(sign flag ) ：它和运算结果的最高位相同。当数据用补码表示时，最高位表示符号位。运算结果为负时，其最高位为1，则SF&#x3D;1；运算结果为正时，则SF&#x3D;0</li><li>溢出标志OF(overflow flag) ：若OF&#x3D;1，表示产生了溢出。溢出，对于8位符号数来说，就是超出了-128~+127；对16位符号数来说，就是超出了-32768 ~ +32767</li></ol><p><strong>控制标志</strong>有3个，即 </p><ol><li>方向标志DF(direction flag) ：用于控制串操作指令的标志。如果DF&#x3D;0，则串操作过程中的地址会不断增加；反之DF&#x3D;1，地址会不断减少</li><li>中断允许标志IF(interrupt enable flag) ：用于控制可屏蔽中断的标志。如果IF&#x3D;0，CPU不能对可屏蔽中断作出响应；如果IF&#x3D;1，CPU可以接受可屏蔽中断请求</li><li>跟踪标志TF(trap flag)：又称为单步标志。如果TF&#x3D;1，则CPU按跟踪方式执行指令。</li></ol><p>溢出OF和进位CF</p><p>计算规则：相同符号位相加得到不同符号位结果，溢出<br>                    相加有进位，就是进位</p><p>两个数字相加，按无符号位计算，超出范围，进位，不超出，不进位<br>                           按有符号位计算，超出范围，溢出，不超出，不溢出。</p><p>3AH ＋ 7CH ＝ B6H ，无符号数运算： 58 ＋ 124 ＝ 182 ，范围内，无进位；有符号数运算： 58 ＋ 124 ＝ 182 ，范围外，有溢出。AAH ＋ 7CH ＝（ 1 ） 26H ，无符号数运算： 170 ＋ 124 ＝ 294 ，范围外，有进位；有符号数运算：－ 86 ＋ 124 ＝ 38 ，范围内，无溢出。</p><p><strong>补充知识：</strong>电平触发和边沿触发</p><p>​    电平触发是在高或低电平保持的时间内触发，而边沿触发是由高到低或由低到高这一瞬间触发</p><p>　　在数字电平变化的电压上升沿或下降沿到一定阀值时就产生触发，是谓边沿触发。当电压达到数字电平的高或低电压一段时间后（一般是最小脉冲宽度的三分之一），才产生触发是电平触发。</p><p>​    边沿触发一般时间短，边沿触发一般时间都是us级的，响应要快的，而电平触发只须是高和低就可以了，没时间要求，比如10s 时间内总是低电平，那么它也是触发的，比如中断计时或计数，最好用边沿触发，用电平触发误差会很大，电平触发一般用于简单报警，开关一类（时间要求不高的）</p><p>​    边沿触发和电平触发基本就是触发器和锁存器的区别。</p><p>　　触发器是边沿触发，只有当时钟上升（或下降）的一瞬间，触发器会读取并锁存输入信号。输出信号仅在时钟信号上升（或下降）的一瞬间会发生变化。</p><p>　　锁存器是电平触发，只要使能（enable）信号处于高电平（或低电平），输出就会随着输入信号变化，直到使能信号变为低电平（或高电平）时，输出才会锁存，不再随输入变化。</p><h4 id="4-指令指针寄存器"><a href="#4-指令指针寄存器" class="headerlink" title="4 指令指针寄存器"></a>4 指令指针寄存器</h4><p>IP是16位的寄存器，存放EU要执行的下一条指令的偏移地址。当BIU从代码段取出指令字节后，IP自动加1，又指向下一条指令的偏移地址，以实现对代码段指令的跟踪。</p><h3 id="2-1-3-引脚信号及功能"><a href="#2-1-3-引脚信号及功能" class="headerlink" title="2.1.3 引脚信号及功能"></a>2.1.3 引脚信号及功能</h3><p>由于芯片引脚线的数量不能太多，因此对部分引脚采用了分时复用的方式，构成40条引脚的双列直插式封装。</p><p>8086CPU具有两种工作模式（最小模式和最大模式），8条引脚（24~31）在两种模式中有不同的功能。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164415919.png" alt="image-20220910164415919"></p><p>各引脚信号：</p><ol><li>AD<sub>15</sub>~AD<sub>0</sub>分时复用的地址数据线，传送地址时三态输出，传送数据时双向三态输入输出。</li><li>A<sub>19</sub>&#x2F;S<sub>6</sub>~A<sub>16</sub>&#x2F;S<sub>3</sub>分时复用的地址状态线。作地址线用时，A<sub>19</sub> ~ A<sub>16</sub> 与AD<sub>15</sub> ~AD<sub>0</sub>一起构成访问存储器的20位物理地址。</li><li>$\overline{BHE}$&#x2F;S7 ：总线高字节有效信号，三态输出，低电平有效，用来表示当前高8位数据总线上的数据有效。读&#x2F;写存储器或I&#x2F;O端口以及中断响应时，$\overline{BHE}$用来作为选择存储体信号，与最低位地址码A<sub>0</sub>配合表示当前总线使用情况。非数据传送期间，输出S<sub>7</sub>状态信息</li><li>$\overline{RD}$：读信号，三态输出，低电平有效</li><li>$\overline{WR}$：写信号，三态输出，低电平有效</li><li>${M&#x2F;}\overline{IO}$：存储器或I&#x2F;O端口访问信号。高电平，CPU访问存储器；低电平，访问I&#x2F;O端口</li><li>READY：准备就绪信号，外部输入，高电平有效</li><li><strong>INTR：中断请求信号，外部输入，电平触发，高电平有效</strong>可屏蔽中断</li><li>$\overline{INTA}$：中断响应信号，向外部输出，低电平有效</li><li>NMI：不可屏蔽中断请求信号，外部输入，边沿触发，上升沿有效。</li><li>$\overline{TEST}$：测试信号，外部输入。</li><li>RESET：复位信号，外部输入，高电平有效</li><li>ALE：地址锁存允许信号，向外部输出，高电平有效</li><li>DT&#x2F;$\overline{R}$：数据发送&#x2F;接受控制信号，三态输出。</li><li>$\overline{DEN}$：数据允许信号，三态输出，低电平有效</li><li>HOLD：总线请求信号，外部输入，高电平有效。</li><li>HLDA：总线响应信号，向外部输出，高电平有效。</li><li>MN&#x2F;$\overline{MX}$：工作模式选择信号，外部输入。</li><li>CLK：主时钟信号，有8284时钟发生器输入。</li><li>V<sub>CC</sub>：电源，8086CPU只需要单一的+5V电源，由V<sub>CC</sub>输入</li></ol><h4 id="1-最小模式下的引脚"><a href="#1-最小模式下的引脚" class="headerlink" title="1. 最小模式下的引脚"></a>1. 最小模式下的引脚</h4><p>引脚信号：<br>① INTA＃中断响应信号输出<br>② ALE地址锁存允许信号输出<br>③ DEN＃数据允许信号<br>④ DT&#x2F;R＃数据收发信号输出<br>⑤ M&#x2F;IO＃存储器&#x2F;输入输出控制信号输出<br>⑥ WR＃写信号输出<br>⑦ HOLD总线保持请求信号输入<br>⑧ HLDA总线保持响应信号输出 </p><h3 id="2-1-4-工作模式"><a href="#2-1-4-工作模式" class="headerlink" title="2.1.4 工作模式"></a>2.1.4 工作模式</h3><p>最小模式和最大模式的概念<br>    (1)最小模式:在系统中只有一个微处理器。<br>    (2)最大模式:两个或多个微处理器（主处理器、协处理器） </p><p>在实际使用8086微处理器时，还必须配有时钟发生器（8284A）、地址锁存器（8282）和总线驱动器（8286）<br>时钟发生器（8284A）：提供系统时钟信号，还提供经时钟同步的复位信号RESET及就绪信号READY。<br>地址锁存器锁存地址，在总线周期的第一个时钟周期内将地址锁存起来<br>8286是双向的具有缓冲能力的数据收发器，主要是提升8086系统数据总线的驱动能力，并提供以一种在多主控制系统应用环境下的控制手段。<br>8288：在最大工作模式中产生定时总线命令和总线控制信号</p><h4 id="1-8284A时钟信号发生器"><a href="#1-8284A时钟信号发生器" class="headerlink" title="1. 8284A时钟信号发生器"></a>1. 8284A时钟信号发生器</h4><p>8284A根据使用的振荡源的不同，有两种不同的连接方法</p><p>（1）脉冲发生器做振荡源时，只要将该发生器的输出端与8284A的EFI端相连即可</p><p>（2）更为常用的方法是采用晶体振荡器作为振荡源，这时，需将晶体振荡器的两端接到8284A的X1和X2上。 </p><h4 id="2-总线周期"><a href="#2-总线周期" class="headerlink" title="2. 总线周期"></a>2. 总线周期</h4><p>（1）<strong>总线周期</strong>：CPU访问（读或写）一次存储器或I&#x2F;O接口所花的时间。一个最基本的总线周期由4个时钟周期组成，习惯上称4个状态，即T1,T2,T3,T4状态。只有在CPU和内存或I&#x2F;O端口之间传递数据以及取指令时，CPU才执行总线周期。 </p><p>（2）<strong>时钟周期</strong>：CPU 的基本时间计量单位，它由计算机主频决定。8086主频是5MHz，一个时钟周期就是200ns。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164640497.png"> </p><p>（3）空闲周期：如果在一个总线周期之后，不立即执行下一个总线周期，则系统总线就处于空闲状态，此时执行空闲周期Ti。<br>（4）指令周期：就是计算机完成对一条指令的读取并执行这一系列步骤所需要的时间。<br>一个指令周期包含一个或几个总线周期。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164742776.png" alt="image-20220910164742776"></p><p>例如，执行一条8位寄存器乘法（MUL），这是一条两字节指令，大约需70－77个时钟周期的执行时间。 </p><h4 id="3-最小模式下的系统总线"><a href="#3-最小模式下的系统总线" class="headerlink" title="3. 最小模式下的系统总线"></a>3. 最小模式下的系统总线</h4><p>20条地址线用3片8282（或3片74LS373）锁存器形成</p><p>双向数据总线根据其宽度选用一片或二片三态门驱动器8286形成</p><p>控制总线由CPU直接提供</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220910164546046.png" alt="image-20220910164546046"></p><h3 id="2-1-5-总线操作和时序"><a href="#2-1-5-总线操作和时序" class="headerlink" title="2.1.5 总线操作和时序"></a>2.1.5 总线操作和时序</h3><p>一个微型机系统在运行中需要CPU执行许多操作。</p><p>8086的主要操作: </p><p>① 系统的复位和启动操作；<br>② 暂停操作；<br>③ 总线操作；<br>④ 中断操作；<br>⑤ 最小模式下的总线保持；<br>⑥  最大模式下的总线请求&#x2F;允许。</p><h4 id="1-系统的复位和启动操作"><a href="#1-系统的复位和启动操作" class="headerlink" title="1. 系统的复位和启动操作"></a>1. 系统的复位和启动操作</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090533406.png" alt="image-20220911090533406"></p><p> 复位时各内部寄存器的值</p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>标志寄存器</td><td>清零</td></tr><tr><td>指令指针（IP）</td><td>0000H</td></tr><tr><td>CS寄存器</td><td>FFFFH</td></tr><tr><td>DS寄存器</td><td>0000H</td></tr><tr><td>SS寄存器</td><td>0000H</td></tr><tr><td>ES寄存器</td><td>0000H</td></tr><tr><td>指令队列</td><td>空</td></tr><tr><td>其它寄存器</td><td>0000H</td></tr></tbody></table><h4 id="2-总线操作"><a href="#2-总线操作" class="headerlink" title="2. 总线操作"></a>2. 总线操作</h4><p>最小方式下的总线读操作<br>最小方式下的总线写操作<br>最大模式下的总线读操作<br>最大模式下的总线写操作</p><p>（1）最小方式下的总线读操作</p><p>下图为CPU从存储器或I&#x2F;O端口读取数据的时序。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090631437.png" alt="image-20220911090631437"></p><p>1）T1状态</p><p>2）T2状态</p><ul><li>总线上输出的地址信号消失，此时，AD<sub>0</sub> ~ AD<sub>15</sub>进入浮空状态，作为一个缓冲期，以便将总线传输方向由输出地址转为读入数据</li><li>A<sub>19</sub>&#x2F;S<sub>6</sub> ~ A<sub>16</sub>&#x2F;S<sub>3</sub> 及$\overline{BHE}$线开始输出状态信号S<sub>7</sub> ~ S<sub>3</sub>，并持续到T<sub>4</sub>状态。其中的S<sub>7</sub>未赋实际意义</li><li>$\overline{DEN}$信号为低电平（有效），用来开放总该你收发器8286.持续要T4中期</li><li>$\overline{RD}$信号为低电平（有效），此信号被接到系统中所有存储器和I&#x2F;O接口芯片，用来开放数据输出缓冲器，以便将数据输出至数据总线</li><li>DT&#x2F;$\overline{R}$：继续保持低电平，维持8286为接受数据状态</li></ul><p>3）T3状态 </p><p>4）T4状态 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090641843.png" alt="image-20220911090641843"></p><p>（3）最小模式下的总线保持 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090715671.png" alt="image-20220911090715671"> </p><h2 id="2-2-32位微处理器"><a href="#2-2-32位微处理器" class="headerlink" title="2.2 32位微处理器"></a>2.2 32位微处理器</h2><h3 id="2-2-1-32位微处理器内部结构"><a href="#2-2-1-32位微处理器内部结构" class="headerlink" title="2.2.1 32位微处理器内部结构"></a>2.2.1 32位微处理器内部结构</h3><p>1、80386内部主要组成<br>总线接口部件（BIU）<br>中央处理部件（CPU)<br>存储器管理部件(MMU) </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090757700.png" alt="image-20220911090757700"> </p><p>（1）总线接口部件（BIU）<br>     通过Dbus、Abus、Cbus完成与微处理器外部的联系，包括访问存储器预取指令、存储器数据读写、I&#x2F;O端口数据读写等操作控制功能。<br>（2）中央处理部件（CPU）:各部件以并行方式进行工作<br>代码预取部件：暂存从存储器中预取的代码，又称为预取指令队列<br>指令译码部件：对预取指令队列中的指令进行译码，译码后送入译码指令队列等待执行。<br>预译码时若发现为转移指令，则提前通知总线接口部件去取目标地址中的指令代码并取代原预取指令队列中的顺序指令代码，从而提高效率。<br>控制部件：控制部件根据指令代码产生工作时序 </p><p>―指令执行部件：完成指令代码的执行<br>一个32位的算术运算单元（ALU）<br>8个32位的通用寄存器，<br>1个快速乘、除运算服务的64位移位寄存器<br>（3）存储器管理部件（MMU）<br>分段部件<br>分页部件<br>存储器采用段、页式结构<br>4KB为一页，程序或数据以页为单位存储。<br>存储器按段组织，最大4096MB。<br>一个任务最多可含16K段，最大64TB<br>存储结构中还采用了高速缓冲存储器（Cache） </p><p>2、80486微处理器<br>变化：<br>沿袭80386的体系结构<br>内含高速缓存和浮点处理器<br>面向多处理器的结构<br>具体结构<br>总线接口、预取指令、指令译码、执行、控制、内存管理、高速缓存和浮点运算单元（FPU）<br>基本指令用硬件逻辑执行，内含128位总线<br>高速缓存和FPU之间用两条32位总线直接相连<br>四路成组联想高速缓存 </p><p>1、80386内部寄存器</p><p>通用寄存器<br>段寄存器组<br>专用寄存器组<br>控制寄存器组<br>系统地址寄存器组<br>调试寄存器组<br>测试寄存器组</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090843423.png" alt="image-20220911090843423"> </p><p>1.通用寄存器 </p><p>​8个32位通用寄存器，可以作为16位用<br>​      EAX      EBX<br>​      ECX      EDX<br>​      ESI      EDI<br>​      EBP      ESP</p><p>2.段寄存器组</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090915005.png" alt="image-20220911090915005"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090931957.png" alt="image-20220911090931957"> </p><p>3.专用寄存器组</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911090945405.png" alt="image-20220911090945405"> </p><p>4.控制寄存器</p><p>CR0：该寄存器目前仅用了低4位作为机器状态字，各位定义如下：<br>保护允许位PE：<br>PE&#x3D;0，处于实地址方式；<br>PE&#x3D;1，进入保护虚地址方式。<br>任务切换位 TS、仿真协处理器位EM、监控协处理器位MP为组合应用。<br>TS，EM，MP&#x3D;000，处于实地址方式，当前复位后的初始状态<br>TS，EM，MP&#x3D;001，有协处理器80387，不需要软件仿真。<br>TS，EM，MP&#x3D;010，无协处理器80387，要求用软件仿真。<br>TS，EM，MP&#x3D;101，有协处理器，不需软件仿真，产生任务切换。<br>TS，EM，MP&#x3D;110，无协处理器80387，要求用软件仿真，产生任务切换。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091008480.png" alt="image-20220911091008480"></p><p>CR0：该寄存器目前仅用了低4位作为机器状态字，各位定义如下<br>处理器扩展类型位ET ：<br>ET＝1，采用与80387兼容的32位规程。<br>ET＝0，采用与80287兼容的16位规程。<br>分页允许位PG:<br>PG&#x3D;1，允许片内分页部件工作。<br>PG&#x3D;0，禁止分页部件工作。<br>CR1：保留，为将来开发的Intel微处理器使用。<br>CR2：包含一个32位的线性地址，指向页故障地址。<br>CR3的功能：包含页目录表的物理地址 </p><p>5.系统地址寄存器 </p><p>​系统地址寄存器有4个<br>GDTR全局描述符表寄存器<br>存放全局描述符表的32位线性基地址和16位界限值。<br>IDTR中断描述符表寄存器<br>​    存放中断描述符表的32位线性基地址和16位界限值。<br>LDTR局部描述符表寄存器<br>​    存放局部描述符表的16位段选择符。<br>TR任务状态寄存器<br>   存放任务状态段表的16位段选择符。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091034181.png" alt="image-20220911091034181"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091053421.png" alt="image-20220911091053421"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091103212.png" alt="image-20220911091103212"></p><p>6.调试寄存器</p><p>调试寄存器：DR0~DR7<br>DR0，DR1，DR2，DR3：用户设置的程序断点地址。<br>DR6：用户调试时的断点状态值。<br>DR7：用户设置的断点控制。<br>DR4，DR5：保留寄存器。<br>测试寄存器：<br>      测试命令寄存器：TR6<br>      数据寄存器：TR7</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091118050.png" alt="image-20220911091118050"></p><p>7.测试寄存器 </p><p>测试寄存器： 8个32位寄存器<br>TR0~ TR5：为保留寄存器。<br>TR6、TR7：测试寄存器，用来测试转换后备缓冲区TLB。其中，<br>TR6：测试命令寄存器，用于对TLB进行测试。<br>TR7：用于保存测试TLB后的结果。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091141341.png" alt="image-20220911091141341"></p><p>2、 80486的内部寄存器组</p><p>80486寄存器在80386的基础上增加了以下功能：<br>（1）控制寄存器CR3中新定义了两位，即PCD（D4位）和PWT（D3位）。<br>PCD（page cache enable ）页面高速缓存使能位<br>PWT（page write-through ）页面透写<br>（2）在控制寄存器CR0中增加了新的页面保护特性。<br>（3）标志寄存器中，增加了新的对界检查特性。<br>（4）增加了三个用于测试片上超高速缓存的新的可测试寄存器TR3 、TR4、 TR5，增强了TLB的可测试性。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091201606.png" alt="image-20220911091201606"> </p><p>1、时钟信号 CLK<br>2、地址总线（A2<del>A31，BE0#</del>BE3#）<br>3、数据总线（D0<del>D31）<br>4、奇偶校验（DP0</del>DP3， PCHK#<br>5、总线周期的定义信号<br>6、总线控制信号：ADS#、RDY＃<br>7、成组控制信号：BRDY＃、BLAST＃<br>8、高速缓存控制信号：KEN＃、FLASH＃<br>9、高速缓存的无效性控制 ：AHOLD、EADS<br>10、页面高速缓存控制PWT、 PCD</p><p>11、数据出错报告信号：FERR＃、 IGNNE＃<br>12、地址位20的屏蔽 ：AM20＃<br>13、总线仲裁信号：BREQ、HOLD、HLDA、BOFF＃<br>14、总线大小控制信号 BS8＃、BS16＃<br>15、中断信号  INTR、 NMI<br>16、RESET</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220911091226516.png" alt="image-20220911091226516"> </p><p>32位微处理器工作模式</p><p>实地址方式(real address mode)<br>保护地址方式<br>    (protected virtual address mode)<br>虚拟地址方式(virtual 8086 mode) </p><p>32位微处理器总线操作</p><p>80486CPU使用总线周期来完成对存储器和I&#x2F;O接口的读写操作以及中断响应，每个总线周期与三组信号有关。分别是：M&#x2F;IO# 、W&#x2F;R# 、D&#x2F;C# 为周期定义信号，它们决定了总线周期的操作类型和操作对象；A2～A31、BE0# ～ BE3#为地址信号；ADS为地址状态信号，它决定CPU什么时候启动新的总线周期并使地址信号有效。</p><h2 id="2-3-80X86存储器组织"><a href="#2-3-80X86存储器组织" class="headerlink" title="2.3 80X86存储器组织"></a>2.3 80X86存储器组织</h2><h3 id="2-3-1、存储器标准结构"><a href="#2-3-1、存储器标准结构" class="headerlink" title="2.3.1、存储器标准结构"></a>2.3.1、存储器标准结构</h3><p>8086系统中1M字节的存储器地址空间实际上分成两个512K字节的存储体——“偶存储体”和“奇存储体”，偶存储体同8086的低8位数据总线D0~D7相连，奇存储体同8086的高8位数据线D8 ~D15相连，地址总线的A1 ~ A19同两个存储体中的地址线A0 ~ A18相连，最低位地址线A0和“总线高允许“BHE用来分别选择偶存储体和奇存储体。这种连接方法称为“奇偶分体”。</p><p>存放字时，其低位字节可从奇数地址开始，也可从偶数地址开始；前一种称非规则存放，后一种称规则存放。对规则字的存取可在一个总线周期完成，对非规则字的存取则需两个总线周期完成。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221116150110064.png" alt="image-20221116150110064"> </p><p>•奇地址：最低存储单元地址为奇数——即地址最低位 A0 &#x3D; 1</p><p>•偶地址：最低存储单元地址为偶数——即地址最低位 A0 &#x3D; 08086 每个周期可以访问 16 位信息</p><p>•偶地址存储时：一个 16 位字数据，高 8 位存储在奇存储体，低 8 位存储在偶存储体。奇地址存储时：相反。</p><p>•在读或写字数据时，偶地址存储方式：可以在一个总线周期完成读写。奇地址存储方式：读写时则有一个字节交换过程，也就是要用数据总线的高 8 位去读写字数据的低 8 位(低8位为奇数地址，保存在奇存储器中，奇存储器和数据总线高八位相连)，再用数据总线的低 8 位读写字数据的高 8 位，需要两个总线周期才能完成一个字数据的读写。</p><h3 id="2-3-2、存储器分段"><a href="#2-3-2、存储器分段" class="headerlink" title="2.3.2、存储器分段"></a>2.3.2、存储器分段</h3><p>•分段就是把1MB空间分为若干逻辑段，每段最多可含64KB的连续存储单元。每个段的首地址是一个被16整除的数（即最后4位为0），首址是用软件设置的。</p><p>•段寄存器为16位，而段首地址实际为20位，由于规定段首地址的最后四位始终为0，故将段的首地址右移四位后保存到对应的段寄存器（CS，DS，SS，ES）中。</p><p>•运行一个程序所用的具体存储空间可以为一个逻辑段，也可为多个逻辑段。段和段之间可以是连续的、断开的、部分重叠的或完全重叠。</p><p>存储器采用分段编址方法进行组织，带来的好处如下：</p><p>•指令中只涉及16位地址（首地址或在段中的偏移量），缩短了指令长度，从而提高了执行程序的速度。</p><p>•尽管存储空间多达1MB，但程序执行过程中不需要在1MB的大空间中去寻址，多数情况下只需在一个较小的段中运行。</p><p>•多数指令的运行都不涉及段寄存器的值，而只涉及16位的偏移量，故分段组织存储也为程序的浮动装配创造了条件。</p><p>•程序设计者不用为程序装配在何处而去修改指令，统一由操作系统去管理就行了。</p><h3 id="2-3-3、实际地址和逻辑地址"><a href="#2-3-3、实际地址和逻辑地址" class="headerlink" title="2.3.3、实际地址和逻辑地址"></a>2.3.3、实际地址和逻辑地址</h3><ul><li>实际地址，或称物理地址，是指CPU和存储器之间进行数据交换时使用的地址。对8086来说，是用20位二进制或5位十六进制表示的地址码，是唯一能代表存储空间每个单元的地址</li><li>逻辑地址是指产生实际地址所产生的两个地址分量：段首地址和偏移量，它们都是<strong>无符号的16位二进制数或4位十六进制数</strong>表示的地址代码</li><li>有效地址和偏移地址，都相当于偏移量</li></ul><blockquote><p>注意：偏移地址和段首址都称为逻辑地址。一个存储单元只有唯一编码的实际地址，而一个实际地址可以对应多个逻辑地址</p></blockquote><h3 id="2-3-4、堆栈"><a href="#2-3-4、堆栈" class="headerlink" title="2.3.4、堆栈"></a>2.3.4、堆栈</h3><p>•为了暂存一批需要回避的数值数据或地址数据，而特别划分出来一段存储区。该存储区中，存储数据按“后进先出”原则进行。</p><p>•堆栈段中存取数据的地址由堆栈段寄存器SS和堆栈指针SP来规定。SS中存放堆栈段的首地址，SP中存放栈顶的地址，此地址表示栈顶离段首址的偏移量，存取数据都在栈顶进行。</p><h1 id="三、80X86指令系统和寻址方式"><a href="#三、80X86指令系统和寻址方式" class="headerlink" title="三、80X86指令系统和寻址方式"></a>三、80X86指令系统和寻址方式</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><h3 id="3-1-1-指令"><a href="#3-1-1-指令" class="headerlink" title="3.1.1 指令"></a>3.1.1 指令</h3><p><strong>定义：</strong>计算机能够识别和执行的指挥计算机进行操作的命令。</p><p><strong>表示方式</strong>：<code>操作码 操作数</code></p><p>​操作码：说明指令的操作</p><p>​操作数：操作的数据或数据来源</p><p><strong>例</strong>：要将数据段1234H单元中的内容传送到AL</p><p><code>MOV AL,[1234H] </code></p><h3 id="3-1-2-操作数"><a href="#3-1-2-操作数" class="headerlink" title="3.1.2 操作数"></a>3.1.2 操作数</h3><p><strong>操作数</strong>：指令的操作对象。</p><p><strong>源操作数</strong>：指明指令操作数据的来源。</p><p><strong>目的操作数</strong>：指明操作结果的保存地。</p><p><strong>例子</strong>：</p><p>将数据段1234H单元中的内容传送到AX中</p><p><code>MOV AX, [1234H]; AX⬅(1234H)</code></p><p><strong>几点说明：</strong><br>① 一条指令可以包含一个操作数，也可以包含一个以上的操作数；<br>    一个操作数的指令称为单操作数指令，单操作数指令中的操作数可能由指令本身提供，也可能由指令隐含地指出。<br>② 若位移量或立即数为16位，那么在指令代码中，将<strong>低位字节放在前面</strong>，高位字节放在后面。<br>③ 8086指令系统中大多数指令的操作码只占用第一个字节，但有几条指令是特殊的，其指令中的第一个字节不但包含操作码成分，而且还隐含地指出了寄存器名，从而整个指令只占一个字节，成为单字节指令。这些指令字节数最少，执行速度最快，用得也最频繁。</p><h3 id="3-1-3-指令的执行时间"><a href="#3-1-3-指令的执行时间" class="headerlink" title="3.1.3 指令的执行时间"></a>3.1.3 指令的执行时间</h3><ul><li>指令执行时间取决于<strong>时钟周期</strong>长短和执行指令所需要的<strong>时钟周期数</strong>。</li><li>执行一条指令所需的总时间为<strong>基本执行时间</strong>、<strong>计算有效地址</strong>的时间和为了读取操作数和存放操作结果<strong>需访问内存的时间</strong>之和。</li></ul><h3 id="3-1-4-寻址方式"><a href="#3-1-4-寻址方式" class="headerlink" title="3.1.4 寻址方式"></a>3.1.4 寻址方式</h3><ul><li>数据寻址方式：是指获取指令所需的操作数或操作数地址的方式</li><li>程序寻址方式：是指程序中出现转移和调用时的程序定位方式</li></ul><h4 id="1、数据寻址方式"><a href="#1、数据寻址方式" class="headerlink" title="1、数据寻址方式"></a>1、数据寻址方式</h4><p>8086指令中所需的操作数来自以下几个方面。<br>（1）操作数包含在指令中。在取指令的同时，操作数也随之得到，这种操作数被称为<strong>立即数</strong>。<br>（2）操作数包含在CPU的某个内部寄存器中，这种操作数被称为<strong>寄存器操作数</strong>。<br>（3）操作数包含在存储器中，这种操作数被称为存储器操作数（需要总线读或者写操作，总线操作费时为T1+T2+T3+（1…N个Tw）+T4）。</p><h4 id="2、操作数类型（关键：操作数的位置）"><a href="#2、操作数类型（关键：操作数的位置）" class="headerlink" title="2、操作数类型（关键：操作数的位置）"></a>2、操作数类型（关键：操作数的位置）</h4><p><strong>立即数</strong></p><p>数据在指令中，即存储器的代码段中，紧跟指令操作码之后。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV DX, 1234H</span><br><span class="line">MOV AL, 05H </span><br></pre></td></tr></table></figure><p><strong>寄存器操作数</strong></p><p>数据在CPU中的寄存器内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV SS, AX</span><br></pre></td></tr></table></figure><p><strong>存储器操作数</strong></p><p>位置：内存操作数，即内存中的数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, [3100H];DS=6000HPS= 6000H * 16 + 3100H = 63100H</span><br><span class="line">;63100H = 50H</span><br><span class="line">;63101H = 30H</span><br><span class="line">;AH = 30H AL = 50H</span><br><span class="line">;AX = 3050H </span><br></pre></td></tr></table></figure><p>I&#x2F;O<strong>端口操作数</strong><br>操作数位于I&#x2F;O端口中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN AX, 1234H;从端口1234H读入数据，送到AX </span><br></pre></td></tr></table></figure><h2 id="3-2-数据寻址方式"><a href="#3-2-数据寻址方式" class="headerlink" title="3.2 数据寻址方式"></a>3.2 数据寻址方式</h2><p>指令中操作数所在位置的给出方式。</p><p>指令系统的寻址方式越多，指令系统的功能越强，灵活性越大。</p><p>8086&#x2F;8088操作数地址寻址方式</p><p>（一）立即寻址 Immediate addressing</p><p>（二）寄存器寻址方式(Register addressing)</p><p>（三）直接寻址Direct addressing</p><p>（四）寄存器间接寻址方式（Register indirect addressing</p><p>（五）寄存器相对寻址方式（Register relative addressing 或变址寻址（Index Addressing</p><p>（六）基址加变址寻址方式（Based indexed addressing</p><p>（七）相对基址加变址寻址方式（Relative based indexed addressing</p><p>学习寻址方式把握两点</p><p>）操作数在指令中的格式。</p><p>这是编写、阅读程序时区别各种寻址方式的依据。</p><p>）寻址到的操作数的位置。</p><p>操作数位于代码段中</p><p>操作数位于寄存器中</p><p>操作数位于代码段以外的存储区中</p><p>操作数位于I&#x2F;O端口中</p><h3 id="3-2-1-操作数位于代码段中"><a href="#3-2-1-操作数位于代码段中" class="headerlink" title="3.2.1 操作数位于代码段中"></a>3.2.1 操作数位于代码段中</h3><h4 id="1-立即寻址"><a href="#1-立即寻址" class="headerlink" title="1. 立即寻址"></a>1. 立即寻址</h4><p>格式：直接以数字的格式出现</p><p>寻址到的操作数位置：操作数就在指令中，也就是在代码段中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AL, 05H</span><br><span class="line">; 执行后(AL)=05H</span><br><span class="line"></span><br><span class="line">MOV AX, 3064H</span><br><span class="line">; 执行后(AX)=3064H</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>这种寻址方式只能用于源操作数</li><li>直接从指令代码中获得操作数，所以指令执行速度快</li><li>立即数可以是8位，也可以是16位</li></ol></blockquote><h3 id="3-2-2-操作数位于寄存器中"><a href="#3-2-2-操作数位于寄存器中" class="headerlink" title="3.2.2 操作数位于寄存器中"></a>3.2.2 操作数位于寄存器中</h3><h4 id="1、寄存器寻址方式"><a href="#1、寄存器寻址方式" class="headerlink" title="1、寄存器寻址方式"></a>1、寄存器寻址方式</h4><p><strong>格式：</strong>操作数所在的寄存器的寄存器号</p><p><strong>寻址到的操作数位置：</strong>操作数在寄存器中，指令操作数位置指定寄存器号</p><p>16位操作数：AX、BX、CX、DX、SI、DI、SP、BP、DS、ES、SS、CS</p><p>8位操作数：AH、AL、BH、BL、CH、CL、DH、DL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; 执行执行前：(AX)=3064H (SS)=1234H</span><br><span class="line">MOV SS, AX</span><br><span class="line">; 指令执行后：(SS)=1234H (AX)=1234H </span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>不需要总线周期去取操作数，指令执行速度快。</li><li>寄存器寻址方式既可用于源操作数，也可用于目标操作数，还可以两者都用寄存器寻址方式</li><li><strong>两个操作数不能同时为段操作数，目标操作数不能是代码段寄存器</strong></li><li>当两个操作数均为寄存器时，必须使用同样长度的寄存器</li></ol><h3 id="3-2-3-操作数位于代码段以外的存储单元中"><a href="#3-2-3-操作数位于代码段以外的存储单元中" class="headerlink" title="3.2.3 操作数位于代码段以外的存储单元中"></a>3.2.3 操作数位于代码段以外的存储单元中</h3><p>在指令中的操作数位置，以多种方式给出操作数所在的存储单元的地址，从而找到操作数</p><p>该操作数又称为<strong>内存操作数</strong></p><p><strong>有效地址EA（Effective Address）：</strong>操作数的偏移地址</p><p>只有位于存储单元的操作数才有偏移地址</p><p>在指令中，必须既指明操作数的有效地址又指明所在的段，才能确定操作数的所在。</p><p>对于数据段、堆栈段或附加段中的存储器操作数，指令中给出的是其存储单元的有效地址EA或产生EA的计算方式。</p><p>有效地址EA，是一个16位无符号数，表示操作数所在单元距段首的距离（字节数），即逻辑地址中的偏移地址，取值范围0~64k-1</p><p><strong>寻址过程：</strong></p><ol><li>CPU根据操作数字段提供的地址信息，由EU计算出EA</li><li>BIU根据公式PA&#x3D;（段首地址&times;16）+EA，计算除物理地址</li><li>执行总线周期，根据PA取出操作数送给EU，EU执行该指令</li></ol><p>用存储器寻址的指令，执行指令相对较慢</p><p>8086&#x2F;8088的存储器分段组织（64KB），在存储器操作数寻址时通常使用默认规则确定当前段首位置。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195252609.png" alt="image-20220926195252609"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195320198.png" alt="image-20220926195320198"></p><h4 id="1、直接寻址（Direct-addressing）"><a href="#1、直接寻址（Direct-addressing）" class="headerlink" title="1、直接寻址（Direct addressing）"></a>1、直接寻址（Direct addressing）</h4><p>EA为立即数</p><ul><li>操作数在存储器中，16位有效地址EA由指令中的直接给出（操作码之后）</li><li>默认操作数在数据段 PA &#x3D; (DS × 16) + EA</li></ul><blockquote><p>注意：区别于立即数，有效地址用方括号[]括起来；如果有效地址是符号地址，则不用加方括号 </p></blockquote><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195409825.png" alt="image-20220926195409825"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195416773.png" alt="image-20220926195416773"></p><blockquote><p> 注意：</p><p> （1）操作数默认段为数据段。物理地址 &#x3D; 16 × （DS）+ EA</p><p> （2）可用段跨越前缀将数据存放于其他段。如：MOV AL, ES: [1000H]</p><p> （3）在双操作数指令中，为了避免指令字节太长，不能同时存在于存储器中。如：MOV [1234H], [1000H] ;错误指令</p></blockquote><p><strong>寄存器是否带中括号的区别</strong></p><ul><li>MOV AX, BX 是把BX中存储的值传送给AX</li><li>MOV AX, [BX] ;该指令中，BX存储的值为一个<strong>偏移地址</strong>，该指令是将BX中存储的数据段偏移地址所对应的存储器中的值传送给AX</li><li>对比两条指令，显然第一条指令不访问内存（无总线操作），速度肯定快很多</li><li>MOV AX, 2000H 和 MOV AX, [2000H]区别和上面类似</li></ul><h4 id="2、寄存器间接寻址方式（Register-indirect-addressing）"><a href="#2、寄存器间接寻址方式（Register-indirect-addressing）" class="headerlink" title="2、寄存器间接寻址方式（Register indirect addressing）"></a>2、寄存器间接寻址方式（Register indirect addressing）</h4><ul><li>操作数在寄存器中，16位有效地址EA在指令中指定的某个寄存器中，称该寄存器为<strong>间址寄存器</strong></li><li>间址寄存器：<strong>BX,BP,SI,DI</strong></li><li>操作数位于数据段或堆栈段中</li><li>BX,DI,SI 操作数在数据段中 PA &#x3D; 16D × (DS) + BX \ DI \ SI</li><li>BP操作数在堆栈段中 PA &#x3D; 16D × SS + BP</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195452152.png" alt="image-20220926195452152"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195500133.png" alt="image-20220926195500133"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195506610.png" alt="image-20220926195506610"></p><h4 id="3、寄存器相对寻址方式"><a href="#3、寄存器相对寻址方式" class="headerlink" title="3、寄存器相对寻址方式"></a>3、寄存器相对寻址方式</h4><ul><li>寄存器相对寻址方式是在寄存器间接寻址的基础上，再增加一个 指令中给定的8位或16位的位移量D（一个用补码表示的带符号数）</li><li>间址寄存器仍为BX,BP,SI,DI，使用规则通寄存器间接寻址</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195520830.png" alt="image-20220926195520830"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195527188.png" alt="image-20220926195527188"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195533440.png" alt="image-20220926195533440"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195541027.png" alt="image-20220926195541027"></p><h4 id="4、基址加变址寻址方式"><a href="#4、基址加变址寻址方式" class="headerlink" title="4、基址加变址寻址方式"></a>4、基址加变址寻址方式</h4><p><strong>格式</strong>：【基址寄存器】【变址寄存器】</p><p>基址寄存器：BX, BP</p><p>变址寄存器：SI, DI</p><p><strong>操作数地址</strong>：操作数在存储单元中</p><p>有效地址PA &#x3D; （基址寄存器） +（变址寄存器） </p><p>段地址由基址寄存器决定 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195554327.png" alt="image-20220926195554327"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195600626.png" alt="image-20220926195600626"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195607544.png" alt="image-20220926195607544"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195614187.png" alt="image-20220926195614187"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195620395.png" alt="image-20220926195620395"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195628680.png" alt="image-20220926195628680"></p><h4 id="5、相对基址加变址寻址方式"><a href="#5、相对基址加变址寻址方式" class="headerlink" title="5、相对基址加变址寻址方式"></a>5、相对基址加变址寻址方式</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195636196.png" alt="image-20220926195636196"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195643241.png" alt="image-20220926195643241"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195649910.png" alt="image-20220926195649910"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195656377.png" alt="image-20220926195656377"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195702363.png" alt="image-20220926195702363"> </p><h2 id="3-3-8086-8088指令系统"><a href="#3-3-8086-8088指令系统" class="headerlink" title="3.3 8086&#x2F;8088指令系统"></a>3.3 8086&#x2F;8088指令系统</h2><p>按功能分类</p><ol><li>数据传送（Data transfer）</li><li>算术运算（Arithmetic）</li><li>逻辑运算和移位指令（Logic&amp;Shift）</li><li>串操作（String manipulation）</li><li>控制转移（Control Transfer）</li><li>处理器控制（Provessor Control）</li></ol><table>    <tr>        <th colspan="2">指令类别</th>            <th>助记符</th>    </tr>    <tr>        <td rowspan="4">数据传送</td>        <td>通用传送</td>        <td>MOV,PUSH,POP,XCHG,XLAT</td>    </tr>    <tr>        <td>输入输出</td>        <td>IN,OUT</td>    </tr>    <tr>        <td>目标地址传送</td>        <td>LEA,LDS,LES</td>    </tr>    <tr>        <td>标志传送</td>        <td>LAHF,SAHF,PUSHF,POPF</td>    </tr>    <tr>        <td rowspan="5">算术运算</td>        <td>加法</td>        <td>ADD,ADC,INC,AAA,DAA</td>    </tr>    <tr>        <td>减法</td>        <td>SUB,SBB,DEC,NEG,CMP,AAS,DAS</td>    </tr>    <tr>        <td>乘法</td>        <td>MUL,IMUL,AAM</td>    </tr>    <tr>        <td>除法</td>        <td>DIV,IDIV,AAD</td>    </tr>    <tr>        <td>转换</td>        <td>CBW,CWD</td>    </tr>    <tr>        <td rowspan="3"> 逻辑指令</td>        <td>逻辑运算</td>        <td>AND,OR,XOR,NOT,TEST</td>    </tr>    <tr>        <td>移位</td>        <td>SHL,SAL,SHR,SAR</td>    </tr>    <tr>        <td>循环移位</td>        <td>ROL,ROR,RCL,RCR</td>    </tr>    <tr>        <td rowspan="2">串处理</td>        <td>串操作</td>        <td>MOVS,CMPS,SCAS,LODS,STOS</td>    </tr>    <tr>        <td>重复控制</td>        <td>REP,REPE/REPZ,REPNE/REPNZ</td>    </tr>    <tr>        <td rowspan="5">控制转移</td>        <td>无条件转移</td>        <td>JMP</td>    </tr>    <tr>        <td>条件转移</td>        <td>JA/JNBE,JAE/JNB,JB/JNAE,JBE/JNA,JC,JCXZ,JE/JZ,JNS,JO,JS,JG/JNLE,JGE/JNI,JL/JNGE,JLE/JNG,JNC,JNE/JNZ,JNO,JNP/JPO,JP/JPE</td>    </tr>    <tr>        <td>循环控制</td>        <td>LOOP,LOOPE/LOOPZ,LOOPNE/LOOPNZ</td>    </tr>    <tr>        <td>过程调用</td>        <td>CALL,RET</td>    </tr>    <tr>        <td>中断指令</td>        <td>INT,INTO,IRET</td>    </tr>    <tr>        <td colspan="2">处理器控制</td>        <td>CLC,STC,CMC,CLD,STD,CLI,STI,NOP,HLT,WAIT,ESC,LOCK</td>    </tr></table> <p><strong>符号：</strong></p><p>reg通用寄存器</p><p>AccAL或AX（取决于操作数长度）</p><p>src，dst源，目的操作数</p><p>[]存储器单元的内容（正常在数据段）</p><p>OPRD操作数</p><p>seg段寄存器（CS、DS、ES、SS）</p><p>imm 立即数</p><h3 id="3-3-1-数据传递指令"><a href="#3-3-1-数据传递指令" class="headerlink" title="3.3.1 数据传递指令"></a>3.3.1 数据传递指令</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195811575.png" alt="image-20220926195811575"> </p><h4 id="1-通用数据传送指令"><a href="#1-通用数据传送指令" class="headerlink" title="1. 通用数据传送指令"></a>1. 通用数据传送指令</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195842636.png" alt="image-20220926195842636"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195853614.png" alt="image-20220926195853614"> </p><blockquote><p>注意：</p><p>1、双操作数指令，源和目的操作数类型必须一致</p><p>2、源和目的操作数不能同为存储器操作数</p><p>3、CS和IP不能作为目的操作数</p><p>4、不允许在段寄存器之间直接传送数据</p><p>5、不允许用立即数作为目的操作数</p><p>6、不允许直接向段寄存器传送立即数，如果需要，用通用寄存器或存储单元中转</p></blockquote><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195908454.png" alt="image-20220926195908454"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195914743.png" alt="image-20220926195914743"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195920640.png" alt="image-20220926195920640"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195927748.png" alt="image-20220926195927748"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195936035.png" alt="image-20220926195936035"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195943416.png" alt="image-20220926195943416"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195950597.png" alt="image-20220926195950597"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926195957527.png" alt="image-20220926195957527"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200004032.png" alt="image-20220926200004032"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200015627.png" alt="image-20220926200015627"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200023163.png" alt="image-20220926200023163"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200029979.png" alt="image-20220926200029979"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200037659.png" alt="image-20220926200037659"> </p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200043397.png" alt="image-20220926200043397" style="zoom:200%;"> <p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200057535.png" alt="image-20220926200057535"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200135720.png" alt="image-20220926200135720"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200144087.png" alt="image-20220926200144087"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200158077.png" alt="image-20220926200158077"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200204544.png" alt="image-20220926200204544"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200224669.png" alt="image-20220926200224669"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200232129.png" alt="image-20220926200232129"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200238860.png" alt="image-20220926200238860"> </p><h4 id="2-I-O数据传递指令"><a href="#2-I-O数据传递指令" class="headerlink" title="2. I&#x2F;O数据传递指令"></a>2. I&#x2F;O数据传递指令</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200259592.png" alt="image-20220926200259592"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200306144.png" alt="image-20220926200306144"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200312437.png" alt="image-20220926200312437"> </p><h4 id="3-地址传送指令"><a href="#3-地址传送指令" class="headerlink" title="3. 地址传送指令"></a>3. 地址传送指令</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200326129.png" alt="image-20220926200326129"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200331761.png" alt="image-20220926200331761"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200341651.png" alt="image-20220926200341651"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200348388.png" alt="image-20220926200348388"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200354907.png" alt="image-20220926200354907"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200400980.png" alt="image-20220926200400980"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200408688.png" alt="image-20220926200408688"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200415024.png" alt="image-20220926200415024"> </p><h4 id="4-标志寄存器传送指令"><a href="#4-标志寄存器传送指令" class="headerlink" title="4. 标志寄存器传送指令"></a>4. 标志寄存器传送指令</h4><p>PSW：标志寄存器</p><p>（1）LAHF（Load AH from flags）：将PSW的低八位保存到CPU的AH中</p><p>（2）SAHF（Store AH into flags）：将AH中内容是送给标志寄存器的低八位</p><p>（3）PUSHF（Push flags onto stack）：将标志寄存器的内容压入堆栈，同时栈顶指针SP减2，这条指令可用来保存全部标志位。</p><p>（4）POPF（Pop flags off stack）：将栈顶字单元内容送标志寄存器，同时栈顶指针SP加2 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200450179.png" alt="image-20220926200450179"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200455886.png" alt="image-20220926200455886"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200507652.png" alt="image-20220926200507652"> </p><h3 id="3-4-2-算术运算指令"><a href="#3-4-2-算术运算指令" class="headerlink" title="3.4.2 算术运算指令"></a>3.4.2 算术运算指令</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200531935.png" alt="image-20220926200531935"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200541874.png" alt="image-20220926200541874"> </p><h4 id="1-加法指令"><a href="#1-加法指令" class="headerlink" title="1. 加法指令"></a>1. 加法指令</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200556324.png" alt="image-20220926200556324"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200601727.png" alt="image-20220926200601727"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200608405.png" alt="image-20220926200608405"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200614537.png" alt="image-20220926200614537"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LEA SI, FIRST;将FIRST的偏移地址放到SI中</span><br><span class="line">LEA DI, SECOND;将SECOND的偏移地址放到DI中</span><br><span class="line">MOV AX, [SI];通过变址寻址，将FIRST的数据放到AX中</span><br><span class="line">ADD AX, [DI];通过变址寻址，将SECOND的数据加到AX中，相当于将两个四字节数的低位数相加</span><br><span class="line">MOV [SI], AX;将AX中的数据放到[SI]中</span><br><span class="line">MOV AX, [SI+2];将[SI+2]的数据放到AX中</span><br><span class="line">ADC AX, [DI+2];将[DI+2]的数据加到AX中，包含低字节数的进位CF</span><br><span class="line">MOV [SI+2], AX;将高字节数相加的结果放到[SI+2]中</span><br></pre></td></tr></table></figure><p> 两个4字节的整数相加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT;FileName must obey 8.3(notMoreThan)</span><br><span class="line">a DD 0A9876543H</span><br><span class="line">b DD 056789ABXH</span><br><span class="line">DATA ENDS</span><br><span class="line">CODE SETMENT</span><br><span class="line">ASSUME CS:CODE,DS:DATA</span><br><span class="line">START:</span><br><span class="line">MOV AX,DATA</span><br><span class="line">MOV DS,AX; 将a和b放到DS中</span><br><span class="line">;</span><br><span class="line">LEA BX,a</span><br><span class="line">LEA BP,b;取a和b的偏移地址</span><br><span class="line">;Error: MOV CX,[AX], 寄存器间接寻址必须是BX,BP,SI,DI</span><br><span class="line">MOV CX,[BX]</span><br><span class="line">MOV DX,DS:[BP]</span><br><span class="line">ADD DX,CX; 低字节相加</span><br><span class="line">ADD BX,2</span><br><span class="line">ADD BP,2</span><br><span class="line">MOV SI,[BX]</span><br><span class="line">MOV DI,DS:[BP]</span><br><span class="line">ADC DI,SI</span><br><span class="line">; 中断调用指令</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200627608.png" alt="image-20220926200627608"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200633713.png" alt="image-20220926200633713"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200640452.png" alt="image-20220926200640452"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200647817.png" alt="image-20220926200647817"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200655907.png" alt="image-20220926200655907"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200702136.png" alt="image-20220926200702136"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200710695.png" alt="image-20220926200710695"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200716595.png" alt="image-20220926200716595"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200723215.png" alt="image-20220926200723215"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200731872.png" alt="image-20220926200731872"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200737904.png" alt="image-20220926200737904"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200743977.png" alt="image-20220926200743977"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200750478.png" alt="image-20220926200750478"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200756928.png" alt="image-20220926200756928"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200803524.png" alt="image-20220926200803524"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200810003.png" alt="image-20220926200810003"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200815482.png" alt="image-20220926200815482"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200820907.png" alt="image-20220926200820907"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200827370.png" alt="image-20220926200827370"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200832849.png" alt="image-20220926200832849"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200839457.png" alt="image-20220926200839457"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200845410.png" alt="image-20220926200845410"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200851971.png" alt="image-20220926200851971"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200857557.png" alt="image-20220926200857557"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200902526.png" alt="image-20220926200902526"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200908543.png" alt="image-20220926200908543"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200914197.png" alt="image-20220926200914197"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200919213.png" alt="image-20220926200919213"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200925002.png" alt="image-20220926200925002"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200932255.png" alt="image-20220926200932255"> </p><h3 id="3-4-3-位操作指令"><a href="#3-4-3-位操作指令" class="headerlink" title="3.4.3 位操作指令"></a>3.4.3 位操作指令</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200945710.png" alt="image-20220926200945710"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200951907.png" alt="image-20220926200951907"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926200958838.png" alt="image-20220926200958838"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201004370.png" alt="image-20220926201004370"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201011754.png" alt="image-20220926201011754"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201016912.png" alt="image-20220926201016912"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201022699.png" alt="image-20220926201022699"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201029819.png" alt="image-20220926201029819"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201037487.png" alt="image-20220926201037487"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201045371.png" alt="image-20220926201045371"> </p><p>S</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201055739.png" alt="image-20220926201055739"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201104992.png" alt="image-20220926201104992"></p><h3 id="3-4-5-控制转移指令"><a href="#3-4-5-控制转移指令" class="headerlink" title="3.4.5 控制转移指令"></a>3.4.5 控制转移指令</h3><p><strong>作用：</strong>控制程序执行流程。通过对（CS）和（IP）的修改来改变程序执行的流程</p><h4 id="1、转移指令"><a href="#1、转移指令" class="headerlink" title="1、转移指令"></a>1、转移指令</h4><ul><li>JMP：无条件转移指令</li><li>JCC：条件转移指令</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201128166.png" alt="image-20220926201128166"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201138153.png" alt="image-20220926201138153"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201143116.png" alt="image-20220926201143116"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201150029.png" alt="image-20220926201150029"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201157342.png" alt="image-20220926201157342"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201203042.png" alt="image-20220926201203042"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201208776.png" alt="image-20220926201208776"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201214996.png" alt="image-20220926201214996"></p><h5 id="2-条件转移指令"><a href="#2-条件转移指令" class="headerlink" title="2 条件转移指令"></a>2 条件转移指令</h5><p>两种：</p><ul><li>比较转移指令</li><li>判位转移指令</li></ul><p>均采用<strong>相对短转移，</strong>即（IP）←当前（IP）+disp8</p><p>转移范围：从当前（IP）所指单元开始-128~+127</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201228433.png" alt="image-20220926201228433"></p><p>无符号数：出现A(above大于）B（below小于）C(进位CF)</p><p>有符号数：出现G（大于）L（less小于） </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201236166.png" alt="image-20220926201236166"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201243699.png" alt="image-20220926201243699"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201250290.png" alt="image-20220926201250290"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201256810.png" alt="image-20220926201256810"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201306918.png" alt="image-20220926201306918"></p><h4 id="2、循环控制指令"><a href="#2、循环控制指令" class="headerlink" title="2、循环控制指令"></a>2、循环控制指令</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201314611.png" alt="image-20220926201314611"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201321262.png" alt="image-20220926201321262"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201327739.png" alt="image-20220926201327739"></p><h4 id="3、过程调用指令"><a href="#3、过程调用指令" class="headerlink" title="3、过程调用指令"></a>3、过程调用指令</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201333786.png" alt="image-20220926201333786"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201338782.png" alt="image-20220926201338782"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201344424.png" alt="image-20220926201344424"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201349921.png" alt="image-20220926201349921"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201402466.png" alt="image-20220926201402466"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201407408.png" alt="image-20220926201407408"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201412978.png" alt="image-20220926201412978"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926201419289.png" alt="image-20220926201419289"> </p><h4 id="4、中断指令"><a href="#4、中断指令" class="headerlink" title="4、中断指令"></a>4、中断指令</h4><h1 id="四、80X86汇编语言程序设计"><a href="#四、80X86汇编语言程序设计" class="headerlink" title="四、80X86汇编语言程序设计"></a>四、80X86汇编语言程序设计</h1><p><strong>汇编语言</strong></p><ul><li>汇编语言是一种直接面向CPU指令系统的程序设计语言</li><li>用<strong>助记符</strong>表示操作码，符号代表操作数或操作数地址，以及指令地址</li><li>相对于机器语言：易记、易读、易编写、易修改</li><li>保留了机器语言面向硬件的优势，程序效率高（速度快&#x2F;空间小）</li><li>主要用于系统程序和实时控制程序的编制</li></ul><p>6页，指令、伪指令<br>7、8、了解<br>9、10、语句格式<br>12页，指令可以不用操作数<br>17、完整段格式<br>29、<br>30、<br>33~39、会 低字节放低地址<br>47、5个常用系统调用<br>61、跳转考普通的、无符号、有符号<br>六十几页的都讲过，看看，是程序填空题<br>73、3个循环、cx计数器、同名指令<br>77、程序<br>78、程序背<br>子程序不做要求</p><h2 id="4-1-MASM宏汇编语句结构以及开发过程"><a href="#4-1-MASM宏汇编语句结构以及开发过程" class="headerlink" title="4.1 MASM宏汇编语句结构以及开发过程"></a>4.1 MASM宏汇编语句结构以及开发过程</h2><p><strong>汇编语言源程序的组成：</strong></p><p><strong>指令：</strong>与CPU指令系统具有一一对应关系的指令，亦称为硬指令；汇编时一条指令语句被翻译成对应的目标代码，对应着特定的操作</p><p><strong>伪指令：</strong>伪指令语句在汇编过程中通过一些管理控制性语句，告诉汇编程序应该如何汇编，它不产生目标代码，即不直接命令CPU去执行什么操作，在<strong>汇编</strong>阶段被处理</p><p><strong>宏指令（使用宏汇编时）：</strong>宏指令语句是由编程者按照一定的规则来定义的一种较“宏大”的指令，可包括多条指令或伪指令。</p><p><strong>表达式：</strong>根据汇编语言的语法要求，构成各种指令的操作对象，编译过程会对其值进行计算。</p><h3 id="4-1-1-汇编语言程序的语句类型和格式"><a href="#4-1-1-汇编语言程序的语句类型和格式" class="headerlink" title="4.1.1 汇编语言程序的语句类型和格式"></a>4.1.1 汇编语言程序的语句类型和格式</h3><h4 id="1-语句的类型"><a href="#1-语句的类型" class="headerlink" title="1. 语句的类型"></a>1. 语句的类型</h4><p><strong>硬指令语句</strong>（指令性语句）<br>是指能产生目标代码，CPU可以执行的，能完成特定功能的语句，它主要由CPU指令组成。</p><p><strong>伪指令语句</strong>（指示性语句）<br>是一种不产生目标代码的语句，仅仅在汇编过程中告诉汇编程序如何汇编<br>    定义变量，定义过程，给变量分配存储单元，给数字或表达式命名等。所以伪指令语句是汇编程序在汇编时用的，不产生机器码。</p><p><strong>宏指令语句</strong><br>它是一个指令序列，汇编时凡有宏指令语句的地方都将用相应的指令序列的目标代码插入。 </p><p><strong>指令性语句</strong><br>是计算机可执行的，而伪指令不能执行。</p><hr><p>两种语句的差别：</p><ul><li>形式上：带不带<strong>冒号，是否可转向它</strong></li><li>本质上：汇编时能否形成<strong>对应的机器码</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;伪指令例子</span><br><span class="line">ASSUME CS:CODE,DS:DATA</span><br><span class="line">;ASSUME后面不能有冒号</span><br><span class="line"></span><br><span class="line">;指令例子</span><br><span class="line">Again:...</span><br><span class="line">LOOPNZ Again;</span><br></pre></td></tr></table></figure><h4 id="2-语句的格式"><a href="#2-语句的格式" class="headerlink" title="2. 语句的格式"></a>2. 语句的格式</h4><ul><li>汇编语言源程序由语句序列构成</li><li>汇编语言源程序中的每条语句一般占一行，每行不超过132个字符（MASM 6.0 开始是512个字符）<ul><li><strong>指令性（执行性）语句</strong></li><li>[标号：] 硬指令助记符 [操作数，操作数]    [；注释]</li><li>[]中的可能有，也可能没有</li><li><strong>说明性语句</strong></li><li>名字 伪指令助记符 参数，参数… ；注释</li></ul></li></ul><h3 id="4-1-2-指令语句的基本要求"><a href="#4-1-2-指令语句的基本要求" class="headerlink" title="4.1.2 指令语句的基本要求"></a>4.1.2 指令语句的基本要求</h3><ol><li><p>标号是指令的符号地址，必须以英文“**:**” 结尾，<br>8086&#x2F;8088的标号规则：</p><ul><li>字母，数字或某些特殊字符组成</li><li>第一个字符不可以是数字</li><li>”？“不能单独作为标号</li><li>标号的有效长度为31位</li></ul></li><li><p>助记符是指令名称的代表符号，是指令语句中的关键字，不可省略。必要时可以在指令助记符的前面家伙是那个一个或多个前缀，实现某些附加操作</p></li><li><p>操作数是指令执行需要的数据</p><ul><li>有些指令不需要操作数，可以默认</li><li>有些指令需要多个操作数，必须以英文逗号隔开</li><li>操作数可以是表达式</li></ul></li><li><p>注释是对指令功能加以说明，方便阅读和理解，不进行处理</p><ul><li>可选项</li><li>以英文分号开头</li></ul></li></ol><h3 id="4-1-3-伪指令语句的格式及功能"><a href="#4-1-3-伪指令语句的格式及功能" class="headerlink" title="4.1.3 伪指令语句的格式及功能"></a>4.1.3 伪指令语句的格式及功能</h3><p>伪指令不对应任何机器指令，只告诉汇编程序如何生产目标代码</p><p>汇编语言中的伪指令可分为14类</p><h4 id="1-伪指令的基本格式"><a href="#1-伪指令的基本格式" class="headerlink" title="1. 伪指令的基本格式"></a>1. 伪指令的基本格式</h4><p>语法：[变量名] 数据定义伪指令 操作数1 [，操作数2…]</p><p><strong>要求</strong>：</p><ul><li>符号名是一个任选字段，符号名后面<strong>不能</strong>用冒号”:“，以区别指令语句。</li><li>不同伪指令的符号名可以是常量名，变量名、记录名等，可以作为指令语句或伪指令语句的操作数，此时符号名就表示一个常量或存储器地址</li><li>伪指令是语句不可获取的部分</li></ul><h3 id="4-1-4-汇编语言源程序文件可以用以下两种格式书写"><a href="#4-1-4-汇编语言源程序文件可以用以下两种格式书写" class="headerlink" title="4.1.4 汇编语言源程序文件可以用以下两种格式书写"></a>4.1.4 汇编语言源程序文件可以用以下两种格式书写</h3><ul><li>第一种格式是从MASM 5.0开始支持的简化段定义格式（但其中的两个指令.STARTUP和.EXIT是6.0版本才引入的</li><li>第二种格式是MASM 5.0以前版本就具有的<strong>完整段</strong>定义格式</li></ul><p><strong>完整段格式定义方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">; Step1: 定义数据段</span><br><span class="line">DATA SEGMENT</span><br><span class="line">...</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">; Step2: 定义堆栈段（可选）</span><br><span class="line">STACK SEGMENT</span><br><span class="line">...</span><br><span class="line">STACK ENDS</span><br><span class="line"></span><br><span class="line">; Step3: 定义附加段（可选）</span><br><span class="line">EXTRA SEGMENT</span><br><span class="line">...</span><br><span class="line">EXTRA ENDS</span><br><span class="line"></span><br><span class="line">; Step3: 定义代码段</span><br><span class="line">CODE SEGMENT</span><br><span class="line">ASSUME CS:CODE, DS:DATA, SS:STACK ;明确段与段寄存器的关系</span><br><span class="line"></span><br><span class="line">START: MOV AX, DATA</span><br><span class="line">MOV DS, AX</span><br><span class="line"></span><br><span class="line">MOV AX, STACK</span><br><span class="line">MOV SS, AX</span><br><span class="line">MOV SP, ?H;?为堆栈大小，注意2倍关系</span><br><span class="line">...</span><br><span class="line">; MOV AH, 4CH;或者 MOV AX, 4COOH</span><br><span class="line">INT 21H</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><p><strong>简化段格式定义方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.MODEL SMALL</span><br><span class="line">.8086;默认为8086，也可以是386等，可以忽略</span><br><span class="line">.STACK [SIZE];堆栈，默认为1024Bytes</span><br><span class="line">.DATA;数据段，一般放有初值的变量</span><br><span class="line">...</span><br><span class="line">.DATA ?;数据段，一般存放无初值的变量</span><br><span class="line">.CODE</span><br><span class="line">.STARTUP</span><br><span class="line">...</span><br><span class="line">.EXIT;program end</span><br><span class="line">END;All this file end</span><br></pre></td></tr></table></figure><p> （1）tiny模式通常和内存映像文件（com）文件对应，代码、数据同段且不超过64k</p><p>（2）small模式通常代码段、数据段均不超过64k，代码段中的跳转和call均为near模式，即使用段偏移就能定位</p><p>（3）huge模式代码、数据段不受64k限制，跳转、call指令允许使用far模式</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202727089.png" alt="image-20220926202727089"> </p><h2 id="4-2-MASM汇编语言表达式、运算符"><a href="#4-2-MASM汇编语言表达式、运算符" class="headerlink" title="4.2 MASM汇编语言表达式、运算符"></a>4.2 MASM汇编语言表达式、运算符</h2><h3 id="4-2-1-常量、运算符及表达式"><a href="#4-2-1-常量、运算符及表达式" class="headerlink" title="4.2.1 常量、运算符及表达式"></a>4.2.1 常量、运算符及表达式</h3><h4 id="1-常量"><a href="#1-常量" class="headerlink" title="1. 常量"></a>1. 常量</h4><p>（1）数字常量<br>        二进制常量，以B结尾<br>        十进制常量，以D结尾或省略（汇编语言中默认无标记数位十进制数）<br>        十六进制常量，以H结尾，如0A8C6H</p><p>（2）字符串常量<br>        用<strong>单引号</strong>引起来的字符或字符串也代表常数<br>        例子：’ABCDE’，汇编时被翻译成对应的ASCII码41H，42H，43H，44H，45H<br>        <strong>字符串最大长度为255个字符</strong> </p><p>（3）符号常量<br>        利用一个标识符表达的一个数值。<br>        使用有意义的符号名来表示，可提高可读性<br>        比如C语言中的<code>#define PI 3.14</code><br>        MASM提供等价机制，用来为常量定义符号名，符号定义伪指令有“EQU”和“&#x3D;”  </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202838541.png" alt="image-20220926202838541"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202843993.png" alt="image-20220926202843993"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202849045.png" alt="image-20220926202849045"> </p><p>（6）合成运算符<br>        用来建立或临时改变变量或标号的类型或存储器操作的存储单元类型。<br>        包括：PTR、THIS、SHORT</p><p>PTR运算符<br><strong>用来指定或修改存储器操作数的类型</strong>，通常和伪指令BYTE、WORD等连起来使用。<br>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MOV BYTE PTR[DI],0</span><br><span class="line">MOV WORD PRT[DI],0</span><br><span class="line">而</span><br><span class="line">MOV [DI],0;类型不定</span><br></pre></td></tr></table></figure><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202859337.png" alt="image-20220926202859337"> </p><p>（7）其它运算符</p><p>1）方括号[ ]<br>指令中用方括号表示存储器操作数，方括号里的内容表示操作数的偏移地址。<br>例如：<code>MOV AX, [BX]</code> 将（BX）和（BX+1）指向的存储器两个单元的地址送AX</p><p>2）段超越运算符“:”<br>运算符（冒号）跟在某个段寄存器名（DS、ES、SS、CS）之后表示段超越，用来指定一个存储器操作数的段属性，而不管其原来隐含的段是什么<br>例如：<code>MOV AX, ES:[DI]</code> ；把ES段中由DI指向的字操作数送（AX） </p><h3 id="4-2-2-变量及其属性"><a href="#4-2-2-变量及其属性" class="headerlink" title="4.2.2 变量及其属性"></a>4.2.2 变量及其属性</h3><h4 id="1-变量定义伪指令"><a href="#1-变量定义伪指令" class="headerlink" title="1. 变量定义伪指令"></a>1. 变量定义伪指令</h4><p>变量是存储器中某个数据区的名字，在指令中可以作为存储器操作数。</p><p>变量定义伪指令可为变量申请固定长度的存储空间，并可以同时将相应的存储单元初始化。该类伪指令是最经常使用的伪指令。</p><p><strong>语法</strong>：<code>[变量名] 伪指令 初值表</code></p><p><strong>说明：</strong></p><ul><li>变量名是用户自定义标识符，表示初值表首元素的逻辑地址，即用这个符号表示地址，常称为符号地址。变量名可以没有，这种情况，汇编程序将直接为初值表分配空间，无符号地址。设置变量名是为了方便存取它指示的存储单元</li><li>初值标是用逗号分隔的参数，主要由<em>数值常量，表达式</em>或？、DUP组成。其中的？表示初值不确定，即未赋初值；重复初值可以用DUP进行定义。DUP的格式为：<code>重复次数 DUP（重复参数）</code></li><li>变量定义伪指令有DB&#x2F;DW&#x2F;DD，它们根据申请的内存空间单位分类</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202923210.png" alt="image-20220926202923210"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202929854.png" alt="image-20220926202929854"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202935537.png" alt="image-20220926202935537"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202941166.png" alt="image-20220926202941166"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202947809.png" alt="image-20220926202947809"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202953463.png" alt="image-20220926202953463">、 </p><h4 id="2-变量和标号的属性"><a href="#2-变量和标号的属性" class="headerlink" title="2. 变量和标号的属性"></a>2. 变量和标号的属性</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926202959936.png" alt="image-20220926202959936"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203005309.png" alt="image-20220926203005309"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203010885.png" alt="image-20220926203010885"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203016117.png"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203021144.png" alt="image-20220926203021144"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203027085.png" alt="image-20220926203027085"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203032292.png" alt="image-20220926203032292"> </p><h2 id="4-3-程序段的定义和属性"><a href="#4-3-程序段的定义和属性" class="headerlink" title="4.3 程序段的定义和属性"></a>4.3 程序段的定义和属性</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203051604.png" alt="image-20220926203051604"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203057269.png" alt="image-20220926203057269"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203103449.png" alt="image-20220926203103449"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203107921.png" alt="image-20220926203107921"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203112488.png" alt="image-20220926203112488"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203117948.png" alt="image-20220926203117948"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203125074.png" alt="image-20220926203125074"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203131168.png" alt="image-20220926203131168"> </p><h2 id="4-4-常用的系统功能调用"><a href="#4-4-常用的系统功能调用" class="headerlink" title="4.4 常用的系统功能调用"></a>4.4 常用的系统功能调用</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203150804.png" alt="image-20220926203150804"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203159065.png" alt="image-20220926203159065"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203204406.png" alt="image-20220926203204406"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203209871.png" alt="image-20220926203209871"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203215168.png" alt="image-20220926203215168"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203220516.png" alt="image-20220926203220516"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203225857.png" alt="image-20220926203225857"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203231960.png" alt="image-20220926203231960"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203236992.png" alt="image-20220926203236992"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203243820.png" alt="image-20220926203243820"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203249889.png" alt="image-20220926203249889"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203256873.png" alt="image-20220926203256873"> </p><h2 id="4-5-顺序结构程序设计"><a href="#4-5-顺序结构程序设计" class="headerlink" title="4.5 顺序结构程序设计"></a>4.5 顺序结构程序设计</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203312780.png" alt="image-20220926203312780"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203317557.png" alt="image-20220926203317557"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203322399.png" alt="image-20220926203322399"> </p><h2 id="4-6-分支程序设计"><a href="#4-6-分支程序设计" class="headerlink" title="4.6 分支程序设计"></a>4.6 分支程序设计</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203337909.png" alt="image-20220926203337909"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203342993.png" alt="image-20220926203342993"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203348265.png" alt="image-20220926203348265"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203353801.png" alt="image-20220926203353801"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203359598.png" alt="image-20220926203359598"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203405255.png" alt="image-20220926203405255"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203409967.png" alt="image-20220926203409967"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203414905.png" alt="image-20220926203414905"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203419868.png" alt="image-20220926203419868"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203425163.png" alt="image-20220926203425163"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203429871.png" alt="image-20220926203429871"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203434796.png" alt="image-20220926203434796"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203439528.png" alt="image-20220926203439528"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203444596.png" alt="image-20220926203444596"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203450252.png" alt="image-20220926203450252"> </p><h2 id="4-7-循环程序设计"><a href="#4-7-循环程序设计" class="headerlink" title="4.7 循环程序设计"></a>4.7 循环程序设计</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203504441.png" alt="image-20220926203504441"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203510649.png" alt="image-20220926203510649"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203516112.png" alt="image-20220926203516112"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203521520.png" alt="image-20220926203521520"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203526587.png" alt="image-20220926203526587"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203531975.png" alt="image-20220926203531975"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203537027.png" alt="image-20220926203537027"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203542601.png" alt="image-20220926203542601"> </p><h2 id="4-8-子程序设计"><a href="#4-8-子程序设计" class="headerlink" title="4.8 子程序设计"></a>4.8 子程序设计</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203556452.png" alt="image-20220926203556452"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203601796.png" alt="image-20220926203601796"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203607261.png" alt="image-20220926203607261"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203612780.png" alt="image-20220926203612780"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203618572.png" alt="image-20220926203618572"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203623667.png" alt="image-20220926203623667"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203629880.png" alt="image-20220926203629880"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203635883.png" alt="image-20220926203635883"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203640955.png" alt="image-20220926203640955"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203646535.png" alt="image-20220926203646535"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203652599.png" alt="image-20220926203652599"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203657892.png" alt="image-20220926203657892"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203702971.png" alt="image-20220926203702971"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203708483.png" alt="image-20220926203708483"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203714569.png" alt="image-20220926203714569"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203721620.png" alt="image-20220926203721620"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203727380.png" alt="image-20220926203727380"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203732872.png" alt="image-20220926203732872"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203739840.png" alt="image-20220926203739840"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203745248.png" alt="image-20220926203745248"> </p><h2 id="4-9"><a href="#4-9" class="headerlink" title="4.9"></a>4.9</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203756247.png" alt="image-20220926203756247"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203801270.png" alt="image-20220926203801270"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203807084.png" alt="image-20220926203807084"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203811874.png" alt="image-20220926203811874"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203817071.png" alt="image-20220926203817071"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203822244.png" alt="image-20220926203822244"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203827054.png" alt="image-20220926203827054"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203833105.png" alt="image-20220926203833105"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203839196.png" alt="image-20220926203839196"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203850096.png" alt="image-20220926203850096"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203855195.png" alt="image-20220926203855195"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203900002.png" alt="image-20220926203900002"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20220926203906904.png" alt="image-20220926203906904"> </p><h1 id="五、存储器技术"><a href="#五、存储器技术" class="headerlink" title="五、存储器技术"></a>五、存储器技术</h1><h2 id="5-1-存储器概述"><a href="#5-1-存储器概述" class="headerlink" title="5.1 存储器概述"></a>5.1 存储器概述</h2><h3 id="5-1-1-存储器的发展及分类"><a href="#5-1-1-存储器的发展及分类" class="headerlink" title="5.1.1 存储器的发展及分类"></a>5.1.1 存储器的发展及分类</h3><h4 id="1-存储系统的发展"><a href="#1-存储系统的发展" class="headerlink" title="1 存储系统的发展"></a>1 存储系统的发展</h4><p>•50年代中期，主要使用磁芯存储器作为主存。</p><p>•60年代中期以后，半导体存储器已取代磁芯存储器</p><p>•1968年，IBM- 360／85最早采用了高速缓冲——主存储器的存储层次。</p><p>•1970年，美国RCA公司研究成功虚拟存储器系统。</p><p>•IBM公司于1972年在IBM370系统上全面采用了虚拟存储技术。</p><h4 id="2-存储器分类"><a href="#2-存储器分类" class="headerlink" title="2 存储器分类"></a>2 存储器分类</h4><p><strong>(1)</strong> <strong>按功能分类</strong></p><p>1）主存储器</p><p>2）外部存储器</p><p>3）高速缓冲存储器</p><p><strong>（2）按存取方式分类</strong></p><p>1）随机存取存储器RAM（Random Access Memory）</p><p>2）只读存储器ROM（Read Only Memory）</p><p>3）顺序存取存储器SAM（Sequential Access Memory）</p><p>4）直接存取存储器DAM（Direct Access Memory）</p><p><strong>（3）按存储介质分类</strong></p><p>1）磁芯存储器</p><p>2）半导体存储器</p><p>3）磁表面存储器</p><p>4）光存储器</p><p><strong>（4）按信息的可保存性分类</strong></p><p>断电后信息即消失的存储器，称为非永久记忆的存储器。断电后仍能保存信息的存储器，称为永久性记忆的存储器。磁性材料做成的存储器是永久性存储器，半导体读写存储器RAM是非永久性存储器。 </p><p><strong>（5）按串、并行存取方式分类</strong></p><p>目前使用的半导体存储器大多为并行存取方式，但也有以串行存取方式工作的存储器，如电耦合器件 (CCD)、串行移位寄存器和镍延迟线构成的存储器等。</p><h3 id="5-1-2-存储器的主要技术指标"><a href="#5-1-2-存储器的主要技术指标" class="headerlink" title="5.1.2 存储器的主要技术指标"></a>5.1.2 存储器的主要技术指标</h3><p>1.速度</p><p>2.存储容量</p><p>3.存储带宽</p><p>4.存储器的可靠性</p><h4 id="1、存储器的基本结构框架"><a href="#1、存储器的基本结构框架" class="headerlink" title="1、存储器的基本结构框架"></a>1、存储器的基本结构框架</h4><table><thead><tr><th>存储单元</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>地址码</td><td>单元位数(bits)</td><td></td><td></td></tr><tr><td>0</td><td>1</td><td>….…</td><td>m</td></tr><tr><td>1</td><td>1</td><td>….…</td><td>m</td></tr><tr><td>.  .  .  .  .  .</td><td></td><td></td><td>.  .  .  .  .</td></tr><tr><td>J-2</td><td></td><td></td><td></td></tr><tr><td>J-1</td><td>1</td><td>….…</td><td>m</td></tr><tr><td>J</td><td>1</td><td>….…</td><td>m</td></tr></tbody></table><h4 id="2、存储系统的层次结构"><a href="#2、存储系统的层次结构" class="headerlink" title="2、存储系统的层次结构"></a>2、存储系统的层次结构</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115192817175.png" alt="image-20221115192817175"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115192847419.png" alt="image-20221115192847419"> </p><h2 id="5-2-半导体随机存储器"><a href="#5-2-半导体随机存储器" class="headerlink" title="5.2 半导体随机存储器"></a>5.2 半导体随机存储器</h2><p>• 半导体随机存取存储器是构成计算机主存储器、高速缓冲存储器的核心部件。根据信息的存储机理，可分为静态随机存取存储器（SRAM）和动态随机存取存储器（DRAM）。 SRAM的优点是速度非常快，只要电源不切断，内容就不会消失，一般高速缓冲存储器（Cache memory）用SRAM组成。DRAM的特点是成本低，集成度很高，存储容量比SRAM大很多，通常用作计算机的主存储器。</p><h3 id="5-2-1-SRAM存储器"><a href="#5-2-1-SRAM存储器" class="headerlink" title="5.2.1 SRAM存储器"></a>5.2.1 SRAM存储器</h3><h4 id="1、基本存储元及存储序列"><a href="#1、基本存储元及存储序列" class="headerlink" title="1、基本存储元及存储序列"></a>1、基本存储元及存储序列</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193053199.png" alt="image-20221115193053199"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193108904.png" alt="image-20221115193108904"> </p><h4 id="2、存储器芯片的逻辑结构"><a href="#2、存储器芯片的逻辑结构" class="headerlink" title="2、存储器芯片的逻辑结构"></a>2、存储器芯片的逻辑结构</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193217894.png" alt="image-20221115193217894"> </p><p>SRAM存储器芯片的容量为<em>Z</em>×<em>B</em> bits，其中<em>Z</em>表示该芯片的容量，即有多少个存储单元，一般Z&#x3D;2n，n为正整数，其数值n表示该存储器芯片有多少条（即n条）地址线，地址线通常用An-1An-2…A1A0表示。B表示该芯片某存储单元的位数，即数据宽度，B的取值一般为1,2,4,8,…，数据宽度常用I&#x2F;OB-1I&#x2F;OB-2…I&#x2F;O1I&#x2F;O0或DB-1DB-2…D1D0表示。为了便于组织更大容量的SRAM存储器，其芯片都采用双译码形式，即采用x向和y向的两级译码结构。我们可将x向译码称行译码，y向译码称列译码。</p><p>• </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193345818.png" alt="image-20221115193345818"> </p><h3 id="5-2-2-DRAM存储器"><a href="#5-2-2-DRAM存储器" class="headerlink" title="5.2.2 DRAM存储器"></a>5.2.2 DRAM存储器</h3><h4 id="1、基本存储元"><a href="#1、基本存储元" class="headerlink" title="1、基本存储元"></a>1、基本存储元</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193458838.png" alt="image-20221115193458838"> </p><p>ü写入时，若写入“1”，位线D为高电平，对电容C进行充电；写入“0”，位线D为低电平，电容C上的电荷经位线进行泄放。</p><p>ü读出时，若原存为“1”，C上有电荷，经T1管在位线上产生读电流，完成读“1”操作；若原存为“0”，C上无电荷，在位线上不产生读电流，完成读“0”操作。</p><p>注：信息是存储在一个很小的电容C上，也只能保留2ms左右的时间，所以必须要定时地进行刷新（或再生）操作。 </p><h4 id="2、DRAM芯片的逻辑结构"><a href="#2、DRAM芯片的逻辑结构" class="headerlink" title="2、DRAM芯片的逻辑结构"></a>2、DRAM芯片的逻辑结构</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193532469.png" alt="image-20221115193532469"> </p><h4 id="3、DRAM的刷新"><a href="#3、DRAM的刷新" class="headerlink" title="3、DRAM的刷新"></a>3、DRAM的刷新</h4><p>常见的刷新有集中式、分散式和异步式三种。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193621678.png" alt="image-20221115193621678"> </p><h3 id="5-2-3-只读存储器ROM"><a href="#5-2-3-只读存储器ROM" class="headerlink" title="5.2.3 只读存储器ROM"></a>5.2.3 只读存储器ROM</h3><p>1．掩膜式只读存储器MROM（MASK ROM）</p><p>掩膜式只读存储器MROM的存储内容固定，是由生产厂家规模化生产的产品。</p><p>2．可编程只读存储器</p><p>可编程ROM有PROM、EPROM和E2PROM三种。</p><p>3．闪速存储器（Flash Memory）</p><p>高密度、非易失的读写存储器，高密度意味着它具有很大的存储容量。</p><h3 id="5-2-4-新型存储器芯片"><a href="#5-2-4-新型存储器芯片" class="headerlink" title="5.2.4 新型存储器芯片"></a>5.2.4 新型存储器芯片</h3><p>FPM DRAM</p><p>CDRAM</p><p>SDRAM</p><p>RDRAM</p><p>DDR SDRAM等新型存储器芯片。 </p><p>• </p><h3 id="5-2-5-主存容量的扩展"><a href="#5-2-5-主存容量的扩展" class="headerlink" title="5.2.5 主存容量的扩展"></a>5.2.5 主存容量的扩展</h3><p>•使用多个芯片组成为存储器的技术称为存储器的扩展技术。</p><p>•如果只是扩展存储器存储元的个数，即扩展每个单元的数据位数，称为“位扩展”；</p><p>•如果只是扩展存储器存储单元的个数，称为“字扩展”；</p><p>•如果两者都要扩展，称为“字位扩展”。</p><p>•主存储器同CPU连接时，要完成地址线、数据线和控制线的连接，还要涉及芯片间的片选译码等。</p><p>• </p><h4 id="1、位扩展"><a href="#1、位扩展" class="headerlink" title="1、位扩展"></a>1、位扩展</h4><p>•当所选用的存储芯片的每个单元的数据位不能满足存储器所需的位数时，就要进行位扩展。</p><p>•位扩展的连接方式是将所有芯片的地址线、片选线、读&#x2F;写线对应连接，数据线分别引出。</p><p>例：用4K×2位的SRAM存储器芯片构成4K×8位的存储器，所需芯片数为（4K×8）&#x2F;（4K×2）&#x3D;4(片)。</p><p> 由于4K×2位的芯片有12条地址线A11<del>A0、2条数据线D1</del>D0、1个片选信号 和1个读&#x2F;写控制信号 ，因此由4K×2位的SRAM存储器芯片构成的4K×8位存储器有12条地址线A11<del>A0、8条数据线D7</del>D0、1个片选信号 和1个读&#x2F;写控制信号 。</p><p> 连接方式如图6.16所示。经过位扩展后，我们可以把经图（A）扩展后的存储器等效为一个4K×8位的存储器模块, 如图6.16（B）所示。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115193912878.png" alt="image-20221115193912878"> </p><h4 id="2、字扩展"><a href="#2、字扩展" class="headerlink" title="2、字扩展"></a>2、字扩展</h4><p>•字扩展就是进行存储器容量的扩展，在进行位扩展时，存储器容量未增加，仅仅是扩展了一个存储单元的数据位。从另一个角度讲，即在位扩展后，存储器的地址线未增加，只增加了数据线。</p><p>•字扩展的连接方式是将所有芯片的地址线、数据线、读&#x2F;写线对应连接，每个芯片的片选线要用译码器将高位地址译码后分别连接。</p><p>例：用4K×8位的SRAM存储器芯片构成16K×8位的存储器，所需芯片数为（16K×8）&#x2F;（4K×8）&#x3D;4(片) 。</p><p>  从所要设计的16K×8位的存储器分析，它有14条地址线A13<del>A0、8条数据线D7</del>D0，而我们现在所用的4K×8位的SRAM存储器芯片的地址线是12条，为了构成16K×8位的存储器，需要4个4K×8位的SRAM存储器芯片。</p><p> 在进行字扩展时，用12条地址线A11~A0分别与每个4K×8位的SRAM存储器芯片连接，用两条高位地址线A13、A12经过一个2-4译码器产生的译码信号分别与每个4K×8位的SRAM存储器芯片的片选信号连接，如图6.17所示。</p><p>•</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115194012143.png" alt="image-20221115194012143"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115194019542.png" alt="image-20221115194019542"></p><h4 id="3、字位扩展"><a href="#3、字位扩展" class="headerlink" title="3、字位扩展"></a>3、字位扩展</h4><p><strong>例</strong> CPU具有16条地址线（A15<del>A0），16条双向数据线（D15</del>D0），控制总线中与主存有关的信号有 (允许访存，低电平有效)， (读写控制，低电平为写，高电平为读)。主存按字编址，其地址空间分配如下：0~1FFFH为系统程序区，由EPROM芯片组成，从2000H起共24K地址空间为用户程序区，最后（最大）4K地址空间为系统程序工作区。现有如下芯片：</p><p>EPROM：4K×8位（仅有一个 端），8K×8位。</p><p>SRAM：16K×1位，2K×8位，4K×8位，8K×8位。</p><p>（1）请选择适当的芯片，按要求设计主存储器；</p><p>（2）可选用3:8译码器，画出主存储器与总线逻辑连接图。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115194050489.png" alt="image-20221115194050489"> </p><p>依给定条件，可选用：2片8K×8位EPROM，用于8K×16位系统程序区的设计；6片8K×8位SRAM，用于24K×16位的用户程序区设计；2片4K×8位SRAM，用于4K×16位系统程序工作区的设计。</p><p>2）在各存储空间的设计中，首先根据所选用芯片进行位扩展，即2片8K×8位EPROM芯片扩展成8K×16位EPROM模块；2片8K×8位SRAM芯片扩展成8K×16位的SRAM模块；2片4K×8位SRAM芯片扩展成4K×16位的SRAM模块。各模块的位扩展图如图6.18所示。</p><p>• </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115194105664.png" alt="image-20221115194105664"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115194113652.png" alt="image-20221115194113652"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221115194120362.png" alt="image-20221115194120362"> </p><h2 id="5-3-高速缓冲技术"><a href="#5-3-高速缓冲技术" class="headerlink" title="5.3 高速缓冲技术"></a>5.3 高速缓冲技术</h2><h3 id="5-3-1-程序的局部性"><a href="#5-3-1-程序的局部性" class="headerlink" title="5.3.1 程序的局部性"></a>5.3.1 程序的局部性</h3><p>Cache就是利用程序的局部性原理，把程序中正在使用的部分存放在一个容量较小的缓冲存储器（Cache）中，使CPU的访问操作绝大部分时间针对Cache进行，从而使程序的执行速度大大提高。</p><h3 id="5-3-2-Cache的工作原理"><a href="#5-3-2-Cache的工作原理" class="headerlink" title="5.3.2 Cache的工作原理"></a>5.3.2 Cache的工作原理</h3><p>2．Cache的工作原理</p><p>•CPU与Cache之间的数据交换以字为单位，而Cache与主存之间的数据交换以块为单位，一个块由若干个字或字节组成，大小相等，常将Cache的块称为Cache行。在一个时间段内，Cache的某行中存放着主存某块的全部信息，即Cache的某一行是主存某块的副本(或叫映像)。</p><p>•当CPU访问某一存储单元（按字访问）的内容时，通过地址总线向主存和Cache同时发出访问请求，若访问的内容在Cache中，表示命中，此时，终止内存访问；若访问的内容不在Cache中，表示未命中，此时继续访问内存，并将含有所访问内存单元的相应内存块调入Cache的某行。</p><p>•</p><h3 id="5-3-3、Cache的管理"><a href="#5-3-3、Cache的管理" class="headerlink" title="5.3.3、Cache的管理"></a>5.3.3、Cache的管理</h3><h4 id="1、Cache的映射方式"><a href="#1、Cache的映射方式" class="headerlink" title="1、Cache的映射方式"></a>1、Cache的映射方式</h4><p>常用的Cache的地址映射有全相联方式、直接方式和组相联方式</p><p>•全相联映射方式是主存中一个块可以映射到Cache中的任意一行</p><p>•直接映射方式也是一种多对一的映射关系，与全相联映射方式的区别在于一个主存块只能映射到cache的一个特定行。直接映射方式的优点是硬件简单，成本低。缺点是每个主存块只有一个固定的行位置可存放，容易产生冲突。</p><p>•组相联映射方式是把主存按Cache的容量分区，主存中的各区和Cache再按同样大小划分成相等的组，组内再划分为块。</p><h4 id="2、替换策略"><a href="#2、替换策略" class="headerlink" title="2、替换策略"></a>2、替换策略</h4><p>•选择替换策略的主要目的是获得较高的Cache命中率，换句话说，要使得所访问的块不在Cache中的次数为最小，使Cache中尽可能地保存最新数据。</p><p>•目前常用的替换策略有最不经常使用（LFU）策略，最近最少使用策略和随机替换策略。</p><p>1）最不经常使用（LFU）策略</p><p>将一段时间内被访问次数最少的Cache行数据替换出去的方法称为LFU算法。</p><p>2）最近最少使用（LRU）策略</p><p>LRU算法是将近期内长久未被访问的行替换出去。</p><p>\3) 随机替换策略</p><p>随机替换策略就是随机地选取Cache的一行换出，这种策略硬件易于实现，且速度快于LFU和LRU算法，其缺点是可能换出的行随后马上又要使用，从而降低Cache命中率和工作效率。</p><p><strong>2****．写操作策略</strong></p><p>1） 写回法</p><p>2）全写法</p><p>3）写一次法</p><h2 id="5-4-虚拟存储技术"><a href="#5-4-虚拟存储技术" class="headerlink" title="5.4 虚拟存储技术"></a>5.4 虚拟存储技术</h2><p><strong>32****位微处理器存储器系统简介</strong></p><p> 80486充分重视了对多任务操作系统的支持性。主要体现在两方面：一是从硬件上为任务之间的切换提供了良好的条件；二是支持容量极大的虚拟存储器，并且为了管理如此大的存储空间，采用片内两级管理。</p><p>•</p><p>•</p><p><strong>1****．虚拟存储技术</strong></p><p>•虚拟存储技术的最终体现是建立一个虚拟存储器。虚拟存储器是相对物理存储器而言的，物理存储器指由地址总线直接访问的存储空间，其地址称物理地址。</p><p>•虚拟存储器机制由主存储器、辅助存储器和管理部件共同组建。通过管理软件，达到主存和辅存密切配合，使整个存储系统具有接近主存的速度和接近辅存的容量。这种技术不断改进完善，就形成了虚拟存储系统。</p><p>•按照对主存的划分方式，虚拟存储器有段式虚拟存储器和页式虚拟存储器两类。</p><p>2．片内两级存储管理</p><p>•MMU和CPU做在同一个芯片中，并使MMU能管理大容量的虚拟存储器。这种片内的MMU免去了通常片外MMU带来的种种延迟，而且，程序员可以使用的存储空间即逻辑地址空间大大超过物理地址空间，所以，极大地减少了存储空间出现的故障率，减轻了操作系统的负担。</p><p>•在两级存储管理中，段的大小可以选择，因此，可以随数据结构和代码模块的大小而确定，使用起来很灵活，另外，对每一段还可赋予属性和保护信息，从而可以有效地防止在多任务环境下各个模块对存储器的越权访问。</p><p>•</p><p>•在介绍存储器基本概念（包括存储器的分类、存储器的分级结构以及存储器的主要性能指标等）的基础上，以如何构建存储器为主线，介绍了构成存储器的基本单位，即存储元。由此介绍了如何构建存储单元的方法，以及由存储单元构成存储阵列进而构成存储器的方法，紧接着介绍了存储器容量扩展的方法。</p><p>•对广泛使用SRAM和DRAM而言，存储器扩展的思路和方法是相同的，前者速度比后者快，但集成度不如后者高，另外，DRAM存储器需要刷新。</p><p>•只读存储器和快闪存储器可在断电后也能保存原写入的数据。快闪存储器具有低功耗、高可靠性以及移动性等特点，是一种全新的存储器结构。</p><p>•Cache仅仅是一种高速缓冲存储器，是为提高计算机系统性能所采用的一种硬件解决方案。主存与Cache的地址映射有三种方案，其中组相联方式是全相联和直接映射的折衷方案，得到了广发应用。</p><p>•本章最后简单地介绍了80X86存储器的组织和虚拟存储管理技术。虚拟存储技术可大大提高存储系统的效率，增强系统的安全稳定性。</p><p>•</p><p>•</p><h1 id="六、输入输出接口及数据传输控制方式"><a href="#六、输入输出接口及数据传输控制方式" class="headerlink" title="六、输入输出接口及数据传输控制方式"></a>六、输入输出接口及数据传输控制方式</h1><p>单片机：一种包含CPU、I&#x2F;O等的芯片，存储器不会太大，几M，几十M</p><p>8086CPU可以控制1M内存，可接更大的，只是浪费</p><p>独立编址：<br>好处：外设的地址不占用内存的地址<br>坏处：区分很难</p><p>串行通信：先发一个信息，然后等间隔发送</p><p>并行通信：先发一个信息，之后就不用等间隔发送</p><h2 id="6-1-接口概述"><a href="#6-1-接口概述" class="headerlink" title="6.1 接口概述"></a>6.1 接口概述</h2><h3 id="6-1-1、概念"><a href="#6-1-1、概念" class="headerlink" title="6.1.1、概念"></a>6.1.1、概念</h3><p>接口（Interface）包括软件接口和硬件接口</p><ul><li>软件接口<br>其一是软件本身的狭义“接口”，是软件不同部分之间的交互接口。比如API——应用程序接口<br>其二是人与软件之间的交互界面——“用户界面”</li><li>硬件接口，通常称为I&#x2F;O接口<br>就是把外围设备同微型计算机连接起来的电路称为外设接口电路，简称外设接口</li></ul><h3 id="6-1-2-接口的功能"><a href="#6-1-2-接口的功能" class="headerlink" title="6.1.2 接口的功能"></a>6.1.2 接口的功能</h3><p>微型计算机是由大规模集成电路组成的、体积较小的电子计算机。</p><p>它是以微处理器为基础，配以内存储器及输入输出（I&#x2F;O）接口电路和相应的辅助电路而构成的裸机</p><h3 id="6-1-3-使用接口部件的原因？"><a href="#6-1-3-使用接口部件的原因？" class="headerlink" title="6.1.3 使用接口部件的原因？"></a>6.1.3 使用接口部件的原因？</h3><p>CPU与外部设备进行数据交换时通常存在：</p><ul><li>速度不匹配</li><li>时序不匹配</li><li>信息格式不匹配<br>一边是大头，一边是小头，8086是小头</li><li>信息类型不匹配<br>一边是模拟信号，一边是数字信号</li></ul><p>基于以上原因，为了要把外设与CPU连接起来，必须要有接口部件，以完成他们之间的速度匹配、信号匹配和完成某种控制功能。</p><h3 id="6-1-4-CPU与外设之间所传送的信息类型"><a href="#6-1-4-CPU与外设之间所传送的信息类型" class="headerlink" title="6.1.4 CPU与外设之间所传送的信息类型"></a>6.1.4 CPU与外设之间所传送的信息类型</h3><p>CPU和I&#x2F;O端口之间所交换的信息，有以下几种：</p><p>（1）<strong>数据信息</strong>：包括数字量、模拟量、开关量等，可以输入、也可以输出</p><p>（2）<strong>状态信息：</strong>这是I&#x2F;O端口送给CPU的有关本端口所对应的外设当前状态的信息。供CPU进行分析、判断和决策等。</p><p>（3）<strong>控制信息：</strong>这是CPU送给I&#x2F;O端口的控制命令，使相应的外部设备完成特定的操作。</p><p>微机的接口一般有以下几个功能：</p><ol><li>执行CPU命令的功能</li><li>返回外设状态的功能</li><li>数据缓冲的功能</li><li>设备寻址的功能（例如前面讲的存储器自带地址解码器）</li><li>信号转换的功能（例如光驱将电信号$\leftrightarrow$光信号）</li><li>数据宽度与数据格式转换的功能</li></ol><h2 id="6-2-I-O端口及其编址方式"><a href="#6-2-I-O端口及其编址方式" class="headerlink" title="6.2 I&#x2F;O端口及其编址方式"></a>6.2 I&#x2F;O端口及其编址方式</h2><h3 id="6-2-1-I-O端口和I-O操作"><a href="#6-2-1-I-O端口和I-O操作" class="headerlink" title="6.2.1 I&#x2F;O端口和I&#x2F;O操作"></a>6.2.1 I&#x2F;O端口和I&#x2F;O操作</h3><p>端口（Port）是指能微处理器直接访问的<strong>接口电路中的寄存器的地址</strong>。微处理器通过这些地址（即端口）向接口电路中的寄存器发送命令、读取状态和传送数据。</p><p>I&#x2F;O操作就是指对I&#x2F;O端口的操作，即CPU所访问的是与I&#x2F;O设备相关的端口，而不是I&#x2F;O设备本身。</p><p>计算机对外设的操作-&gt;就是对外设的接口电路的操作-&gt;就是对接口电路上的寄存器操作-&gt;就是对该寄存器的地址（端口）进行操作。（下一步的问题就是如何分配I&#x2F;O端口的地址，或者说给定了I&#x2F;O地址，如何和地址总线连接）</p><h3 id="6-2-2-I-O端口编址方式"><a href="#6-2-2-I-O端口编址方式" class="headerlink" title="6.2.2 I&#x2F;O端口编址方式"></a>6.2.2 I&#x2F;O端口编址方式</h3><p>一般来说，I&#x2F;O端口有存储初期映像编址和独立编址两种方式</p><p>（1）存储器映像编址的I&#x2F;O端口<br>将I&#x2F;O端口地址置于存储器空间，和存储单元统一编址<br><strong>优点：</strong>对端口访问非常灵活，存储器的各种寻址方式都可用来寻址端口。而且I&#x2F;O接口与CPU的连接方法和存储器芯片与CPU的连接方法类似<br><strong>缺点：</strong>端口占用了一部分存储空间，而且端口地址的位数和存储单元地址位数一样，比独立编址的I&#x2F;O端口地址长，因而访问速度较慢</p><p>（2）独立编址的I&#x2F;O端口<br>把接口中的端口地址单独编址。这样，在一个计算机系统中可形成两个独立的地址空间，即存储器地址空间和I&#x2F;O地址空间。</p><p>8086采用独立编址，从M&#x2F;$\overline{IO}$可以看出来</p><p><strong>优点：</strong>I&#x2F;O端口地址不占用存储器空间，使用专门的I&#x2F;O指令对端口进行操作，I&#x2F;O指令短，执行速度快，并且由于专门I&#x2F;O指令与存储器访问指令有明显的却别，使程序中I&#x2F;O操作和存储器操作层次清晰，程序的可读性强</p><p><strong>缺点：</strong>需设置专门的I&#x2F;O指令和控制信号，增加了系统的开销</p><p><strong>例子：</strong>说明如何将CPU进行地址空间划分，或者说如何将I&#x2F;O设备介入到一个微机系统中</p><p>微机系统中CPU和其他（多个）部件的互联一直采用总线型行，变相的广播式通信，所以某一个时刻只能有一个部件和CPU通信（One chip selected,others deselected）</p><h3 id="6-2-3-总线型通信的基本原理"><a href="#6-2-3-总线型通信的基本原理" class="headerlink" title="6.2.3 总线型通信的基本原理"></a>6.2.3 总线型通信的基本原理</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114105729959.png" alt="image-20221114105729959"></p><p>A,C通信时，一定不能B,D也通信，因为会引起总线上的电压编码违例（即冲突），导致所有的通信无效。</p><p>假设A是CPU，则C被选中时，自然B，D都是未选中状态</p><h3 id="6-2-4-I-O端口及其地址译码"><a href="#6-2-4-I-O端口及其地址译码" class="headerlink" title="6.2.4 I&#x2F;O端口及其地址译码"></a>6.2.4 I&#x2F;O端口及其地址译码</h3><p>I&#x2F;O地址译码电路：指CPU为了对I&#x2F;O端口进行读写操作需要把来自地址总线上的地址翻译成所需要访问的端口的过程。</p><p>I&#x2F;O端口地址译码的方法灵活多样，可按地址和控制信号不同的组合进行译码。有两种译码方案：</p><ol><li>高位地址线与CPU的控制信号进行逻辑组合，经过译码电路产生I&#x2F;O接口芯片的片选信号，实现系统中的片间寻址</li><li>低位地址线不参与译码，直接连接I&#x2F;O接口芯片，进行I&#x2F;O接口芯片的片内端口寻址，即寄存器寻址，此时，低位地址线又称为接口电路中的寄存器寻址线，低位地址线的条数应由系统中含有寄存器数目最多的接口芯片来决定</li></ol><p>I&#x2F;O端口地址译码电路的形式随设计任务的复杂度而变化，一般可分为固定式单端口地址译码电路、固定式多端口地址译码电路和可选式地址译码电路</p><h4 id="1-固定式单端口地址译码电路"><a href="#1-固定式单端口地址译码电路" class="headerlink" title="1 固定式单端口地址译码电路"></a>1 固定式单端口地址译码电路</h4><p> 固定式单端口地址译码电路是指该译码电路只能产生一个不可更改的端口地址。由于形式比较简单,故一般用门电路实现。</p><p><strong>例****1</strong> 假设某微处理器共有12条地址线，即为A11A10A9A8A7A6A5A4A3A2A1A0，试用74LS20&#x2F;30&#x2F;32和74LS04设计I&#x2F;O端口地址为2FFH（片选信号为低电平有效）。</p><p>解：依题意，要产生2FFH端口地址，则译码电路的输入地址线A11A10A9A8A7A6A5A4A3A2A1A0的值应为001011111111，采用门电路的译码电路如图所示</p><p>要想使得7432的输出是低电平的片选信号，显然要求或门的输入均为低电平才可能<strong>…</strong></p><p>7430是八输入端与非门，7420是四输入与非门</p><p>7432是2输入或门，该门的输出显然接外设的CS#<strong>信号</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114111353745.png" alt="image-20221114111353745"></p><p>对应的I&#x2F;O设备操作方法：OUT 2FFH,AL<br>                                                IN AL,2FFH等等</p><p><strong>例二</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114112558031.png" alt="image-20221114112558031"> </p><p>同计算机网络的总线型一样，其实每个外设&#x2F;内存芯片，只要挂在总线上都能收到DataBus的信息，但是只有选通(Chip Selected)的芯片才会启动工作。</p><p>注意这里只是逻辑原理图，实际中没有十个输入的与非门，还是需要多片74xxx搭配</p><h4 id="2-固定式多端口地址译码电路"><a href="#2-固定式多端口地址译码电路" class="headerlink" title="2 固定式多端口地址译码电路"></a>2 固定式多端口地址译码电路</h4><p>固定式多端口地址译码电路能同时译出多个地址，但每个地址是固定不变的，一般采用译码器译码比较方便。译码器的型号很多， 74LS138译码（3-8译码器）、74LS154（4-16译码器）和74LS139（2-4译码器）等。</p><p><strong>一个独立编址的例子</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114113253000.png" alt="image-20221114113253000"> </p><p>•SRAM的寻址空间可以达到CPU的最大寻址空间，为什么？</p><p>•Dev1的寻址空间为？Dev1内部最多有几个端口号？–显然和寻址空间对应，有4个。</p><p>•如何添加Dev2，Dev3…使得不和Dev1,SRAM空间冲突，请举例说明。</p><p><strong>工作流程</strong></p><p>假设Dev1是一个光驱外设，其控制寄存器是其接口电路的第二个寄存器（即01寄存器），当给这个寄存器写入0x22时可以弹出光驱，则其工作流程如下：</p><p>  程序为       MOV AL,22H </p><p>​               OUT 10101B,AL     </p><p>高电平：MOV寄  低电平：IN&#x2F;OUT</p><p> 第二条指令的硬件工作流程如下：</p><p><strong>Step1</strong>: 由于OUT是I&#x2F;O指令，因此CPU将M&#x2F;IO#置低电平，所以首先内存芯片Deselected，接着输出地址，WR#，输出0x22到数据总线，由于输出地址以101开头，因此Dev1被选中（<em>地址总线、控制总线以及数据总线虽然内存芯片也能收到，由于未选中此时是无效的</em>）。</p><p><strong>Step2</strong>: 由于地址的后两位是01，按照该光驱器件的手册，是控制寄存器，而且是WR#操作，也意味着该芯片的控制寄存器写操作被启动</p><p><strong>Step3</strong>: 从数据总线上获得数据0x22，并将该数据写入到01寄存器 </p><p><strong>Step4</strong>: 该外设对于控制寄存器被写入0x22是敏感的，马上进行弹出光驱的操作（这一步和微机电路板的设计就无关了）。</p><h4 id="3-可选式地址译码电路"><a href="#3-可选式地址译码电路" class="headerlink" title="3 可选式地址译码电路"></a>3 可选式地址译码电路</h4><p>如果用户要求接口电路的端口地址能适应不同的地址分配场合，或为系统以后扩充留有余地，则可采用可选式地址译码电路。其电路可由地址开关、译码器、异或门等组成，随着PLD器件的普及，甚至可使用GAL、PAL等PLD器件来构成可选式地址译码电路。</p><p><strong>可选式多端口地址译码实例</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114114030646.png" alt="image-20221114114030646"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114114204061.png" alt="image-20221114114204061"> </p><h2 id="6-3-CPU与外设数据的传输控制方式"><a href="#6-3-CPU与外设数据的传输控制方式" class="headerlink" title="6.3 CPU与外设数据的传输控制方式"></a>6.3 CPU与外设数据的传输控制方式</h2><p>CPU与外设之间传输数据的控制方式通常有三种：</p><p>•程序方式（1 无条件传送 2 查询方式）</p><p>•中断方式</p><p>•DMA方式</p><h3 id="6-3-1-程序方式"><a href="#6-3-1-程序方式" class="headerlink" title="6.3.1 程序方式"></a>6.3.1 程序方式</h3><h4 id="1-无条件传送"><a href="#1-无条件传送" class="headerlink" title="1 无条件传送"></a>1 无条件传送</h4><p>作用对象：适用于总是处于准备好状态的外设</p><p>以下外设可采用无条件传送方式：</p><ul><li>开关</li><li>发光器件(如发光二极管、7段数码管、灯泡等)</li><li>继电器(小电流去控制大电流的一个开关装置)</li><li>步进电机</li></ul><p><strong>优点</strong>：软件及接口硬件简单</p><p><strong>缺点</strong>：只适用于简单外设，适应范围较窄</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114115453785.png" alt="image-20221114115453785"> </p><p>在输入&#x2F;输出接口电路中为什么要求输入接口加三态缓冲器,输出接口加锁存器?</p><p>   在某一时刻只能有一个设备向总线发送数据，所以在输入端口上要接三态缓存器。当CPU选通设备时，才允许设备将数据送到系统总线，其中高阻态用于不输入数据时彻底断开设备（实际电路中很难设置真实物理开关）；为了将数据总线的数据传送到外部设备时，由于有些设备速度慢，需要足够的时间处理，所以需要将数据总线上的数据锁存存起来，系统不用等待，提高系统的利用率</p><p>当进行输入时，由于数据保持时间比CPU的处理时间长， 输入端必须用输入缓冲器与CPU的数据总线相连。当CPU执行输入指令时，I&#x2F;O读信号IOR有效，来自输入设备的数据到达数据总线，传送给CPU。显然，CPU在执行输入指令时，要求外设的数据已经准备好，否则就会出错。 </p><p>   当进行输出时，由于外设速度较慢，要求接口有锁存功能， 即CPU送给外设的数据应该在接口中保持一段时间。当CPU执行输出指令时，I&#x2F;O写信号IOW有效，CPU输出的信息经过数据总线进入输出锁存器，输出锁存器保持这个数据， 直到外设取走该数据。显然，CPU在执行输出指令时，必须保证锁存器是空闲的。 </p><p>   从以上分析可以看出，无条件传送是最简便的传送方式， 它所需的硬件和软件都较少。</p><h4 id="2-查询方式"><a href="#2-查询方式" class="headerlink" title="2 查询方式"></a>2 查询方式</h4><p>适用于外设并不总是准备好，而且对传送速率、传送效率要求不高的场合。</p><p> CPU在与外设交换数据前必须询问外设状态——“你准备好没有？”</p><p> 对外设的要求：应提供设备状态信息</p><p> 对接口的要求：需要提供状态端口 <em>即状态寄存器</em></p><p> <strong>优点</strong>：软件比较简单</p><p> <strong>缺点</strong>：CPU效率低，数据传送的实时性差，速度较慢</p><h5 id="1）查询式输入"><a href="#1）查询式输入" class="headerlink" title="1）查询式输入"></a>1）查询式输入</h5><p>下图所示为查询式输入的接口电路，该电路有两个端口寄存器，即状态口寄存器和数据口寄存器。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114120210096.png" alt="image-20221114120210096"> </p><p> 当输入设备准备好数据之后，发出选通信号。它一方面把输入数据锁存到数据锁存器中，另一方面使状态标志触发器置1。状态标志是一位信号，通过缓冲器后，接到CPU数据总线的某一位上，假设接至D7位。CPU先读状态口，查询D7是否为1。若D7&#x3D;1，表示输入数据已经准备好，再读数据口，取走输入数据，同时使状态标志触发器复位。 </p><p><strong>查询式输入数据传送过程的4个步骤：</strong>（重点）</p><p>①CPU先读取状态字</p><p>②检查状态字是否表明数据准备就绪</p><p>③如果准备就绪，则执行输入指令读取数据，</p><p>④状态位清零。这样便开始下一个数据传输过程。</p><h5 id="2）查询式输出"><a href="#2）查询式输出" class="headerlink" title="2）查询式输出"></a>2）查询式输出</h5><p>当CPU要往一个外设输出数据时，先读取接口中的状态字，如果状态字表明外设有“空”或“不忙”,可以往外设输出数据，此时CPU才执行输出指令，否则CPU等待。接口电路如图： </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114120311849.png" alt="image-20221114120311849"> </p><p>输出过程：</p><p> 当前输出设备空闲时，状态标志触发器清0。</p><p> CPU在输出数据之前，先读取状态信息。假设忙闲标志接至数据线D0位，当D0&#x3D;0时，表示输出设备空闲，CPU再对数据口执行输出指令。</p><p> 数据口选中信号一方面把输出数据写入锁存器，一方面使状态标志触发器置1，通知输出设备。当输出设备取走当前数据后，向接口发出确认信号ACK，使状态标志触发器清0， 表示输出设备空闲。</p><h3 id="6-3-2-中断方式"><a href="#6-3-2-中断方式" class="headerlink" title="6.3.2 中断方式"></a>6.3.2 中断方式</h3><p>  中断控制的输入和输出方式，也称中断传送方式，即当外设的输入数据准备好或接收数据的锁存器为空时，主动向CPU发出中断请求，使CPU中断原来执行的程序(主程序)，转去执行为外设服务的输入或输出操作，服务完毕，CPU再继续执行原来的程序。 </p><p>  中断传送方式中， CPU和外设(甚至多个外设)可同时工作， 从而大大提高了CPU的效率和控制程序执行的实时性。必须经过 (1)暂停主程序，实现程序的转移，即中断响应。（2）保护和恢复有关寄存器内容。（3）执行I&#x2F;O操作，并实现内存到累加器再到端口之间的传送。（4）实现中断返回。 </p><p>中断传送时的接口电路如图所示：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114120353711.png" alt="image-20221114120353711"></p><h3 id="6-3-3-DMA方式"><a href="#6-3-3-DMA方式" class="headerlink" title="6.3.3 DMA方式"></a>6.3.3 DMA方式</h3><p>数据在I&#x2F;O接口与存储器之间的传送，不经CPU的干预，而是在专用硬件电路的控制下直接传送。这种方法称为DMA 。在这种方式下，传送的速度就只取决于存储器和外设的工作速度。这大大提高了数据传送速度。</p><p>DMA传送主要应用于高速度大批量数据传送的系统中，如磁盘存取、图像处理、高速数据采集系统等，以提高数据的吞吐量。</p><p>DMA传送一般有三种形式</p><p>①存储器与I&#x2F;O设备之间的数据传送；</p><p>②存储器与存储器之间的数据传送；</p><p>③I&#x2F;O设备与I&#x2F;O设备之间的传送。 </p><p>为实现DMA工作方式而设计的专用接口电路，称为DMA控制器(DMAC)。例如，Intel公司的8257、8237，Zilog公司的Z 8410(Z80 DMAC)，Motorola公司的MC6844等，都是能实现DMA方式的可编程DMAC芯片。DMA控制器必须有以下功能：</p><p>①能接收外设发出的DMA 请求信号，然后向CPU 发出总线接管请求信号。</p><p>②当CPU发出总线请求允许信号并放弃对总线的控制后，DMAC能接替对总线的控制，进入DMA方式。</p><p>③DMAC得到总线控制权后，要往地址总线发送地址信号，能修改地址指针，并能发出读／写控制信号。</p><p>④能决定本次DMA传送的字节数，判断DMA传送是否结束。</p><p>⑤DMA过程结束时，能发出DMA 结束信号，将总线控制权交还给CPU。</p><h1 id="七、串并行接口技术"><a href="#七、串并行接口技术" class="headerlink" title="七、串并行接口技术"></a>七、串并行接口技术</h1><p>61、三种工作方式<br>8255实验<br>8253&#x2F;5254重点<br>83、基础知识<br>84、<br>85、同步异步区别<br>95、232 3根线2.3.7、全双工、<br>8251不考</p><h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><h3 id="7-1-1、定时与计数"><a href="#7-1-1、定时与计数" class="headerlink" title="7.1.1、定时与计数"></a>7.1.1、定时与计数</h3><p> 控制系统与计算机中，常常需要有定时信号，以实现定时或延时控制。如定时中断，动态存储器的定时刷新等。此外，还需要有计数功能，以实现对外部事件的计数，当外部事件发生的次数达到规定值后，向计算机发出中断请求，进而实现相应的控制或处理。</p><p> <strong>定时的本质就是计数</strong>，当计数信号是周期信号时，计数就可以用于定时。如以秒为单位计数，则计数60次就是1分，计满60分就是1小时，计满24小时就是1天</p><h3 id="7-1-2、实现定时和计数的三种方法"><a href="#7-1-2、实现定时和计数的三种方法" class="headerlink" title="7.1.2、实现定时和计数的三种方法"></a>7.1.2、实现定时和计数的三种方法</h3><p><strong>软件方法：</strong>采用软件定时，让计算机执行一个专门的指令序列，由执行指令序列中每条指令所花费的时间构成一个固定的时间间隔，从而达到定时或延时的目的。</p><p><strong>不可编程的硬件定时：</strong>采用电子器件构成定时或延时电路，通过调整电路中定时元件的数值，可实现调整定时或延时的数值和范围。</p><p><strong>可编程的硬件定时：</strong>在微机系统中采用软硬件结合的方法，即采用可编程定时的电路器件实现定时。如：Intel 8253&#x2F;8254，Zilog CTC，MC6840等。8253-5（5MHz）和8254-2（10MHz）的引脚和功能都是兼容的。</p><h2 id="7-2-可编程定时器计数器8253-8254"><a href="#7-2-可编程定时器计数器8253-8254" class="headerlink" title="7.2 可编程定时器计数器8253&#x2F;8254"></a>7.2 可编程定时器计数器8253&#x2F;8254</h2><h3 id="7-2-1、概念"><a href="#7-2-1、概念" class="headerlink" title="7.2.1、概念"></a>7.2.1、概念</h3><ul><li>3个独立的16位计数器通道</li><li>每个计数器有6种工作方式，按二进制或十进制（BCD码）计数</li><li>每个计数器在开始工作前必须预制时间常数</li><li>每个计数器在工作过程中的当前计数值可被CPU读出。（注：时间常数也可在技术过程中更改）</li></ul><p>8254是8253的改进型</p><p> <strong>8254</strong> 每个计数器允许的最高计数频率为10MHz（<strong>8253</strong> 为2MHz） 。</p><p>8254 有读回命令（8253 没有） ， 除了可以读出当前计数单元的内容外， 还可以读出状态寄存器的内容。</p><h3 id="7-2-2、8253的结构框图"><a href="#7-2-2、8253的结构框图" class="headerlink" title="7.2.2、8253的结构框图"></a>7.2.2、8253的结构框图</h3><p>如图所示8253由与CPU接口、内部控制电路以及三个计数器通道组成。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114143726025.png" alt="image-20221114143726025"></p><p><strong>数据总线缓冲器：</strong>CPU用输入输出指令对8253进行读写操作时的所有信息都通过该缓冲器传送。</p><p><strong>读&#x2F;写逻辑：</strong>这是8253内部操作的控制电路，它从系统控制总线上接收输入信号，然后转换成8253内部操作的各种控制信号。</p><p><strong>控制字寄存器：</strong>通过该寄存器CPU可以设置三个计数器通道的工作方式。</p><p><strong>计数器0，1，2：</strong>这是3个独立的计数&#x2F;定时通道，是16位的可设置计数初值的减法计数器。如图7.2所示，是每个计数通道的结构。内有计数初值寄存器CR，计数执行部件CE和输出锁存器OL及控制字寄存器。其中CE作减法计数。 </p><h3 id="7-2-3、计数器结构示意图"><a href="#7-2-3、计数器结构示意图" class="headerlink" title="7.2.3、计数器结构示意图"></a>7.2.3、计数器结构示意图</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114144212782.png" alt="image-20221114144212782"> </p><ul><li>计数器初值存于<strong>预置寄存器</strong></li><li>在计数过程中：<strong>减1计数器</strong>的值不断递减，而预置寄存器中的预置不变</li><li><strong>输出锁存器</strong>用于写入锁存命令时，锁定当前计数值</li></ul><p> 计数初值寄存器CR，计数执行部件CE和输出锁存器OL都是16位的寄存器，而8253&#x2F;8254与CPU连接的数据线却是8位的，因此8253&#x2F;8254有三种读写格式：</p><p>•只读写低8位，高8位清零。适合计数初值小于等于255，如12H</p><p>•只读写高8位，低8位清零。适合计数初值大于255，但是低8位为0的情况，如1200H</p><p>•先读写低8位，后读写高8位。适合计数初值大于255（小于65535），如1234H</p><h3 id="7-2-4、8253的引脚"><a href="#7-2-4、8253的引脚" class="headerlink" title="7.2.4、8253的引脚"></a>7.2.4、8253的引脚</h3><p>  8253与CPU接口的引脚，除了没有复位信号RESET引脚外，其他与8255相同。如图7.3所示，</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114145527838.png" alt="image-20221114145527838"> </p><h4 id="1-计数器的3个引脚"><a href="#1-计数器的3个引脚" class="headerlink" title="1 计数器的3个引脚"></a>1 计数器的3个引脚</h4><ul><li>CLK时钟输入信号——在计数过程中，此引脚上每输入一个时钟信号（下降沿），计数器的计数值减1</li><li>GATE门控制输入信号——控制计数器工作，可分成<strong>电平控制</strong>和<strong>上升沿控制</strong>两种类型</li><li><strong>OUT计数器输出信号</strong>——当一次计数过程结束（计数值减为0），OUT引脚上将产生一个输出信号</li></ul><h4 id="2-与处理器接口"><a href="#2-与处理器接口" class="headerlink" title="2 与处理器接口"></a>2 与处理器接口</h4><ul><li>D<sub>0</sub>~D<sub>7</sub>数据线</li><li>A<sub>0</sub>~A<sub>1</sub>地址线</li><li>$\overline{RD}$读信号</li><li>$\overline{WR}$写信号</li><li>$\overline{CS}$片选信号</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114150853478.png" alt="image-20221114150853478"></p><h3 id="7-2-5、8253的工作方式"><a href="#7-2-5、8253的工作方式" class="headerlink" title="7.2.5、8253的工作方式"></a>7.2.5、8253的工作方式</h3><p>8253有6种工作方式，每个通道均可以通过编程选择工作方式。</p><p>•<strong>计数启动方式：</strong><br> 软件启动：GATE端为高电平，置入计数初值后的第2个CLK脉冲的下降沿就开始计数<br>硬件启动：GATE端要求有一个上升沿跳变，对应CLK脉冲的下降沿开始计数</p><p>•<strong>工作方式：</strong></p><p>(1)方式0：计数到零产生中断请求。<strong>软件启动。</strong> </p><p>(2)方式1：硬件可重复触发的单稳态触发器。<strong>硬件启动。</strong></p><p>(3)方式2：分频器。<strong>软、硬件启动。</strong></p><p>(4)方式3：方波发生器（用得最多的方式）。<strong>软、硬件启动。</strong></p><p>(5)方式4：软件触发选通。<strong>软件启动。</strong></p><p>(6)方式5：硬件触发选通。<strong>硬件启动。</strong></p><h3 id="7-2-6、8254的工作方式"><a href="#7-2-6、8254的工作方式" class="headerlink" title="7.2.6、8254的工作方式"></a>7.2.6、8254的工作方式</h3><ul><li>8254有6种工作方式，由<strong>方式控制字</strong>确定</li><li>不同工作方式的区分点：<br>输出波形<br>计数过程中门控信号的影响<br>启动触发方式</li></ul><p>每种工作方式的过程类似：</p><ol><li>设定工作方式</li><li>设定计数初值</li><li>硬件启动</li><li>计数初值进入减1计数器</li><li>每输入一个时钟计数器减1的计数过程</li><li>计数过程结束</li></ol><h4 id="方式0-计数到零产生中断请求"><a href="#方式0-计数到零产生中断请求" class="headerlink" title="方式0 计数到零产生中断请求"></a>方式0 计数到零产生中断请求</h4><p>①如图7.4所示，CPU写入控制字CW，在WR的上升沿，OUT输出变低或保持低。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114153511289.png" alt="image-20221114153511289"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114153527550.png" alt="image-20221114153527550"> </p><p>用作计数器时一般工作在方式<strong>0</strong>。所谓计数结束产生中断，是指在计数值减到0时，输出端（OUT）产生的输出信号可作为中断申请信号，要求CPU进行相应的处理</p><p>② CPU将计数初值N写入计数初值寄存器CR（图中初值为4），在WR上升沿之后的第一个CLK脉冲的下降沿将CR的内容送入计数执行部件CE。</p><p>③ 当GATE&#x3D;1时，在CR内容送入CE后的每一个CLK脉冲下降沿使CE减1计数，在计数过程中OUT一直保持低直到计数为零。</p><p><strong>④ 计数器减到0时，OUT由低跳到高电平，此输出信号可作为中断请求。</strong></p><p>⑤在方式0中，当GATA&#x3D;0时，计数暂停，当GATA变高后就接着计数。如图7.5所示。</p><p>⑥在计数过程中也可改变计数初值。在写入新的计数初值后，计数器将立即按新的计数值重新开始计数，即改变计数初值是立即有效的，参见图7.6</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114153817192.png" alt="image-20221114153817192"> </p><p><strong>方式0特点：</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114153851577.png" alt="image-20221114153851577"> </p><h4 id="方式1-硬件可重复触发的单稳态触发器"><a href="#方式1-硬件可重复触发的单稳态触发器" class="headerlink" title="方式1 硬件可重复触发的单稳态触发器"></a>方式1 硬件可重复触发的单稳态触发器</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114154023324.png" alt="image-20221114154023324"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114154045936.png" alt="image-20221114154045936"> </p><h4 id="方式2-分频器（分频脉冲发生器）"><a href="#方式2-分频器（分频脉冲发生器）" class="headerlink" title="方式2 分频器（分频脉冲发生器）"></a>方式2 分频器（分频脉冲发生器）</h4><p>分频：就是把输入信号的频率变成成倍数地低于输入频率的输出信号</p><p>① 不用重新设置计数初值，通道能连续工作。如果初值为N，则每输入N个CLK脉冲，输出一个负脉冲，负脉冲的宽度为1个CLK周期，重复周期为N倍的CLK周期。</p><p>② 计数过程中可由GATE信号控制，当GATE信号变低时，立即暂停现行计数；当GATE信号变高后，从计数初值开始重新计数，如图7.9所示。</p><p>③ 如果在计数过程中，CPU重新写入计数初值，则对于正在进行的计数无影响，而是从下一个计数操作周期开始按新的计数值改变输出脉冲的频率，如图7.10。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114154328911.png" alt="image-20221114154328911"> </p><h4 id="方式3-方波发生器"><a href="#方式3-方波发生器" class="headerlink" title="方式3 方波发生器"></a>方式3 方波发生器</h4><p>分频方波发生器</p><p>常用于<strong>波特率发生器</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114155406696.png" alt="image-20221114155406696"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114155449840.png" alt="image-20221114155449840"> </p><h4 id="方式4-软件触发选通"><a href="#方式4-软件触发选通" class="headerlink" title="方式4 软件触发选通"></a>方式4 软件触发选通</h4><p><strong>软触发是靠软件编程的方式触发启动，一旦程序编写好了，触发启动是自动的有规律的，除非修改程序，否则无法根据自己的意愿随意触发；而硬触发是靠外部硬件的触发脉冲启动，可随意重触发。</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114155658345.png" alt="image-20221114155658345"> </p><h4 id="方式5-硬件触发选通方式"><a href="#方式5-硬件触发选通方式" class="headerlink" title="方式5 硬件触发选通方式"></a>方式5 硬件触发选通方式</h4><p>GATE可由外部电路或控制现场产生，故硬件触发方式由此而得名</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114155740777.png" alt="image-20221114155740777"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114155844514.png" alt="image-20221114155844514"> </p><h4 id="六种工作方式总结"><a href="#六种工作方式总结" class="headerlink" title="六种工作方式总结"></a>六种工作方式总结</h4><p>① 时钟周期和输出周期的区别</p><p>② 输出波形在时钟下降沿产生电平变化 </p><p>计数值N与输出波形的关系</p><table><thead><tr><th><strong>方式</strong></th><th>N与输出波形关系</th><th>改变计数值</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>写入计数值N后，经N＋1个CLK脉冲，输出变高</td><td>下一个CLK周期立即有效</td></tr><tr><td><strong>1</strong></td><td>单稳脉冲的宽度为N个CLK</td><td><strong>外部触发以后有效</strong></td></tr><tr><td><strong>2</strong></td><td>每N个CLK脉冲输出一个CLK周期的脉冲</td><td>计数到1以后有效</td></tr><tr><td><strong>3</strong></td><td><strong>前一半为高电平、后一半为低电平的方波</strong></td><td>外部触发有效 &#x2F;计数到1有效</td></tr><tr><td><strong>4</strong></td><td>写入N后经过N＋1个CLK，输出宽度为1个CLK的脉冲</td><td>计数到0有效</td></tr><tr><td><strong>5</strong></td><td>门控触发后过N＋1个CLK，输出宽度为1个CLK的脉冲</td><td><strong>外部触发有效</strong></td></tr></tbody></table><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114160352666.png" alt="image-20221114160352666"> </p><p>⑴ 方式2（分频器）、方式4（软件触发选通）和方式5（ 硬件触发选通），它们的输出波形相同，都是宽度为 1个CLK周期的负脉冲。区别是：方式2是自动重复工作的，而方式4需要由软件（设置计数初值）触发启动，方式5需要由硬件（门控GATE信号）触发启动。</p><p>⑵ 方式5（硬件触发选通）与方式1（硬件触发单稳），触发信号相同，但输出波形不同：方式1输出为宽度是N个CLK周期的负脉冲（计数过程中输出为低） ，而方式5输出为宽度是1个CLK周期的负脉冲（计数过程中输出为高）。 </p><p>⑶ 6种工作方式中，只有方式0，写入控制字后输出为低；其余5种方式，都是写入控制字后输出为高。</p><p>⑷ 6种工作方式中的任何一种方式，只有在写入计数值后才能开始计数。方式0、2、3、4都是写入计数初值后，计数过程就开始了。而方式1和方式5在写入计数初值后，需由外部GATE信号的触发启动，才能开始计数过程。</p><p>⑸ 6种工作方式中，只有方式2（分频器）和方式3（方波发生器）为自动重复工作方式，其他4种方式都是一次 性计数，要继续工作需要重新启动。</p><p> 图7.15是8253六种工作方式下的输出波形图。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114160446814.png" alt="image-20221114160446814"> </p><h3 id="7-2-7-8253-8254的编程"><a href="#7-2-7-8253-8254的编程" class="headerlink" title="7.2.7 8253&#x2F;8254的编程"></a>7.2.7 8253&#x2F;8254的编程</h3><h4 id="1、写入方式控制字"><a href="#1、写入方式控制字" class="headerlink" title="1、写入方式控制字"></a>1、写入方式控制字</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114160808326.png" alt="image-20221114160808326"> </p><h4 id="2、写入计数初值"><a href="#2、写入计数初值" class="headerlink" title="2、写入计数初值"></a>2、写入计数初值</h4><p>写入计数初值的时候要注意下面几个问题：</p><ul><li>对计数器设置初值之前，必须先写控制字。</li><li>设置计数初值的时候，要和控制字中规定的读写格式对应。若控制字规定只读写低8位，则自动写入低8位，高8位填0；若规定只读写高8位，则自动写入高8位，低8位填0；若规定写16位，则先写低8位，再写高8位。</li><li>由于每一个计数器都是先减1，再判断是否为0，所以写入初值0，实际上表示最大数。0000H在二进制计数时其实表示65536，在十进制计数时表示10000。</li></ul><p>计数初值的计算有下面几种情况：</p><ul><li>当计数器工作在方式2或者方式3的时候，实际上是一个分频器，因此计数常数就是分频系数，分频系数＝ƒi&#x2F;ƒo（ƒi：输入CLK频率；ƒo：OUT端输出频率）。</li><li>当计数器作为定时器工作时，CLK通常来自系统内部的时钟，计数常数就是定时系数，定时系数＝T&#x2F;tCLK&#x3D;T×ƒCLK（T为定时时间，ƒCLK为输入的CLK频率）。</li><li>当计数器作为外部计数使用时，计数脉冲通常来自系统外部，计数常数就是要记录的外部事件的脉冲个数。</li></ul><h4 id="3、计数值和状态的读回"><a href="#3、计数值和状态的读回" class="headerlink" title="3、计数值和状态的读回"></a>3、计数值和状态的读回</h4><p>(1) 8253<strong>的计数值的读回</strong></p><p> 由CPU访问每个通道的输出锁存器OL，即可实现读出每个通道的计数值。</p><p> 在上面的方式控制字格式中，我们看到，如果D5D4＝00，就表示锁存该计数器的值，用来进行读入。</p><p>(2) 8254<strong>的计数值和状态读回</strong></p><p>–多了专门的读回命令字，可以将3个计数器的计数值和状态都进行锁存，并且向CPU返回一个状态字 </p><p>–读回命令写入控制端口，而状态字和计数值都通过相应的计数器端口读出 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114161129426.png" alt="image-20221114161129426"> </p><p>•例7.1 用8253的计数器0，工作在方式1下，按十进制计数，初值为3040；若该8253的端口地址为388~38BH，请写出初始化程序段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MOV DX,28BH;控制端口地址送到DX</span><br><span class="line">MOV AL,33H;控制字00110011</span><br><span class="line">OUT DX,AL</span><br><span class="line">MOV AL,40H</span><br><span class="line">MOV DX,388H</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>例</strong>7.2 在8253中，读取计数器1的16位计数值，存入CX中，设地址同例6.1，请写出程序段。</p><p>例<strong>7.3</strong> 在8254中，利用读回命令，读回计数器1的16位计数值和状态字，计数值存入CX，状态字存入BL，设地址同例7.1，请写出程序段。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114164127174.png" alt="image-20221114164127174"> </p><p>如图7.7，在IBM PC系列计算机中，用8253的3个计数器进行时钟计时、DRAM刷新定时和控制扬声器发声声调， 8253的端口地址分别为40H、41H、42H和43H，输入时钟都为1.193MHz。</p><p><strong>①计数器<strong><strong>0</strong></strong>产生基本时钟</strong></p><p> MOV AL,36H ；计数器0的控制字为00110110</p><p> OUT  43H, AL</p><p> MOV  AL, 0</p><p> OUT  40H, AL ；计数器0的初值为0000</p><p> OUT  40H, AL</p><p> 由上面初始化程序可见，计数器0工作在方式3下，产生方波；初值为0，也就是最大的65536，则其方波的输出频率为1.193MHz&#x2F;65536&#x3D;18.2。DOS系统利用定时器0，通过08号中断服务程序，实现时钟计时功能。</p><p><strong>②<strong><strong>计数器</strong></strong>1<strong><strong>控制</strong></strong>DRAM****刷新</strong></p><p> 在PC XT机中，要求在2ms内对DRAM进行128次刷新，也就是刷新的间隔为 2ms&#x2F;128&#x3D;15.6us。计数器1输出间隔15us的负脉冲，</p><p> 我们来看计数器1的初始化程序：</p><p> MOV  AL，54H ；计数器1的控制字为01010100</p><p> OUT  43H，AL</p><p> MOV  AL，18 ；计数器0的初值为18</p><p> OUT  41H，AL</p><p> 由上面初始化程序可见，计数器1工作在方式2（分频器）下，只读写低位，初值为18。由此可知，计数器1的输出频率为：1.193MHz&#x2F;18 &#x3D;66.278KHz，负脉冲的时间间隔为1&#x2F;66.278 KHz &#x3D; 15us。</p><p><strong>③<strong><strong>计数器</strong></strong>2****控制扬声器</strong></p><p> 利用计数器2的输出，控制扬声器的发声音调，作为机器的报警信号或者伴音信号 </p><h2 id="7-3-并行通信技术以及可编程并行接口芯片8255A"><a href="#7-3-并行通信技术以及可编程并行接口芯片8255A" class="headerlink" title="7.3 并行通信技术以及可编程并行接口芯片8255A"></a>7.3 并行通信技术以及可编程并行接口芯片8255A</h2><p>   8255是Intel公司为其80系列微处理器生产的8位通用可编程并行输入输出接口芯片。它具有很强的功能，在使用中可利用软件编程来指定它将要完成的功能。因此，8255获得了广泛的应用。</p><h3 id="7-3-1-8255A的内部结构和引脚"><a href="#7-3-1-8255A的内部结构和引脚" class="headerlink" title="7.3.1 8255A的内部结构和引脚"></a>7.3.1 8255A的内部结构和引脚</h3><p>​       三部分：外设接口部分</p><p>​        内部逻辑部分</p><p>​        CPU接口部分</p><h4 id="1、8255的内部结构框图"><a href="#1、8255的内部结构框图" class="headerlink" title="1、8255的内部结构框图"></a>1、8255的内部结构框图</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114164524526.png" alt="image-20221114164524526"> </p><p>（1）数据总线缓冲器</p><p>  这是一个8位双向三态数据缓冲器，是8255A与CPU之间的数据接口，是它们之间互相交换信息的必经之路。</p><p> （2）并行输入输出端口A、端口B、端口C</p><p> 端口A具有一个8位数据输入锁存器和一个数据输出锁存器&#x2F;缓冲器；</p><p> 端口B具有一个8位数据输入缓冲器和一个数据输出锁存器&#x2F;缓冲器；</p><p> 端口C具有一个8位数据输入缓冲器和一个数据输出锁存器&#x2F;缓冲器，一般作为控制或状态信息端口。</p><p>（3）A组控制电路和B组控制电路</p><p>控制端口A与端口C的高4位（PC7-PC4）</p><p>控制端口B与端口C的低4位（PC3-PC0）</p><p> 它们各有一个控制单元接收来自读写控制部件的命令和CPU通过数据总线送来的<strong>控制字</strong>，并根据控制字来定义各端口的工作方式，以及可以根据CPU的命令字对通道C的每一位置位或复位。</p><p>（4）读写控制部件 </p><p> 该部件用于接收CPU的控制命令，根据这些命令向片内各功能部件发出操作命令。 共有6个信号：</p><p>  CS是片选信号，通常由高位地址译码产生 ；</p><p>  RD和WR是CPU来的读写信号；</p><p>  RESET是复位信号，复位后，清除所有寄存器内容，并将各端口置成输入方式；</p><p>  A1、A0为地址信号，用于选择8255内部的端口。这6个信号的组合所完成的操作如下表所示。</p><p><strong>思考</strong>：假设有6根地址线，显然A1,A0位保留直连到8255，则若8255地址空间为1101A1A0，则如何使得1101-&gt;0(CS信号，低电平)</p><p>又假如要求<strong>A5~A3</strong>可变，则接入四个按键 的方式，如何实现<strong>（提示：用比较器）</strong></p><p>8255A的操作</p><table><thead><tr><th>A1</th><th>A0</th><th>RD</th><th>WR</th><th>CS</th><th>操作</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>端口A数据送CPU（输入）</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>端口B数据送CPU  （输入）</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>端口C数据送CPU  （输入）</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>非法操作</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>CPU数据送端口A（输出）</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>CPU数据送端口B （输出）</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>CPU数据送端口C （输出）</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>CPU数据送控制口</td></tr><tr><td>×</td><td>×</td><td>1</td><td>1</td><td>0</td><td>数据总线浮空</td></tr><tr><td>×</td><td>×</td><td>×</td><td>×</td><td>1</td><td>未选中该8255，数据总线浮空</td></tr></tbody></table><h4 id="2、引线及功能"><a href="#2、引线及功能" class="headerlink" title="2、引线及功能"></a>2、引线及功能</h4><p>共有40条引线；</p><p>电源与地线2条；</p><p>与外设相连的有24条；</p><p>与CPU相连的有14条。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114164657628.png" alt="image-20221114164657628"> </p><p>D0－D7：双向数据信号线。 </p><p>RD：读信号线。 </p><p>WR：写信号线。 </p><p>CS：片选信号线。 </p><p>A0、A1：端口地址选择信号线。</p><p>  00–A端口；01–B端口；10–C端口；11–控制口。</p><p>RESET：复位输入信号，复位时三个端口自动置为输入口</p><p>PA0－PA7：A口的8条输入输出信号线。</p><p>PB0－PB7：B口的8条输入输出信号线。</p><p>PC0－PC7：C口的8条输入输出信号线。</p><h3 id="7-3-2-8255A的工作方式"><a href="#7-3-2-8255A的工作方式" class="headerlink" title="7.3.2 8255A的工作方式"></a>7.3.2 8255A的工作方式</h3><p>8255有三种工作方式，可由<strong>用户编程</strong>来选定</p><ul><li>方式0：基本输入输出方式</li><li>方式1：选通输入输出方式</li><li>方式2：双向传送方式</li></ul><h4 id="工作方式0-基本输入输出方式"><a href="#工作方式0-基本输入输出方式" class="headerlink" title="工作方式0(基本输入输出方式)"></a>工作方式0(基本输入输出方式)</h4><p>  此方式下无固定的联络信号，A口、B口、C口的高4位和低4位可以分别设置成输入或输出。此方式适用于无条件地传送数据，如读一组开关状态，控制一组指示灯，CPU可随时速如开关状态，随时可把一组数据送到指示灯显示，而无需“选通”和“状态”信号，不必等待中断请求信号，在这种方式下，每一个端口都可由程序设计为输入或输出</p><p>方式0的基本功能：</p><p>1、具有两个8位口（A、B口），两个4位口（C口的上半部分和下半部分）</p><p>2、任一端口都可以作为输入输出</p><p>3、输出是锁存的，输入是不锁存的</p><p>4、由于方式控制字中D4-D0四位均可规定各口的输入或输出，所以在方式0时，所有端口的输入、输出可以有16种不同的组合</p><p>5、此方式无中断功能，在作查询方式工作时，可将C口的某些位作为传送控制和状态信息，A口和B口作为数据口 </p><h4 id="工作方式1-字节选通I-O方式"><a href="#工作方式1-字节选通I-O方式" class="headerlink" title="工作方式1(字节选通I&#x2F;O方式)"></a>工作方式1(字节选通I&#x2F;O方式)</h4><p> 在这种方式下，A口或B口仍作为数据的输入&#x2F;输出口，同时规定C口的某些位作控制或状态信息，起应答联络和中断请求的作用，C口剩下的线作为I&#x2F;O线使用</p><p><strong>方式1的主要功能</strong>：</p><p>•一个或两个选通的8位数据端口</p><p>•每个端口含有三条控制线（是固定制定的，不能用程序改变），提供中断逻辑。</p><p>•任一个端口都可以作为输入或输出。</p><p>•若只有一个端口工作于方式1，余下的13位可以工作在方式0</p><p>•若两个端口都工作于方式1，端口C还剩下两位。这两位可以由程序指定作为输入或输出，也具有   置位&#x2F;复位功能。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114164818165.png" alt="image-20221114164818165"> </p><p>  所用到的控制信号的定义如下：</p><p> ① STB为低电平有效的<strong>输入选通信号</strong>，由外设提供的输入信号，当它有效时，把输入装置来的数据送入输入锁存器。</p><p> ② IBF为高电平有效的输入缓冲器满信号，通知外设送来的数据已被接收，由STB信号的前沿产生。当CPU用输入指令读走数据后，此信号被清除。 </p><p> ③ INTR为中断请求信号，高电平有效。CPU响应中断请求后在服务程序中读走数据时，由RD信号将其清除。 </p><p> ④ INTE为中断允许状态，可事先用位控方式写入。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114172353164.png" alt="image-20221114172353164"> </p><p>各信号作用如下：</p><p>① OBF为输出缓冲器满信号，低电平有效。</p><p>② ACK为外设响应信号，低电平有效。 </p><p>③ INTR为中断请求信号，高电平有效。 </p><p>④ INTE为中断允许状态。 </p><h4 id="工作方式2-双向输入输出方式"><a href="#工作方式2-双向输入输出方式" class="headerlink" title="工作方式2(双向输入输出方式)"></a>工作方式2(双向输入输出方式)</h4><p>  为双向I&#x2F;O方式，即同一端口的I&#x2F;O线可以作为输入也可以作为输出，只有A口工作于方式2，此时C口有5条线被固定为A口和外设之间的联络信号线。C口余下的3条线可以作为B口方式1下的联络线，也可以和B口一起成为方式0的I&#x2F;O线</p><p><strong>方式2的主要功能：</strong></p><p>•方式2只适用于A口</p><p>•一个8位的双向总线端口（用于数据传送），一个5位的控制端口C（用于A口的控制和状态）</p><p>•输入和输出是锁存的</p><p> 当A口工作在方式2时，C口PC3－PC7五位用作双向工作口以及中断控制，其控制信号含义与方式1中相应控制信号意义相同。注意，由于A口的输入锁存器和输出锁存器是互相独立的，故当CPU向A口输出数据时，外部设备也可同时向A口输入数据。反之亦然。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114172451026.png" alt="image-20221114172451026"> </p><p>INTRA：中断请求信号，高电平有效；</p><p>INTE1：A口内部输出中断允许触发器，可由软件通过对</p><p>​    PC6置位或复位来允许或禁止；</p><p>INTE2：A口内部输入中断允许触发器，可由软件通过对</p><p>​    PC4置位或复位来允许或禁止。</p><p>其他信号意义与方式1时相同。 </p><p>   A口方式2实际上是A口在方式1下输入输出的组合。所需的5根联络线和方式1是一样的，只是中断请求只需要一根线。 </p><h3 id="7-3-3-8255A的编程"><a href="#7-3-3-8255A的编程" class="headerlink" title="7.3.3 8255A的编程"></a>7.3.3 8255A的编程</h3><p>8255A的控制字：控制位的作用如下图，当D7&#x3D;1时，是方式控制字的特征位，用输出指令将方式控制字写入8255A后，被控制寄存器中。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193515142.png" alt="image-20221114193515142"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193708615.png" alt="image-20221114193708615"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193740981.png" alt="image-20221114193740981"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193750557.png" alt="image-20221114193750557"> </p><h3 id="7-3-4-8255A的应用"><a href="#7-3-4-8255A的应用" class="headerlink" title="7.3.4 8255A的应用"></a>7.3.4 8255A的应用</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193859770.png" alt="image-20221114193859770"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193909760.png" alt="image-20221114193909760"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193918702.png" alt="image-20221114193918702"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114193929365.png" alt="image-20221114193929365"> </p><h2 id="7-4-串行通信基础"><a href="#7-4-串行通信基础" class="headerlink" title="7.4 串行通信基础"></a>7.4 串行通信基础</h2><h3 id="7-4-1-串行通信中的数据传送模式"><a href="#7-4-1-串行通信中的数据传送模式" class="headerlink" title="7.4.1 串行通信中的数据传送模式"></a>7.4.1 串行通信中的数据传送模式</h3><p>单工、半双工、全双工的数据传送模式：<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114194142637.png"></p><p><strong>波特率（Baud rate）</strong>：表示串行数据传送速度，它表示每秒钟传送的二进制位数，单位为bit&#x2F;s(bps)。每一位的传输时间<em>T</em>d就是波特率的倒数</p><p>例：若设备每秒传送120帧信息(字符)，每帧信息包含：1个起始位，7个数据位，1个奇偶校验位，1个停止位，这是其传送的波特率为多少？</p><p>解：10位&#x2F;帧×120帧&#x2F;秒＝1200位&#x2F;秒＝1200波特 </p><p>  国际上规定了一个标准波特率系列，即110、300、600、 1200、1800、2400、4800、9600和19 200波特。串行接口的打印机通常采用110波特，也有采用150波特和300波特。当使用调制解调器在公共电话线上进行远程数据通信时常使用1200波特，线路质量好的城市和地区可达2400波特。</p><h3 id="7-4-2-异步通信"><a href="#7-4-2-异步通信" class="headerlink" title="7.4.2 异步通信"></a>7.4.2 异步通信</h3><ol><li>异步通信的数据：链路控制是面向字符的，即传送的每一组数据构成一个字符。异步通信是字符内的同步，字符间的异步。</li><li>异步通信规程规定：数据流中传送的每个字符必须由起始位（1位低电平）开始，而以停止位结束（1位或），称为一帧。起始位和停止位称为帧位。</li><li>异步传送格式（如下图）<ol><li>起始位：是连续一位的低电平（逻辑0）</li><li>数据位：在起始位之后，即发送数据位。数据位通常有4中配置情况，即5、6、7、8位（从低向高传送）</li><li>奇偶校验位：异步通信采用一位奇偶校验位检测错误停止位：表示一个字符发送结束。</li></ol></li></ol><p>a.无空闲位</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114195226438.png" alt="image-20221114195226438"></p><p>b.有空闲位<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114195307348.png" alt="image-20221114195307348"> </p><h3 id="7-4-3-同步通信方式"><a href="#7-4-3-同步通信方式" class="headerlink" title="7.4.3 同步通信方式"></a>7.4.3 同步通信方式</h3><p>（1）在同步通信中，要求发送端在正式发送数据之前，先发送一个同步字符去通知接收端，接收端在收到同步字符后，便开始按照双方约定的格式和速率接收数据</p><p>（2）同步传送时，由于同步字符的不同，可有不同信息格式，一般分为：</p><p>   1&gt; 单同步：只有一个同步字符</p><p>   2&gt; 双同步：有两个同步字符</p><p>   3&gt; 外同步：没有同步字符，靠外部时钟同步</p><p>（3）同步通讯格式包括同步字符、数据、CRC校验：</p><p> 1&gt; 同步字符：一种同步标志，指示传送数据的开始。同步字符的选择依据是：其位模式要与传送的数据字符有着明显的差别</p><p> 2&gt; 数据：指连续传送的信息，每个字符可选择为5、6、7、8位，传送的内容可以是数据信息，也可以是命令信息。</p><p> 3&gt; CRC校验：循环荣誉校验，用于数据传送的检错。不同在于，奇偶校验对一个字符校验，适于异步通信，而CRC对数据块进行校验，适用于同步通信 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114195550029.png" alt="image-20221114195550029"> </p><h3 id="7-4-4-异步通信和同步通信的主要区别"><a href="#7-4-4-异步通信和同步通信的主要区别" class="headerlink" title="7.4.4 异步通信和同步通信的主要区别"></a>7.4.4 异步通信和同步通信的主要区别</h3><p>（1）时钟要求</p><p>  同步通信：发送与接受时钟频率精确相等</p><p>  异步通信：发送与接受时钟频率基本相等即可</p><p>（2）控制信息</p><p>  同步通信：要求对整个数据块附加帧信息， 用于高速数据链路</p><p>  异步通信：要求对每个数据字符均附加帧信息，用于低速设备，低速传送</p><p>（3）校验方式</p><p> 同步通信：采用16位循环冗余校验码，可靠性高</p><p> 异步通信：采用1位奇偶校验，可靠性相对较低</p><h2 id="7-5-串行通信芯片8251A（不考）"><a href="#7-5-串行通信芯片8251A（不考）" class="headerlink" title="7.5 串行通信芯片8251A（不考）"></a>7.5 串行通信芯片8251A（不考）</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221109154340993.png" alt="image-20221109154340993"></p><h3 id="7-5-1-内部结构"><a href="#7-5-1-内部结构" class="headerlink" title="7.5.1 内部结构"></a>7.5.1 内部结构</h3><ol><li><h2 id="接收器-接收缓冲器-串并转换逻辑-接"><a href="#接收器-接收缓冲器-串并转换逻辑-接" class="headerlink" title="接收器- 接收缓冲器- 串并转换逻辑- 接"></a>接收器<br>- 接收缓冲器<br>- 串并转换逻辑<br>- 接</h2><ul><li>收控制电路</li></ul></li><li>发送器<ul><li>发送缓冲器</li><li>并串转换逻辑</li><li>发送控制电路</li></ul></li><li>数据总线缓冲器<ul><li>状态字缓冲器</li><li>接收数据缓冲器</li><li>发送数据&#x2F;命令缓冲器</li></ul></li><li>读&#x2F;写控制逻辑电路</li></ol><h1 id="八、中断和DMA技术"><a href="#八、中断和DMA技术" class="headerlink" title="八、中断和DMA技术"></a>八、中断和DMA技术</h1><p>查询传送方式的流程图<a href="http://cs.xiyou.edu.cn:84/wjyl/OnlineClass/%E7%AC%AC7%E7%AB%A0/%E5%9B%BE7.6.doc">如图7.6所示</a>。从图中可以看出，采用查询方式完成一次数据传送要经历如下过程：<br>  1．CPU从接口中读取状态字；<br>  2．CPU检测相应的状态位是否满足“就绪”条件；<br>  3．如果不满足，则重复1、2步；若外设已处于“就绪”状态，则传送数据。</p><h1 id="九、模数和数模转换"><a href="#九、模数和数模转换" class="headerlink" title="九、模数和数模转换"></a>九、模数和数模转换</h1><p>2页的图要会<br>12——15、了解<br>4根线、串行总线，速度480Mbps、VCC,GND,D+,D-<br>差分信号</p><h2 id="9-1-模拟输入输出系统"><a href="#9-1-模拟输入输出系统" class="headerlink" title="9.1 模拟输入输出系统"></a>9.1 模拟输入输出系统</h2><h3 id="9-1-1-微机与控制系统接口"><a href="#9-1-1-微机与控制系统接口" class="headerlink" title="9.1.1 微机与控制系统接口"></a>9.1.1 微机与控制系统接口</h3><p>模&#x2F;数和数&#x2F;模用途：控制和测量仪表</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114200843623.png" alt="image-20221114200843623"> </p><p>低通滤波：Low-Pass Filter 作用：去除干扰（低的过去，高的过不去）</p><p>上面A-&gt;D:红外枪</p><p>下面D-&gt;A:播放音乐</p><p>机械钢琴（A-》A）模拟到模拟</p><p>•在测量和工业实时控制中，经常要对一些现场物理量进行测量，或者将其采集下来进行处理。这些物理量可能是电信号，也可能是非电信号</p><p>•在数学计算机中，任何物理量都是以数字的形式表示和进行处理的，而电信号、非电信号一般都是模拟量信号，所以就需要将模拟信号转换成数字量信号，这一转换过程称为模数转换，即A&#x2F;D转换</p><p>•另一方面，为满足测控系统各执行机构对模拟量信号的要求，需要将计算机处理后的用于控制的数字量信号转换成模拟量信号，这一转换过程称为数模转换，即D&#x2F;A转换</p><p>•A&#x2F;D转换和D&#x2F;A转换是微型机算计与外界联系的重要桥梁，是微型机算计在测量、控制和各类智能仪器仪表中不可缺少的重要环节</p><h3 id="9-1-2-模拟输入通道"><a href="#9-1-2-模拟输入通道" class="headerlink" title="9.1.2 模拟输入通道"></a>9.1.2 模拟输入通道</h3><p>1.<strong>传感器（</strong>Transducer）  </p><p>–能够把生产过程的非电物理量转换成电量（电流或电压）的器件，如温度传感器。</p><p><strong>2.</strong> 信号放大器（<strong>Amplifier）</strong></p><p>–它把传感器输出的信号放大到ADC所需的量程范围。</p><p><strong>3.</strong> 低通滤波器（Low-pass Filter<strong>）</strong></p><p>–滤波器用于降低噪声、滤去高频干扰，以增加信噪比。</p><p><strong>4.</strong> 多路开关（Multiplexer）</p><p>–把多个现场信号分时地接到A&#x2F;D 转换器上转换，达到共用A&#x2F;D转换器以节省硬件的目的。</p><p><strong>5.</strong> 采样保持器（Sample &amp; hold）</p><p>–对高速变化的信号进行A&#x2F;D转换时，为了保证转换精度，需要使用采样保持器。周期性地采样连续信号，并在A&#x2F;D转换期间保持不变。</p><h3 id="9-1-3-模拟输出通道"><a href="#9-1-3-模拟输出通道" class="headerlink" title="9.1.3 模拟输出通道"></a>9.1.3 模拟输出通道</h3><p>•模拟输出通道用来将数字信号变成模拟的电流或电压。</p><p>•由数模（D&#x2F;A）转换器来完成。</p><p>•一般要还经过低通滤波，使其输出波形平滑。</p><p>•如果需要，可以采用功率放大器作为模拟量输出的驱动电路。  </p><h2 id="9-2-数-模转换芯片及接口"><a href="#9-2-数-模转换芯片及接口" class="headerlink" title="9.2 数&#x2F;模转换芯片及接口"></a>9.2 数&#x2F;模转换芯片及接口</h2><h3 id="9-2-1-数模转换原理"><a href="#9-2-1-数模转换原理" class="headerlink" title="9.2.1 数模转换原理"></a>9.2.1 数模转换原理</h3><h4 id="1、D-A转换器的工作原理"><a href="#1、D-A转换器的工作原理" class="headerlink" title="1、D&#x2F;A转换器的工作原理"></a>1、D&#x2F;A转换器的工作原理</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114201754335.png" alt="image-20221114201754335"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114201824392.png"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114201842401.png" alt="image-20221114201842401"> </p><h4 id="2、主要性能指标"><a href="#2、主要性能指标" class="headerlink" title="2、主要性能指标"></a>2、主要性能指标</h4><p>(1) 分辨率 </p><p>•  分辨率是当输入数字量发生单位数码变化（即1LSB）时， 所对应的输出模拟量的变化量，即等于模拟量输出的满量程值的 1&#x2F;2N （N为数字量位数）。分辨率也可以用相对值（1&#x2F;2N）百分率表示。<strong>在实际应用中，又常用数字量的位数来表示分辨率</strong>。 </p><p>(2) 转换精度</p><p>•  转换精度是指一个实际的D&#x2F;A转换器与理想的D&#x2F;A转换器相比较的转换误差。理想的D&#x2F;A转换器特性下图所示。精度反映D&#x2F;A转换的总误差。包括绝对精度和相对精度。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF/image-20221114202040874.png" alt="image-20221114202040874"> </p><p>   ① 绝对精度</p><p>  对应于给定的满刻度数字量，D&#x2F;A实际输出与理论值之间的误差。该误差是由于D&#x2F;A的增益变化、零点漂移和噪声等引起的，一般应低于2－（n－1）或1&#x2F;2LSB。。 </p><p>  ② 相对精度 </p><p>  在满刻度已经校准的情况下，在整个刻度范围内对应于任一数码的模拟量输出与理论值之差。</p><p>（3）线性误差</p><p>  相邻两个数字输入量之间的差应该是1LSB，即理想的转换特性应是线性的。在满刻度范围内，偏离理想的转换特性的最大值称线性误差。</p><p>（4）建立时间。 </p><p> 当D&#x2F;A转换器的输入数据发生变化后，输出模拟量达到稳定数值，即进入规定的精度范围内所需要的时间。</p><p>（5）温度系数。 </p><p> D&#x2F;A转换器的各项性能指标一般在环境温度为25℃下测定。 环境温度的变化会对D&#x2F;A转换精度产生影响，这一影响分别用失调温度系数、增益温度系数和微分非线性温度系数来表示。 这些系数的含义是当环境温度变化1℃时该项误差的相对变化率，单位是×10-6&#x2F;℃。 </p><h2 id="9-3-模-数转换芯片及接口"><a href="#9-3-模-数转换芯片及接口" class="headerlink" title="9.3 模&#x2F;数转换芯片及接口"></a>9.3 模&#x2F;数转换芯片及接口</h2><h2 id="9-4-A-D、D-A器件的选择"><a href="#9-4-A-D、D-A器件的选择" class="headerlink" title="9.4 A&#x2F;D、D&#x2F;A器件的选择"></a>9.4 A&#x2F;D、D&#x2F;A器件的选择</h2><h1 id="不知道"><a href="#不知道" class="headerlink" title="不知道"></a>不知道</h1><p>DS:IP代表程序执行的内存指向，SA:EA代表了段地址*16+偏移地址（没有具体的意义，只是作为物理地址的统称概念），SS：SP代表了栈的内存指向。</p><p><strong>CS:IP</strong>指向所定义的代码段中第一条指令的首地址，从CS:IP读取的指令进入指令缓冲区，CPU只认为被CS：IP指向的才是指令</p><p>ds:si和es:di表示相关寄存器所引用的segment：offset。当您在实模式下工作时(偏移最大为每个64K)，这尤其重要。</p><p>在实模式下，将偏移的段组合为segment * 16 + offset。</p><p>在保护模式下，段寄存器包含一个”选择器”。选择器引用的内存的基地址与选择器本身的值没有直接关系，而是选择器仅充当在表中查找数据的索引。但是，在通常情况下，这意味着很少-大多数(当前)保护模式环境都是使用CS，DS，ES和SS设置的，所有基址都设置为0，最大偏移量为4 GB，因此通过DS进行寻址vs. ES没有区别。</p><p>SS:SP <strong>两个寄存器指向的是内存栈的栈顶元素</strong></p><p>端口是指接口电路中能被微处理器直接访问的寄存器的地址</p><p>I&#x2F;O操作是指对I&#x2F;O端口的操作，而不是对I&#x2F;O设备的操作‘</p><p>CPU与I&#x2F;O端口之间所交换的信息有①数据信息：数字量，模拟量，开关量。可以输入，可以输出<br>                                                           ②状态信息：I&#x2F;O端口送给CPU的有关本端口所对应的外设的当前状态的信息</p><p>I&#x2F;O接口的基本功能：</p><p>  （1）地址译码，选取接口<a href="https://so.csdn.net/so/search?q=%E5%AF%84%E5%AD%98%E5%99%A8&spm=1001.2101.3001.7020">寄存器</a></p><p>  （2）接收控制命令，提供工作状态信息</p><p>  （3）数据缓冲（速度匹配），格式转换</p><p>  （4）控制逻辑，如<a href="https://so.csdn.net/so/search?q=%E4%B8%AD%E6%96%AD&spm=1001.2101.3001.7020">中断</a>、DMA控制逻辑、设备操作等。</p><p>变量的三种属性：段属性、位移属性、类型属性</p><p>标号的三种属性：段属性、位移属性、距离属性</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><h2 id="1-1、什么是编译"><a href="#1-1、什么是编译" class="headerlink" title="1.1、什么是编译"></a>1.1、什么是编译</h2><ul><li>高级语言<ul><li>类似于数学定义或自然语言的简洁形式</li><li>接近人类表达习惯</li><li>不依赖于特定机器</li><li>编写效率高</li></ul></li><li>汇编语言<ul><li>引入助记符</li><li>依赖于特定机器，非计算机专业人员使用受限制</li><li>编写效率低</li></ul></li><li>机器语言<ul><li>可以被计算机直接理解</li><li>与人类表达习惯相去甚远</li><li>难记忆</li><li>难编写、难阅读</li><li>易写错</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224134958159.png" alt="image-20221224134958159"></p><p>编译器在语言处理系统中的位置</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224135111482.png" alt="image-20221224135111482"> </p><ul><li><p>预处理器：</p><ul><li>把存储在不同文件中的源程序聚合在一起</li><li>把被称为宏的缩写语句转换为原始语句</li></ul></li><li><p>可重定位（Relocatable)</p><ul><li>在内存中存放的起始位置L不是固定的</li></ul></li><li><p>加载器</p><ul><li><p>修改可重定位地址</p></li><li><p>将修改后的指令和数据放到内存中适当的位置</p></li><li><p>起始地址+相对地址&#x3D;绝对地址</p></li></ul></li><li><p>链接器</p><ul><li>将多个可重定位的机器代码文件（包括库文件）连接到一起</li><li>解决外部内存地址问题</li></ul></li></ul><h2 id="1-2、编译系统的结构"><a href="#1-2、编译系统的结构" class="headerlink" title="1.2、编译系统的结构"></a>1.2、编译系统的结构</h2><p>类比英汉翻译的例子：意思是一样的，表达方式不一样</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224135601319.png" alt="image-20221224135601319"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224135623477.png" alt="image-20221224135623477"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224135641444.png" alt="image-20221224135641444"> </p><p><strong>编译器的结构</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224135738208.png" alt="image-20221224135738208"> </p><h2 id="1-3、词法分析概述"><a href="#1-3、词法分析概述" class="headerlink" title="1.3、词法分析概述"></a>1.3、词法分析概述</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224135755719.png" alt="image-20221224135755719"> </p><p>词法分析&#x2F;扫描（Scanning）</p><p>词法分析的主要任务：从左向右逐行扫描源程序的字符，识别出各个单词，确定单词的类型。将识别出的单词转换成统一的<strong>机内表示</strong>-词法单元（token）形式。</p><p>token:&lt;种别码，属性值&gt;</p><table><thead><tr><th></th><th><strong>单词类型</strong></th><th><strong>种别</strong></th><th><strong>种别码</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>关键字</strong></td><td>program、if、else、then、…</td><td>一词一码</td></tr><tr><td><strong>2</strong></td><td><strong>标识符</strong></td><td><strong>变量名、数组名、记录名、过程名、…</strong></td><td><strong>多词</strong>一码</td></tr><tr><td><strong>3</strong></td><td><strong>常量</strong></td><td><strong>整型、浮点型、字符型、布尔型、</strong>…</td><td><strong>一</strong>型一码</td></tr><tr><td><strong>4</strong></td><td><strong>运算符</strong></td><td><strong>算术（</strong> <strong>+ -</strong> ***** <strong>&#x2F; ++ –</strong> <strong>）</strong>关系（ <strong>&gt;</strong> <strong>&lt;** **&#x3D;&#x3D;** **!&#x3D;** **&gt;&#x3D;</strong> <strong>&lt;&#x3D;</strong> <strong>）</strong>逻辑（ <strong>&amp;</strong> <strong>|</strong> <strong>~</strong> <strong>）</strong></td><td><strong>一词一码</strong>  <strong>或</strong>一型一码</td></tr><tr><td><strong>5</strong></td><td><strong>界限符</strong></td><td><strong>;</strong> <strong>(</strong> <strong>)</strong> <strong>&#x3D;</strong> <strong>{</strong> <strong>}</strong> <strong>…</strong></td><td><strong>一词一码</strong></td></tr></tbody></table><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224140524132.png" alt="image-20221224140524132"> </p><h2 id="1-4、语法分析概述"><a href="#1-4、语法分析概述" class="headerlink" title="1.4、语法分析概述"></a>1.4、语法分析概述</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224140540418.png" alt="image-20221224140540418"> </p><p>语法分析：parsing</p><p>语法分析器(parser)从词法分析器输出的token序列中识别出各类短语，并构造语法分析树(parse tree)<br>语法分析树描述了句子的语法结构</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224140624612.png" alt="image-20221224140624612"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224140650971.png" alt="image-20221224140650971"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224140700940.png" alt="image-20221224140700940"> </p><h2 id="1-5、语义分析概述"><a href="#1-5、语义分析概述" class="headerlink" title="1.5、语义分析概述"></a>1.5、语义分析概述</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224140713430.png" alt="image-20221224140713430"> </p><p>语义分析的主要任务</p><ul><li><p>收集标识符的属性信息</p><ul><li><p>种属Kind</p></li><li><p>类型Type</p></li><li><p>存储位置、长度</p></li><li><p>值</p></li><li><p>作用域</p></li><li><p>参数和返回值信息</p><ul><li>参数个数、参数类型。。。</li></ul></li></ul></li><li><p>语义检查</p><ul><li>变量或过程未经声明就使用</li><li>变量或过程名重复声明</li><li>运算分量类型不匹配</li><li>操作符与操作数之间的类型不匹配<ul><li>数组下标不是整数</li><li>对非数组变量使用数组访问操作符</li><li>对非过程名使用过程调用操作符</li><li>过程调用的参数类型或数目不匹配</li><li>函数返回类型有误</li></ul></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224141051125.png" alt="image-20221224141051125"> </p><h2 id="1-6、中间代码生成及编译器后端概述"><a href="#1-6、中间代码生成及编译器后端概述" class="headerlink" title="1.6、中间代码生成及编译器后端概述"></a>1.6、中间代码生成及编译器后端概述</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224141323893.png" alt="image-20221224141323893"> </p><p>常用的中间表示形式</p><ul><li>三地址码（Three-address Code）<ul><li>三地址码由类似于汇编语言的指令序列组成，每个指令最多有三个操作数</li></ul></li><li>语法结构树&#x2F;语法树（Syntax Trees）</li></ul><hr><p>常用的三地址指令</p><table><thead><tr><th><strong>序号</strong></th><th><strong>指令类型</strong></th><th><strong>指令形式</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>赋值指令</strong></td><td><strong>x</strong> <strong>&#x3D;</strong> <strong>y</strong> <strong>op</strong> <strong>z</strong> <strong>x</strong> <strong>&#x3D;</strong> <strong>op</strong> <strong>y</strong></td></tr><tr><td><strong>2</strong></td><td><strong>复制指令</strong></td><td><strong>x</strong> <strong>&#x3D;</strong> <strong>y</strong></td></tr><tr><td><strong>3</strong></td><td><strong>条件跳转</strong></td><td><strong>if</strong> <strong>x</strong> <strong>relop</strong> <strong>y</strong> <strong>goto</strong> <strong>n</strong></td></tr><tr><td><strong>4</strong></td><td><strong>非条件跳转</strong></td><td><strong>goto</strong> <strong>n</strong></td></tr><tr><td><strong>5</strong></td><td><strong>参数传递</strong></td><td><strong>param</strong> <strong>x</strong></td></tr><tr><td><strong>6</strong></td><td><strong>过程调用</strong></td><td><strong>call</strong> <strong>p</strong>,<strong>n</strong></td></tr><tr><td><strong>7</strong></td><td><strong>过程返回</strong></td><td><strong>return</strong> <strong>x</strong></td></tr><tr><td><strong>8</strong></td><td><strong>数组引用</strong></td><td><strong>x</strong> <strong>&#x3D;</strong> <strong>y</strong>[i]</td></tr><tr><td><strong>9</strong></td><td><strong>数组赋值</strong></td><td><strong>x</strong>[i] <strong>&#x3D;</strong> <strong>y</strong></td></tr><tr><td><strong>10</strong></td><td><strong>地址及指针操作</strong></td><td><strong>x</strong> <strong>&#x3D;&amp;</strong> <strong>y</strong> <strong>x</strong> <strong>&#x3D;\ </strong>y <strong>x</strong> <strong>&#x3D;</strong> <strong>y</strong></td></tr></tbody></table><ul><li>地址可以具有如下形式之一<ul><li>源程序中的名字 (name)</li><li>常量 (constant)</li><li>编译器生成的临时变量(temporary)</li></ul></li><li>三地址指令的表示<ul><li>四元式（op, y, z,x )</li><li>三元式</li><li>间接三元式</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224141913574.png" alt="image-20221224141913574"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224141928004.png" alt="image-20221224141928004"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224142022509.png" alt="image-20221224142022509"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224142031611.png" alt="image-20221224142031611"> </p><blockquote><p>注意：</p><p>编译程序是一种翻译程序</p><p>语法分析器的任务就是：分析单词串是如何构成语句和声明的</p><p>语法分析时依据语法规则</p></blockquote><h1 id="二、程序设计语言及其文法"><a href="#二、程序设计语言及其文法" class="headerlink" title="二、程序设计语言及其文法"></a>二、程序设计语言及其文法</h1><h2 id="2-1、基本概念"><a href="#2-1、基本概念" class="headerlink" title="2.1、基本概念"></a>2.1、基本概念</h2><h3 id="字母表"><a href="#字母表" class="headerlink" title="字母表"></a>字母表</h3><p>字母表∑是一个有穷符号集合<br>符号：字母、数字、标点符号、…</p><ul><li>字母表∑1和∑2的乘积( product)<ul><li>​    $\Sigma_1\Sigma_2 &#x3D; {ab|a\in\Sigma_1,b\in\Sigma_2}$</li><li>例子：{0，1}{a，b}&#x3D;{0a，0b，1a，1b}</li></ul></li><li>字母表&Sigma;的n次幂（power）<ul><li>$\Sigma^0 &#x3D; { \epsilon }$</li><li>$\Sigma^n &#x3D; \Sigma^{n-1}\Sigma,n \geq 1$</li><li>例： {0, 1}3 &#x3D;{0, 1} {0, 1} {0, 1}&#x3D;{000, 001, 010, 011, 100, 101, 110, 111}</li><li>字母表的n次幂：长度为n的符号串构成的集合</li></ul></li><li>字母表∑的正闭包( positive closure)<br>∑+ &#x3D; ∑ ∪ ∑2 ∪ ∑3 ∪ …<ul><li>例：{a, b, c, d }+ &#x3D; {a, b, c, d,<br>aa, ab, ac, ad, ba, bb, bc, bd, …,<br>aaa, aab, aac, aad, aba, abb, abc, …}</li><li>字母表的正闭包：长度正数的符号串构成的集合</li></ul></li><li>字母表∑的克林闭包(Kleene closure)<br>∑* &#x3D; ∑0 ∪ ∑+ &#x3D; ∑0 ∪ ∑ ∪ ∑2 ∪ ∑3 ∪ …</li><li><ul><li>例：{a, b, c, d }* &#x3D; {ε, a, b, c, d,<br>aa, ab, ac, ad, ba, bb, bc, bd, …,<br>aaa, aab, aac, aad, aba, abb, abc, …}</li><li>字母表的克林闭包：任意符号串（长度可以为零）构成的集合</li></ul></li></ul><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><ul><li><p>设∑是一个字母表，&forall;x∈∑*，x称为是∑上的一个串</p><ul><li>串是字母表中符号的一个有穷序列</li></ul></li><li><p>串s的长度，通常记作|s|，是指s中符号的个数</p><ul><li>例: |aab|&#x3D;3</li></ul></li><li><p>空串是长度为0的串，用 ε（epsilon）表示</p><ul><li>|ε|&#x3D; 0</li></ul></li><li><p>串上的运算——连接</p><ul><li><p>如果 x和y是串，那么x和y的连接(concatenation)是把y附加到x后面而形成的串，记作xy</p></li><li><p>例如，如果 x&#x3D;dog且 y&#x3D;house，那么xy&#x3D;doghouse </p></li><li><p>空串是连接运算的单位元( identity)，即，对于任何串s都有，εs &#x3D; sε &#x3D; s</p></li><li><p>设x,y,z是三个字符串，如果 x&#x3D;yz，则称y是x的前缀，z是x的后缀</p></li></ul></li><li><p>串上的运算——幂</p><ul><li>串s的幂运算<br>s<sup>0</sup>&#x3D; ε，<br>sn &#x3D; s<sup>n-1</sup>s , n ≥1<br>s1 &#x3D; s<sup>0</sup> s &#x3D; εs &#x3D; s，s2 &#x3D; ss，s3 &#x3D; sss，…<br>例：如果 s &#x3D;ba，那么s1&#x3D; ba，s2&#x3D;baba，          s3&#x3D;bababa，…</li><li>串s的n次幂：将n个s连接起来</li></ul></li></ul><h2 id="2-2、文法的定义"><a href="#2-2、文法的定义" class="headerlink" title="2.2、文法的定义"></a>2.2、文法的定义</h2><h3 id="2-2-1、句子的构成规则"><a href="#2-2-1、句子的构成规则" class="headerlink" title="2.2.1、句子的构成规则"></a>2.2.1、句子的构成规则</h3><p>&lt;句子&gt;&rightarrow; &lt;名词短语&gt;&lt;动词短语&gt;<br>&lt;名词短语&gt;&rightarrow; &lt;形容词&gt; &lt;名词短语&gt;<br>&lt;名词短语&gt;&rightarrow; &lt;名词&gt;<br>&lt;动词短语&gt;&rightarrow; &lt;动词&gt; &lt;名词短语&gt;<br>&lt;形容词&gt;&rightarrow;   little<br>&lt;名词&gt;&rightarrow;   boy<br>&lt;名词&gt;&rightarrow;   apple<br>&lt;动词&gt;&rightarrow;   eat</p><p>尖括号括起来部分称为语法成分</p><p>未用尖括号括起来部分表示语言的基本符号</p><h3 id="2-2-2、文法的形式化定义"><a href="#2-2-2、文法的形式化定义" class="headerlink" title="2.2.2、文法的形式化定义"></a>2.2.2、文法的形式化定义</h3><ul><li><p>G &#x3D; (V<sub>T</sub> , V<sub>N</sub> , P , S )</p><ul><li><p>V<sub>T</sub> ∩V<sub>N</sub> &#x3D; Φ</p></li><li><p>V<sub>T</sub>∪V<sub>N</sub> ：文法符号集</p></li><li><p>V<sub>T</sub> ：终结符集合</p><ul><li>终结符（terminal symbol）是文法所定义的语言的基本符号，有时也称为token<br>例: VT &#x3D; { apple, boy, eat, little }</li></ul></li><li><p>V<sub>N</sub>：非终结符集合</p><ul><li>非终结符(nonterminal) 是用来表示语法成分的符号，有时也称为“ 语法变量”<br>例: VN &#x3D; { &lt;句子&gt;,  &lt;名词短语&gt;,  &lt;动词短语&gt;,  &lt;名词&gt;, … }</li></ul></li><li><p>P：产生式集合</p><ul><li>​产生式( production)描述了将终结符和非终结符组合成串的方法<br>​    产生式的一般形式：<br>​α→β<br>​    读作：α定义为β</li><li>α∈(V<sub>T</sub>∪V<sub>N</sub>)<sup>+</sup>，且α中至少包含V<sub>N</sub>中的一个元素：称为产生式的头(head)或左部(left side)<br>β∈(V<sub>T</sub>∪V<sub>N</sub>)<sup>*</sup> ：称为产生式的体(body)或右部(right side)</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224163332413.png" alt="image-20221224163332413"></li></ul></li><li><p>S：开始符号</p><ul><li>S∈VN。开始符号(start symbol)表示的是该文法中最大的语法成分<br>例：S &#x3D; &lt;句子&gt;</li></ul></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224163551390.png" alt="image-20221224163551390"> </p><p>产生式的简写：</p><ul><li>对一组有相同左部的α产生式<ul><li>α→β1 , α→β2 , … , α→βn</li><li>可以简记为：<ul><li>α→β1 | β2 | … | βn</li><li>读作：α定义为β1，或者β2，…，或者βn 。</li><li>β1，β2，…，βn称为α的候选式(Candidate)</li></ul></li><li>例<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224163741024.png" alt="image-20221224163741024"></li></ul></li></ul><h3 id="2-2-3、符号约定："><a href="#2-2-3、符号约定：" class="headerlink" title="2.2.3、符号约定："></a>2.2.3、符号约定：</h3><ul><li>下述符号是终结符<ul><li>(a) 字母表中排在前面的小写字母，如 a、b、c</li><li>(b) 运算符，如 +、*等</li><li>(c) 标点符号，如括号、逗号等</li><li>(d) 数字0、1、. . . 、9</li><li>(e) 粗体字符串，如id、if等</li></ul></li><li>下述符号是非终结符<br>(a) 字母表中排在前面的大写字母，如A、B、 C<br>(b) 字母S。通常表示开始符号<br>(c) 小写、斜体的名字，如 expr、stmt等<br>(d) 代表程序构造的大写字母。如E(表达式)、T(项)和F(因子)</li><li>字母表中排在后面的大写字母（如X、Y、Z）      表示文法符号（即终结符或非终结符）<br>字母表中排在后面的小写字母（主要是u、v、. . . 、z）                 表示终结符号串（包括空串）</li><li>小写希腊字母，如α、β、γ，表示文法符号串（包括空串）</li><li>除非特别说明，第一个产生式的左部就是开始符号</li></ul><h2 id="2-3、语言的定义"><a href="#2-3、语言的定义" class="headerlink" title="2.3、语言的定义"></a>2.3、语言的定义</h2><p>有了文法，如何判断一个词串是否是满足文法的句子？</p><ul><li>句子的推导（派生）从生成语言的角度</li><li>句子的归纳                从识别语言的角度</li></ul><h3 id="2-3-1、推导和归纳"><a href="#2-3-1、推导和归纳" class="headerlink" title="2.3.1、推导和归纳"></a>2.3.1、推导和归纳</h3><p>给定文法G&#x3D;(V<sub>T</sub> , V<sub>N</sub> , P , S )，如果 α→β ∈ P，那么可以将符号串γαδ中的α替换为β，也就是说，将γαδ 重写(rewrite)为γβδ，记作 γαδ &Rightarrow; γβδ。此时，称文法中的符号串 γαδ 直接推导(directly derive)出 γβδ<br>简而言之，就是用产生式的右部替换产生式的左部</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224170919049.png" alt="image-20221224170919049"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224170935431.png" alt="image-20221224170935431"> </p><h3 id="2-3-2、句型和句子"><a href="#2-3-2、句型和句子" class="headerlink" title="2.3.2、句型和句子"></a>2.3.2、句型和句子</h3><p>如果 S &Rightarrow;* α，α∈(V<sub>T</sub>∪V<sub>N</sub>) ，则称α是G的一个句型(sentential form)</p><ul><li>一个句型中既可以包含终结符，又可以包含非终结符，也可能是空串</li></ul><p>如果 S &Rightarrow;* w，w ∈V<sub>T</sub>*，则称w是G的一个句子(sentence)</p><ul><li>句子是不包含非终结符的句型</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171321942.png" alt="image-20221224171321942"> </p><h3 id="2-3-3、语言的形式化定义"><a href="#2-3-3、语言的形式化定义" class="headerlink" title="2.3.3、语言的形式化定义"></a>2.3.3、语言的形式化定义</h3><p>由文法G的开始符号S推导出的所有句子构成的集合称为文法G生成的语言，记为L(G )。即<br>L(G )&#x3D; {w | S &Rightarrow;* w, w∈ V<sub>T</sub>* }</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171533130.png" alt="image-20221224171533130"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171542866.png" alt="image-20221224171542866"> </p><h2 id="2-4、文法的分类"><a href="#2-4、文法的分类" class="headerlink" title="2.4、文法的分类"></a>2.4、文法的分类</h2><p>Chomsky文法分类体系</p><p>0型文法 (Type-0 Grammar)<br>1型文法 (Type-1 Grammar)<br>2型文法 (Type-2 Grammar)<br>3型文法 (Type-3 Grammar)</p><h3 id="2-4-1、0型文法"><a href="#2-4-1、0型文法" class="headerlink" title="2.4.1、0型文法"></a>2.4.1、0型文法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171649159.png" alt="image-20221224171649159"> </p><h3 id="2-4-2、1型文法"><a href="#2-4-2、1型文法" class="headerlink" title="2.4.2、1型文法"></a>2.4.2、1型文法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171707290.png" alt="image-20221224171707290"> </p><h3 id="2-4-3、2型文法"><a href="#2-4-3、2型文法" class="headerlink" title="2.4.3、2型文法"></a>2.4.3、2型文法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171726980.png" alt="image-20221224171726980"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171740020.png" alt="image-20221224171740020"> </p><h3 id="2-4-4、3型文法"><a href="#2-4-4、3型文法" class="headerlink" title="2.4.4、3型文法"></a>2.4.4、3型文法</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171758934.png" alt="image-20221224171758934"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171807620.png" alt="image-20221224171807620"> </p><h3 id="2-4-5、文法之间的关系"><a href="#2-4-5、文法之间的关系" class="headerlink" title="2.4.5、文法之间的关系"></a>2.4.5、文法之间的关系</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171826428.png" alt="image-20221224171826428"> </p><h2 id="2-5、CFG的分析树"><a href="#2-5、CFG的分析树" class="headerlink" title="2.5、CFG的分析树"></a>2.5、CFG的分析树</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171849097.png" alt="image-20221224171849097"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171857953.png" alt="image-20221224171857953"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171907201.png" alt="image-20221224171907201"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171916589.png" alt="image-20221224171916589"> </p><p>二义性文法</p><p>如果一个文法可以为某个句子生成多棵分析树，则称这个文法是二义性的</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171942051.png" alt="image-20221224171942051"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224171953146.png" alt="image-20221224171953146"> </p><p>二义性文法的判定</p><p>对于任意一个上下文无关文法，不存在一个算法，判定它是无二义性的；但能给出一组充分条件，满足这组充分条件的文法是无二义性的<br>满足，肯定无二义性<br>不满足，也未必就是有二义性的 </p><blockquote><p>注意：由文法的开始符号出发经过若干步（包括0步）推导产生的文法符号序列称为( 句型)。</p></blockquote><h1 id="三、词法分析"><a href="#三、词法分析" class="headerlink" title="三、词法分析"></a>三、词法分析</h1><h2 id="3-1、正则表达式"><a href="#3-1、正则表达式" class="headerlink" title="3.1、正则表达式"></a>3.1、正则表达式</h2><p>语言L&#x3D;{a}{a,b}*({ε}∪({.,_}{a,b}{a,b}*))<br> 正则表达式(Regular Expression，RE)是一种用来描述正则语言的 更紧凑的表示方法<br>例：r &#x3D; a(a|b)*( ε | (.| _)(a|b)(a|b)* )<br> 正则表达式可以由较小的正则表达式按照特定规则递归地构建。每个正则表达式 r定义（表示）一个语言，记为L(r )。这个语言也是根据r 的子表达式所表示的语言递归定义的</p><p>ε是一个RE，L(ε) &#x3D; {ε}<br> 如果 a∈∑，则a是一个RE，L(a) &#x3D; {a}</p><p> 假设 r和 s都是 RE，表示的语言分别是 L(r)和L(s)，则<br> r|s 是一个RE，L( r|s ) &#x3D; L(r)∪L(s)<br> rs  是一个RE，L( rs ) &#x3D; L(r) L(s)<br> r*  是一个RE，L( r* )&#x3D; (L(r))*<br> (r) 是一个RE，L( (r) ) &#x3D; L(r)</p><p>运算的优先级：*、连接、|</p><p><strong>例子：</strong></p><p>令 ∑ &#x3D; {a, b}，则<br>L(a|b) &#x3D; L(a)∪L(b) &#x3D;{a}∪{b} &#x3D; {a, b}<br>L((a|b)(a|b)) &#x3D; L(a|b) L(a|b)&#x3D;{a, b}{a, b}&#x3D; { aa, ab, ba, bb }<br>L(a*) &#x3D; (L(a))*&#x3D; {a}*&#x3D; { ε, a, aa, aaa, . . . }<br>L((a|b)*) &#x3D; (L(a|b))* &#x3D; {a, b}*&#x3D; { ε, a, b, aa, ab, ba, bb, aaa, . . .}<br>L(a|a*b) &#x3D; { a, b, ab, aab, aaab, . . .}</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221224204159853.png" alt="image-20221224204159853"> </p><p>可以用RE定义的语言叫做<br>   正则语言(regular language)或正则集合(regular set)</p><p><strong>RE的代数定律</strong></p><table><thead><tr><th><strong>定律</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>r｜s &#x3D; s｜r</strong></td><td><strong>｜是可以交换的</strong></td></tr><tr><td><strong>r｜（        s｜t  ）&#x3D;（ r｜  s ）    ｜   t</strong></td><td><strong>｜是可结合的</strong></td></tr><tr><td><strong>r（ s  t  ）&#x3D;（  r  s ） t</strong></td><td><strong>连接是可结合的</strong></td></tr><tr><td><strong>r（</strong> s<strong>｜t</strong>  ）**&#x3D;** r  s<strong>｜r  t</strong>   ;          （ s<strong>｜t</strong> ）<strong>r</strong>  &#x3D; s r<strong>｜t  r</strong>*</td><td><strong>连接对</strong>｜是可分配的</td></tr><tr><td><strong>ε</strong>r &#x3D; r<strong>ε</strong> &#x3D; r</td><td><strong>ε 是连接的单位元</strong></td></tr><tr><td><strong>r  &#x3D; （  r</strong>｜  ε ）</td><td><strong>闭包中一定包含 ε</strong></td></tr><tr><td><strong>r &#x3D;</strong>  r</td><td>* <strong>具有幂等性</strong></td></tr></tbody></table><p>对任何正则文法 G，存在定义同一语言的正则表达式 r<br>对任何正则表达式 r，存在生成同一语言的正则文法 G </p><h2 id="3-2、正则定义"><a href="#3-2、正则定义" class="headerlink" title="3.2、正则定义"></a>3.2、正则定义</h2><p>正则定义（Regular Definition）</p><p> 正则定义是具有如下形式的定义序列：<br>            d<sub>1</sub>→r<sub>1</sub><br>            d<sub>2</sub>→r<sub>2</sub><br>                …<br>            d<sub>n</sub>→r<sub>n</sub><br>     其中：<br>每个d<sub>i</sub>都是一个新符号，它们都不在字母表 Σ中，而且各不相同<br>每个r<sub>i</sub>是字母表 Σ∪{d<sub>1</sub> ,d<sub>2</sub> , … ,d<sub>i-1</sub>}上的正则表达式</p><p>给一些RE命名，并在之后的RE中像使用字母表中的符号一样使用这些名字</p><p>*<em>例子：</em></p><ul><li>C语言中标识符的正则定义<ul><li>digit &rightarrow; 0|1|2|…|9</li><li>letter_ &rightarrow; A|B|…|Z|a|b|…|z|_</li><li>id &rightarrow; letter_(letter_|digit)*</li></ul></li><li>（整型或浮点型）无符号数的正则定义<ul><li>digit &rightarrow; 0|1|2|…|9</li><li>digits &rightarrow; digit digit*</li><li>optionalFraction &rightarrow; .digits|&epsilon;</li><li>optionalExponent &rightarrow; (E(+|-|&epsilon;))digits)|&epsilon;</li><li>number &rightarrow; digits optionalFraction optionalExponent</li><li>2     2.15     2.15E+3 2.15E-3   2.15E3  2E-3</li></ul></li></ul><h2 id="3-3、有穷自动机"><a href="#3-3、有穷自动机" class="headerlink" title="3.3、有穷自动机"></a>3.3、有穷自动机</h2><p>有穷自动机 ( Finite Automata，FA )由两位神经物理学家MeCuloch和Pitts于1948年首先提出，是对一类处理系统建立的数学模型<br>这类系统具有一系列离散的输入输出信息和有穷数目的内部状态（状态：概括了对过去输入信息处理的状况）<br>系统只需要根据当前所处的状态和当前面临的输入信息就可以决定系统的后继行为。每当系统处理了当前的输入后，系统的内部状态也将发生改变</p><p><strong>FA的典型例子</strong></p><ul><li>电梯控制装置<ul><li>输入：顾客的乘梯需求（所要到达的层号）</li><li>状态：电梯所处的层数+运动方向</li><li>电梯控制装置并不需要记住先前全部的服务要求，只需要知道电梯当前所处的状态以及还没有满足的所有服务请求</li></ul></li></ul><p><strong>FA模型</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226111239504.png" alt="image-20221226111239504"> </p><ul><li>输入带(input tape)：用来存放输入符号串</li><li>读头(head )：从左向右逐个读取输入符号，不能修改（只读）、不能往返移动</li><li>有穷控制器( finite control )：具有有穷个状态数，根据当前的 状态和当前输入符号控制转入下一状态</li></ul><p><strong>FA的表示</strong></p><ul><li>转换图（Transition Graph）<ul><li>结点：FA的状态<ul><li>初始状态（开始状态）：只有一个，由<strong>start箭头</strong>指向</li><li>终止状态（接收状态）：可以有多个，用<strong>双圈</strong>表示</li></ul></li><li>带标记的<strong>有向边：</strong>如果对于<strong>输入a</strong>，存在一个从状态p到状态q的转换，就在p、q之间画一条有向边，并标记上a</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226111615857.png" alt="image-20221226111615857"></li></ul></li></ul><p><strong>FA定义（接收）的语言</strong></p><ul><li>给定输入串x，如果存在一个对应于串x的初始状态到某个终止状态的转换序列，则称串x被该FA接收</li><li>由一个有穷自动机M接收的所有串构成的集合称为是该<strong>FA定义（或接收）的语言</strong>，记为<strong>L(M)</strong></li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226111854197.png" alt="image-20221226111854197"></li></ul><p><strong>最长子串匹配原则（Longest String Matching Principle）</strong></p><ul><li>当输入串的多个前缀与一个或多个模式匹配时，总是选择最长的前缀进行匹配</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226112013686.png" alt="image-20221226112013686"></li><li>在到达某个终态之后，只要输入带上还有符号，DFA就继续前进，以便寻找尽可能长的匹配</li></ul><h2 id="3-4、有穷自动机的分类"><a href="#3-4、有穷自动机的分类" class="headerlink" title="3.4、有穷自动机的分类"></a>3.4、有穷自动机的分类</h2><p><strong>FA的分类</strong></p><ul><li>确定的FA（Deterministic finite automata，DFA）</li><li>非确定的FA（Nondeterministic finite automata，NFA）</li></ul><p><strong>确定的有穷自动机（DFA）</strong></p><p>M &#x3D; ( S，Σ ，δ，s<sub>0</sub>，F )<br>S：有穷状态集<br>Σ：输入字母表，即输入符号集合。假设ε不是 Σ中的元素<br>δ：将S×Σ映射到S的转换函数。 &forall;s∈S, a∈Σ, δ(s,a)表示从状态s出发，沿着标记为a的边所能到达的状态。<br>s<sub>0</sub>：开始状态 (或初始状态)，s<sub>0</sub>∈ S<br>F：接收状态（或终止状态）集合，F⊆ S</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226112646242.png" alt="image-20221226112646242"> </p><p><strong>非确定的有穷自动机（NFA）</strong></p><p>M &#x3D; ( S，Σ ，δ，s<sub>0</sub>，F )<br>S：有穷状态集<br>Σ：输入符号集合，即输入字母表。假设ε 不是Σ中的元素<br>δ：将S×Σ映射到2<sup>S</sup>的转换函数。&forall;s∈S, a∈Σ, δ(s,a)表示从状态s出发，沿着标记为a的边所能到达的状态集合<br>s<sub>0</sub>：开始状态 (或初始状态)，s<sub>0</sub>∈ S<br>F：接收状态（或终止状态）集合，F⊆ S</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226112827547.png" alt="image-20221226112827547"> </p><p><strong>DFA和NFA的等价性</strong></p><ul><li>对任何非确定的有穷自动机N ，存在定义同一语言的确定的有穷自动机D</li><li>对任何确定的有穷自动机D ，存在定义同一语言的非确定的有穷自动机N</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113123058-16720254836081.png" alt="image-20221226113123058"></li></ul><p><strong>带有“&epsilon;-边”的NFA</strong></p><p>M &#x3D; ( S，Σ ，δ，s0，F )<br>S：有穷状态集<br>Σ：输入符号集合，即输入字母表。假设ε不是Σ中的元素<br>δ：将S×(Σ∪{ε})映射到2<sup>S</sup>的转换函数。&forall;s∈S, a∈Σ∪{ε}, δ(s,a)表示从状态s出发，沿着标记为a的边所能到达的状态集合<br>s<sub>0</sub>：开始状态 (或初始状态)，s<sub>0</sub>∈ S<br>F：接收状态（或终止状态）集合，F⊆ S</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113252192.png" alt="image-20221226113252192"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113331186.png" alt="image-20221226113331186"> </p><p><strong>DFA的算法实现</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113440117.png" alt="image-20221226113440117"> </p><h2 id="3-5、从正则表达式到有穷自动机"><a href="#3-5、从正则表达式到有穷自动机" class="headerlink" title="3.5、从正则表达式到有穷自动机"></a>3.5、从正则表达式到有穷自动机</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113514809.png" alt="image-20221226113514809"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113524872.png" alt="image-20221226113524872"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113541244.png" alt="image-20221226113541244"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113556500.png" alt="image-20221226113556500"> </p><h2 id="3-6、从NFA到DFA的转换"><a href="#3-6、从NFA到DFA的转换" class="headerlink" title="3.6、从NFA到DFA的转换"></a>3.6、从NFA到DFA的转换</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113653042.png" alt="image-20221226113653042"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113702331.png" alt="image-20221226113702331"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113712032.png" alt="image-20221226113712032"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113721204.png" alt="image-20221226113721204"> </p><h2 id="3-7、识别单词的DFA"><a href="#3-7、识别单词的DFA" class="headerlink" title="3.7、识别单词的DFA"></a>3.7、识别单词的DFA</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113734702.png" alt="image-20221226113734702"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113743692.png" alt="image-20221226113743692"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113752199.png" alt="image-20221226113752199"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113803382.png" alt="image-20221226113803382"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113812298.png" alt="image-20221226113812298"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113824231.png" alt="image-20221226113824231"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226113836963-16720259175812.png" alt="image-20221226113836963"></p><p><strong>错误处理</strong></p><ul><li>查找已扫描字符串中最后一个对应于某终态的字符<ul><li>如果找到了，将该字符与其前面的字符识别成一个单词。然后将输入指针退回到该字符，扫描器重新回到初始状态，继续识别下一个单词</li><li>如果没找到，则确定出错，采用错误恢复策略</li></ul></li></ul><p><strong>错误恢复策略</strong></p><ul><li>最简单的错误恢复策略：“恐慌模式 (panic mode)”恢复<ul><li>从剩余的输入中不断删除字符，直到词法分析器能够在剩余输入的开头发现一个正确的字符为止</li></ul></li></ul><blockquote><p>注意：</p><p>词法分析器的输出结果是<strong>单词的种别编码和自身值</strong></p><p>词法分析器不能<strong>发现括号不匹配</strong></p><p>词法分析器用于识别<strong>单词</strong></p><p>词法分析器的加工对象是<strong>源程序</strong></p><p>已知文法G[S]:S→A1， A→A1|S0|0，与G等价的正规式是：0(1|10)*1</p><p>有限状态自动机能识别<strong>正规语言</strong></p></blockquote><h2 id="3-8、短语"><a href="#3-8、短语" class="headerlink" title="3.8、短语"></a>3.8、短语</h2><ul><li>短语：语法树中，所有的子树根结点构成的就是短语</li><li>直接短语：只有2层子树构成的短语，是直接短语</li><li>间接短语：</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230605191455976.png" alt="image-20230605191455976"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230605191507118.png" alt="image-20230605191507118"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230605191516386.png" alt="image-20230605191516386"></p><h1 id="四、语法分析"><a href="#四、语法分析" class="headerlink" title="四、语法分析"></a>四、语法分析</h1><ul><li>算符文法<ul><li>小写字母 算符 +-*&#x2F;</li><li>大写字母 变量 AB</li></ul></li><li>优先：规约的顺序<ul><li>a&#x3D;b，a和b同等优先，a和b一起规约</li><li>a&lt;b，a比b落后</li><li>a&gt;b，a比b优先</li><li>只考虑a和b相邻的情况</li></ul></li><li>算符优先文法：引入了优先级的概念</li><li>带有优先级的句柄叫最左的</li></ul><h2 id="4-1、自顶向下分析概述"><a href="#4-1、自顶向下分析概述" class="headerlink" title="4.1、自顶向下分析概述"></a>4.1、自顶向下分析概述</h2><ul><li>从分析树的顶部（根节点）向底部（叶节点）方向构造分析树</li><li>通用形式：递归下降分析</li><li>可以看成是从文法开始符号S<strong>推导</strong>出词串w的过程<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226153820116.png" alt="image-20221226153820116"></li></ul></li><li>每一步推导中，都需要做<strong>两个选择</strong><ul><li>替换当前句型中的<strong>哪个非终结符</strong></li><li>用该非终结符的<strong>哪个候选式</strong>进行替换</li></ul></li></ul><p><strong>最左推导（Left-most Derivation）</strong></p><ul><li>在最左推导中，总是选择每个句型的<strong>最左非终结符</strong>进行替换<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226154117229.png" alt="image-20221226154117229"></li></ul></li></ul><p><strong>最右推导（Right-most Derivation）</strong></p><ul><li>在最右推导中，总是选择每个句型的<strong>最右非终结符</strong>进行替换<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226154316793.png" alt="image-20221226154316793"> </li><li>在自底向上的分析中，总是采用最左规约的方式，因此把<strong>最左规约</strong>称为<strong>规范规约</strong>，而<strong>最右推导</strong>相应地称为<strong>规范推导</strong></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226154528774.png" alt="image-20221226154528774"> </p><p><strong>自顶向下的语法分析采用最左推导方式</strong></p><ul><li>总是选择每个句型的<strong>最左非终结符</strong>进行替换</li><li>根据输入流中的<strong>下一个终结符</strong>，选择最左非终结符的一个候选式</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226154847318.png" alt="image-20221226154847318"></li></ul><p><strong>自顶向下语法分析的通用形式</strong></p><ul><li><p>递归下降分析（Recursive-Descent Parsing）</p><ul><li>+个<strong>非终结符</strong></li><li>从文法开始符号S对应的过程开始，其中递归调用文法中其他非终结符对应的过程。如果S对应的过程体恰好扫描了整个输入串，则成功完成语法分析<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226155153617.png" alt="image-20221226155153617"></li></ul></li></ul></li></ul><p><strong>预测分析（Predictive Parsing）</strong></p><ul><li>预测分析是<strong>递归下降分析</strong>技术的一个特例，通过在输入中向前看<strong>固定个数</strong>（通常是一个）<strong>符号</strong>来选择正确的A-产生式。<ul><li>可以对某些文法构造出向前看k个输入符号的预测分析器，该类文法有时也称为<strong>LL(k) 文法类</strong></li></ul></li><li>预测分析<strong>不需要回溯</strong>，是一种确定的自顶向下分析方法</li></ul><h2 id="4-2、文法转换"><a href="#4-2、文法转换" class="headerlink" title="4.2、文法转换"></a>4.2、文法转换</h2><ul><li><p><strong>同一非终结符的多个候选式存在共同前缀，将导致回溯现象</strong></p></li><li><p>例子</p><ul><li>文法G<ul><li>S&rightarrow;aAd|aBe</li><li>A&rightarrow;c</li><li>B&rightarrow;b</li></ul></li><li>输入<ul><li>abc</li></ul></li></ul></li><li><p>左递归文法会使递归下降分析器陷入<strong>无限循环</strong></p><ul><li>含有A→Aα形式产生式的文法称为是<strong>直接左递归</strong>的(immediate left recursive)</li><li>如果一个文法中有一个非终结符A使得对某个串α存在一个推导A+Aα ，那么这个文法就是<strong>左递归</strong>的</li><li>经过两步或两步以上推导产生的左递归称为是<strong>间接左递归</strong>的</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226160117598.png" alt="image-20221226160117598"></li></ul></li></ul><p><strong>消除直接左递归</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226160517486.png" alt="image-20221226160517486"> </p><p><strong>一般形式</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226160724669.png" alt="image-20221226160724669"> </p><p><strong>消除间接左递归</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226161016508.png" alt="image-20221226161016508"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226161039436.png" alt="image-20221226161039436"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226161102422.png" alt="image-20221226161102422"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226161117430.png" alt="image-20221226161117430"> </p><h2 id="4-3、LL（1）文法"><a href="#4-3、LL（1）文法" class="headerlink" title="4.3、LL（1）文法"></a>4.3、LL（1）文法</h2><p><strong>S_文法</strong></p><ul><li>预测分析法的工作过程<ul><li>从文法开始符号出发，在每一步推导过程中根据当前句型的最左非终结符A和当前输入符号a，选择正确的A-产生式。为保证分析的确定性，选出的候选式必须是唯一的</li></ul></li><li>S_文法（简单的确定性文法，Korenjak &amp; Hopcroft， 1956）<ul><li>每个产生式的右部都以<strong>终结符</strong>开始</li><li>同一非终结符的各个候选式的<strong>首终结符</strong>都不同</li><li>S_文法<strong>不含&epsilon;产生式</strong></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226161651379.png" alt="image-20221226161651379"> </p><p><strong>非终结符的后继符号集</strong></p><ul><li>非终结符A的后继符号集<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226161936625.png" alt="image-20221226161936625"></li></ul></li></ul><p><strong>产生式的可选集</strong></p><ul><li>产生式A&rightarrow;&beta;的可选集是指可以选用该产生式进行推导时对应的输入符号的集合，记为SELECT(A&rightarrow;&beta;)<ul><li>SELECT(A&rightarrow;a&beta;)&#x3D;{a}</li><li>SELECT(A&rightarrow;&epsilon;)&#x3D;FOLLOW(A)</li></ul></li><li>q_文法<ul><li>每个产生式的右部或为**&epsilon;<strong>，或以</strong>终结符开始**</li><li>具有相同左部的产生式有<strong>不相交的可选集</strong></li><li>不含右部以<strong>非终结符</strong>打头的产生式</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162434816.png" alt="image-20221226162434816"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162444603.png" alt="image-20221226162444603"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162454815.png" alt="image-20221226162454815"> </p><h2 id="4-3、FIRST集和FOLLOW集的计算"><a href="#4-3、FIRST集和FOLLOW集的计算" class="headerlink" title="4.3、FIRST集和FOLLOW集的计算"></a>4.3、FIRST集和FOLLOW集的计算</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162814939.png" alt="image-20221226162814939"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162851641.png" alt="image-20221226162851641"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162859382.png" alt="image-20221226162859382"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162907777.png" alt="image-20221226162907777"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162917298.png" alt="image-20221226162917298"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162926997.png" alt="image-20221226162926997"></p><ul><li>如果右边第一个是非终结符，如E➡TE’，就将T的FIRST集加入E的SELECT集中</li><li>如果右边第一个是终结符，如E’→+TE’，就将+加入E’的SELECT集中</li><li>如果右边为空，如E’→$\epsilon$ ，就将E‘的FOLLOW集加入SELECT集中</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162936754.png" alt="image-20221226162936754"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221226162943746.png" alt="image-20221226162943746"> </p><h2 id="4-5、递归的预测分析法"><a href="#4-5、递归的预测分析法" class="headerlink" title="4.5、递归的预测分析法"></a>4.5、递归的预测分析法</h2><ul><li><p>递归的预测分析法是指：在<strong>递归下降分析</strong>中，根据<strong>预测分析表</strong>进行产生式的选择</p></li><li><p>根据每个非终结符的<strong>产生式</strong>和LL（1）文法的<strong>预测分析表</strong>，为每个非终结符编写对应的过程</p></li><li><pre><code>void A( ) &#123;    选择一个A产生式， A →X1 X2  … Xk  ；    for ( i = 1 to k ) &#123;            if ( Xi是一个非终结符号)                      调用过程 Xi ( ) ;             else  if ( Xi 等于当前的输入符号a)                              读入下一个输入符号;            else /* 发生了一个错误 */ ;             &#125;      &#125; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20221227165928942](编译原理/image-20221227165928942.png)</span><br><span class="line"></span><br><span class="line">![image-20221227165944588](编译原理/image-20221227165944588.png) </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">## 4.6、非递归的预测分析法</span><br><span class="line"></span><br><span class="line">- 非递归的预测分析**不需要**为每个非终结符**编写递归下降过程**，而是根据预测分析表构造一个**自动机**，也叫**表驱动的预测分析**</span><br><span class="line">- ![image-20221227170117988](编译原理/image-20221227170117988.png) </span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">![image-20221227170135303](编译原理/image-20221227170135303.png) </span><br><span class="line"></span><br><span class="line">![image-20221227170146748](编译原理/image-20221227170146748.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**比较**</span><br><span class="line"></span><br><span class="line">|          | 递归的预测分析法                 | 非递归的预测分析法                           |</span><br><span class="line">| -------- | -------------------------------- | -------------------------------------------- |</span><br><span class="line">| 程序规模 | 程序规模**较大**，不需载入分析表 | 主控程序规模**较小**，需载入分析表（表较小） |</span><br><span class="line">| 直观性   | 较好                             | 较差                                         |</span><br><span class="line">| 效率     | 较低                             | 分析时间大约正比于待分析程序的长度           |</span><br><span class="line">| 自动生成 | 较难                             | 较易                                         |</span><br><span class="line"></span><br><span class="line">**预测分析法实现步骤**</span><br><span class="line"></span><br><span class="line">1. 构造文法</span><br><span class="line">2. 改造文法：消除二义性、消除左递归、消除回溯</span><br><span class="line">3. 求每个变量的FIRST集和FOLLOW集，从而**求得每个候选式的SELECT集**</span><br><span class="line">4. 检查是不是LL（1）文法。若是，**构造预测分析表**</span><br><span class="line">5. 对于**递归的**预测分析，根据预测分析表为每一个非终结符编写一个过程；对于**非递归的**预测分析，实现表驱动的预测分析算法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.7、预测分析中的错误处理</span><br><span class="line"></span><br><span class="line">**预测分析中的错误检测**</span><br><span class="line"></span><br><span class="line">- 两种情况下可以检测到错误</span><br><span class="line">  - 栈顶的**终结符**和当前**输入符号**不匹配</span><br><span class="line">  - 栈顶**非终结符**与当前**输入符号**在预测分析表对应项中的信息为空</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**预测分析中的错误恢复**</span><br><span class="line"></span><br><span class="line">- 恐慌模式</span><br><span class="line">  - 忽略输入中的一些符号，知道输入中出现由设计者选定的**同步词法单元**（synchronizing token）集合中的某个词法单元</span><br><span class="line">    - 其效果依赖于**同步集合的选取**。集合的选取应该使得语法分析器能从实际遇到的错误中**快速恢复**</span><br><span class="line">      - 例如可以把**FOLLOW(A)中的所有终结符**放入非终结符A的同步记号集合</span><br><span class="line">  - 如果终结符在栈顶而不能匹配，一个简单的方法就是弹出此终结符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221227171207885](编译原理/image-20221227171207885.png) </span><br><span class="line"></span><br><span class="line">![image-20221227171220411](编译原理/image-20221227171220411.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;注意：</span><br><span class="line">&gt;</span><br><span class="line">&gt;在编译过程中，如果遇到错误应该（当发现错误时，跳过错误所在的语法单位继续分析下去）</span><br><span class="line">&gt;</span><br><span class="line">&gt;FIRST集中可以含有&amp;epsilon;</span><br><span class="line">&gt;</span><br><span class="line">&gt;FOLLOW集中不可以含有&amp;epsilon;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.8、自底向上分析概述</span><br><span class="line"></span><br><span class="line">**自底向上的语法分析**</span><br><span class="line"></span><br><span class="line">- 从分析树的**底部**（叶节点）向**顶部**（根节点）方向构造分析树</span><br><span class="line"></span><br><span class="line">- 可以看成是**将输入串w归约为文法开始符号S**的过程</span><br><span class="line"></span><br><span class="line">- 自顶向下的语法分析采用**最左推导**方式</span><br><span class="line"></span><br><span class="line">  自底向上的语法分析采用**最左归约**方式（**反向**构造**最右推导**）</span><br><span class="line"></span><br><span class="line">- 自底向上语法分析的通用框架</span><br><span class="line"></span><br><span class="line">  - 移入-归约分析（Shift-Reduce Parsing）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**移入-归约分析的工作过程**</span><br><span class="line"></span><br><span class="line">- 在对**输入**串的一次从左到右扫描过程中，语法分析器将零个或多个输入符号**移入**到**栈**的顶端，直到它可以对栈顶的一个文法符号串&amp;beta;进行归约为止</span><br><span class="line">- 然后，它将&amp;beta;**归约**为某个产生式的左部</span><br><span class="line">- 语法分析器不断地重复这个循环，直到它检测到一个语法**错误**，或者栈中包含了开始符号且输入缓冲区为空（当进入这样的格局时，语法分析器停止运行，并宣称**成功**完成了语法分析）为止</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**移入-归约分析器可采取的4种操作**</span><br><span class="line"></span><br><span class="line">- 移入：将下一个输入符号移到栈的顶端</span><br><span class="line">- 归约：被归约的符号串的右端必然处于栈顶。语法分析器在栈中确定这个串的左端，并决定用哪个非终结符来替换这个串</span><br><span class="line">- 接收：宣布语法分析过程成功完成</span><br><span class="line">- 报错：发现一个语法错误，并调用错误恢复子例程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228101548907](编译原理/image-20221228101548907.png) </span><br><span class="line"></span><br><span class="line">![image-20221228101608479](编译原理/image-20221228101608479.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.9、LR分析法概述</span><br><span class="line"></span><br><span class="line">**LR分析法**</span><br><span class="line"></span><br><span class="line">- LR文法(Knuth, 1963) 是最大的、可以构造出相应**移入-归约语法分析器**的文法类</span><br><span class="line">  - L: 对输入进行从左到右的扫描</span><br><span class="line">  - R: 反向构造出一个最右推导序列</span><br><span class="line">- LR(k)分析</span><br><span class="line">  - 需要向前查看k个输入符号的LR分析</span><br><span class="line">  - k = 0 和 k = 1 这两种情况具有实践意义</span><br><span class="line">    当省略(k)时，表示k =1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**LR分析法的基本原理**</span><br><span class="line"></span><br><span class="line">- 自底向上分析的关键问题</span><br><span class="line">  - 如何正确地识别句柄</span><br><span class="line">- 句柄是逐步形成的，用“状态”表示句柄识别的进展程度</span><br><span class="line">  - 例如：S&amp;rightarrow;bBB</span><br><span class="line">    - S&amp;rightarrow;·bBB 移进状态</span><br><span class="line">    - S&amp;rightarrow;b·BB  待约状态</span><br><span class="line">    - S&amp;rightarrow;bB·B</span><br><span class="line">    - S&amp;rightarrow;bBB· 归约状态</span><br><span class="line">    - LR分析器基于这样一些**状态**来构造**自动机**进行句柄的识别</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228102043483](编译原理/image-20221228102043483.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102053705](编译原理/image-20221228102053705.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102127430](编译原理/image-20221228102127430.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102136793](编译原理/image-20221228102136793.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102145799](编译原理/image-20221228102145799.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102153596](编译原理/image-20221228102153596.png)</span><br><span class="line"></span><br><span class="line">![image-20221228102205142](编译原理/image-20221228102205142.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102214403](编译原理/image-20221228102214403.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.10、LR(0)分析</span><br><span class="line"></span><br><span class="line">![image-20221228102251560](编译原理/image-20221228102251560.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102301330](编译原理/image-20221228102301330.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102310628](编译原理/image-20221228102310628.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228102319550](编译原理/image-20221228102319550.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102331205](编译原理/image-20221228102331205.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228102342753](编译原理/image-20221228102342753.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.11、LR(0)分析表构造算法</span><br><span class="line"></span><br><span class="line">项目的闭包(closwre)：对于待约项目，$A\rightarrow \alpha ·B\beta$，则将所有关于B的产生式$B\rightarrow ·r_1$等加入待约项目的闭包中</span><br><span class="line"></span><br><span class="line">S3：Shift 3</span><br><span class="line"></span><br><span class="line">S3：状态0，看见a，移进，状态切换为3</span><br><span class="line"></span><br><span class="line">r3：规约，3表示产生式的编号 action表要整行填</span><br><span class="line"></span><br><span class="line">![image-20221228102405205](编译原理/image-20221228102405205.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102412727](编译原理/image-20221228102412727.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102421622](编译原理/image-20221228102421622.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102430694](编译原理/image-20221228102430694.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102438915](编译原理/image-20221228102438915.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102447948](编译原理/image-20221228102447948.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102455794](编译原理/image-20221228102455794.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102505313](编译原理/image-20221228102505313.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102514936](编译原理/image-20221228102514936.png) </span><br><span class="line"></span><br><span class="line">![image-20221228102524844](编译原理/image-20221228102524844.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.12、SLR分析</span><br><span class="line"></span><br><span class="line">SLR(1)的项目集规范图和LR(0)完全一致，表不一样</span><br><span class="line"></span><br><span class="line">SLR(1)表不能整行整填，要有FOLLOW集</span><br><span class="line"></span><br><span class="line">多空白，提前发现错误</span><br><span class="line"></span><br><span class="line">![image-20221228103203463](编译原理/image-20221228103203463.png)</span><br><span class="line"></span><br><span class="line">有冲突的时候，该产生式左侧的FOLLOW有什么，就在那里画什么</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">![image-20221228103214970](编译原理/image-20221228103214970.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103224385](编译原理/image-20221228103224385.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103233089](编译原理/image-20221228103233089.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103242204](编译原理/image-20221228103242204.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103253710](编译原理/image-20221228103253710.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.13、LR(1)分析</span><br><span class="line"></span><br><span class="line">- SLR分析存在的问题</span><br><span class="line">  - SLR只是简单地考察下一个输入符号b是否属于与归约项目A→α相关联的FOLLOW(A)，但b∈FOLLOW(A)只是归约α的一个必要条件，而非充分条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228103339305](编译原理/image-20221228103339305.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103348701](编译原理/image-20221228103348701.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103400865](编译原理/image-20221228103400865.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103412381](编译原理/image-20221228103412381.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103422271](编译原理/image-20221228103422271.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103435868](编译原理/image-20221228103435868.png)</span><br><span class="line"></span><br><span class="line">小尾巴就是该产生式左侧的FOLLOW集，如S&#x27;→·S，FOLLOW（S‘） </span><br><span class="line"></span><br><span class="line">![image-20221228103450675](编译原理/image-20221228103450675.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103503149](编译原理/image-20221228103503149.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103512568](编译原理/image-20221228103512568.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103522215](编译原理/image-20221228103522215.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103529100](编译原理/image-20221228103529100.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103536086](编译原理/image-20221228103536086.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103545220](编译原理/image-20221228103545220.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.14、LALR分析法</span><br><span class="line"></span><br><span class="line">lookahead</span><br><span class="line"></span><br><span class="line">方法：在LR(1)的基础上合并同心集</span><br><span class="line"></span><br><span class="line">同心：</span><br><span class="line"></span><br><span class="line">![image-20221228103604055](编译原理/image-20221228103604055.png) </span><br><span class="line"></span><br><span class="line">LALR分析的基本思想</span><br><span class="line"></span><br><span class="line">- 寻找具有相同核心的LR  (1) 项集，并将这些项集合并为一个项集。 所谓项集的核心就是其第一分量的集合</span><br><span class="line">- 然后根据合并后得到的项集族构造语法分析表</span><br><span class="line">- 如果分析表中没有语法分析动作冲突，给定的文法就称为LALR  (1) 文法，就可以根据该分析表进行语法分析</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228103639406](编译原理/image-20221228103639406.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103650168](编译原理/image-20221228103650168.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103659519](编译原理/image-20221228103659519.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103708791](编译原理/image-20221228103708791.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103719051](编译原理/image-20221228103719051.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103731175](编译原理/image-20221228103731175.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103739165](编译原理/image-20221228103739165.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.15、二义性文法的LR分析</span><br><span class="line"></span><br><span class="line">![image-20221228103755768](编译原理/image-20221228103755768.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103804348](编译原理/image-20221228103804348.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103813063](编译原理/image-20221228103813063.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103819737](编译原理/image-20221228103819737.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103826696](编译原理/image-20221228103826696.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103833423](编译原理/image-20221228103833423.png) </span><br><span class="line"></span><br><span class="line">![image-20221228103840991](编译原理/image-20221228103840991.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4.16、LR分析中的错误处理</span><br><span class="line"></span><br><span class="line">- 语法错误的检测</span><br><span class="line">  - 当LR分析器在查询分析表并发现一个报错条目时，就检测到了一个语法错误</span><br><span class="line">- 错误恢复策略</span><br><span class="line">  - 恐慌模式错误恢复</span><br><span class="line">  - 短语层次错误恢复</span><br><span class="line"></span><br><span class="line">![image-20221228103909414](编译原理/image-20221228103909414.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**短语层次错误恢复**</span><br><span class="line"></span><br><span class="line">- 检查LR分析表中的每一个报错条目，并根据语言的使用方法来决定程序员所犯的何种错误最有可能引起这个语法错误</span><br><span class="line">- 然后构造出适当的恢复过程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20221228103946937](编译原理/image-20221228103946937.png) </span><br><span class="line"></span><br><span class="line">![image-20221228104005217](编译原理/image-20221228104005217.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 五、语法制导翻译</span><br><span class="line"></span><br><span class="line">## 5.1、语法制导翻译概述</span><br><span class="line"></span><br><span class="line">![image-20221228110252258](编译原理/image-20221228110252258.png) </span><br><span class="line"></span><br><span class="line">**语法制导翻译的基本思想**</span><br><span class="line"></span><br><span class="line">- 如何表示语义信息？</span><br><span class="line">  - 为CFG中的**文法符号**设置**语义属性**，用来表示语法成分对应的**语义信息**</span><br><span class="line">- 如何计算语义属性？</span><br><span class="line">  - 文法符号的语义属性值是用与文法符号所在产生式（**语法规则**）相关联的**语义规则**来计算的</span><br><span class="line">  - 对于给定的输入串x ，构建x的语法分析树，并**利用**与产生式（**语法规则**）相关联的**语义规则**来**计算**分析树中各结点对应的</span><br><span class="line"></span><br><span class="line">**两个概念**</span><br><span class="line"></span><br><span class="line">- 将**语义规则**同**语法规则**（产生式）联系起来要涉及两个概念</span><br><span class="line">  - 语法制导定义(Syntax-Directed Definitions, SDD)</span><br><span class="line">  - 语法制导翻译方案 (Syntax-Directed Translation Scheme , SDT )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**语法制导定义（SDD）**</span><br><span class="line"></span><br><span class="line">- SDD是对CFG的推广</span><br><span class="line">  - 将每个**文法符号**和一个**语义属性**集合相关联</span><br><span class="line">  - 将每个**产生式**和一组**语义规则**相关联，这些规则用于计算该产生式中各文法符号的属性值</span><br><span class="line">- 如果X是一个文法符号，a是X的一个属性，则用X.a表示属性a在某个标号为X的分析树结点上的值</span><br><span class="line">  - ![image-20221228110716219](编译原理/image-20221228110716219.png) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**语法制导翻译方案（SDT）**</span><br><span class="line"></span><br><span class="line">- SDT是在产生式右部嵌入了**程序片段**的CFG，这些程序片段称为**语义动作**。按照惯例，语义动作放在花括号内</span><br><span class="line"></span><br><span class="line">  - 例如：</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    D → T &#123; L.inh = T.type &#125; L</span><br><span class="line">    T → int &#123; T.type = int &#125;</span><br><span class="line">    T → real &#123; T.type = real &#125;</span><br><span class="line">    L → &#123; L1.inh = L.inh &#125;L1, id</span><br><span class="line">            …</span><br><span class="line">    </span><br></pre></td></tr></table></figure>- 一个语义动作在产生式中的位置决定了这个动作的执行时间</code></pre></li></ul><p><strong>SDD与SDT</strong></p><ul><li>SDD<ul><li>是关于语言翻译的高层次规格说明</li><li>隐蔽了许多具体实现细节，使用户不必显式地说明翻译发生的顺序</li></ul></li><li>SDT<ul><li>可以看作是对SDD的一种补充，是SDD的具体实施方案</li><li>显式地指明了语义规则的计算顺序，以便说明某些实现细节</li></ul></li></ul><h2 id="5-2、语法制导定义SDD"><a href="#5-2、语法制导定义SDD" class="headerlink" title="5.2、语法制导定义SDD"></a>5.2、语法制导定义SDD</h2><ul><li>语法制导定义SDD是对CFG的推广<ul><li>将每个<strong>文法符号</strong>和一个<strong>语义属性</strong>集合相关联</li></ul></li><li>将每个<strong>产生式</strong>和一组<strong>语义规则</strong>相关联，用来计算该产生式中各文法符号的属性值</li><li>文法符号的属性<ul><li>综合属性 (synthesized attribute)</li><li>继承属性 (inherited attribute)</li></ul></li></ul><p><strong>综合属性(synthesized attribute)</strong></p><ul><li>在分析树结点 N上的非终结符A的<strong>综合属性</strong>只能通过 <strong>N的子结点</strong>或 <strong>N本身</strong>的属性值来定义<br>例<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228112415259.png" alt="image-20221228112415259"></li><li>终结符可以具有<strong>综合属性</strong>。终结符的综合属性值是由词法分析器提供的词法值，因此在SDD中没有计算终结符属性值的语义规则</li></ul><p><strong>继承属性（inherited attribute）</strong></p><ul><li><p>在分析树结点 N上的非终结符A的继承属性只能通过 N的父结点、N的兄弟结点或 N本身的属性值来定义</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228112759543.png" alt="image-20221228112759543"></p></li><li><p>终结符没有继承属性。终结符从词法分析器处获得的属性值被归为综合属性值</p></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228112818827.png" alt="image-20221228112818827"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228112832634.png" alt="image-20221228112832634"> </p><p><strong>属性文法 (Attribute Grammar)</strong></p><ul><li>一个没有副作用的SDD有时也称为属性文法<ul><li>属性文法的规则仅仅通过其它属性值和常量来定义一个属性值</li></ul></li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228112918910.png" alt="image-20221228112918910"></li></ul><h2 id="5-3、SDD的求值顺序"><a href="#5-3、SDD的求值顺序" class="headerlink" title="5.3、SDD的求值顺序"></a>5.3、SDD的求值顺序</h2><ul><li>SDD为CFG中的文法符号设置<strong>语义属性</strong>。对于给定的输入串x，应用<strong>语义规则</strong>计算分析树中各结点对应的属性值</li><li>按照什么顺序计算属性值？<ul><li>语义规则建立了<strong>属性之间的依赖关系</strong>，在对语法分析树节点的一个属性求值之前，必须首先求出这个属性值<strong>所依赖的所有属性值</strong></li></ul></li></ul><p><strong>依赖图(Dependency Graph)</strong></p><ul><li>依赖图是一个描述了分析树中结点属性间依赖关系的有向图</li><li>分析树中每个标号为X的结点的每个属性a都对应着依赖图中的一个结点</li><li>如果属性X.a的值依赖于属性Y.b的值，则依赖图中有一条从Y.b的结点指向X.a的结点的有向边</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228114113502.png" alt="image-20221228114113502"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228114122408.png" alt="image-20221228114122408"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228114131988.png" alt="image-20221228114131988"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228114140825.png" alt="image-20221228114140825"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228114149234.png" alt="image-20221228114149234"> </p><h2 id="5-4、S-属性定义与L-属性定义"><a href="#5-4、S-属性定义与L-属性定义" class="headerlink" title="5.4、S-属性定义与L-属性定义"></a>5.4、S-属性定义与L-属性定义</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120320345.png" alt="image-20221228120320345"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120328196.png" alt="image-20221228120328196"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120339283.png" alt="image-20221228120339283"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120349756.png" alt="image-20221228120349756"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120358625.png" alt="image-20221228120358625"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120407079.png" alt="image-20221228120407079"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228120414494.png" alt="image-20221228120414494"> </p><h2 id="5-5、语法制导翻译方案SDT"><a href="#5-5、语法制导翻译方案SDT" class="headerlink" title="5.5、语法制导翻译方案SDT"></a>5.5、语法制导翻译方案SDT</h2><ul><li>语法制导翻译方案（SDT）是在<strong>产生式右部</strong>中嵌入了<strong>程序片段</strong>（称为<strong>语义动作</strong>）的CFG</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228211617193.png" alt="image-20221228211617193"> </li><li>SDT可以看作是SDD的具体实施方案</li><li>本届主要关注如何使用SDT来实现两类重要的SDD，因为在这两种情况下，SDT可在语法分析过程中实现<ul><li>基本文法可以使用LR分析技术，且SDD是S属性的</li><li>基本文法可以使用LL分析技术，且SDD是L属性的</li></ul></li></ul><p><strong>将S-SDD转换为SDT</strong></p><ul><li>将一个S-SDD转换为SDT的方法：将每个语义动作都放在产生式的最后<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212512413.png" alt="image-20221228212512413"></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212545512.png" alt="image-20221228212545512"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212601492.png" alt="image-20221228212601492"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212704397.png" alt="image-20221228212704397"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212718670.png" alt="image-20221228212718670"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212739083.png" alt="image-20221228212739083"> </p><p>这有一个系列，看PPT</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212826853.png"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212849857.png" alt="image-20221228212849857"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228212907135.png" alt="image-20221228212907135"> </p><p><strong>L-属性定义的SDT实现</strong></p><ul><li>如果一个L-SDD的基本文法可以使用LL分析技术，那么它的SDT可以在LL或LR语法分析过程中实现</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228213640292.png" alt="image-20221228213640292"> <ul><li>在非递归的预测分析过程中进行语义翻译</li><li>在递归的预测分析过程中进行语义翻译</li><li>在LR分析过程中进行语义翻译</li></ul></li></ul><h2 id="5-6、在非递归的预测分析过程中进行翻译"><a href="#5-6、在非递归的预测分析过程中进行翻译" class="headerlink" title="5.6、在非递归的预测分析过程中进行翻译"></a>5.6、在非递归的预测分析过程中进行翻译</h2><ul><li>扩展语法分析栈<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228213910956.png" alt="image-20221228213910956"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228213925816.png" alt="image-20221228213925816"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228213937227.png" alt="image-20221228213937227"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228213952776.png" alt="image-20221228213952776"> </li><li>看PPT</li></ul></li></ul><p><strong>分析栈中的每一个记录都对应着一段执行代码</strong></p><ul><li>综合记录出栈时，要将综合属性值复制给后面特定的语义动作</li><li>变量展开时（即变量本身的记录出栈时），如果其含有继承属性，则要将继承属性值复制给后面特定的语义动作</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214322775.png" alt="image-20221228214322775"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214343429.png" alt="image-20221228214343429"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214354344.png" alt="image-20221228214354344"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214408108.png" alt="image-20221228214408108"> </p><h2 id="5-7、在递归的预测分析过程中进行翻译"><a href="#5-7、在递归的预测分析过程中进行翻译" class="headerlink" title="5.7、在递归的预测分析过程中进行翻译"></a>5.7、在递归的预测分析过程中进行翻译</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214842964.png" alt="image-20221228214842964"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214854690.png" alt="image-20221228214854690"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214908055.png" alt="image-20221228214908055"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214918995.png" alt="image-20221228214918995"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214932858.png" alt="image-20221228214932858"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228214944977.png" alt="image-20221228214944977"> </p><h2 id="5-8、L-属性定义的自底向上翻译"><a href="#5-8、L-属性定义的自底向上翻译" class="headerlink" title="5.8、L-属性定义的自底向上翻译"></a>5.8、L-属性定义的自底向上翻译</h2><ul><li>给定一个以LL文法为基础的L-SDD，可以<strong>修改</strong>这个<strong>文法</strong>，并在LR语法分析过程中计算这个新文法之上的SDD</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228215106732.png" alt="image-20221228215106732"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228215118720.png" alt="image-20221228215118720"> </p><p>看PPT</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228215140411.png" alt="image-20221228215140411"> </p><h1 id="六、中间代码生成"><a href="#六、中间代码生成" class="headerlink" title="六、中间代码生成"></a>六、中间代码生成</h1><h2 id="6-1、类型表达式"><a href="#6-1、类型表达式" class="headerlink" title="6.1、类型表达式"></a>6.1、类型表达式</h2><p><strong>类型表达式（Type Expressions）</strong></p><ul><li><p>基本类型是类型表达式</p><ul><li>integer</li><li>real</li><li>char</li><li>boolean</li><li>type_error(出错类型)</li><li>void(无类型)</li></ul></li><li><p>可以为类型表达式命名，<strong>类型名</strong>也是类型表达式</p></li><li><p>将<strong>类型构造符</strong>(type constructor)作用于<strong>类型表达式</strong>可以构成新的类型表达式</p><ul><li><p>数组构造符array</p><ul><li><p>若T是类型表达式，则array(I,T)是类型表达式（I是一个整数）</p></li><li><table><thead><tr><th>类型</th><th>类型表达式</th></tr></thead><tbody><tr><td>int [3]</td><td>array(3, int)</td></tr><tr><td>int [2][3]</td><td>array(2, array(3, int))</td></tr></tbody></table></li></ul></li><li><p>指针构造符pointer</p><ul><li>若T是类型表达式，则pointer(T)是类型表达式，它表示一个指针类型</li></ul></li><li><p>笛卡尔乘积构造符x</p><ul><li>若T<sub>1</sub>和T<sub>2</sub>是类型表达式，则笛卡尔乘积T<sub>1</sub>&times; T<sub>2</sub>是类型表达式</li></ul></li><li><p>函数构造符&rightarrow;</p><ul><li>若T<sub>1</sub>,T<sub>2</sub>,…,T<sub>n</sub>和R是类型表达式，则T<sub>1</sub>&times;T<sub>2</sub>&times;…&times;T<sub>n</sub>&rightarrow;R是类型表达式</li></ul></li><li><p>记录构造符record</p><ul><li>若有标识符N<sub>1</sub>,N<sub>2</sub>,…,N<sub>n</sub>与类型表达式T<sub>1</sub>，T<sub>2</sub>，…，T<sub>n</sub>，则record((N<sub>1</sub>&times;T<sub>1</sub>)&times;(N<sub>2</sub>&times;T<sub>2</sub>)&times;…&times;(N<sub>n</sub>&times;T<sub>n</sub>))是一个类型表达式</li></ul></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228221010676.png" alt="image-20221228221010676"> </p><h2 id="6-2、声明语句的翻译"><a href="#6-2、声明语句的翻译" class="headerlink" title="6.2、声明语句的翻译"></a>6.2、声明语句的翻译</h2><p><strong>局部变量的存储分配</strong></p><ul><li>对于声明语句，语义分析的主要哦任务就是收集标识符的<strong>类型</strong>等属性信息，并为每一个名字分配一个<strong>相对地址</strong><ul><li>从类型表达式可以制导该类型在运行时刻所需的存储单元数量称为<strong>类型的宽度（width）</strong></li><li>在<strong>编译时刻</strong>，可以使用类型的宽度为每一个名字分配一个<strong>相对地址</strong></li></ul></li><li>名字的<strong>类型</strong>和<strong>相对地址</strong>信息保存在相应的<strong>符号表</strong>记录中</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222218719.png" alt="image-20221228222218719"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222230131.png" alt="image-20221228222230131"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222242358.png" alt="image-20221228222242358"> </p><h2 id="6-3、简单赋值语句的翻译"><a href="#6-3、简单赋值语句的翻译" class="headerlink" title="6.3、简单赋值语句的翻译"></a>6.3、简单赋值语句的翻译</h2><p><strong>赋值语句翻译的任务</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222452304.png" alt="image-20221228222452304"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222536167.png" alt="image-20221228222536167"> </p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222548112.png" alt="image-20221228222548112"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222559564.png" alt="image-20221228222559564"> </p><p>看PPT</p><h2 id="6-4、数组引用的翻译"><a href="#6-4、数组引用的翻译" class="headerlink" title="6.4、数组引用的翻译"></a>6.4、数组引用的翻译</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222633936.png" alt="image-20221228222633936"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222646148.png" alt="image-20221228222646148"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222655593.png" alt="image-20221228222655593"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222705005.png" alt="image-20221228222705005"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222714621.png" alt="image-20221228222714621"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222727428.png" alt="image-20221228222727428"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228222737484.png" alt="image-20221228222737484"> </p><h2 id="6-5、控制流语句及其SDT"><a href="#6-5、控制流语句及其SDT" class="headerlink" title="6.5、控制流语句及其SDT"></a>6.5、控制流语句及其SDT</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223817504.png" alt="image-20221228223817504"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223827639.png" alt="image-20221228223827639"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223838406.png" alt="image-20221228223838406"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223848599.png" alt="image-20221228223848599"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223857390.png" alt="image-20221228223857390"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223909758.png" alt="image-20221228223909758"> </p><h2 id="6-6、布尔表达式及其SDT"><a href="#6-6、布尔表达式及其SDT" class="headerlink" title="6.6、布尔表达式及其SDT"></a>6.6、布尔表达式及其SDT</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223927878.png" alt="image-20221228223927878"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223943719.png" alt="image-20221228223943719"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228223955129.png" alt="image-20221228223955129"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224005205.png" alt="image-20221228224005205"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224014930.png" alt="image-20221228224014930"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224026056.png" alt="image-20221228224026056"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224036031.png" alt="image-20221228224036031"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224046259.png" alt="image-20221228224046259"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224056092.png" alt="image-20221228224056092"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224107004.png" alt="image-20221228224107004"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224117196.png" alt="image-20221228224117196"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224129688.png" alt="image-20221228224129688"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228224139404.png" alt="image-20221228224139404"> </p><h2 id="6-7、控制流翻译的例子"><a href="#6-7、控制流翻译的例子" class="headerlink" title="6.7、控制流翻译的例子"></a>6.7、控制流翻译的例子</h2><h2 id="6-8、布尔表达式的回填"><a href="#6-8、布尔表达式的回填" class="headerlink" title="6.8、布尔表达式的回填"></a>6.8、布尔表达式的回填</h2><p><strong>回填</strong></p><ul><li>基本思想<ul><li>生成一个跳转指令时，暂时不指定该跳转指令的<strong>目标标号</strong>。这样的指令都被放入由跳转指令组成的<strong>列表</strong>中。<strong>同一个列表中的所有跳转指令具有相同的目标标号</strong>。等到能够确定正确的目标标号时，采取填充这些指令的目标标号。</li></ul></li></ul><p><strong>非终结符B的综合属性</strong></p><ul><li>B.truelist：指向一个包含跳转指令的列表，这些指令最终获得的目标标号就是当B为真时控制流应该转向的指令的标号</li><li>B.falselist：指向一个包含跳转指令的列表，这些指令最终获得的目标标号就是当B为假时控制流应该转向的指令的标号</li></ul><p><strong>函数</strong></p><ul><li>makelist( i )<ul><li>创建一个只包含i的列表，i是跳转指令的标号，函数返回指向新创建的列表的指针</li></ul></li><li>merge( p1, p2 )<ul><li>将 p1 和 p2 指向的列表进行合并，返回指向合并后的列表的指针</li></ul></li><li>backpatch( p, i )<ul><li>将 i 作为目标标号插入到 p所指列表中的各指令中</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225230853.png" alt="image-20221228225230853"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225241753.png" alt="image-20221228225241753"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225250461.png" alt="image-20221228225250461"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225301052.png" alt="image-20221228225301052"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225312064.png" alt="image-20221228225312064"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225402404.png" alt="image-20221228225402404"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225411964.png" alt="image-20221228225411964"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225421333.png" alt="image-20221228225421333"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225432319.png" alt="image-20221228225432319"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225442559.png" alt="image-20221228225442559"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228225456768.png" alt="image-20221228225456768"> </p><h2 id="6-9、控制流语句的回填"><a href="#6-9、控制流语句的回填" class="headerlink" title="6.9、控制流语句的回填"></a>6.9、控制流语句的回填</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230216340.png" alt="image-20221228230216340"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230226580.png" alt="image-20221228230226580"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230236523.png" alt="image-20221228230236523"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230245514.png" alt="image-20221228230245514"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230253373.png" alt="image-20221228230253373"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230301698.png" alt="image-20221228230301698"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230309950.png" alt="image-20221228230309950"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230325120.png" alt="image-20221228230325120"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230337937.png" alt="image-20221228230337937"></p><h2 id="6-10、switch语句的翻译"><a href="#6-10、switch语句的翻译" class="headerlink" title="6.10、switch语句的翻译"></a>6.10、switch语句的翻译</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230417140.png" alt="image-20221228230417140"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230428407.png" alt="image-20221228230428407"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230439654.png" alt="image-20221228230439654"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230450683.png" alt="image-20221228230450683"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230502327.png" alt="image-20221228230502327"> </p><h2 id="6-11、过程调用语句的翻译"><a href="#6-11、过程调用语句的翻译" class="headerlink" title="6.11、过程调用语句的翻译"></a>6.11、过程调用语句的翻译</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230513349.png" alt="image-20221228230513349"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230528764.png" alt="image-20221228230528764"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230538844.png" alt="image-20221228230538844"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230549121.png" alt="image-20221228230549121"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221228230601187.png" alt="image-20221228230601187"> </p><h1 id="七、运行存储"><a href="#七、运行存储" class="headerlink" title="七、运行存储"></a>七、运行存储</h1><h2 id="7-1、运行存储分配概述"><a href="#7-1、运行存储分配概述" class="headerlink" title="7.1、运行存储分配概述"></a>7.1、运行存储分配概述</h2><p><strong>运行存储分配策略</strong></p><ul><li>编译器在工作过程中，必须为源程序中出现的一些<strong>数据对象</strong>分配<strong>运行时的存储空间</strong></li><li>对于那些在<strong>编译时刻</strong>就可以确定大小的数据对象，可以在编译时刻就为它们分配存储空间，这样的分配策略称为<strong>静态存储分配</strong></li><li>反之，如果不能在编译时完全确定数据对象的大小，就要采用<strong>动态存储分配</strong>的策略。即在编译时仅产生各种必要的信息，而在<strong>运行时刻</strong>，再动态地分配数据对象的存储空间<ul><li>链式存储分配</li><li>堆式存储分配</li><li>静态和动态分别对应编译时刻和运行时刻</li></ul></li></ul><p><strong>运行时内存的划分</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229092438434.png" alt="image-20221229092438434"> </p><p><strong>活动记录</strong></p><ul><li>使用<strong>过程</strong>（或<strong>函数、方法</strong>）作为用户自定义动作的单元的语言，其编译器通常<strong>以过程为单位分配存储空间</strong></li><li>过程体的每次执行称为该过程的一个<strong>活动</strong>（activation）</li><li>过程每执行一次，就为它分配一块连续存储区，用来管理过程一次次执行所需的信息，这块连续存储区称为<strong>活动记录</strong>（activation record）</li></ul><p><strong>活动记录的一般形式</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229092924805.png" alt="image-20221229092924805"> </p><h2 id="7-2、静态存储分配"><a href="#7-2、静态存储分配" class="headerlink" title="7.2、静态存储分配"></a>7.2、静态存储分配</h2><ul><li>在静态存储分配中，编译器为每个过程确定其活动记录在目标程序中的位置</li><li>这样，过程中每个名字的存储位置就确定了</li><li>因此，这些名字的存储地址可以被编译到目录代码中</li><li>过程每次执行时，它的名字都绑定到同样的存储单元</li></ul><p><strong>静态存储分配的限制条件</strong></p><ul><li>适合静态存储分配的语言必须满足以下条件<ul><li>数组上下界必须是常数</li><li>不允许过程的递归调用</li><li>不允许动态建立数据实体</li></ul></li><li>满足这些条件的语言有BASIC和FORTRAN等</li></ul><p><strong>常用的静态存储分配方法</strong></p><ul><li>顺序分配法</li><li>层次分配法</li></ul><p><strong>顺序分配法</strong></p><ul><li>按照过程出现的先后顺序逐段分配存储空间</li><li>各过程的活动记录占用互不相交的存储空间</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229093435200.png" alt="image-20221229093435200"></li></ul><p><strong>层次分配法</strong></p><ul><li>通过对过程间的调用关系进行分析，凡属无相互调用关系的并列过程，尽量使其局部数据<strong>共享</strong>存储空间</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229093559195.png" alt="image-20221229093559195"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229093615919.png" alt="image-20221229093615919"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229093626363.png" alt="image-20221229093626363"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229093642270.png" alt="image-20221229093642270"></li></ul><h2 id="7-3、栈式存储分配"><a href="#7-3、栈式存储分配" class="headerlink" title="7.3、栈式存储分配"></a>7.3、栈式存储分配</h2><p><strong>栈式存储分配</strong></p><ul><li>有些语言使用过程、函数或方法作为用户自定义动作的单元，几乎所有针对这些语言的编译器都把它们的（至少一部分的）运行时刻存储以<strong>栈</strong>的形式进行管理，成为<strong>栈式存储分配</strong></li><li>当一个过程被<strong>调用</strong>时，该过程的活动就被<strong>压入</strong>栈；当过程<strong>结束</strong>时，该活动记录被<strong>弹出</strong>栈</li><li>这种安排不仅允许活跃时段不交叠的多个过程调用之间<strong>共享空间</strong>，而且允许以如下方式为一个过程编译代码：它的非局部变量的<strong>相对地址总是固定的</strong>，和过程调用序列无关</li></ul><p><strong>活动树</strong></p><ul><li>用来描述程序<strong>运行</strong>期间控制进入和离开各个活动的情况的树成为<strong>活动树</strong></li><li>树中的每个<strong>结点</strong>对应于一个<strong>活动</strong>。<strong>根节点</strong>是启动程序执行的<strong>main过程的活动</strong></li><li>在表示过程p的某个活动的节点上，其<strong>子节点</strong>对应于被p的这次活动<strong>调用</strong>的各个过程的活动。按照这些<strong>活动被调用的顺序</strong>，自左向右地显示它们。<strong>一个子结点必须在其左右兄弟结点的活动开始之前结束</strong></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094344007.png" alt="image-20221229094344007"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094410337.png" alt="image-20221229094410337"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094425384.png" alt="image-20221229094425384"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094435505.png" alt="image-20221229094435505"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094446353.png" alt="image-20221229094446353"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094456437.png" alt="image-20221229094456437"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094505984.png" alt="image-20221229094505984"> </p><h2 id="7-4、调用序列和返回序列"><a href="#7-4、调用序列和返回序列" class="headerlink" title="7.4、调用序列和返回序列"></a>7.4、调用序列和返回序列</h2><p><strong>调用序列和返回序列</strong></p><ul><li>过程调用和过程返回都需要执行一些代码来管理活动记录栈，保存或恢复机器状态等<ul><li>调用序列<ul><li>实现过程调用的代码段。为一个活动记录在栈中分配空间，并在此记录的字段中填写信息</li></ul></li><li>返回序列<ul><li>恢复机器状态，使得调用过程能够在调用结束之后继续执行</li></ul></li><li>一个调用代码序列中的代码通常被分割到调用过程（调用者）和被调用过程（被调用者）中。返回序列也是如此</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094559973.png" alt="image-20221229094559973"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094609525.png" alt="image-20221229094609525"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094623681.png" alt="image-20221229094623681"> </p><p><strong>变长数据的存储分配</strong></p><ul><li>在<strong>现代程序设计语言</strong>中，在<strong>编译时刻不能确定大小的对象</strong>将被分配在堆区。但是，如果它们是<strong>过程的局部对象</strong>，也可以将它们分配在<strong>运行时刻栈</strong>中。尽量将对象放置在栈区的原因：可以<strong>避免</strong>对它们的空间进行<strong>垃圾回收</strong>，也就减少了相应的<strong>开销</strong></li><li>只有一个数据对象<strong>局部于某个过程</strong>，且<strong>当此过程结束时它变得不可访问</strong>，才可以使用栈为这个对象分配空间</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094739102.png" alt="image-20221229094739102"> </p><h2 id="7-5、非局部数据的访问"><a href="#7-5、非局部数据的访问" class="headerlink" title="7.5、非局部数据的访问"></a>7.5、非局部数据的访问</h2><p><strong>非局部数据的访问</strong></p><ul><li>一个过程除了可以使用过程自身定义的局部数据以外，还可以使用过程外定义的非局部数据</li><li>语言可以分为两种类型<ul><li>支持过程嵌套声明的语言<ul><li>可以在一个过程中声明另一个过程</li><li>例: Pascal</li></ul></li><li>不支持过程嵌套声明的语言<ul><li>不可以在一个过程中声明另一个过程</li></ul></li><li>例：C</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094833387.png" alt="image-20221229094833387"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229094843048.png" alt="image-20221229094843048"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095618556.png" alt="image-20221229095618556"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095628012.png" alt="image-20221229095628012"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095637080.png" alt="image-20221229095637080"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095648588.png" alt="image-20221229095648588"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095703783.png" alt="image-20221229095703783"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095714833.png" alt="image-20221229095714833"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095726727.png" alt="image-20221229095726727"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095742609.png" alt="image-20221229095742609"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095753223.png" alt="image-20221229095753223"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095803051.png" alt="image-20221229095803051"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095814671.png" alt="image-20221229095814671"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229095825671.png" alt="image-20221229095825671"> </p><h2 id="7-6、堆式存储分配"><a href="#7-6、堆式存储分配" class="headerlink" title="7.6、堆式存储分配"></a>7.6、堆式存储分配</h2><p><strong>堆式存储分配</strong></p><ul><li>堆式存储分配是把连续存储区域分<strong>成块</strong>，当活动记录或其它对象需要时就分配</li><li>块的释放可以按任意次序进行，所以经过一段时间后，对可能包含交错的<strong>正在使用</strong>和<strong>已经释放</strong>的区域</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100106135.png" alt="image-20221229100106135"> </p><ul><li>申请<ul><li>设当前自由块总长为M，欲申请长度为n<ul><li>如果存在若干个长度大于或等于n的存储块，可按以下策略之一进行存储分配<ul><li>取长度m满足需求的第1个自由块，将长度为m-n的剩余部分仍放在自由链中</li><li>取长度m满足需求的最小的自由块</li><li>取长度m满足需求的最大的自由块</li></ul></li></ul></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100207873.png" alt="image-20221229100207873"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100218633.png" alt="image-20221229100218633"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100227362.png" alt="image-20221229100227362"> </p><h2 id="7-7、符号表"><a href="#7-7、符号表" class="headerlink" title="7.7、符号表"></a>7.7、符号表</h2><p><strong>符号表</strong></p><ul><li>符号表的组织<ul><li>为每个作用域（程序块）建立一个独立的符号表</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100319989.png" alt="image-20221229100319989"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100333182.png" alt="image-20221229100333182"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100344675.png" alt="image-20221229100344675"> </p><p><strong>标识符的基本处理方法</strong></p><ul><li>当在某一层的<strong>声明语句</strong>中识别出一个标识符(id的**定义性出现)**时，以此标识符查相应于本层的符号表<ul><li>如果查到，则报错并发出诊断信息“id<strong>重复声明</strong>”</li><li>否则，在符号表中加入新登记项，将标识符及有关信息填入</li></ul></li><li>当在<strong>可执行语句</strong>部分扫视到标识符时( id的<strong>应用性出现</strong>)<ul><li>首先在该层符号表中查找该id，如果找不到，则到直接外层符号表中去查，如此等等，一旦找到，则在表中取出有关信息并作相应处理</li><li>如果查遍所有外层符号表均未找到该id，则报错并发出诊断信息“id<strong>未声明</strong>”</li></ul></li></ul><h2 id="7-8、符号表的建立"><a href="#7-8、符号表的建立" class="headerlink" title="7.8、符号表的建立"></a>7.8、符号表的建立</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100523662.png" alt="image-20221229100523662"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100540343.png" alt="image-20221229100540343"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100559371.png" alt="image-20221229100559371"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100611855.png" alt="image-20221229100611855"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100624482.png" alt="image-20221229100624482"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100636634.png" alt="image-20221229100636634"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100654282.png" alt="image-20221229100654282"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229100705658.png" alt="image-20221229100705658"> </p><h1 id="八、代码优化"><a href="#八、代码优化" class="headerlink" title="八、代码优化"></a>八、代码优化</h1><h2 id="8-1、流图"><a href="#8-1、流图" class="headerlink" title="8.1、流图"></a>8.1、流图</h2><p><strong>基本块（Basic Block）</strong></p><ul><li><strong>基本块</strong>是满足下列条件的<strong>最大</strong>的<strong>连续</strong>三地址指令序列<ul><li>控制流只能从基本块的<strong>第一个指令</strong>进入该块。也就是说，没有跳转到基本块中间或末尾指令的转移指令</li><li>除了基本块的<strong>最后一个指令</strong>，控制流在离开基本块之前不会跳转或者停机</li></ul></li></ul><p><strong>基本块划分算法</strong></p><ul><li>输入： <ul><li>三地址指令序列</li></ul></li><li>输出： <ul><li>输入序列对应的<strong>基本块列表</strong>，其中每个指令恰好被分配给一个基本块</li></ul></li><li>方法： <ul><li>首先，确定指令序列中哪些指令是<strong>首指令</strong>(leaders)，即某个基本块的第一个指令<ul><li><ol><li>指令序列的<strong>第一个三地址指令</strong>是一个首指令</li></ol></li><li><ol start="2"><li>任意一个条件或无条件<strong>转移指令的目标指令</strong>是一个首指令</li></ol></li><li><ol start="3"><li>紧跟在一个条件或无条件<strong>转移指令之后的指令</strong>是一个首指令</li></ol></li></ul></li><li>然后，每个首指令对应的基本块包括了从它自己开始，直到<strong>下一个首指令</strong>(不含)或者<strong>指令序列结尾</strong>之间的所有指令</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229101625775.png" alt="image-20221229101625775"> </p><p><strong>流图（Flow Graphs）</strong></p><ul><li>流图的<strong>结点</strong>是一些<strong>基本块</strong></li><li>从基本块B到基本块C之间有一条<strong>边当且仅当</strong>基本块C的第一个指令<strong>可能</strong>紧跟在B的最后一条指令之后执行</li><li>此时称B是C的前驱(predecessor) ，<br>C是B的后继(successor)</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102311697.png" alt="image-20221229102311697"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102325880.png" alt="image-20221229102325880"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102337219.png" alt="image-20221229102337219"> </p><h2 id="8-2、常用的代码优化方法"><a href="#8-2、常用的代码优化方法" class="headerlink" title="8.2、常用的代码优化方法"></a>8.2、常用的代码优化方法</h2><p><strong>优化的分类</strong></p><ul><li>机器无关优化<ul><li>针对中间代码</li></ul></li><li>机器相关优化<ul><li>针对目标代码</li></ul></li><li>局部代码优化<ul><li>单个基本块范围内的优化</li></ul></li><li>全局代码优化<ul><li>面向多个基本块的优化</li></ul></li></ul><p><strong>常用的优化方法</strong></p><ul><li>删除公共子表达式</li><li>删除无用代码</li><li>常量合并</li><li>代码移动</li><li>强度削弱</li><li>删除归纳变量</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102457228.png" alt="image-20221229102457228"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102508744.png" alt="image-20221229102508744"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102522082.png" alt="image-20221229102522082"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102539500.png" alt="image-20221229102539500"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102550014.png" alt="image-20221229102550014"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102600823.png" alt="image-20221229102600823"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102749612.png" alt="image-20221229102749612"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102758388.png" alt="image-20221229102758388"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102826498.png" alt="image-20221229102826498"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102847234.png" alt="image-20221229102847234"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102901035.png" alt="image-20221229102901035"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229102917786.png" alt="image-20221229102917786"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103007111.png" alt="image-20221229103007111"> </p><h3 id="8-2-2、删除无用代码"><a href="#8-2-2、删除无用代码" class="headerlink" title="8.2.2、删除无用代码"></a>8.2.2、删除无用代码</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103050058.png" alt="image-20221229103050058"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103126356.png" alt="image-20221229103126356"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103135530.png" alt="image-20221229103135530"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103145930.png" alt="image-20221229103145930"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103204022.png" alt="image-20221229103204022"> </p><h3 id="8-2-3、常量合并"><a href="#8-2-3、常量合并" class="headerlink" title="8.2.3、常量合并"></a>8.2.3、常量合并</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103223869.png" alt="image-20221229103223869"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103242458.png" alt="image-20221229103242458"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103258722.png" alt="image-20221229103258722"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103310234.png" alt="image-20221229103310234"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103324453.png" alt="image-20221229103324453"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103334699.png" alt="image-20221229103334699"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103344609.png" alt="image-20221229103344609"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103400038.png" alt="image-20221229103400038"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103415862.png" alt="image-20221229103415862"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103425657.png" alt="image-20221229103425657"> </p><h2 id="8-3、基本块的优化"><a href="#8-3、基本块的优化" class="headerlink" title="8.3、基本块的优化"></a>8.3、基本块的优化</h2><p><strong>基本块的优化</strong></p><ul><li>很多重要的<strong>局部优化技术</strong>首先把一个<strong>基本块</strong>转换成为一个<strong>无环有向图</strong>(directed acyclic graph，DAG)</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103514098.png" alt="image-20221229103514098"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103525554.png" alt="image-20221229103525554"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103540503.png" alt="image-20221229103540503"> </p><p><strong>根据基本块的DAG可以获得一些非常有用的信息</strong></p><ul><li>确定哪些变量的值在该基本块中赋值前被<strong>引用</strong>过<ul><li>在DAG中<strong>创建了叶结点</strong>的那些变量</li></ul></li><li>确定哪些语句计算的值可以在基本块外被引用<ul><li>在DAG构造过程中为语句s（该语句为变量x定值）创建的节点N，在DAG构造结束时x仍然是N的定值变量</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103717999.png" alt="image-20221229103717999"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103730838.png" alt="image-20221229103730838"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103741450.png" alt="image-20221229103741450"> </p><h2 id="8-4、数据流分析"><a href="#8-4、数据流分析" class="headerlink" title="8.4、数据流分析"></a>8.4、数据流分析</h2><p><strong>数据流分析(data-flow analysis)</strong></p><ul><li>数据流分析<ul><li>一组用来获取程序执行路径上的数据流信息的技术</li></ul></li><li>数据流分析应用<ul><li>到达-定值分析 (Reaching-Definition Analysis)</li><li>活跃变量分析 (Live-Variable Analysis)</li><li>可用表达式分析 (Available-Expression Analysis)</li></ul></li><li>在每一种数据流分析应用中，都会把每个<strong>程序点</strong>和一个<strong>数据流值</strong>关联起来</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103852898.png" alt="image-20221229103852898"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103903665.png" alt="image-20221229103903665"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103912890.png" alt="image-20221229103912890"> </p><h2 id="8-5、到达定值分析"><a href="#8-5、到达定值分析" class="headerlink" title="8.5、到达定值分析"></a>8.5、到达定值分析</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103926890.png" alt="image-20221229103926890"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103938765.png" alt="image-20221229103938765"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103948985.png" alt="image-20221229103948985"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229103959253.png" alt="image-20221229103959253"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104008052.png" alt="image-20221229104008052"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104018391.png" alt="image-20221229104018391"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104029344.png" alt="image-20221229104029344"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104039833.png" alt="image-20221229104039833"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104050033.png" alt="image-20221229104050033"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104059545.png" alt="image-20221229104059545"></p><h2 id="8-6、到达定制方程的计算"><a href="#8-6、到达定制方程的计算" class="headerlink" title="8.6、到达定制方程的计算"></a>8.6、到达定制方程的计算</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104115036.png" alt="image-20221229104115036"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104128140.png" alt="image-20221229104128140"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104149961.png" alt="image-20221229104149961"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229104200670.png" alt="image-20221229104200670"> </p><h2 id="8-7、活跃变量分析"><a href="#8-7、活跃变量分析" class="headerlink" title="8.7、活跃变量分析"></a>8.7、活跃变量分析</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105053838.png" alt="image-20221229105053838"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105105028.png" alt="image-20221229105105028"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105126292.png" alt="image-20221229105126292"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105136516.png" alt="image-20221229105136516"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105146075.png" alt="image-20221229105146075"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105156295.png" alt="image-20221229105156295"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105212375.png" alt="image-20221229105212375"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105222507.png" alt="image-20221229105222507"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105233235.png" alt="image-20221229105233235"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105243605.png" alt="image-20221229105243605"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105258351.png" alt="image-20221229105258351"> </p><h2 id="8-8、可用表达式分析"><a href="#8-8、可用表达式分析" class="headerlink" title="8.8、可用表达式分析"></a>8.8、可用表达式分析</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105309223.png" alt="image-20221229105309223"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105317703.png" alt="image-20221229105317703"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105327543.png" alt="image-20221229105327543"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105336818.png" alt="image-20221229105336818"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105346426.png" alt="image-20221229105346426"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105356670.png" alt="image-20221229105356670"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105404618.png" alt="image-20221229105404618"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105452031.png" alt="image-20221229105452031"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105503003.png" alt="image-20221229105503003"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105511529.png" alt="image-20221229105511529"> </p><h2 id="8-9、支配结点和回边"><a href="#8-9、支配结点和回边" class="headerlink" title="8.9、支配结点和回边"></a>8.9、支配结点和回边</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105559526.png" alt="image-20221229105559526"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105609807.png" alt="image-20221229105609807"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105622515.png" alt="image-20221229105622515"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105631379.png" alt="image-20221229105631379"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105640851.png" alt="image-20221229105640851"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105655456.png" alt="image-20221229105655456"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105704139.png" alt="image-20221229105704139"> </p><h2 id="8-10、自然循环及其识别"><a href="#8-10、自然循环及其识别" class="headerlink" title="8.10、自然循环及其识别"></a>8.10、自然循环及其识别</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105716824.png" alt="image-20221229105716824"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105726115.png" alt="image-20221229105726115"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105737519.png" alt="image-20221229105737519"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105747757.png" alt="image-20221229105747757"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105756983.png" alt="image-20221229105756983"> </p><h2 id="8-11、删除全局公共子表达式和复制语句"><a href="#8-11、删除全局公共子表达式和复制语句" class="headerlink" title="8.11、删除全局公共子表达式和复制语句"></a>8.11、删除全局公共子表达式和复制语句</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105810839.png" alt="image-20221229105810839"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105823116.png" alt="image-20221229105823116"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105838091.png" alt="image-20221229105838091"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105849241.png" alt="image-20221229105849241"> </p><h2 id="8-12、代码移动"><a href="#8-12、代码移动" class="headerlink" title="8.12、代码移动"></a>8.12、代码移动</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105902654.png" alt="image-20221229105902654"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105912666.png" alt="image-20221229105912666"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105927407.png" alt="image-20221229105927407"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105940778.png" alt="image-20221229105940778"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229105951670.png" alt="image-20221229105951670"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110000514.png" alt="image-20221229110000514"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110010769.png" alt="image-20221229110010769"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110020394.png" alt="image-20221229110020394"> </p><h2 id="8-13、作用于归纳变的强度削弱"><a href="#8-13、作用于归纳变的强度削弱" class="headerlink" title="8.13、作用于归纳变的强度削弱"></a>8.13、作用于归纳变的强度削弱</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110037094.png" alt="image-20221229110037094"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110046942.png" alt="image-20221229110046942"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110058715.png" alt="image-20221229110058715"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110107943.png" alt="image-20221229110107943"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110118855.png" alt="image-20221229110118855"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110127650.png" alt="image-20221229110127650"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110142811.png" alt="image-20221229110142811"> </p><h2 id="8-14、归纳变量的删除"><a href="#8-14、归纳变量的删除" class="headerlink" title="8.14、归纳变量的删除"></a>8.14、归纳变量的删除</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110154714.png" alt="image-20221229110154714"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110207086.png" alt="image-20221229110207086"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110215303.png" alt="image-20221229110215303"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110223539.png" alt="image-20221229110223539"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229110233331.png" alt="image-20221229110233331"> </p><h1 id="九、代码生成"><a href="#九、代码生成" class="headerlink" title="九、代码生成"></a>九、代码生成</h1><h2 id="9-1、代码生成器的主要任务"><a href="#9-1、代码生成器的主要任务" class="headerlink" title="9.1、代码生成器的主要任务"></a>9.1、代码生成器的主要任务</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111344269.png" alt="image-20221229111344269"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111358393.png" alt="image-20221229111358393"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111407384.png" alt="image-20221229111407384"> </p><h2 id="9-2、一个简单的目标机模型"><a href="#9-2、一个简单的目标机模型" class="headerlink" title="9.2、一个简单的目标机模型"></a>9.2、一个简单的目标机模型</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111418965.png" alt="image-20221229111418965"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111427745.png" alt="image-20221229111427745"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111435473.png" alt="image-20221229111435473"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111447189.png" alt="image-20221229111447189"> </p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111455104.png" alt="image-20221229111455104"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111503836.png" alt="image-20221229111503836"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111513500.png" alt="image-20221229111513500"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111524682.png" alt="image-20221229111524682"> </p><h2 id="9-3、指令选择"><a href="#9-3、指令选择" class="headerlink" title="9.3、指令选择"></a>9.3、指令选择</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111537123.png" alt="image-20221229111537123"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111546317.png" alt="image-20221229111546317"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111554968.png" alt="image-20221229111554968"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111603280.png" alt="image-20221229111603280"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111620397.png" alt="image-20221229111620397"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111629678.png" alt="image-20221229111629678"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111641792.png" alt="image-20221229111641792"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111652019.png" alt="image-20221229111652019"> </p><h2 id="9-4、寄存器的选择"><a href="#9-4、寄存器的选择" class="headerlink" title="9.4、寄存器的选择"></a>9.4、寄存器的选择</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111713999.png" alt="image-20221229111713999"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111728392.png" alt="image-20221229111728392"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111737295.png" alt="image-20221229111737295"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111746536.png" alt="image-20221229111746536"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111755148.png" alt="image-20221229111755148"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111803508.png" alt="image-20221229111803508"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111817708.png" alt="image-20221229111817708"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111830532.png" alt="image-20221229111830532"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111839805.png" alt="image-20221229111839805"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111848632.png" alt="image-20221229111848632"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111858435.png" alt="image-20221229111858435"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111908324.png" alt="image-20221229111908324"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111916908.png" alt="image-20221229111916908"> </p><h2 id="9-5、寄存器选择函数getReg的设计"><a href="#9-5、寄存器选择函数getReg的设计" class="headerlink" title="9.5、寄存器选择函数getReg的设计"></a>9.5、寄存器选择函数getReg的设计</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111928856.png" alt="image-20221229111928856"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111938200.png" alt="image-20221229111938200"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229111947092.png" alt="image-20221229111947092"> </p><h2 id="9-6、窥孔优化"><a href="#9-6、窥孔优化" class="headerlink" title="9.6、窥孔优化"></a>9.6、窥孔优化</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112001244.png" alt="image-20221229112001244"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112009763.png" alt="image-20221229112009763"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112020056.png" alt="image-20221229112020056"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112028480.png" alt="image-20221229112028480"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112036868.png" alt="image-20221229112036868"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112045043.png" alt="image-20221229112045043"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20221229112053450.png" alt="image-20221229112053450"> </p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230425151302908.png" alt="image-20230425151302908"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230425151316152.png" alt="image-20230425151316152"></p><p>第一题第8个那是00子串</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230425151337275.png" alt="image-20230425151337275"></p><p>今天的作业 构造01开头的nfa和确定化</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/image-20230425151356563.png" alt="image-20230425151356563"></p><p>作业订正 第一题十问 除了构造文法 还要吧nfa dfa同样写出来</p><p>第一题第9问只用写出文法 自动机不用写</p><p>作业 正则文法定义抄一遍</p><p>1、编译器的原理<br>2、词法分析器的作用是什么<br>3、语法分析器的作用是什么<br>4、自顶向下分析的原理是什么<br>5、倒数第三个是0的二进制串集合 构造正则表达式</p><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><ul><li><p>什么叫编译器</p><ul><li>编译器能够将高级语言描写的源程序转换成与之在逻辑上等价的低级语言形式的目标程序</li></ul></li><li><p>编译的阶段</p><ul><li>词法分析阶段：将源程序内的字符串变换为单位符号流的过程</li><li>语法分析阶段：分析单词串如何构成语句和声明，构造语法分析树</li><li>语义分析和中间代码生成阶段：收集标识符的属性信息，在语义检查正确的情况下进行中间代码的翻译</li><li>优化阶段：为中间代码进行等价变换或改造，以期获得更为高效的代码</li><li>目标代码生成阶段：把中间代码变为为特定机器上的机器语言程序或汇编语言程序，实现最终的翻译优化</li></ul></li><li><p>解释和编译的区别</p><ul><li>解释：看一行，翻译一行，执行一行</li><li>编译：将所有程序全部编后，再执行</li></ul></li></ul><h1 id="二、词法分析"><a href="#二、词法分析" class="headerlink" title="二、词法分析"></a>二、词法分析</h1><ol><li><p>任务</p><ul><li>从左往右逐个字符地扫描源程序，产生一个个单词符号</li></ul></li><li><p>单词的分类（5类）</p><ul><li><pre><code>int i = 0;int 保留字（基本字） i（标识符） =（运算符） 0（常数）;（界符）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 文法构造（10个题）</span><br><span class="line"></span><br><span class="line">4. 文法分类</span><br><span class="line"></span><br><span class="line">   1. 0型文法 无限制文法/短语结构文法 PSG $\forall \alpha \rightarrow \beta \in P,\alpha中至少含有1个非终结符$</span><br><span class="line">   2. 1型文法 上下文有关文法 CSG $|\alpha|\leq|\beta|$</span><br><span class="line">   3. 2型文法 上下文无关文法 CFG $\alpha \in V_N$</span><br><span class="line">   4. 3型文法 正则文法 RG $A\rightarrow wB \ 或A\rightarrow w (或A\rightarrow Bw \ 或A\rightarrow) w$</span><br><span class="line"></span><br><span class="line">5. 自动机（NFA/DFA）-构造</span><br><span class="line"></span><br><span class="line">6. 确定化（NFA-&gt;DFA）画表，会写五元组，状态图</span><br><span class="line"></span><br><span class="line">7. 正则表达式定义</span><br><span class="line"></span><br><span class="line">8. 正则文法和正则表达式等价</span><br><span class="line"></span><br><span class="line">9. 正则表达式构造</span><br><span class="line"></span><br><span class="line">10. 2.4不考</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 三、</span><br><span class="line"></span><br><span class="line">1. 3.1必考 推导、规约、画树</span><br><span class="line"></span><br><span class="line">2. 不考消除左递归</span><br><span class="line"></span><br><span class="line">3. 自上而下分析两类</span><br><span class="line"></span><br><span class="line">   1. 递归下降分析法</span><br><span class="line">   2. LL(1)分析法必考 FIRST FOLLOW SELECT</span><br><span class="line"></span><br><span class="line">4. 常见的自下而上有哪五种</span><br><span class="line"></span><br><span class="line">5. 自下而上定理</span><br><span class="line"></span><br><span class="line">6. 规约、句柄、冲突</span><br><span class="line"></span><br><span class="line">   1. 短语：语法树中，所有的子树根结点构成的就是短语</span><br><span class="line">   2. 直接短语：只有2层子树构成的短语，是直接短语</span><br><span class="line">   3. 间接短语：</span><br><span class="line">   4. ![image-20230605200806641](编译原理/image-20230605200806641.png)</span><br><span class="line">   5. ![image-20230605200820974](编译原理/image-20230605200820974.png)</span><br><span class="line"></span><br><span class="line">7. 分析表中出现的空白：提前发现错误</span><br><span class="line"></span><br><span class="line">8. 算符处理 概念定义</span><br><span class="line"></span><br><span class="line">   算符文法：即它的任一产生式的右部都不含两个相继的非终结符的文法。如果G是一个不含空字符的算法文法，那么只要它的任一对终结符都至多只满足&gt;,=,&lt;的关系的其中一种，则成G是一个**算符优先文法**</span><br><span class="line"></span><br><span class="line">   算符优先文法：引入了优先级的概念</span><br><span class="line"></span><br><span class="line">   E-&gt; E*E</span><br><span class="line"></span><br><span class="line">   E-&gt;E+E</span><br><span class="line"></span><br><span class="line">   E-&gt;i 不是算符优先文法</span><br><span class="line"></span><br><span class="line">   算符处理是不是 。。。。规约</span><br><span class="line"></span><br><span class="line">9. LR分析，各个字母意思</span><br><span class="line"></span><br><span class="line">   - L: 对输入进行从左到右的扫描</span><br><span class="line">   - R: 反向构造出一个最右推导序列</span><br><span class="line"></span><br><span class="line">10. LR0 四种，选一种最后一大题</span><br><span class="line"></span><br><span class="line">11. SAR1 只考概念</span><br><span class="line"></span><br><span class="line">    1. 合并同心集</span><br><span class="line">    2. 坏了，可能产生新规约冲突</span><br><span class="line"></span><br><span class="line">12. LR1 可能考71页那题 会画空表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 四、</span><br><span class="line"></span><br><span class="line">- 语法制导翻译定义</span><br><span class="line">  - 在语法分析过程中，随着分析的逐步发展，根据相应文法的每一规则的语义子程序进行翻译的方法</span><br><span class="line">- 属性文法</span><br><span class="line">  - 在文法G[s]基础上，为文法符号关联有特定意义的属性，并为产生式关联相应的语义动作</span><br><span class="line">- 综合属性</span><br><span class="line">  - 自下而上传递信息</span><br><span class="line">  - 语法规则：根据右部候选式中的符号的属性计算左部被定义符号的**综合属性**</span><br><span class="line">  - 语法树：根据子结点的属性和父结点自身的属性计算父结点的**综合属性**</span><br><span class="line">- 继承属性</span><br><span class="line">  - 自上而下传递信息</span><br><span class="line">  - 语法规则：根据右部候选式中的符号的属性和左部被定义符号的属性计算右部候选式中的符号的**继承属性**</span><br><span class="line">  - 语法树：根据父结点和兄弟结点的属性计算子结点的**继承属性**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 六、</span><br><span class="line"></span><br><span class="line">- 静态分配策略要求</span><br><span class="line">  1. 数组的上下界必须是常数</span><br><span class="line">  2. 不允许递归调用</span><br><span class="line">  3. 不允许动态分配内存</span><br><span class="line">- 什么是静态分配语言？</span><br><span class="line">  - 编译的时候就知道分配多少空间的语言</span><br><span class="line">- 堆式分配，栈式分配的特点，区别</span><br><span class="line"></span><br><span class="line"># 七、</span><br><span class="line"></span><br><span class="line">- 什么是中间语言？</span><br><span class="line"></span><br><span class="line">  - 中间语言：指**独立于任何特定自然语言的中介表达式，能够统摄机器翻译所需的句法和语义信息，在机器翻译系统中表示源语言和目标语言之间的联系**。</span><br><span class="line">  - 中间语言更接近汇编，不像高级语言</span><br><span class="line"></span><br><span class="line">- 掌握 114页 三地址码（四元组）</span><br><span class="line"></span><br><span class="line">  - ![image-20230605201414264](编译原理/image-20230605201414264.png)</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    c=a+b (+,a,b,temp1)</span><br><span class="line">      (=,temp1,-,c)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><ul><li><p>掌握逆波兰式</p></li><li><p>248页划分基本块方法定义？</p><ul><li>基本块：指程序中一顺序执行的语句序列，其中只有一个入口和一个出口，入口就是其中的第一个语句，出口就是其中的最后一个语句。</li></ul></li><li><p>如何确定基本块的入口语句？</p><ul><li>程序的第一个语句</li><li>条件转移语句或无条件转移语句的转移<strong>目标语句</strong></li><li>紧跟在<strong>条件转移语句后面的语句</strong></li></ul></li><li><p>划分基本块的方法是什么？</p><ol><li>求出所有入口语句</li><li>一个入口语句对应一个基本块，该基本块由该入口语句到下一入口语句（不含下一入口语句），或到一转移语句（包括该转移语句），或到一停语句（包括该停语句）之间的代码序列组成</li><li>凡未被纳入某一基本块的语句，都是程序中控制流程无法到达的语句，可以删除</li></ol></li><li><p>267页 代码优化</p><ul><li>中间代码独立于机器</li><li>在各级中间代码以及目标代码层次上，往往通过各种等价变换对代码进行改造，这种变换称为代码优化</li></ul></li></ul><h1 id="九、"><a href="#九、" class="headerlink" title="九、"></a>九、</h1><ul><li>代码优化可分为与机器有关的优化和与机器无关的优化<ul><li>与机器有关的优化一般在目标代码上进行</li><li>与机器无关的优化一般在中间代码上进行</li></ul></li><li>代码优化可分为局部优化，循环优化和全局优化<ul><li>局部优化指的是在只有一个入口、一个出口的基本程序块上进行的优化</li><li>循环优化是对循环中的代码进行的优化，在一个程序运行时，相当多的一部分时间会花在循环上，因此，基于循环的优化非常重要</li><li>全局优化是在整个范围内进行的优化</li></ul></li><li>常见优化方式有哪些？<ol><li>删除多余运算</li><li>常量合并</li><li>删除无用赋值</li><li>强度削弱</li></ol></li><li>符号表作用？<ol><li>收集符号的属性信息</li><li>符号表所登记的内容是进行上下文语义合法性检查的依据</li><li>在目标代码生成阶段，符号表是对符号进行地址分配的依据</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420081625195.png" alt="image-20230420081625195"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420081636299.png" alt="image-20230420081636299"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420081503636.png" alt="image-20230420081503636"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420082618898.png" alt="image-20230420082618898"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083139244.png" alt="image-20230420083139244"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083213105.png" alt="image-20230420083213105"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083415765.png" alt="image-20230420083415765"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083608335.png" alt="image-20230420083608335"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083726551.png" alt="image-20230420083726551"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083710752.png" alt="image-20230420083710752"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420083913663.png" alt="image-20230420083913663"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230420084107675.png" alt="image-20230420084107675"></p><hr><p>选择题10道，每道1分，共10分（计算偏多）（置换，执行三个指令多少拍，比较对法，几个与门，网络直径）<br>判断改错4道，每道2分，共10分<br>简答题5道，每道4分，共20分<br>    提高计算机性能3个途径<br>    分离瓶颈段（怎么消除瓶颈段）<br>计算题1道，共10分<br>综合题5道每道10分</p><p>​第六章画图题<br>​228页<br>​第七章代码+画图、</p><h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529161834956.png" alt="image-20230529161834956"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529161845358.png" alt="image-20230529161845358"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529165911438.png" alt="image-20230529165911438"> </p><p><strong>简答</strong></p><ul><li>Flynn分类<ol><li>SISD 单指令流单数据流</li><li>SIMD 单指令流多数据流</li><li>MISD多指令流单数据流：脉动阵列流水</li><li>MIMD 多指令流多数据流 ：多处理机</li><li>SISE：单处理机系统</li><li>SIME：多操作不见的处理机</li><li>MISE：带指令级躲到程序的</li><li>MIME：典型的多处理机系统</li></ol></li><li>发展并行性的三种途径<ol><li>时间重叠：时间上相互错开，轮流重叠使用同一套硬件设备</li><li>资源重复：重复设置硬件资源来提高可靠性或性能</li><li>资源共享：按时间顺序轮流使用同一套资源，来提高资源的利用率</li></ol></li><li>局部性规律<ul><li>时间局部性：程序中近期被访问的数据很可能马上被再次访问</li><li>空间局部性：那些在访问地址上相邻近的信息项很可能会被一起访问</li></ul></li><li>系统特性<ul><li>WSBS（字串位串）</li><li>WSBP（字串位并）</li><li>WPBS（字并位串）</li><li>WPBP（字并位并）</li></ul></li><li>软件兼容<ul><li>力争向上兼容，保证向后兼容</li><li>向上（下）兼容：某一档机器编制的软件，不加修改就可以运行在比它高（低）档的机器上</li><li>向前（后）兼容：某一时期投入时长的该型号机器上编制的软件，不加修改就可以运行于在它之前（后）的机器上</li></ul></li><li>计算机组成和实现的区别<ul><li>计算机组成：是计算机系统结构的逻辑实现，包括机器级的数据流和控制流的组成以及逻辑设计等</li><li>计算机实现：是计算机组成的物理实现，它着眼于器件技术和微组装技术</li></ul></li></ul><hr><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>浮点数尾数基值大小和下溢处理方法的选择（难点）</p><ul><li>数据表示：硬件实现</li><li>数据结构：软件实现</li></ul><p>浮点数尾数下溢处理方法</p><ol><li>截断法（速度最快）</li><li>舍入法</li><li>恒置1法（误差最大）</li><li>查表舍入法</li></ol><p><strong>简答：</strong></p><ul><li>2.1.3 引入数据表示的原则<ol><li>是否有利于提高系统效率，是否减少了实现时间和存储时间</li><li>看引入数据表示后，其通用率和利用率是否高</li></ol></li><li>RISC使用的四个技术<ol><li>重叠寄存器窗口技术</li><li>延迟转移技术</li><li>采用比较转移指令</li><li>采用优化编译技术</li></ol></li></ul><p>1. </p><p><strong>综合：</strong></p><p><strong>2.1.4十分必考</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529201619779.png" alt="image-20230529201619779"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529201608995.png" alt="image-20230529201608995"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529195735807.png" alt="image-20230529195735807"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529201740754.png" alt="image-20230529201740754"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529200408421.png" alt="image-20230529200408421"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529202604991.png" alt="image-20230529202604991"> </p><p><strong>综合</strong>：有一个十分的综合题2.3.2</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529200428056.png" alt="image-20230529200428056"></p><p>这个哈夫曼码和扩展操作码有问题</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529204015117.png" alt="image-20230529204015117"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529204026095.png" alt="image-20230529204026095"> </p><h1 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h1><p>存储系统的三大因素：速度、容量、价格</p><p><strong>选择：</strong></p><ul><li>不需要任何替换算法的地址映像？<ul><li>直接相联</li></ul></li></ul><p><strong>简答</strong></p><ul><li><p>什么叫做堆栈型替换算法</p><ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530100740852.png" alt="image-20230530100740852"></li></ul></li><li><p>Cache的一致性</p><ol><li>由于CPU写Cache，没有立即写主存</li><li>由于IO处理机或IO设备写主存</li></ol></li><li><p>影响主存命中率CPU效率的某些因素</p><ul><li>程序地址流</li><li>替换算法</li><li>实页数</li><li>页面调度策略</li></ul></li><li><p>Cache对所有程序员都透明</p></li><li><p>直接映像法的优点：</p><ol><li>硬件简单</li><li>Cache冲突概率高</li><li>Cache出现大量空闲块</li></ol></li><li><p>写回法、分写直达法优缺点比较</p><ol><li><p>可靠性，写直达法优于写回法</p></li><li><p>与主存的通信量，写回法少于写直达法</p></li><li><p>控制的复杂性：写直达法比写回法简单</p><p>​写回法采用按写分配法<br>​写直达法采用不按写分配法</p></li></ol></li><li><p>采用何种算法与适用场合有关</p><ol><li>单处理机（节省空间）：写回法</li><li>共享主存的处理机（保证信息交换可靠）：写直达法</li></ol></li><li><p>命中率低，换大容量；命中率高，换高速</p></li></ul><p><strong>习题：</strong>4-4 4-5 4-6 4-14 4-15</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214336466.png" alt="image-20230529214336466"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530104023184.png" alt="image-20230530104023184"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214352495.png" alt="image-20230529214352495"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214426861.png" alt="image-20230529214426861"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214437600.png" alt="image-20230529214437600"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530104502676.png" alt="image-20230530104502676"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530104516241.png" alt="image-20230530104516241"></p><p>保护失效？</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214447059.png" alt="image-20230529214447059"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530105806098.png" alt="image-20230530105806098">  </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214509975.png" alt="image-20230529214509975"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530110907388.png" alt="image-20230530110907388"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530110919370.png" alt="image-20230530110919370"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530110944642.png" alt="image-20230530110944642"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230529214521614.png" alt="image-20230529214521614"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530134401572.png" alt="image-20230530134401572">  </p><p>选择</p><ul><li><ul><li><p>比较对法，几个与门</p><ul><li><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530100952101.png" alt="image-20230530100952101"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530101011544.png" alt="image-20230530101011544"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530101025620.png" alt="image-20230530101025620"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530101040260.png" alt="image-20230530101040260"></p></li></ul></li></ul></li></ul><h1 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h1><p><strong>判断：</strong></p><ul><li>流水机器的</li></ul><p><strong>简答：</strong></p><ul><li>二次重叠：将一条指令的执行分解成“取指”，“分析”和“执行”三个子过程。在理想情况下，处理机中同时有三条指令在执行<ul><li>处理机的结构要做比较大的改变，需要采用<strong>先行控制技术</strong></li></ul></li><li>采用二次重叠必须解决两个问题：<ol><li>有独立的取指令部件、指令分析部件和指令执行部件</li><li>要解决访问主存冲突问题</li></ol></li><li>解决访存冲突的方法<ol><li>采用低位交叉存取方式</li><li>两个独立的存储器：独立的指令存储器和数据存储器</li><li>采用先行控制技术：关键是缓冲技术和预处理技术</li></ol></li><li>什么叫做流水线瓶颈段，怎么消除<ul><li>瓶颈段：流水线中最慢的一段<ol><li>分离瓶颈段</li><li>瓶颈流水段重复设置</li></ol></li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530135405116.png" alt="image-20230530135405116"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530143725603.png"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530143734261.png" alt="image-20230530143734261"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530135419451.png" alt="image-20230530135419451"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530143800359.png" alt="image-20230530143800359">  </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530135435031.png" alt="image-20230530135435031"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144212324.png" alt="image-20230530144212324"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144249600.png" alt="image-20230530144249600"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141206763.png" alt="image-20230530141206763"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141215620.png" alt="image-20230530141215620"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144317404.png" alt="image-20230530144317404"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144335098.png" alt="image-20230530144335098"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144345706.png" alt="image-20230530144345706"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141224459.png" alt="image-20230530141224459"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144405706.png" alt="image-20230530144405706"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144425617.png" alt="image-20230530144425617"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144445486.png" alt="image-20230530144445486"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144500769.png" alt="image-20230530144500769"> </p><p>5.2.4 期末有一个10分的综合题，画图，求出加速比，效率等等或者考非线性流水线调度问题</p><p>流水线时空图15分（第五章两个综合题）</p><h1 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h1><p>234页6-2 6-5（单选类似）6-16<br>2<em>2画一个16</em>16的</p><p>第六章：</p><p>6-2 简答or选择</p><p>6.3 可能有画图 10分</p><p>书p234 6-5 考</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141551059.png" alt="image-20230530141551059"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144527503.png" alt="image-20230530144527503"> </p><p> 解:(1)三条指令可并行执行,总的执行时间取最大值:</p><p>T1&#x3D;1+7+1+63&#x3D;72拍</p><p>(2)只要保证第1条指令较第2条指令提前1拍启动,则可与第3条指令链接。</p><p>T2&#x3D;(1+7+1)+(1+6+1)+63&#x3D;80拍</p><p>(3)第一条指令与第二条指令可以链接,第二条指令与第三条有源向量寄存器V0冲突,第三条与第四条之间有加法功能部件的冲突,只能串行。</p><p>T3&#x3D;[(1+6+1)+(1+7+1)+63]+2*[(1+6+1)+63]&#x3D;222拍</p><p>(4)4条指令均可以链接。</p><p>T4&#x3D;8(访问)+16(求倒数)+9(乘)+8(加)+63&#x3D;104拍</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230531093904076.png" alt="image-20230531093904076"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230531093819414.png" alt="image-20230531093819414"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141607214.png" alt="image-20230530141607214"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144544283.png" alt="image-20230530144544283"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141623773.png" alt="image-20230530141623773"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144603402.png" alt="image-20230530144603402"> </p><h1 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h1><p>270页7-6（选做）、7-7、7-8、7-9</p><p>10分综合题 参考作业 7-7 7-8</p><p>7.9也可以看看</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141710066.png" alt="image-20230530141710066"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144637485.png" alt="image-20230530144637485"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141720470.png" alt="image-20230530141720470"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144657816.png" alt="image-20230530144657816"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144710885.png" alt="image-20230530144710885"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144721555.png" alt="image-20230530144721555"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141736202.png" alt="image-20230530141736202"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144737216.png" alt="image-20230530144737216"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144748229.png" alt="image-20230530144748229"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530141747716.png" alt="image-20230530141747716"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144818736.png" alt="image-20230530144818736"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144828937.png" alt="image-20230530144828937"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144839904.png" alt="image-20230530144839904"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/image-20230530144853481.png" alt="image-20230530144853481"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、计算机系统概论"><a href="#一、计算机系统概论" class="headerlink" title="一、计算机系统概论"></a>一、计算机系统概论</h1><p>每个二进制数就是一个比特</p><p>1Byte(字节)&#x3D;8bit</p><p>2<sup>10</sup>Byte&#x3D;1KB</p><p>2<sup>20</sup>Byte&#x3D;1MB</p><p>2<sup>30</sup>Byte&#x3D;1GB</p><p>2<sup>40</sup>Byte&#x3D;1TB</p><p>1M &#x3D; 10<sup>6</sup></p><h2 id="1-1、计算机系统简介"><a href="#1-1、计算机系统简介" class="headerlink" title="1.1、计算机系统简介"></a>1.1、计算机系统简介</h2><h3 id="1、计算机的软硬件"><a href="#1、计算机的软硬件" class="headerlink" title="1、计算机的软硬件"></a>1、计算机的软硬件</h3><p>计算机系统由“硬件”和“软件”构成。</p><p>硬件：就是计算机的实体部分，比如各种电子器件，各种实物组成</p><p>软件：由人们事先编制的具有各种特殊功能的程序组成。</p><p>软件又可分为：系统软件和应用软件。</p><p>系统软件：管理整个计算机系统</p><p>​eg:操作系统、数据库管理系统</p><p>应用软件：按任务需要编制成的各种软件</p><p>​eg:抖音，微信</p><h3 id="2、计算机系统的层次结构"><a href="#2、计算机系统的层次结构" class="headerlink" title="2、计算机系统的层次结构"></a>2、计算机系统的层次结构</h3><p>现代计算机的解题过程：<br>        先用高级语言编写程序（称为源程序），然后将它和数据一起送入计算机内，再由计算机将其翻译成机器能够识别的机器语言程序（称为目标程序），机器自动运行该机器语言程序，并输出结果。如图：<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220303140136383.png" alt="image-20220303140136383"></p><p>最早计算机上只有机器语言，必须使用二进制代码（0，1代码）来编写，要求十分熟悉计算机硬件及其指令系统，编写难度大。<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220303140707959.png" alt="image-20220303140707959"></p><p>20世纪50年代开始出现符号式的程序设计语言，即<strong>汇编语言</strong>。但这种语言计算机无法识别，必须通过机器系统软件中的<strong>汇编程序</strong>来翻译为机器语言。这种具有翻译功能的汇编程序的计算机称为虚拟机（其实就是在计算机中用软件模拟的一个拥有各种系统的计算机）。如图：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220303141935369.png" alt="image-20220303141935369"></p><p>由于汇编语言是面向机器的，同样是针对单独的某个机器，没有通用性，使用难度大。</p><p>20世纪60年代，开始出现了各种面向问题的<strong>高级语言</strong>，如FORTRAN、BASIC、C等。这种语言的使用十分接近人们的习惯，通用性强。程序员不必掌握机器的内部组成及指令系统等。将高级语言翻译为机器语言的程序为翻译程序：编译程序（一次全部翻译后再执行）和解释程序（翻译一句，执行一句）。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220303142613720.png" alt="image-20220303142613720"></p><p>向下，在计算机内部，机器语言的每一条指令都可以翻译为一组伪指令，构成一个微程序。区别于传统机器，将其称为<strong>微指令机器</strong>。<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220303143152110.png" alt="image-20220303143152110"></p><p>在汇编语言与计算机之间还有一层虚拟机器，它是由操作系统构成的。提供了在汇编语言和高级语言使用及实现过程的一些操作。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220303145050877.png" alt="image-20220303145050877"></p><h3 id="3、计算机组成和计算机体系结构"><a href="#3、计算机组成和计算机体系结构" class="headerlink" title="3、计算机组成和计算机体系结构"></a>3、计算机组成和计算机体系结构</h3><p>计算机体系结构是指那些能够被程序员所见到的计算机系统的属性，即概念性的结构与功能特性</p><p>计算机组成是指如何实现计算机体系结构所体现的属性，它包括了许多对程序员来说是透明的硬件细节。</p><h2 id="1-2、计算机的基本组成"><a href="#1-2、计算机的基本组成" class="headerlink" title="1.2、计算机的基本组成"></a>1.2、计算机的基本组成</h2><h3 id="1、冯·诺依曼计算机的特点"><a href="#1、冯·诺依曼计算机的特点" class="headerlink" title="1、冯·诺依曼计算机的特点"></a>1、冯·诺依曼计算机的特点</h3><ol><li>计算机由五大部件组成<ul><li>运算器</li><li>控制器</li><li>存储器</li><li>输入设备</li><li>输出设备（输入和输出称为I&#x2F;Q设备）（input&#x2F;output)</li></ul></li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据用<strong>二进制</strong>表示</li><li>指令由<strong>操作码</strong>和<strong>地址码</strong>组成</li><li>存储程序，指令在存储器内按顺序存放。通常，指令是顺序执行的，在特定条件下，可根据运算结果或根据设定的条件改变执行顺序。</li><li>以运算器为中心</li></ol><h3 id="2、硬件框图"><a href="#2、硬件框图" class="headerlink" title="2、硬件框图"></a>2、硬件框图</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310185303638.png" alt="image-20220310185303638"></p><p>问题：</p><ol><li>以运算器为中心，数据都需要在运算器中转</li><li>层次乱</li></ol><p>改进</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220306104734934.png" alt="image-20220306104734934"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220308092913959.png" alt="image-20220306105538634"></p><p>运算器和控制器关系紧密，往往集成在同一芯片上，将它称为<strong>中央处理器</strong>，CPU</p><p>主存（内存）：直接给CPU提供存储，高速，低容量，价格贵，不能永久保存数据，断电消失，需要从辅存中重新调入数据。比如：CPU的高速缓存，电脑的内存条。</p><p>外存（辅存）：给主存提供数据，低速，大容量，价格低，能永久保存数据。比如：硬盘，光盘，磁盘等。</p><h3 id="3、硬件部件"><a href="#3、硬件部件" class="headerlink" title="3、硬件部件"></a>3、硬件部件</h3><h4 id="①主存储器"><a href="#①主存储器" class="headerlink" title="①主存储器"></a>①主存储器</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310192356508.png" alt="image-20220310192356508"></p><p>操作：进行一个操作时，先在MAR中判断数据的地址，然后到存储体中的相应存储单元取数据，将数据保存在MDR中</p><p>主存中包含存储体，各种逻辑元件（译码驱动），控制电路（读写控制）等。MAR和MDR现在<strong>不存放在主存</strong>中，而是存放在CPU中，可看画的图。</p><p>主存的工作方式就是按存储单元的地址号来实现对存储字各位的存（写入）、取（读出）。</p><p><strong>存储单元</strong>：每个存储单元存放一串二进制代码</p><p>**存储字(word)**：存储单元中二进制代码的组合</p><p><strong>存储字长</strong>：存储单元中二进制代码的位数</p><p><strong>存储元&#x2F;存储元件&#x2F;存储基元</strong>：即存储二进制的电子元件（电容），每个存储元可存1bit</p><p><strong>MAR</strong>：存储器地址寄存器，它的位数就是存储体中存储单元的多少，1位就是2的1次方，2个存储单元；2位就是2的2次方，4个存储单元；3位就是2的3次方，8个存储单元</p><p><strong>MDR</strong>：存储器数据寄存器，MDR的位数就是存储字长，它是由每个存储单元的二进制代码决定的。假如：每个存储单元可存放16bit,那1个字（word)&#x3D;16bit</p><p><strong>强调：</strong>1个字节（Byte）&#x3D;8bit</p><p>​1B&#x3D;1个字节，1b&#x3D;1个bit</p><p>​触发器可以储存01状态</p><p>​所有内存条存01的都不是触发器，因为太贵了</p><p>内存条里存01的是电容，因为电容能存储电荷，满电的是1，没电是0</p><p>我得到一个好处，肯定会有一个坏处</p><h4 id="②运算器"><a href="#②运算器" class="headerlink" title="②运算器"></a>②运算器</h4><p>运算器至少包括3个寄存器和一个算术逻辑单元（ALU）。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310194327940.png" alt="image-20220310194327940"></p><h4 id="③控制器"><a href="#③控制器" class="headerlink" title="③控制器"></a>③控制器</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310194550068.png" alt="image-20220310194550068"></p><p>PC执行完后，会自动加一</p><h4 id="④计算机工作过程"><a href="#④计算机工作过程" class="headerlink" title="④计算机工作过程"></a>④计算机工作过程</h4><p>CPU区分指令和数据的依据：指令周期的不同阶段</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220308090414752.png" alt="image-20220308090414752"></p><p>此图是CPU通过三组总线与主存（芯片）连接的不能再简化的示意图。</p><p>CPU中的MAR是“存储器地址寄存器”,MDR是“存储器数据寄存器”。PC是“程序计数器”，IR是“指令寄存器”，二者并没有画出连接。运算器中的ALU是“算术逻辑单元”。</p><hr><p>ALU（Accumulator） 是算术逻辑单元，完成算术逻辑运算。</p><p>ACC是累加器</p><p>MQ是乘商寄存器</p><p>X是操作数寄存器</p><hr><p>MAR 存储器地址寄存器，只要出现了PC（程序计数器）的信息，就是要去内存取指令</p><p>MDR 存储器数据寄存器</p><p>PC是程序计数器，指引CPU上内存条的某个存储单元取指令。刚通电时，里面只有0，CU将这串数据传输到MAR</p><p>IR是指令寄存器，CU控制MDR的指令数据复制一份到IR。IR到CU是有若干条线（01），IR将数据到CU。</p><p>CU是控制单元，是一个异常复杂的时序电路，解释存储器中的指令，并发出各种操作命令来执行命令。</p><p>CPU取指令受PC控制，CPU不能对硬盘、内存进行直接操作，必须拿到CPU的IR里才能执行。</p><h2 id="1-3、性能指标"><a href="#1-3、性能指标" class="headerlink" title="1.3、性能指标"></a>1.3、性能指标</h2><h3 id="1、机器字长"><a href="#1、机器字长" class="headerlink" title="1、机器字长"></a>1、机器字长</h3><p>01是存储字</p><p>1个存储单元存一个存储字</p><p>机器字长是指CPU一次能处理数据的位数，通常与CPU的寄存器（MDR）位数有关。</p><p>ACC是几位，机器字长就是几位。ACC可以对数据进行取反，它能一次进行几位，那机器字长也就是几位。这是一定的。</p><h3 id="2、存储容量"><a href="#2、存储容量" class="headerlink" title="2、存储容量"></a>2、存储容量</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310200928027.png"></p><p>存储器的容量包括主存容量和副存容量。副存容量常用字节（B）表示</p><p>MAR的个数反映了存储单元的个数，MDR的位数反映了存储字长</p><h3 id="3、运算速度"><a href="#3、运算速度" class="headerlink" title="3、运算速度"></a>3、运算速度</h3><p>计算机的运算速度与许多因素有关，比如机器的主频（CPU），执行什么样的操作，主存本身的速度等</p><p>现在机器的运算速度普遍采用单位时间内执行指令的平均条数来衡量，并用MIPS（Million Instruction Per Second，百万条指令每秒）作为计量单位。例如，某机每秒能执行200万条指令，则记作2MIPS。</p><p>也可以用CPI即执行一条指令所需的时钟周期（机器主频的倒数）或FLOPS（Floation Point Operation Per Second， 浮点运算次数每秒）来衡量运算速度。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310202504944.png"></p><h2 id="1-4、本书结构"><a href="#1-4、本书结构" class="headerlink" title="1.4、本书结构"></a>1.4、本书结构</h2><p>主机是指计算机除去输入输出设备以外的主要机体部分。</p><p>CPU：中央处理器，由运算器与控制器组成</p><p>指令字长是指机器指令中二进制代码的总位数。指令字长取决于从操作码的长度、操作数地址的长度和操作数地址的个数。不同的指令的字长是不同的。</p><h2 id="1-5、习题"><a href="#1-5、习题" class="headerlink" title="1.5、习题"></a>1.5、习题</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617112513287.png" alt="image-20220617112513287"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617112607619.png" alt="image-20220617112607619"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617112708233.png" alt="image-20220617112708233"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617112801214.png" alt="image-20220617112801214"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617113008467.png" alt="image-20220617113008467"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617113515493.png" alt="image-20220617113515493"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617113600990.png" alt="image-20220617113600990"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617113757065.png" alt="image-20220617113757065"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310115053637.png" alt="image-20220310115053637"></p><p>智慧树上，写作业本</p><h1 id="二、计算机的发展及应用"><a href="#二、计算机的发展及应用" class="headerlink" title="二、计算机的发展及应用"></a>二、计算机的发展及应用</h1><h2 id="2-1、计算机的发展史"><a href="#2-1、计算机的发展史" class="headerlink" title="2.1、计算机的发展史"></a>2.1、计算机的发展史</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310173535652.png" alt="image-20220310173535652"></p><h3 id="1、历史"><a href="#1、历史" class="headerlink" title="1、历史"></a>1、历史</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310171926843.png" alt="image-20220310171926843"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310172247068.png" alt="image-20220310172247068"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310172348154.png" alt="image-20220310172348154"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310172504003.png" alt="image-20220310172504003"></p><h3 id="2、微处理器"><a href="#2、微处理器" class="headerlink" title="2、微处理器"></a>2、<strong>微处理器</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310172629549.png" alt="image-20220310172629549"></p><h3 id="3、硬件"><a href="#3、硬件" class="headerlink" title="3、硬件"></a>3、硬件</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310172902782.png" alt="image-20220310172902782"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310173022775.png" alt="image-20220310173022775"></p><h3 id="4、软件"><a href="#4、软件" class="headerlink" title="4、软件"></a>4、软件</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310173326351.png" alt="image-20220310173326351"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220310173453794.png" alt="image-20220310173453794"></p><h1 id="三、总线"><a href="#三、总线" class="headerlink" title="三、总线"></a>三、总线</h1><h2 id="3-1、概念"><a href="#3-1、概念" class="headerlink" title="3.1、概念"></a>3.1、概念</h2><h3 id="1、连接方式和特点"><a href="#1、连接方式和特点" class="headerlink" title="1、连接方式和特点"></a>1、连接方式和特点</h3><p>计算机系统五大部件之间的连接方式：</p><ol><li>分散连接，各部件之间使用单独的连线（早期的计算机大多数用分散连接方式）</li><li>总线连接：各部件连到一组公共信息传输线上</li></ol><p>总线：bus</p><p><strong>传输特点：</strong>总线是连接多个部件的信息传输线，是各部件共享的传输介质。是公共传输线。在任一时刻，只允许有一个部件向总线发送信息，而多个部件可以同时从总线上接收相同的信息。</p><h3 id="2、总线结构"><a href="#2、总线结构" class="headerlink" title="2、总线结构"></a>2、总线结构</h3><p><strong>单总线结构</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409103559232.png" alt="image-20220409103559232"></p><p>只有 一条总线，当某一时刻各部件都要占用总线时，会发生冲突。即使按照优先级进行运算，也会影响速度</p><p><strong>面向CPU的双总线结构</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409104504060.png" alt="image-20220409104504060"></p><p>在IO设备与主存交换信息时仍会占用CPU</p><p><strong>以存储器为中心的双总线结构</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409104554837.png" alt="image-20220409104554837"></p><p>优点是信息传送速率高；其缺点是需要增加硬件的投资。</p><h2 id="3-2、总线的分类"><a href="#3-2、总线的分类" class="headerlink" title="3.2、总线的分类"></a>3.2、总线的分类</h2><p>按数据传送方式可分为<strong>并行</strong>传输总线和<strong>串行</strong>传输总线。</p><p>串行：一位位的传输，一条通道.速度慢，但可靠</p><p>并行：多条通道，同时传输。适用于近距离，速度快</p><p>在并行传输总线中，又可按数据宽度分为8位、16位、32位、64位等传输总线。</p><p>按总线的使用范围划分，又计算机（包括外设）总线、测控总线、网络通信总线等。</p><h3 id="1、片内总线"><a href="#1、片内总线" class="headerlink" title="1、片内总线"></a>1、片内总线</h3><p>片内总线是指芯片内部的总线，如在CPU芯片内部，寄存器与寄存器之间、寄存器与算术逻辑单元之间都由片内总线连接。</p><h3 id="2、系统总线（片外）"><a href="#2、系统总线（片外）" class="headerlink" title="2、系统总线（片外）"></a>2、系统总线（片外）</h3><p>系统总线是指CPU、内存、I&#x2F;O设备（通过I&#x2F;O接口）各大部件之间的信息传输线。</p><p>由于这些部件通常都安放在主板或各个插件板（插卡）上，故又称<strong>板级总线</strong>（在一块电路板上各芯片间的连线）或<strong>板间总线。</strong></p><p> 按系统总线传输信息的不同，可分为</p><ol><li><p><strong>数据总线（DB）</strong></p><p>​数据总线用来<strong>传输各功能部件之间的数据信息</strong>，它是<strong>双向</strong>传输线，其位数与机器字长、存储字长有关，一般为8位、16位或32位。</p><p>​数据总线的根数称为数据<strong>总线宽度</strong>。</p><p>​如果数据总线的宽度为8位，指令字长为16位，那么CPU在取指阶段必须两次访问主存。</p></li><li><p><strong>地址总线(AB)</strong></p><p>地址总线主要用来指出数据总线上的源数据或目的数据在主存单元的地址或I&#x2F;O设备的地址。</p><p>与存储单元的个数有关</p><p>单向传输</p></li><li><p><strong>控制总线（CB)</strong></p><p>控制总线是用来发出各种控制信号的传输线。</p><p>对任一控制线来说，是单向的；但对控制总线总体来说，是双向的。</p><p>常见的控制信号：</p><ul><li>时钟 <em>i</em> ：用来同步各种操作</li><li>复位：初始化所有部件</li><li>中断请求：表示某部件提出中断请求</li><li>存储器写：将数据总线上的数据写至存储器的指定地址单元内</li><li>存储器读：将指定存储单元中的数据读到数据总线上</li><li>I&#x2F;O读：从指定的I&#x2F;O端口将数据读到数据总线上</li><li>I&#x2F;O写：将数据总线上的数据输出到指定的I&#x2F;O端口内</li></ul></li></ol><h3 id="3、通信总线"><a href="#3、通信总线" class="headerlink" title="3、通信总线"></a>3、通信总线</h3><p>传输方式：<strong>串行通信</strong>和<strong>并行通信</strong></p><p><strong>串行</strong>通信是指数据在单条1位宽的传输线上，<strong>一位一位</strong>地按顺序<strong>分时传送</strong>。</p><p><strong>并行</strong>通信是指数据在<strong>多条</strong>并行1位宽的传输线上，<strong>同时</strong>由源传送到目的地。</p><p>并行通信适宜于近距离的数据传输，通常小于30m；串行通信适宜于远距离传输。</p><h2 id="3-3、总线特性及性能指标"><a href="#3-3、总线特性及性能指标" class="headerlink" title="3.3、总线特性及性能指标"></a>3.3、总线特性及性能指标</h2><h3 id="1、总线特性"><a href="#1、总线特性" class="headerlink" title="1、总线特性"></a>1、总线特性</h3><p>物理实现</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409115035814.png" alt="image-20220409115035814"></p><ol><li>机械特性<br>总线在机械连接方式上的性能：几何尺寸、形状、引脚个数、排列顺序、接头处的可靠接触</li><li>电气特性<br>是指总线的每一根传输线上信号的传递方向和有效的电平范围。<br>由CPU发出的信号是输出信号，进入CPU的信号是输入信号。<br>大多数总线的电平定义与TTL是相符的，但也有例外。<br>如RS-232C（串行总线接口标准）规定低电平表示逻辑“1”，并表示电平低于-3V；高电平表示逻辑“0”，电平高于“+3V”</li><li>功能特性<br>指总线中每根传输线的功能。<br>比如：地址总线用来指出地址码；数据总线传输数据；控制总线发出控制信号，如存储器读写等。</li><li>时间特性<br>指总线中的任一根线在什么时间内有效。<br>信号的时序关系</li></ol><h3 id="2、总线性能指标"><a href="#2、总线性能指标" class="headerlink" title="2、总线性能指标"></a>2、总线性能指标</h3><ol><li><p>总线宽度：数据总线的根数，用bit(位)表示。如8位（8根）</p></li><li><p>总线带宽：总线的<strong>数据传输速率</strong>，即单位时间内总线上传输数据的位数，通常用每秒传输信息的字节数来衡量，单位<strong>MBps</strong>(兆字节每秒)。<br>例如：总线工作频率位33MHz,总线宽度为32位（4B），则总线带宽为 33 &times;(32 &#x2F; 8)&#x3D;132MBps</p></li><li><p>时钟同步&#x2F;异步</p></li><li><p>总线复用：一条信号线上分时传送不同的信号。<br>为了提高总线的利用率，将地址总线和数据总线共用一组物理线路。</p><p>不同的时间传送不同的信息，比如地址信息和数据信息 </p></li><li><p>信号线数：地址线，数据线和控制线的总和。</p></li><li><p>总线控制方式：突发、自动、仲裁、逻辑、计数</p></li><li><p>总线的传输周期：总线完成一次完整而可靠的传输所需时间</p></li><li><p>其他指标：负载能力等</p></li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617173557551.png" alt="image-20220617173557551"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617173610906.png" alt="image-20220617173610906"></p><h3 id="3、总线标准"><a href="#3、总线标准" class="headerlink" title="3、总线标准"></a>3、总线标准</h3><ul><li><p>ISA总线<br>Industrial Standard Architecture<br>IBM采用全16位的CPU推出的，又称AT总线。可使用独立于CPU的总线时钟，有利于CPU性能的提高。<br>不支持多台主设备系统，在ISA上的所有数据必须通过CPU或DMA（直接存储器存取）。<br>ISA总线时钟频率为8MHz，最大传输率为16MBps,数据线为16位，地址线为24位。</p></li><li><p>EISA总线<br>Extended Industrial Standard Architecture<br>是一种在ISA基础上扩充的总线标准，可与ISA兼容<br>从CPU中分离了总线控制权，能支持多个总线主控器和突发方式的传输<br>时钟频率为8MHz,最大传输率可达33MBps，数据总线为32位，地址总线位32位，扩充DMA访问范围达2<sup>32</sup></p></li><li><p>VESA(VL-BUS)总线<br>是由VESA(Video Electronic Standard Association，视频电子标准协会)提出的局部总线标准，又称VL-BUS(Local BUS)总线<br>局部总线：指在系统外为两个以上模块提供的高速传输信息通道</p></li><li><p><strong>PCI</strong><br>Peripheral Component Interconnect,外围部件互连</p><p>支持即插即用（Plug and Play）<br>多路复用技术，减少了总线引脚的个数</p></li><li><p><strong>AGP</strong><br>Accelerated Graphics Port，加速图形端口<br>显示卡专用的局部总线</p></li><li><p><strong>RS-232C总线</strong></p><p>Recommended Standard，232为标识号，C表示修改次数<br>串行通信总线标准<br>应用于二进制交换的数据终端设备(DTE)和数据通信设备（DCE）之间的标准接口<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409154020181.png" alt="image-20220409154020181"></p></li><li><p>USB总线<br>Universal Serial Bus <strong>通用串行总线</strong><br>具有真正的即插即用特征。用户可在不关机的情况下，对外设进行安装和拆卸<br>具有很强的连接能力，使用USB HUB（USB集线器）最多可链式127个外设<br>标准统一</p><p>数据传输率（USB 1.0版）有两种，即采用普通无屏蔽双绞线，速度可达1.5Mbps，若用屏蔽的双绞线，速度可达 12Mbps。USB 2.0版的数据传输率最高可达 480 Mbps。</p></li></ul><h2 id="3-4、总线结构"><a href="#3-4、总线结构" class="headerlink" title="3.4、总线结构"></a>3.4、总线结构</h2><p>总线结构通常可分为：单总线结构和多总线结构</p><h3 id="1、单总线结构"><a href="#1、单总线结构" class="headerlink" title="1、单总线结构"></a>1、单总线结构</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409160628358.png" alt="image-20220409160628358"></p><p>CPU、主存、I&#x2F;O设备都挂在一组总线上，交换信息。</p><p>便于扩充，但是总线便是计算机系统的瓶颈。</p><h3 id="2、多总线结构"><a href="#2、多总线结构" class="headerlink" title="2、多总线结构"></a>2、多总线结构</h3><p><strong>双总线结构</strong></p><p>将速度较低的I&#x2F;O设备从单总线上分离，形成主存总线与I&#x2F;O总线分开的结构。</p><p>通道是一个具有特殊功能 的处理器，CPU将一部分功能下放给通道，使其对I&#x2F;O设备具有统一管理的功能。多用于大、中、小型计算机系统。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409161225626.png" alt="image-20220409161225626"></p><p><strong>三总线结构</strong></p><p>将速率不同的I&#x2F;O设备进行分类，连接在不同的通道上，工作效率会更高。</p><p>DMA总线用于高速I&#x2F;O设备（磁盘、磁带等）与主存之间直接交换信息。</p><p>任一时刻，只能使用一种总线。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409161559539.png" alt="image-20220409161559539"></p><p>三总线结构的另一种形式</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409161714481.png" alt="image-20220409161714481"></p><h3 id="3、四总线结构"><a href="#3、四总线结构" class="headerlink" title="3、四总线结构"></a>3、四总线结构</h3><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409161758397.png" alt="image-20220409161758397"></p><h2 id="3-5、总线控制"><a href="#3-5、总线控制" class="headerlink" title="3.5、总线控制"></a>3.5、总线控制</h2><p>主要包括<strong>判优控制</strong>（仲裁逻辑）和<strong>通信控制</strong></p><h3 id="1、总线判优控制"><a href="#1、总线判优控制" class="headerlink" title="1、总线判优控制"></a>1、总线判优控制</h3><p>解决多个部件同时申请总线的使用权分配问题</p><p>主设备：对总线有控制权</p><p>从设备：只能响应从 主设备发来的总线命令，对总线没有控制权。</p><p>总线上信息的传递是由主设备启动的，比如某个主设备欲与另一个设备进行通信，首先由主设备发出总线请求信号，若多个主设备同时要使用总线，就由总线控制器进行判优使用。</p><p>总线判优控制可分为<strong>集中式</strong>和<strong>分布式</strong>，前者将控制逻辑集中在一处（如在CPU中），后者将控制逻辑分散在与总线连接的各个部件或设备上。</p><p>常见的集中控制优先权仲裁方式有以下三种。</p><p>（1）链式查询</p><p>特点：只需要很少几根线就能按一定有效次序实现总线控制，并且很容易扩充设备，但对电路故障很敏感，且优先级低的设备很难获得请求。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409164819992.png" alt="image-20220409164819992"></p><p>首先I&#x2F;O设备发出BR，<br>总线控制部件发出BG，如果到发出BR的I&#x2F;O设备，I&#x2F;O设备进行通信，发出BS；否则，进行下一个</p><p>（2）计数器定时查询</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409165012430.png" alt="image-20220409165012430"></p><p>总线控制部件接到由BR送来的总线请求信号后，在总线未被使用（BS&#x3D;0)的情况下，总线控制部件中的计数器开始计数，并通过设备地址线，向各设备发出一组地址信号。当某个请求占用总线的设备地址与计数值一致时，便获得了总线使用权，此时终止计数查询。</p><p>（3）独立请求方式</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409165025999.png" alt="image-20220409165025999"></p><p>当设备要求使用总线时，便发出该设备的请求信号。总线控制部件中有一排队电路，可根据优先级确定响应哪一台设备的请求。</p><p>响应速度快，优先次序控制灵活，但控制线数量多，总线控制更复杂。</p><h3 id="2、总线通信控制"><a href="#2、总线通信控制" class="headerlink" title="2、总线通信控制"></a>2、总线通信控制</h3><p>目的：解决双方协调配合问题。</p><p>总线传送周期：</p><ul><li>申请分配阶段：主模块申请，总线仲裁决定</li><li>寻址阶段：主模块向从模块给出地址和命令，启动从模块</li><li>传数阶段：主模块和从模块交换数据</li><li>结束阶段：主模块撤销有关信息，让出总线控制权</li></ul><p>总线通信控制通常用四种方式：同步通信、异步通信、半同步通信和分离式通信。</p><h4 id="①、同步通信"><a href="#①、同步通信" class="headerlink" title="①、同步通信"></a>①、同步通信</h4><p>通信双方由<strong>统一时标</strong>控制数据传送，控制方式简单，灵活性差<br>时标通常由CPU的总线控制部件发出，送到总线上的所有部件。</p><p>同步数据输入</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409183430477.png" alt="image-20220409183430477"></p><p>CPU在T1上升沿发出地址信息</p><p>在T2的上升沿发出读命令</p><p>在T3的上升沿之前将CPU所需的数据送到数据总线，在T3时钟周期内，将数据线上的信息送到其内部存储器</p><p>在T4的上升沿撤销读命令</p><p><strong>同步通信输出</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409184022529.png" alt="image-20220409184022529"></p><p>在T1的上升沿发地址</p><p>在T1的下降沿提供数据</p><p>在T2的上升沿发出写命令</p><p>在T4的上升沿撤销写命令和数据</p><p>在T4的下降沿撤销地址</p><p><strong>优点</strong></p><p>规定明确、统一、模块间的配合简单一致。</p><p><strong>缺点</strong></p><p>主、从模块时间配合属于强制性“同步”，必须在限定时间内完成规定的要求。</p><p>且所有从模块都使用同一限时，对不同速度的部件来说，必须按最慢速度的部件来设计公共时针，严重影响工作效率。</p><p>一般用于总线长度较短、各部件存取时间比较一致的场合。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220329091932994.png" alt="image-20220329091932994"> </p><h4 id="②、异步通信"><a href="#②、异步通信" class="headerlink" title="②、异步通信"></a>②、异步通信</h4><p>采用应答方式（握手方式），没有公共时钟标准，允许各模块速度的不一致性</p><p>当主模块发出请求（Request）信号时，一直等待从模块反馈回来“响应”信号后，才开始通信。</p><p>应答方式可分为不互锁、半互锁、全互锁三种。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409185835598.png" alt="image-20220409185835598"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617192731865.png" alt="image-20220617192731865"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617192739548.png" alt="image-20220617192739548"> </p><h4 id="③、半同步通信"><a href="#③、半同步通信" class="headerlink" title="③、半同步通信"></a>③、半同步通信</h4><p>同步、异步结合</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409191536561.png" alt="image-20220409191536561"></p><p>以输入数据为例的半同步通信时序</p><p>T<sub>1</sub> 主模块发地址</p><p>T<sub>2</sub> 主模块发命令 </p><p>T<sub>w</sub> 当 $\overline{WAIT}$为低电平时，等待一个T</p><p>T<sub>w</sub> 当 $\overline{WAIT}$为低电平时，等待一个T</p><p>。。。。。</p><p>T<sub>3</sub> 从模块提供数据</p><p>T<sub>4</sub> 从模块撤销数据，主模块撤销命令</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409191604113.png" alt="image-20220409191604113"></p><h4 id="④、共同点"><a href="#④、共同点" class="headerlink" title="④、共同点"></a>④、共同点</h4><p>上述三种通信的共同点：</p><p>一个总线传输周期（以输入数据为例）</p><ul><li>主模块发地址、命令 占用总线</li><li>从模块准备数据         不占用总线 总线空闲</li><li>从模块向主模块发数据 占用总线</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410105043871.png" alt="image-20220410105043871"></p><h4 id="⑤、分离式通信（自学）"><a href="#⑤、分离式通信（自学）" class="headerlink" title="⑤、分离式通信（自学）"></a>⑤、分离式通信（自学）</h4><p>充分<strong>挖掘</strong>系统总线每个瞬间的</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409191703990.png" alt="image-20220409191703990"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220409191712476.png" alt="image-20220409191712476"></p><h2 id="3-6、作业"><a href="#3-6、作业" class="headerlink" title="3.6、作业"></a>3.6、作业</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220329081632795.png" alt="image-20220329081632795"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220331110945307.png" alt="image-20220331110945307"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193404093.png" alt="image-20220617193404093"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193510496.png" alt="image-20220617193510496"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193523668.png" alt="image-20220617193523668"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193555108.png" alt="image-20220617193555108"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193615036.png" alt="image-20220617193615036"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193627936.png" alt="image-20220617193627936"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193638328.png" alt="image-20220617193638328"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193647396.png" alt="image-20220617193647396"> </p><p>3.13、什么是总线的数据传送速率，它与哪些因素有关？</p><p>总线数据传输率即总线带宽，指单位时间内总线上传输数据的位数，通常用每秒传输信息的字节数来衡量。它与总线带宽和总线频率有关，总线带宽越宽，频率越快，数据传输率越高。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193740892.png" alt="image-20220617193740892"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220617193806415.png" alt="image-20220617193806415"></p><h1 id="四、存储器"><a href="#四、存储器" class="headerlink" title="四、存储器"></a>四、存储器</h1><h2 id="4-1、概述"><a href="#4-1、概述" class="headerlink" title="4.1、概述"></a>4.1、概述</h2><h3 id="1、存储器分类"><a href="#1、存储器分类" class="headerlink" title="1、存储器分类"></a>1、存储器分类</h3><ol><li><p>按存储介质分类</p><ul><li>半导体存储器 半导体元件易失</li><li>磁表面存储器磁头、载磁体 非易失</li><li>磁芯存储器  硬磁材料、环状元件 非易失</li><li>光盘存储器 激光、磁光材料 非易失</li></ul></li><li><p>按存取方式分类<br>（1）存取时间与物理地址无关（随机访问）<br>随机存储器 在程序的执行过程中可读可写RAM</p><p>只读存储器 在程序的执行过程中只读ROM</p><p>（2）存取时间与物理地址有关（串行访问）</p><p>顺序存取存储器 磁带</p><p>直接存取存储器 磁盘</p></li><li><p>按在计算机中的作用分类</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410141926470.png" alt="image-20220410141926470"></p></li></ol><p>静态RAM&#x3D;SRAM，存01的电路就是触发器</p><p>动态RAM&#x3D;DRAM，存01的电路是电容 </p><p>静态RAM速度高于动态RAM</p><p>Cache:高速缓冲存储器，介于CPU和主存之间，用于解决CPU和主存之间速度不匹配的问题。<br>        不能将Cache扩大，替代主存，<br>        因为：Cache容量越大，成本越高，<br>                    如果取消主存，当CPU访问Cache失败时，需要将辅存的内容调入Cache再由CPU访问，造成CPU等待时间太长</p><p>Flash Memory:闪速存储器。或称快擦型存储器</p><h3 id="2、层次结构"><a href="#2、层次结构" class="headerlink" title="2、层次结构"></a>2、层次结构</h3><p>3个性能指标：速度、容量和每位价格（位价）。</p><p>速度越高，位价越高；容量越大，位价越低，速度越低。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410143506899.png" alt="image-20220410143506899"></p><p>寄存器最快，位价最高，容量最小，放在CPU中。</p><p>在主存和CPU之间插入了高速缓冲存储器Cache,方便匹配主存和CPU的速度。</p><p>主存用来存放将要参与运行的程序和数据，和CPU的速度较大。</p><p>磁盘、光盘、和磁带容量很大，存放暂时未用到的程序和数据，CPU不能直接访问，辅存只能与主存交换信息。</p><p><strong>层次结构</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410143526198.png" alt="image-20220410143526198"></p><p><strong>缓存-主存层次</strong>主要解决CPU和主存速度不匹配的问题。缓存速度比主存快，将CPU要用到的信息调入缓存，CPU可以直接换取信息，提高访问速度。但是缓存容量小，需要不断将主存内容调入缓存。主存和缓存之间的数据调动是硬件自动完成的，对程序员是透明的。</p><p>从CPU角度来看，它的速度接近于缓存，高于主存；其容量和位价却接近于主存。</p><p><strong>主存-辅存层次</strong>主要解决存储系统的容量问题。当CPU需要用到辅存的信息时，再将辅存的信息调入主存，供CPU直接访问。主存和辅存之间的数据调动是由硬件和操作系统共同完成后的。</p><p>从整体分析，其速度接近主存，容量接近缓存，平均位价也接近辅存。</p><p>主存和辅存之间形成了虚拟存储系统，它的地址为虚地址，比实际存储单元个数要大。而主存的实际地址称为物理地址或实地址，这是程序真正访问的地址。若虚地址在主存，可以直接访问；若不在，需要将数据传递到主存后再进行访问。</p><h2 id="4-2、主存储器"><a href="#4-2、主存储器" class="headerlink" title="4.2、主存储器"></a>4.2、主存储器</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><h4 id="①、主存的基本构成"><a href="#①、主存的基本构成" class="headerlink" title="①、主存的基本构成"></a>①、主存的基本构成</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220405090140892.png" alt="image-20220405090140892"></p><p>MDR和数据总线位置画反了，MDR在CPU里面 </p><h4 id="②主存和CPU的关系"><a href="#②主存和CPU的关系" class="headerlink" title="②主存和CPU的关系"></a>②主存和CPU的关系</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410152144379.png" alt="image-20220410152144379"></p><p>当要从存储器读出某一信息字时</p><p>首先由CPU将该字的地址送到MAR，经地址总线送到主存，然后发出读命令。</p><p>主存接到读命令后，得知需将该地址单元的内容读出，便完成读操作，将该单元的内容读至数据总线上，CPU决定送到什么地方。</p><p>向主存存入一个信息字</p><p>首先CPU将该字所在主存单元的地址经MAR送到地址总线，并将信息字送入MDR，然后向主存发出写命令，主存接到命令后，便将数据线上的信息写入都爱对应地址线指出的主存单元中。</p><h4 id="③、主存中存储单元地址的分配"><a href="#③、主存中存储单元地址的分配" class="headerlink" title="③、主存中存储单元地址的分配"></a>③、主存中存储单元地址的分配</h4><p>主存各存储单元的空间位置是由单元地址号来表示，而地址总线是用来指出存储单元地址线的，根据该地址进行读出或写入。</p><p>常用8位二进制数表示一个字节，因此，存储字长都取8的倍数</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410152723667.png" alt="image-20220410152723667"></p><h4 id="④、主存的技术指标"><a href="#④、主存的技术指标" class="headerlink" title="④、主存的技术指标"></a>④、主存的技术指标</h4><p>（1）存储容量</p><p>主存能存放二进制代码的总位数</p><p>存储容量&#x3D; 存储单元个数 &times; 存储字长 </p><p>用字节表示    存储容量&#x3D; 存储单元个数 &times; 存储字长 &#x2F; 8</p><p>现在常用字节数表示</p><p>（2）存储速度</p><p>存储速度由<strong>存取时间</strong>和<strong>存取周期</strong>来表示的。</p><p>存取时间（存储器的访问时间）（Memory Access Time),是指启动一次存储器操作（读或写）到完成该操作所需的全部时间。存取时间又可分为<strong>读出时间</strong>和<strong>写入时间</strong>。读出时间是从存储器接收到有效地址开始，到产生有效输出所需的全部时间。写入时间是从存储器接收到有效地址，到数据写入到被选中单元为止的时间。</p><p>存取周期（Memory Cycle Time）是指存储器进行连续两次独立操作的最小间隔时间，包含存取时间后的线路恢复时间。 </p><p>（3）存储器带宽</p><p>表示单位时间内存储器存取的信息量</p><p>用字&#x2F;秒 或 字节&#x2F;秒 表示 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618084648031.png" alt="image-20220618084648031"></p><h3 id="2、半导体存储芯片简介"><a href="#2、半导体存储芯片简介" class="headerlink" title="2、半导体存储芯片简介"></a>2、半导体存储芯片简介</h3><h4 id="①、基本结构"><a href="#①、基本结构" class="headerlink" title="①、基本结构"></a>①、基本结构</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410155444303.png" alt="image-20220410155444303"></p><ul><li>地址线：单向输出，位数与芯片容量有关</li><li>数据线：双向输出，数据线的位数与芯片容量（数据位数）有关。</li><li>控制线：有读&#x2F;写控制与片选线两种</li></ul><p>译码驱动：把地址总线送来的地址信号翻译成对应存储单元的选择信号，该信号在读&#x2F;写电路的配合下完成读&#x2F;写操作。</p><p>16K等于2<sup>14</sup>个地址</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410155731955.png" alt="image-20220410155731955"></p><p>片选线：$\overline{CS}$。无信号，不工作。 低电平有效</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410155800656.png" alt="image-20220410155800656"></p><p>8位：每个一位并联 </p><h4 id="②、译码驱动方式"><a href="#②、译码驱动方式" class="headerlink" title="②、译码驱动方式"></a>②、译码驱动方式</h4><h5 id="（1）线选法"><a href="#（1）线选法" class="headerlink" title="（1）线选法"></a>（1）线选法</h5><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410160907503.png" alt="image-20220410160907503"></p><p>用一根字选择线直接选中一根存储单元。</p><p>结构简单，但只适用于容量不大的存储芯片。</p><p>一条线，一个地址，</p><h5 id="（2）重合法"><a href="#（2）重合法" class="headerlink" title="（2）重合法"></a>（2）重合法</h5><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410160929281.png" alt="image-20220410160929281"></p><p>将地址线分为两部分，一部分判断行，另一部分判断列，只有一个读写线。</p><h3 id="3、随机存取存储器（RAM）"><a href="#3、随机存取存储器（RAM）" class="headerlink" title="3、随机存取存储器（RAM）"></a>3、随机存取存储器（RAM）</h3><p>主要用作计算机中的主存</p><h4 id="①、静态RAM（SRAM）"><a href="#①、静态RAM（SRAM）" class="headerlink" title="①、静态RAM（SRAM）"></a>①、静态RAM（SRAM）</h4><p>Static  RAM</p><p><strong>静态RAM基本单元电路</strong></p><p>存储器中用于寄存“0”和“1”代码的电路称为存储器的基本单元电路。</p><p>MOS管是半导体制造工艺的一种。</p><p>行地址选择、列地址选择的译码驱动是 重合法</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410162903998.png" alt="image-20220410162903998"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410163201777.png" alt="image-20220410163201777"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410163222957.png" alt="image-20220410163222957"> </p><p><strong>静态RAM芯片</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410163521647.png" alt="image-20220410163521647"></p><p>$\overline{WE},write \ enabled，低电平为写，高电平为读$</p><p>$\overline{CS}片选信号，0有效，1无效$</p><p>$A_9 \sim A_0为地址输入端，I&#x2F;O_1\sim I&#x2F;O_4为数据输入&#x2F;输出端$</p><h4 id="②、动态RAM-DRAM"><a href="#②、动态RAM-DRAM" class="headerlink" title="②、动态RAM (DRAM)"></a>②、动态RAM (DRAM)</h4><p>Dynamic RAM</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410173134850.png" alt="image-20220410173134850"></p><p>常见的动态RAM有<strong>三管式</strong>和<strong>单管式</strong>，</p><p>原理：电容存储电荷。有表示1，没有电荷表示0</p><p>缺点：速度慢；电容自己放电，需要定时充电</p><p><strong>动态RAM基本单元电路</strong></p><p>三管MOS动态RAM 和 单管MOS动态RAM</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410190948000.png" alt="image-20220410190948000"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191004296.png" alt="image-20220410191004296"></p><p>10个地址线，1K个存储单元 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191205319.png" alt="image-20220410191205319"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191219931.png" alt="image-20220410191219931"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191236056.png" alt="image-20220410191236056"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191247725.png" alt="image-20220410191247725"></p><p><strong>动态RAM刷新</strong> </p><p>刷新：对DRAM定期进行的全部重写过程</p><p>刷新原因：因电容泄露而引起的DRAM所存信息的衰减需要及时补充 </p><p>刷新与行地址有关</p><h5 id="1、集中刷新"><a href="#1、集中刷新" class="headerlink" title="1、集中刷新"></a>1、集中刷新</h5><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220429162120516.png" alt="image-20220429162120516"></p><p>在每个最大刷新间隔时间内，集中安排一段时间进行刷新，存在死区</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191312269.png" alt="image-20220410191312269"></p><p>在每个读写周期之后插入一个刷新周期，无死区 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191325979.png" alt="image-20220410191325979"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220410191337785.png" alt="image-20220410191337785"></p><h3 id="4、只读存储器（ROM）"><a href="#4、只读存储器（ROM）" class="headerlink" title="4、只读存储器（ROM）"></a>4、只读存储器（ROM）</h3><p>由芯片制造商在制造时写入内容，只能读，不能写</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416140603333.png" alt="image-20220416140603333"></p><ol><li><p>掩模ROM（MROM）<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220405091050402.png" alt="image-20220405091050402"><br>行列选择线交叉处有MOS管为“1”</p><p>行列选择线交叉处无MOS管为“0”</p><p>经读放大器反相输出后取反，变为“0”和“1”</p></li><li><p>PROM（一次性编程）<br>可编程只读存储器，由用户根据需要写入内容，只能写入一次</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416141310774.png" alt="image-20220416141310774"></p></li><li><p>EPROM（多次性编程）<br>可擦除可编程只读存储器<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416141809859.png" alt="image-20220416141809859"><br>改写：用紫外线照射，但擦除时间比较长，而且不能对个别需改写的单元进行单独擦写或重写</p></li><li><p>EEPROM（多次性编程）</p><p>电擦写可编程只读存储器</p><p>用电气方法将存储内容擦写，再重写。甚至在联机条件下，用字擦除方式或页擦除方式，既可局部擦写，又可全部擦写，</p><p>电可擦写<br>局部擦写</p><p>全部擦写</p></li><li><p>Flask Memory（闪速型存储器）</p><p>快擦型存储器<br>可擦写非易失性存储器</p><p>既具有EPROM      价格便宜，集成度高的特点，<br>也具有EEPROM    电可擦写，重写的功能<br>比EEPROM快，具备RAM功能，可与CPU直接连接。<br>非易失性、长期反复使用的<strong>大容量闪速存储器</strong>还可<strong>替代磁盘</strong>，比如，在笔记本手掌型袖珍计算机都采用闪速存储器做成固态盘替代磁盘。</p></li><li><p>CDROM只读型光盘</p></li></ol><h3 id="5、存储器与CPU的连接"><a href="#5、存储器与CPU的连接" class="headerlink" title="5、存储器与CPU的连接"></a>5、存储器与CPU的连接</h3><h4 id="①、存储器容量的扩展"><a href="#①、存储器容量的扩展" class="headerlink" title="①、存储器容量的扩展"></a>①、存储器容量的扩展</h4><p>（1）位扩展（增加存储字长）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416150056311.png" alt="image-20220416150056311"></p><p>片选信号连在一条线上，两个芯片各连数据线的一半。同时运行，各占一半</p><p>（2）字扩展（增加存储字的数量）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416150259796.png" alt="image-20220416150259796"></p><p>地址线不够，多出的一根连在片选信号上，是0，则前一个芯片运行；是1，则后一个芯片运行</p><p>（3）字、位扩展</p><p>既增加存储字的数量，又增加存储字长。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416150636768.png" alt="image-20220416150636768"></p><h4 id="②、存储器与CPU的连接"><a href="#②、存储器与CPU的连接" class="headerlink" title="②、存储器与CPU的连接"></a>②、存储器与CPU的连接</h4><p>（1）地址线的连接</p><p>存储芯片的容量不同，其地址线数也不同。</p><p>CPU的地址线数往往比存储芯片的地址线数多，通常将CPU地址线的低位与存储芯片的地址线相连。</p><p>比如：1K&times;4位的芯片仅有10根地址线，则CPU拿出10根地址线A<sub>9</sub>~A<sub>0</sub>相连。</p><p>（2）数据线的连接</p><p>CPU的数据线与存储芯片也不一定相等。</p><p>需要对存储芯片进行扩位，使其数据位数与CPU 的位数相等。</p><p>（3）读&#x2F;写命令线的连接</p><p>通常高电平为读，低电平为写。</p><p>（4）片选线的连接</p><p>片选线的连接是CPU与存储芯片正确工作的关键。</p><p>存储器由许多存储芯片组成，哪一片被选中完全取决于该存储芯片的片选控制端$\overline{CS}$能否接收到来自CPU的片选有效信号。</p><p>（5）合理选择存储芯片</p><p>指存储芯片类型（RAM或ROM）和数量的选择。通常选用ROM存放系统程序、标准子程序和各类常数等。RAM则是为用户编程而设置的。此外，在考虑芯片数量时，要尽量使连线简单方便。</p><p>（6）其他 时序、负载</p><p><strong>例子</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416154650217.png" alt="image-20220416154650217"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416154703867.png" alt="image-20220416154703867"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143709793.png" alt="image-20220416143709793"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143726290.png" alt="image-20220416143726290"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143738422.png" alt="image-20220416143738422"></p><p>ROM单向，RAM双向 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143747321.png" alt="image-20220416143747321"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143804811.png" alt="image-20220416143804811"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143818462.png" alt="image-20220416143818462"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143828738.png" alt="image-20220416143828738"> </p><h3 id="6、存储器的校验"><a href="#6、存储器的校验" class="headerlink" title="6、存储器的校验"></a>6、存储器的校验</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143902845.png" alt="image-20220416143902845"></p><h4 id="①、编码的最小距离"><a href="#①、编码的最小距离" class="headerlink" title="①、编码的最小距离"></a>①、编码的最小距离</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220429163541724.png" alt="image-20220429163541724"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220426090500406.png" alt="image-20220426090500406"> </p><p>组差：每一组的第一个  相减 </p><h4 id="②、汉明码的组成（考）"><a href="#②、汉明码的组成（考）" class="headerlink" title="②、汉明码的组成（考）"></a>②、汉明码的组成（考）</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220429163611448.png" alt="image-20220429163611448"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416143950946.png" alt="image-20220416143950946"></p><h4 id="③、例题"><a href="#③、例题" class="headerlink" title="③、例题"></a>③、例题</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144002585.png" alt="image-20220416144002585"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144011954.png" alt="image-20220416144011954"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144021668.png" alt="image-20220416144021668"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144031685.png" alt="image-20220416144031685"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220426093959273.png" alt="image-20220426093959273"></p><p>按配奇，P4,P2,P1也需要取非，找到错的位置 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144040440.png" alt="image-20220416144040440"> </p><h3 id="7、提高访存速度的措施"><a href="#7、提高访存速度的措施" class="headerlink" title="7、提高访存速度的措施"></a>7、提高访存速度的措施</h3><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144053461.png" alt="image-20220416144053461"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144106173.png" alt="image-20220416144106173"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144118197.png" alt="image-20220416144118197"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144128374.png" alt="image-20220416144128374"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144140098.png" alt="image-20220416144140098"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144154259.png" alt="image-20220416144154259"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144204857.png" alt="image-20220416144204857"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220416144214501.png" alt="image-20220416144214501"> </p><h2 id="4-3、高速缓冲存储器Cache"><a href="#4-3、高速缓冲存储器Cache" class="headerlink" title="4.3、高速缓冲存储器Cache"></a>4.3、高速缓冲存储器Cache</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><h4 id="①、为什么用Cache"><a href="#①、为什么用Cache" class="headerlink" title="①、为什么用Cache"></a>①、为什么用Cache</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220503091119503.png" alt="image-20220503091119503"></p><p>在多体并行存储系统中，由于I&#x2F;O设备向主存请求的级别高于CPU访存，这就出现了CPU等待I&#x2F;O设别访存的现象，降低了CPU的工作效率。</p><ol><li>为了避免CPU与I&#x2F;O设备争抢访存，可在CPU与主存之间加<strong>一级缓存</strong>，这样，主存可将CPU要取的信息提前送至缓存，一旦主存在与I&#x2F;O设备交换时，CPU可直接从缓存中读取所需信息，不必空等而影响效率。</li><li>从另一角度来看，主存速度的提高始终跟不上CPU的发展。CPU的速度每年改进60%，组成主存的动态RAM速度平均每年只改进7%。</li></ol><p>Cache的出现使CPU可以不直接访问主存，而与高速Cache交换信息。</p><p>通过大量典型程序的分析，发现CPU从主存取指令或取数据，在一定时间内，只是对主存局部地址区域的访问。这是由于指令和数据在主存内部是连续存放的，并且有些指令和数据往往会被多次调用（如子程序、循环程序和一些常数），即指令和数据在主存的地址分布不是随机的，而是相对的簇聚，使得CPU在执行程序时，访存具有相对的局部性，这就称为<strong>程序访问的局部性原理。</strong></p><p>根据程序访问的局部性原理，可以将CPU近期要用到的程序和数据提前送到Cache,就可以让CPU在一定时间内只访问Cache.</p><h4 id="②、Cache的工作原理"><a href="#②、Cache的工作原理" class="headerlink" title="②、Cache的工作原理"></a>②、Cache的工作原理</h4><h5 id="（1）主存和缓存的编址"><a href="#（1）主存和缓存的编址" class="headerlink" title="（1）主存和缓存的编址"></a>（1）主存和缓存的编址</h5><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220503141120215.png" alt="image-20220503141120215"> </p><h5 id="（2）命中与未命中"><a href="#（2）命中与未命中" class="headerlink" title="（2）命中与未命中"></a>（2）命中与未命中</h5><p>CPU 欲读取主存某字时，有两种可能：</p><p>一种是所需要的字已在缓存中，即可直接访问；（命中）</p><p>另一种是所需的字不在Cache内，此时需将该字所在的主存整个字块一次调入 Cache中（Cache 与主存之间是字块传递）。（不命中）</p><p> <strong>命中：</strong>指的是主存块调入缓存<br>                主存块与缓冲块建立了对应联系</p><p><strong>未命中：</strong>主存块未调入缓存<br>            主存块与缓存块未建立对应关系</p><p>由于缓存的块数C远小于主存的块数M，因此，一个缓存块不能惟一地、永久地只对应一个主存块，故每个缓存块需设一个标记，用来表示当前存放的是哪一个主存块，该标记的内容相当于主存块的编号。</p><h5 id="（3）Cache-的命中率"><a href="#（3）Cache-的命中率" class="headerlink" title="（3）Cache 的命中率"></a>（3）Cache 的命中率</h5><p>CPU 欲访问的信息在Cache中的比率</p><p>一般每块可取4~8个字</p><p>块长取一个存取周期内从主存调出的信息长度</p><p> 在一个程序执行期间，设N<sub>c</sub>为访问Cache的总命中次数，N<sub>m</sub>为访问主存的总次数，命中率h为$h&#x3D;\frac{N_c}{N_c+N_m}$</p><p> 设 t<sub>c</sub> 为命中时的 Cache 访问时间， t<sub>m</sub>为未命中时的主存访问时间，1-h 表示未命中率，则Cache-主存系统的平均访问时间t<sub>a</sub>为$t_a&#x3D;ht_c+(1-h)t_m$</p><p>命中率与Cache 的<strong>容量</strong>与<strong>块长</strong>有关</p><p>一般而言，Cache容量越大，其CPU的命中率就越高。当然，容量没必要太大，太大会增加成本，而且当容量达到一定值时，命中率已不因容量的增大而有明显的提高。因此，Cache容量是总成本价与命中率的折中值。例如：80386的主存最大容量为4GB，其与配套的Cache容量为16KB或32KB，其命中率可达95%以上。</p><p>块长与命中率之间的关系更为复杂，它取决于各程序的局部特性。当块由小到大增长时，起初会因局部性原理使命中率有所提高。由于块长的增大，导致缓存中块数的减少，而新装入的块要覆盖旧块，很可能出现少数块刚刚装入就被覆盖，因此命中率反而下降。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220503153825689.png" alt="image-20220503153825689"> </p><p> （4）Cache-主存系统的效率</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220503154828399.png" alt="image-20220503154828399"> </p><h4 id="③、Cache的基本结构"><a href="#③、Cache的基本结构" class="headerlink" title="③、Cache的基本结构"></a>③、Cache的基本结构</h4><p> 主要由Cache存储体、地址映射变换机构、Cache替换机构组成。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220503155849234.png" alt="image-20220503155849234"></p><p>（1）Cache存储体</p><p>Cache存储体以块为单位与主存交换信息，为加速Cache与主存之间的调动，主存大多采用多体结构，且Cache访存的优先级最高。</p><p>（2）地址映射变换机构</p><p>地址映射变换机构是将CPU送来的主存地址转换为Cache地址。由于主存和Cache的块大小相同，块内地址都是相对于块的起始地址的偏移量（即第位地址相同），因此地址变换主要是主存的块号（高位地址）与Cache块号间的转换。</p><h4 id="④、Cache-的读写操作"><a href="#④、Cache-的读写操作" class="headerlink" title="④、Cache 的读写操作"></a>④、Cache 的读写操作</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160817071.png" alt="image-20220424160817071"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160827768.png" alt="image-20220424160827768"></p><h4 id="⑤、Cache-的改进"><a href="#⑤、Cache-的改进" class="headerlink" title="⑤、Cache 的改进"></a>⑤、Cache 的改进</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150131184.png" alt="image-20220618150131184"></p><p>（1）增加Cache的级数</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160837812.png" alt="image-20220424160837812"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150319370.png" alt="image-20220618150319370"> </p><h3 id="2、Cache-主存的地址映射"><a href="#2、Cache-主存的地址映射" class="headerlink" title="2、Cache-主存的地址映射"></a>2、Cache-主存的地址映射</h3><h4 id="①、直接映射"><a href="#①、直接映射" class="headerlink" title="①、直接映射"></a>①、直接映射</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150536870.png" alt="image-20220618150536870"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150546685.png" alt="image-20220618150546685"> </p><h4 id="②、全相联映射"><a href="#②、全相联映射" class="headerlink" title="②、全相联映射"></a>②、全相联映射</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150600538.png" alt="image-20220618150600538"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150635574.png" alt="image-20220618150635574"> </p><h4 id="③、组相联映射"><a href="#③、组相联映射" class="headerlink" title="③、组相联映射"></a>③、组相联映射</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150736382.png" alt="image-20220618150736382"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150743407.png" alt="image-20220618150743407"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618150750470.png" alt="image-20220618150750470"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160900321.png" alt="image-20220424160900321"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160911651.png" alt="image-20220424160911651"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160923428.png" alt="image-20220424160923428"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160938992.png" alt="image-20220424160938992"></p><p>例4.8、4.9、4.10、4.11自学（考研）</p><p>有可能是字节寻址、</p><h3 id="3、替换算法"><a href="#3、替换算法" class="headerlink" title="3、替换算法"></a>3、替换算法</h3><ol><li>先进先出</li><li>近期最少使用</li><li>随机法</li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424160947424.png" alt="image-20220424160947424"> </p><h2 id="4-4、辅助存储器"><a href="#4-4、辅助存储器" class="headerlink" title="4.4、辅助存储器"></a>4.4、辅助存储器</h2><h3 id="1、概述-2"><a href="#1、概述-2" class="headerlink" title="1、概述"></a>1、概述</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161228190.png" alt="image-20220424161228190"> </p><h3 id="2、磁记录原理"><a href="#2、磁记录原理" class="headerlink" title="2、磁记录原理"></a>2、磁记录原理</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161252368.png" alt="image-20220424161252368"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161302570.png" alt="image-20220424161302570"> </p><ol><li>归零制（RZ）</li><li>不归零制（NRZ）</li><li>“见1就翻”的不归零制（NRZ1）</li><li>调相制（PM）</li><li>调频制（FM）</li><li>改进型调频制（MFM）</li></ol><h3 id="3、磁硬盘存储器"><a href="#3、磁硬盘存储器" class="headerlink" title="3、磁硬盘存储器"></a>3、磁硬盘存储器</h3><p>IBM发明的</p><h4 id="①、硬磁盘存储器的类型"><a href="#①、硬磁盘存储器的类型" class="headerlink" title="①、硬磁盘存储器的类型"></a>①、硬磁盘存储器的类型</h4><p>硬磁盘存储器的盘片是由硬质铝合金材料制成的，其表面涂有一层可被磁化的硬磁特性材料。</p><p>（1）固定磁头和移动磁头</p><p>（2）可换盘和固定盘</p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510084934986.png" alt="image-20220510084934986"></p><p>最外边最小，最里面最大</p><p>盘片要密封</p><p>磁头是悬浮的，不用盘片接触</p><h4 id="②、硬磁盘存储结构"><a href="#②、硬磁盘存储结构" class="headerlink" title="②、硬磁盘存储结构"></a>②、硬磁盘存储结构</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510090014172.png" alt="image-20220510090014172"> </p><p>磁盘控制器相当于硬盘接口</p><p>盘片在驱动器里面，它们是一块</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510084934986.png" alt="image-20220510084934986"> </p><p>最外边最小，最里面最大</p><p>盘片要密封</p><p>磁头是悬浮的，不用盘片接触</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161326304.png" alt="image-20220424161326304"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510085851399.png" alt="image-20220510085851399"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161356659.png" alt="image-20220424161356659"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510091213572.png" alt="image-20220510091213572"></p><p>发展方向：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510091429686.png" alt="image-20220510091429686"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510092015729.png" alt="image-20220510092015729"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510092356399.png" alt="image-20220510092356399"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510092741372.png" alt="image-20220510092741372"></p><p>例4.12、4.13、4.14自学了解</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510093120570.png" alt="image-20220510093120570"> </p><h3 id="4、软磁盘存储器（自学）"><a href="#4、软磁盘存储器（自学）" class="headerlink" title="4、软磁盘存储器（自学）"></a>4、软磁盘存储器（自学）</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161409264.png" alt="image-20220424161409264"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161419708.png" alt="image-20220424161419708"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510093453299.png" alt="image-20220510093453299"> </p><h3 id="5、光盘存储器"><a href="#5、光盘存储器" class="headerlink" title="5、光盘存储器"></a>5、光盘存储器</h3><ol><li>只读型光盘（CD-ROM）</li><li>只写一次型光盘（WORM）</li><li>可擦写型光盘</li></ol><p>光盘的存储原理：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618153003517.png" alt="image-20220618153003517"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424161431511.png" alt="image-20220424161431511"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220510094455942.png" alt="image-20220510094455942"></p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220428114300947.png"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220428114309815.png" alt="image-20220428114309815"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220428114349829.png" alt="image-20220428114349829"> </p><p>25.程序的局部性原理是指：在一小段时间内，最近被访问过的程序和数据很可能再次被访问；在空间上，这些被访问的程序和数据往往集中在一小片存储区；在访问顺序上，指令顺序执行比转移执行的可能性大（大约5：1）。存储系统中缓存-主存层次和主存-辅存层次均采用了程序访问的局部性原理。</p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220429175429208.png" alt="image-20220429175429208"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220429175441503.png" alt="image-20220429175441503"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220429175450060.png" alt="image-20220429175450060"> </p><h1 id="五、输入输出系统"><a href="#五、输入输出系统" class="headerlink" title="五、输入输出系统"></a>五、输入输出系统</h1><h2 id="5-1、概述"><a href="#5-1、概述" class="headerlink" title="5.1、概述"></a>5.1、概述</h2><h3 id="1、输入输出系统的发展概况"><a href="#1、输入输出系统的发展概况" class="headerlink" title="1、输入输出系统的发展概况"></a>1、输入输出系统的发展概况</h3><h4 id="①、早期"><a href="#①、早期" class="headerlink" title="①、早期"></a>①、早期</h4><p>分散连接</p><p>CPU和I&#x2F;O设备串行工作程序查询方式</p><h4 id="②、接口模块和-DMA阶段"><a href="#②、接口模块和-DMA阶段" class="headerlink" title="②、接口模块和 DMA阶段"></a>②、接口模块和 DMA阶段</h4><p>总线连接</p><p>CPU和I&#x2F;O设备并行工作</p><p>中断方式</p><p>DMA方式（直接存储器存取）（Direct Memory Access,DMA）,在I&#x2F;O设备和主存之间有一条通路</p><h4 id="③、具有通道结构的阶段"><a href="#③、具有通道结构的阶段" class="headerlink" title="③、具有通道结构的阶段"></a>③、具有通道结构的阶段</h4><p>通道是一种具有特殊功能的处理器。通道有专用的通道指令，能独立地执行用通道指令所编写的输入输出程序，但不是一个完全独立的处理器。是从属于CPU的一个专用处理器。依据CPU的I&#x2F;O指令进行启动、停止或改变工作状态。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519085805586.png" alt="image-20220519085805586"></p><h4 id="④、具有I-O处理机的阶段"><a href="#④、具有I-O处理机的阶段" class="headerlink" title="④、具有I&#x2F;O处理机的阶段"></a>④、具有I&#x2F;O处理机的阶段</h4><p>I&#x2F;O处理机又称为外围处理机（Peripheral Processor）</p><p>基本独立于主机，具有独立性。依然受CPU控制。</p><h3 id="2、输入输出系统的组成"><a href="#2、输入输出系统的组成" class="headerlink" title="2、输入输出系统的组成"></a>2、输入输出系统的组成</h3><p>输入输出系统由 I&#x2F;O软件和I&#x2F;O硬件组成。</p><h4 id="①、I-O软件"><a href="#①、I-O软件" class="headerlink" title="①、I&#x2F;O软件"></a>①、I&#x2F;O软件</h4><p>（1）I&#x2F;O指令</p><p>CPU指令的一部分</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220512103719775.png"> </p><p>设备码：设备的地址，与I&#x2F;O设备连接的接口里面</p><p>（2）通道指令（通道控制字）</p><p>通道自身的指令，用来执行I&#x2F;O操作。而I&#x2F;O指令是CPU系统的一部分。</p><p>通道程序由通道指令组成，完成某种外围设备与主存之间传送信息的操作。</p><p>指出数组的首地址、传送字数、操作命令</p><p>如IBM&#x2F;370通道指令为64位</p><h4 id="②、I-O硬件"><a href="#②、I-O硬件" class="headerlink" title="②、I&#x2F;O硬件"></a>②、I&#x2F;O硬件</h4><p>设备I&#x2F;O接口</p><p>一个通道可以控制多个设备控制器，而一个设备控制器又可以控制多个设备</p><h3 id="3、I-O设备与主机的联系方式"><a href="#3、I-O设备与主机的联系方式" class="headerlink" title="3、I&#x2F;O设备与主机的联系方式"></a>3、I&#x2F;O设备与主机的联系方式</h3><h4 id="①、I-O设备编址方式"><a href="#①、I-O设备编址方式" class="headerlink" title="①、I&#x2F;O设备编址方式"></a>①、I&#x2F;O设备编址方式</h4><p>（1）统一编址将I&#x2F;O地址看做是存储器地址的一部分。在存储器地址中划出一部分作为I&#x2F;O地址，在这其中的访问，就是对I&#x2F;O设备访问。</p><p>（2）不统一编址将I&#x2F;O地址和存储器地址分开，对I&#x2F;O设备的访问用专门的I&#x2F;O指令</p><h4 id="②、设备编址"><a href="#②、设备编址" class="headerlink" title="②、设备编址"></a>②、设备编址</h4><p>用设备选择电路识别是否被选中</p><h4 id="③、传送方式"><a href="#③、传送方式" class="headerlink" title="③、传送方式"></a>③、传送方式</h4><p>（1）串行，同一时刻，只传送一位数据。传送速度慢，但只需一根数据线和一根地线。</p><p>（2）并行，同一时刻，传送多位数据。传送数据快，但要求数据线较多。</p><h4 id="④、联络方式"><a href="#④、联络方式" class="headerlink" title="④、联络方式"></a>④、联络方式</h4><p>（1）立即响应</p><p>只要CPU的I&#x2F;O指令一到，设备立即响应。比如，指示灯的亮与灭，开关的通与断。</p><p>（2）异步工作采用应答信号</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220512105448371.png" alt="image-20220512105448371"></p><p>（3）同步工作采用同步时标</p><p>要求I&#x2F;O设备和CPU的工作速度完全同步，需要用到同步时标。</p><h4 id="⑤、I-O设备与主机的连接方式"><a href="#⑤、I-O设备与主机的连接方式" class="headerlink" title="⑤、I&#x2F;O设备与主机的连接方式"></a>⑤、I&#x2F;O设备与主机的连接方式</h4><p>（1）辐射式连接</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220512105613100.png" alt="image-20220512105613100"> </p><p>（2）总线连接</p><p>通过一组总线（包括地址线、数据线、控制线等），将所有的I&#x2F;O设备与主机相连。</p><p>便于增删设备</p><h3 id="4、I-O设备与主机信息传送的控制方式"><a href="#4、I-O设备与主机信息传送的控制方式" class="headerlink" title="4、I&#x2F;O设备与主机信息传送的控制方式"></a>4、I&#x2F;O设备与主机信息传送的控制方式</h3><p>I&#x2F;O设备与主机交换信息时，共有5种控制方式：程序查询方式、程序中断方式、直接存储器存取方式（DMA）、I&#x2F;O通道方式、I&#x2F;O处理机方式</p><h4 id="①、程序查询方式"><a href="#①、程序查询方式" class="headerlink" title="①、程序查询方式"></a>①、程序查询方式</h4><p>程序查询方式是由CPU通过程序不断查询I&#x2F;O设备是否已做好准备。</p><p>若查得I&#x2F;O设备未准备就绪，就继续查询；若准备就绪，就将数据从I&#x2F;O中送接口至CPU，再送到主存。</p><p>效率不高</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424172845528.png" alt="image-20220424172845528"></p><h4 id="②、程序中断方式"><a href="#②、程序中断方式" class="headerlink" title="②、程序中断方式"></a>②、程序中断方式</h4><p>（考）</p><p>现在用的最多</p><p>CPU在启动I&#x2F;O设备后，不查询I&#x2F;O设备是否已准备就绪，继续执行自身程序；当I&#x2F;O设备准备就绪并向CPU发出中断请求后，才予以响应，中断现行程序，处理I&#x2F;O请求。</p><p>中断程序时，需要将存储器之前的数据信息进行保存，因为I&#x2F;O也可能调用这些程序，会使之前的数据（比如累加器）进行改变。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519153340976.png" alt="image-20220519153340976"></p><p>CPU响应了I&#x2F;O设备的请求，中断了现行程序，转至中断服务程序，待处理完后又返回到源程序断点处，继续从第K+1条指令往下执行。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424172909433.png" alt="image-20220424172909433"></p><h4 id="③、DMA（直接存储器存取）方式"><a href="#③、DMA（直接存储器存取）方式" class="headerlink" title="③、DMA（直接存储器存取）方式"></a>③、DMA（直接存储器存取）方式</h4><p>效率最高、但用的最少</p><p>在DMA方式中，主存与I&#x2F;O设备之间有一条数据通路，主存与I&#x2F;O设备交换信息时，无须调用中断服务程序。若DMA和CPU 同时调用主存，CPU 总是将总线占有权让给DMA，通常把DMA的这种占有称为窃取或挪用。而且，在DMA窃取存取周期内，CPU尚能继续做内部操作（如乘法运算）。</p><p>DMA方式进一步提高了CPU 的资源利用率。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519154105177.png" alt="image-20220519154105177"></p><h4 id="④、效率比较"><a href="#④、效率比较" class="headerlink" title="④、效率比较"></a>④、效率比较</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424172932677.png"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424172946643.png" alt="image-20220424172946643"> </p><h2 id="5-2、外部设备"><a href="#5-2、外部设备" class="headerlink" title="5.2、外部设备"></a>5.2、外部设备</h2><h3 id="1、概述-3"><a href="#1、概述-3" class="headerlink" title="1、概述"></a>1、概述</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173103545.png" alt="                  "></p><p><strong>输入设备</strong></p><h3 id="2、输入设备"><a href="#2、输入设备" class="headerlink" title="2、输入设备"></a>2、输入设备</h3><ol><li>键盘<ol><li>按键</li><li>判断哪个键按下</li><li>将此键翻译成ASCII码（编码键盘法）</li></ol></li><li>图形输入设备<ol><li>鼠标<ol><li>机械式金属球 电位器</li><li>光电式    光电转换器 CCD</li></ol></li><li>触摸屏<ol><li>电阻式触摸屏</li><li>电容式触摸屏</li><li>表面超声波式触摸屏</li></ol></li></ol></li><li>图像输入设备<ol><li>摄像机</li><li>扫描仪</li></ol></li><li>条形码阅读器</li><li>光笔</li><li>画笔与图形板</li></ol><h4 id="①、键盘"><a href="#①、键盘" class="headerlink" title="①、键盘"></a>①、键盘</h4><p>带只读存储器的编码键盘原理图</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519162918760.png" alt="image-20220519162918760"></p><h3 id="3、输出设备"><a href="#3、输出设备" class="headerlink" title="3、输出设备"></a>3、输出设备</h3><ol><li>显示器<ol><li>字符显示字符发生器</li><li>图形显示    主管图像</li><li>图像显示     客观图像</li></ol></li><li>打印机<ol><li>打印式点阵式（逐字、逐行）</li><li>非击打式  激光（逐页）喷墨（逐字）</li></ol></li></ol><h4 id="①、CRT"><a href="#①、CRT" class="headerlink" title="①、CRT"></a>①、CRT</h4><p>按显示器件区分，有阴极射线管（CRT）显示器。CRT是目前应用最广泛的显示器件。</p><p>技术指标：分辨率和灰度等级</p><p>刷新存储器的存取周期必须与刷新频率相匹配。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519163814736.png" alt="image-20220519163814736"> </p><h4 id="②、字符显示器"><a href="#②、字符显示器" class="headerlink" title="②、字符显示器"></a>②、字符显示器</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519164142911.png" alt="image-20220519164142911"> </p><p>字符显示器是计算机系统中最基本的输出设备，它通常由CRT控制器和显示器（CRT）组成。</p><ol><li>显示存储器（刷新存储器）VRAM</li><li>字符发生器<ol><li>由于荧光屏上的字符由光点组成，而显示存储器中存放的是ASCII码，因此，必须有一个部件能将每个ASCII字符吗转变为一组5&times;7或7&times;9的光点矩阵信息。具有这种变换功能的部件称为字符发生器，实质上是一个ROM。</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519164701783.png" alt="image-20220519164701783"></li></ol></li><li>图形显示器<ol><li>主要用于计算机辅助设计（CAD）和计算机辅助制造（CAM）</li><li>图形显示器所显示的图形是由计算机用一定的算法形成的点、线、面、阴影等，来自主观世界。</li></ol></li><li>图像显示器<ol><li>图像显示器做显示的图像来自客观世界。</li></ol></li></ol><h4 id="③、打印设备"><a href="#③、打印设备" class="headerlink" title="③、打印设备"></a>③、打印设备</h4><p>按打字原理分类：<strong>击打式</strong>和<strong>非击打式</strong>。</p><p><strong>击打式</strong>是利用机械动作使印字结构与色带和纸相撞击而打印字符 。</p><ul><li><p>击打式打印机又分为活字打印机和点阵针式打印机。</p></li><li><p>点阵打印机的字符是点阵结构，它利用钢针撞击的原理印字。</p></li></ul><p>非击打式利用电、磁等物理或化学方法来印刷字符，如激光打印机、喷墨打印机等</p><ol><li>点阵针式打印机<ol><li>利用钢针撞击的原理印字，多应用于办公场合</li><li>优点：可以打印多联复写纸，对纸张厚度要求低，维护简单</li><li>缺点：打印慢，声音大，精度低</li></ol></li><li>喷墨打印机<ol><li>非击打式打印机</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618160835450.png" alt="image-20220618160835450"></li></ol></li><li>激光打印机<ol><li>采用了激光技术和照相技术</li><li>打印速度非常快，精度高</li><li>激光打印机功率较大、噪声比喷墨大</li></ol></li><li></li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220519184603374.png" alt="image-20220519184603374">  </p><p>感光鼓在未被激光扫描之前，先在黑暗中充电，使鼓表面均匀地沉积一层电荷，扫描时激光束对鼓表面有选择地曝光，被曝光的部分产生放电现象，未被曝光的部分仍保留充电时的电荷，这就形成了“潜像”。随着鼓的圆周运动，“潜像”部分通过装有碳粉盒的显像系统，使“潜像”部分（实际上是具有字符信息的区域）吸附上碳粉，达到“显影”的目的。当鼓上的字符信息区和打印纸接触时，由纸的背面施以反向的静电电荷，则鼓面上的碳粉就会被吸附到纸面上，这就是“转印”到“转写”的过程。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220525194804244.png" alt="image-20220525194804244"></p><h3 id="4、其它"><a href="#4、其它" class="headerlink" title="4、其它"></a>4、其它</h3><ol><li>A&#x2F;D、D&#x2F;A 模拟&#x2F;数字（数字&#x2F;模拟）转换器</li><li>终端                键盘+显示器<br>完成显示控制与存储、键盘管理及通信控制</li><li>汉字处理        <ol><li>汉字输入<ol><li>汉字编码主要有3类：数字编码、拼音编码和字形编码</li></ol></li><li>汉字存储<ol><li>汉字的存储：汉字内码存储和字形码的存储</li><li>汉字内码是汉字信息在机内使用的机内代码，通常用两个字节表示。英文字符的机内代码是7位ASCII码，字节的最高位是“0”，而汉字内码的两个字节的最高位均为“1”。</li><li>汉字字形码也叫字模码，是用点阵表示汉字字形的代码。</li></ol></li><li>汉字输出</li></ol></li></ol><h3 id="5、多媒体技术"><a href="#5、多媒体技术" class="headerlink" title="5、多媒体技术"></a>5、多媒体技术</h3><p>多媒体是“Multimedia”的汉译，是由“Multi”和“Media”两个词构成的复合词，直译为“多媒体”。</p><p>多媒体计算机的关键技术</p><ul><li>视频和音频数据的压缩和解压缩技术</li><li>多媒体专用芯片</li><li>大容量存储器</li><li>适用于多媒体技术的软件</li></ul><h2 id="5-3、I-O接口"><a href="#5-3、I-O接口" class="headerlink" title="5.3、I&#x2F;O接口"></a>5.3、I&#x2F;O接口</h2><p>I&#x2F;O接口一般指CPU和I&#x2F;O设备间的连接部件，而端口指I&#x2F;O接口内CPU能够访问的寄存器，端口加上相应的控制逻辑即构成接口。</p><h3 id="1、概述-4"><a href="#1、概述-4" class="headerlink" title="1、概述"></a>1、概述</h3><p>主机与I&#x2F;O设备之间设置接口的理由：</p><ol><li>实现设备的选择</li><li>实现数据缓冲达到速度匹配</li><li>实现数据串—并格式转换</li><li>实现电平转换</li><li>传送控制命令</li><li>反映设备的状态（“忙”、“就绪”、“中断请求”）</li></ol><p>接口（Interface）和端口（Port）</p><p>端口是指接口电路中一些寄存器，这些寄存器分别用来存放数据信息、控制信息和状态信息，相应的端口分别称为数据端口、控制端口和状态端口。</p><p>若干个端口加上相应的控制逻辑才能组成接口。</p><h3 id="2、接口的功能和组成"><a href="#2、接口的功能和组成" class="headerlink" title="2、接口的功能和组成"></a>2、接口的功能和组成</h3><h4 id="①、总线连接方式的I-O接口电路"><a href="#①、总线连接方式的I-O接口电路" class="headerlink" title="①、总线连接方式的I&#x2F;O接口电路"></a>①、总线连接方式的I&#x2F;O接口电路</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173417664.png" alt="image-20220424173417664"></p><p>（1）设备选择线：用来传送设备码的，它的根数取决于I&#x2F;O指令中设备码的位数。如果把设备码看做是地址号，那么设备选择线又可称为地址线。</p><p>（2）数据线：I&#x2F;O设备和主机之间数据代码的传送线，其根数一般等于存储字长的位数或字符的位数。它一般是双向的，也可以是单向的。</p><p>（3）命令线：传送CPU向设备发出的各种命令信号，如启动、读、写等。单向。</p><p>（4）状态线：将I&#x2F;O设备的状态向主机报告的信号线。单向</p><h4 id="②、接口的功能和组成"><a href="#②、接口的功能和组成" class="headerlink" title="②、接口的功能和组成"></a>②、接口的功能和组成</h4><p><strong>功能</strong></p><p>（1）选址功能：当设备选择线上的设备码与接口的设备码相符时，应发出设备选中符号SEL，这种功能可通过接口内的<strong>设备选择电路</strong>来实现。 </p><p>（2）传送命令的功能：CPU向I&#x2F;O设备发出命令，I&#x2F;O设备做出响应。则I&#x2F;O接口也应该能传送命令。所以在I&#x2F;O接口中设有存放命令的<strong>命令寄存器</strong>和<strong>命令译码器</strong>。</p><p>（3）传送数据的功能：接口在主机和I&#x2F;O设备之间，所以数据必须通过接口来传送。这就要求接口中有数据通路，完成数据传送。还应具有缓冲能力，能将数据暂存在接口内。故设有<strong>数据缓冲寄存器</strong>。 </p><p>（4）反映设备状态的功能：用完成触发器D和工作触发器B来标志设备所处的状态。</p><p>D &#x3D; 0, B &#x3D; 0，表示I&#x2F;O设备处于暂停状态</p><p>D &#x3D; 1, B &#x3D; 0,    表示I&#x2F;O设备已经准备就绪</p><p>D &#x3D; 0, B &#x3D; 1,     表示I&#x2F;O设备正处于准备状态</p><p>中断请求触发器INTR，当其为“1”时，表示该I&#x2F;O设备向CPU发出中断请求。</p><p>接口内还有屏蔽触发器MASK，它与中断请求触发器配合使用，完成设备的屏蔽功能。</p><h4 id="③、I-O接口的基本组成"><a href="#③、I-O接口的基本组成" class="headerlink" title="③、I&#x2F;O接口的基本组成"></a>③、I&#x2F;O接口的基本组成</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173447661.png"> </p><h3 id="3、接口类型"><a href="#3、接口类型" class="headerlink" title="3、接口类型"></a>3、接口类型</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173459844.png" alt="image-20220424173459844"></p><h2 id="5-4、程序查询方式"><a href="#5-4、程序查询方式" class="headerlink" title="5.4、程序查询方式"></a>5.4、程序查询方式</h2><h3 id="1、程序查询流程"><a href="#1、程序查询流程" class="headerlink" title="1、程序查询流程"></a>1、程序查询流程</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173829223.png" alt="image-20220424173829223"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173843661.png" alt="image-20220424173843661"> </p><h3 id="2、程序查询方式的接口电路"><a href="#2、程序查询方式的接口电路" class="headerlink" title="2、程序查询方式的接口电路"></a>2、程序查询方式的接口电路</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424173854834.png" alt="image-20220424173854834"></p><p>程序查询接口工作电路（以输入为例）：</p><p>①、CPU发I&#x2F;O地址设备开始工作，地址总线，接口，设备选择译码&rightarrow;选中&rightarrow;发SEL信号</p><p>②、CPU发启动命令，DBR&rightarrow;开命令接受门;D置0，B置1 &rightarrow;接口向设备发启动命令</p><p>③、CPU等待，输入设备读出数据</p><p>④、外设工作完成，B置0，D置1</p><p>⑤、准备就绪信号&rightarrow;接口&rightarrow;完成信号&rightarrow;控制总线&rightarrow;CPU</p><p>⑥、输入：CPU通过输入指令（IN）将DBR中的数据取走</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220526091023699.png" alt="image-20220526091023699"> </p><h3 id="3、习题"><a href="#3、习题" class="headerlink" title="3、习题"></a>3、习题</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520091913127.png" alt="image-20220520091913127"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520091922786.png" alt="image-20220520091922786"> </p><h2 id="5-5、程序中断方式"><a href="#5-5、程序中断方式" class="headerlink" title="5.5、程序中断方式"></a>5.5、程序中断方式</h2><h3 id="1、中断的概念"><a href="#1、中断的概念" class="headerlink" title="1、中断的概念"></a>1、中断的概念</h3><p>计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行，转向对这些异常情况或特殊请求的处理，处理结束后再返回到现行程序的间断处，继续执行原程序。这就是“中断”。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174113134.png" alt="image-20220424174113134"> </p><h3 id="2、I-O中断的产生"><a href="#2、I-O中断的产生" class="headerlink" title="2、I&#x2F;O中断的产生"></a>2、I&#x2F;O中断的产生</h3><p>I&#x2F;O设备与主机的速度不匹配。所以，CPU启动设备后，往往需要等待一段时间才能实现主机与I&#x2F;O设备之间的信息交换。如果在设备准备的同时，CPU不作无谓的等待，而继续执行现行程序，只有当I&#x2F;O设备准备就绪向CPU提出请求后，再暂时中断CPU现行程序转入I&#x2F;O服务程序。这便产生了I&#x2F;O中断。</p><p>I&#x2F;O中断产生的原因：</p><ol><li>适应I&#x2F;O设备工作速度低的问题</li><li>当突然掉电的瞬间，立即启动另一个备份电源，进行一些必要的处理</li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174128121.png" alt="image-20220424174128121"></p><h3 id="3、程序中断方式的接口电路"><a href="#3、程序中断方式的接口电路" class="headerlink" title="3、程序中断方式的接口电路"></a>3、程序中断方式的接口电路</h3><h4 id="①、配置中断请求触发器和中断屏蔽触发器"><a href="#①、配置中断请求触发器和中断屏蔽触发器" class="headerlink" title="①、配置中断请求触发器和中断屏蔽触发器"></a>①、配置中断请求触发器和中断屏蔽触发器</h4><p>每台外部设备都必须配置一个中断请求触发器INTR，当其为“1”时，表示该设备向CPU提出中断请求。但是设备欲提出中断请求时，其设备必须准备就绪，即接口内的完成触发器D的状态必须为“1”。</p><p>中断源：可以向CPU提出中断请求的各种因素</p><p>当多个中断源同时提出请求时，必须对各中断源进行排队，且只能接受级别最高的中断源的请求。</p><p>屏蔽触发器MASK，当其为“1”时，表示被屏蔽，即封锁其中断源的请求。</p><p>中断请求触发器和中断屏蔽触发器在I&#x2F;O接口中是成对出现的。</p><p>仅当设备准备就绪（D &#x3D;1 ），且该设备未被屏蔽（MASK &#x3D; 0）时，CPU 的中断查询信号可将中断请求触发器置“1”（INTR&#x3D;1） </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520094546863.png" alt="image-20220520094546863"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220526092752052.png" alt="image-20220526092752052"></p><h4 id="②、排队器"><a href="#②、排队器" class="headerlink" title="②、排队器"></a>②、排队器</h4><p>当多个中断源同时向CPU提出请求时，CPU只能按中断源的不同性质对其排队，并按优先等级的高低予以响应。</p><p>硬件排队器可以在CPU内部设置一个统一的排队器，对所有中断源进行排队；也可在接口电路内分别设置各个设备的排队器，又称为链式排队器。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174206146.png" alt="image-20220424174206146"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174216522.png" alt="image-20220424174216522"></p><p>不管是哪个中断源（一个或多个）提出中断请求，排队器输出端INTP<sub>i</sub>，只有一个高电平。 </p><h4 id="③、中断向量地址形成部件-（设备编码器）"><a href="#③、中断向量地址形成部件-（设备编码器）" class="headerlink" title="③、中断向量地址形成部件 （设备编码器）"></a>③、中断向量地址形成部件 （设备编码器）</h4><p>CPU一旦响应了I&#x2F;O中断，就要暂停现行程序，转去执行该设备的中断服务程序。不同的设备有不同的中断服务程序，每个服务程序都有一个入口地址，CPU必须找到这个入口地址。</p><p>入口地址的寻找可用硬件或软件的方法来完成。</p><p>硬件向量法：通过向量地址来寻找设备的中断服务程序入口地址，而且向量地址是由硬件电路产生的。</p><p>中断向量地址形成部件实质上是一个编码器。在I&#x2F;O接口中的编码器又称为设备编码器。</p><p>向量地址和中断服务程序的入口地址是两个概念。 </p><p>向量地址是由硬件电路（向量编码器）产生的中断源的内存地址编号，中断入口地址是中断服务程序首址。</p><p>中断向量地址可理解为中断服务程序入口地址指示器（入口地址的地址），通过它访存中断服务程序入口地址。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174226354.png" alt="image-20220424174226354">  </p><h4 id="④、程序中断方式接口电路的基本组成"><a href="#④、程序中断方式接口电路的基本组成" class="headerlink" title="④、程序中断方式接口电路的基本组成"></a>④、程序中断方式接口电路的基本组成</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174243643.png" alt="image-20220424174243643"></p><h4 id="⑤、习题"><a href="#⑤、习题" class="headerlink" title="⑤、习题"></a>⑤、习题</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520104847729.png" alt="image-20220520104847729"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520105210000.png" alt="image-20220520105210000"></p><h3 id="4、I-O中断处理过程"><a href="#4、I-O中断处理过程" class="headerlink" title="4、I&#x2F;O中断处理过程"></a>4、I&#x2F;O中断处理过程</h3><h4 id="①、CPU响应中断的条件和时间"><a href="#①、CPU响应中断的条件和时间" class="headerlink" title="①、CPU响应中断的条件和时间"></a>①、CPU响应中断的条件和时间</h4><p>条件</p><p>CPU响应I&#x2F;O设备提出中断请求的条件是必须满足CPU中的允许中断触发器EINT为“1”。该触发器可用于开中断指令置“1”（称为开中断）；也可用关中断指令使其复位（置“0”）（称为关中断）。</p><p>时间：</p><p>I&#x2F;O设备准备就绪的时间（D&#x3D;1）是随机的，而CPU是在统一的时刻（每条指令执行阶段结束前）向接口发中断查询信号，以获取I&#x2F;O的中断请求。因此，CPU响应中断的时间一定是每条指令执行阶段的结束时刻。</p><p>CPU发中断查询信号（将INTR置“1”）</p><h4 id="②、I-O中断处理过程"><a href="#②、I-O中断处理过程" class="headerlink" title="②、I&#x2F;O中断处理过程"></a>②、I&#x2F;O中断处理过程</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174309675.png" alt="image-20220424174309675"> </p><h3 id="5、中断服务程序流程"><a href="#5、中断服务程序流程" class="headerlink" title="5、中断服务程序流程"></a>5、中断服务程序流程</h3><h4 id="①、中断服务程序的流程"><a href="#①、中断服务程序的流程" class="headerlink" title="①、中断服务程序的流程"></a>①、中断服务程序的流程</h4><p>（1）保护现场</p><ul><li>保存程序的断点（老师说没有）中断隐指令完成</li><li>保存通用寄存器和状态寄存器的内容            中断服务程序完成</li></ul><p>（2）中断服务</p><ul><li>对不同的I&#x2F;O设备具有不同内容的设备服务</li></ul><p>（3）恢复现场</p><ul><li>出栈指令</li></ul><p>（4）中断返回</p><ul><li>中断返回指令，使其返回到原程序的断点处</li></ul><h4 id="②、单重中断和多重中断"><a href="#②、单重中断和多重中断" class="headerlink" title="②、单重中断和多重中断"></a>②、单重中断和多重中断</h4><p>单重中断：不允许中断现行的中断服务程序</p><p>多重中断：允许级别更高的中断源 中断现行的中断服务程序</p><h4 id="③、单重中断和多重中断的服务程序流程"><a href="#③、单重中断和多重中断的服务程序流程" class="headerlink" title="③、单重中断和多重中断的服务程序流程"></a>③、单重中断和多重中断的服务程序流程</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174515937.png" alt="image-20220424174515937"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520111353088.png" alt="image-20220520111353088"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174559786.png" alt="image-20220424174559786"></p><h2 id="5-6、DMA方式"><a href="#5-6、DMA方式" class="headerlink" title="5.6、DMA方式"></a>5.6、DMA方式</h2><h3 id="1、DMA方式的特点"><a href="#1、DMA方式的特点" class="headerlink" title="1、DMA方式的特点"></a>1、DMA方式的特点</h3><h4 id="①、DMA和程序中断两种方式的数据通路"><a href="#①、DMA和程序中断两种方式的数据通路" class="headerlink" title="①、DMA和程序中断两种方式的数据通路"></a>①、DMA和程序中断两种方式的数据通路</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174727996.png" alt="image-20220424174727996"></p><p>DMA和主存之间有数据通路，因此主存和设备交换信息时，不需要通过CPU。因此，工作速度比程序中断方式的工作效率高。适合高速I&#x2F;O或辅存与主存之间的信息交换。</p><h4 id="②、DMA与主存交换数据的三种方式"><a href="#②、DMA与主存交换数据的三种方式" class="headerlink" title="②、DMA与主存交换数据的三种方式"></a>②、DMA与主存交换数据的三种方式</h4><p>（1）停止CPU访问主存</p><p>控制简单</p><p>CPU处于不工作状态或保持状态</p><p>未充分发挥CPU对主存的利用率</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520202652478.png" alt="image-20220520202652478"> </p><p>（2）周期挪用（或周期窃取）  </p><p>每当I&#x2F;O设备发出DMA请求时，I&#x2F;O设备便挪用或窃取总线占用权一个或几个主存周期，而DMA不请求时，CPU仍继续访问主存。</p><p>DMA访问主存有三种可能：</p><ul><li>CPU此时不访存</li><li>CPU正在访存</li><li>CPU与DMA同时请求访存，此时CPU将总线控制器让给DMA</li></ul><p>适合I&#x2F;O设备的读写周期大于主存周期的情况</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520203124051.png" alt="image-20220520203124051"></p><p>（3）DMA与CPU交替访问  </p><p>适合CPU的工作周期比主存周期长的情况</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520203433755.png" alt="image-20220520203433755"> </p><p>不需要<strong>申请建立和归还</strong>总线的使用权</p><h3 id="2、DMA接口的功能和组成"><a href="#2、DMA接口的功能和组成" class="headerlink" title="2、DMA接口的功能和组成"></a>2、DMA接口的功能和组成</h3><h4 id="①、DMA接口功能"><a href="#①、DMA接口功能" class="headerlink" title="①、DMA接口功能"></a>①、DMA接口功能</h4><p>（1）向CPU申请DMA传送</p><p>（2）处理总线控制权的转交</p><p>（3）管理系统总线、控制数据传送</p><p>（4）确定数据传送的首地址和长度</p><p>​修正传送过程中的数据地址和长度</p><p>（5）DMA传送结束时，给出操作完成信号</p><h4 id="②、DMA接口组成"><a href="#②、DMA接口组成" class="headerlink" title="②、DMA接口组成"></a>②、DMA接口组成</h4><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520204136260.png" alt="image-20220520204136260"> </p><p>（1）字符地址寄存器（AR）</p><p>（2）字计数器（WC）</p><p>（3）数据缓冲寄存器（BR） </p><p>（4）设备地址寄存器（DAR）</p><h3 id="3、DMA的工作过程"><a href="#3、DMA的工作过程" class="headerlink" title="3、DMA的工作过程"></a>3、DMA的工作过程</h3><h4 id="①、DMA传送过程"><a href="#①、DMA传送过程" class="headerlink" title="①、DMA传送过程"></a>①、DMA传送过程</h4><p>预处理、数据传送、后处理</p><p>（1）预处理</p><p>通过几条输入输出指令预置如下信息</p><ul><li>通知DMA控制逻辑传送方向（入、出）</li><li>设备地址&rightarrow;DMA的DAR</li><li>主存地址&rightarrow;DMA的AR</li><li>传送字数&rightarrow;DMA的WC</li></ul><p> （2）DMA传送过程示意</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424174854483.png" alt="image-20220424174854483"></p><p>数据传送过程（输出）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520205834696.png" alt="image-20220520205834696"> </p><p>（3）后处理</p><p>校验送入主存的数是否正确</p><p>是否继续用DMA</p><p>测试传送过程是否正确，错则转诊断程序</p><p>由中断服务程序完成</p><h4 id="②、DMA接口与系统的连接方式"><a href="#②、DMA接口与系统的连接方式" class="headerlink" title="②、DMA接口与系统的连接方式"></a>②、DMA接口与系统的连接方式</h4><p>（1）具有公共请求线的DMA请求</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520210134120.png" alt="image-20220520210134120"> </p><p>（2）独立的DMA请求 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520210300544.png" alt="image-20220520210300544"> </p><h4 id="③、DMA方式与程序中断方式的比较"><a href="#③、DMA方式与程序中断方式的比较" class="headerlink" title="③、DMA方式与程序中断方式的比较"></a>③、DMA方式与程序中断方式的比较</h4><table><thead><tr><th></th><th>中断方式</th><th>DMA方式</th></tr></thead><tbody><tr><td>数据传送</td><td>程序</td><td>硬件</td></tr><tr><td>响应时间</td><td>指令执行结束</td><td>存取周期结束</td></tr><tr><td>处理异常情况</td><td>能</td><td>不能</td></tr><tr><td>中断请求</td><td>传送数据</td><td>后处理</td></tr><tr><td>优先级</td><td>低</td><td>高</td></tr></tbody></table><h3 id="4、DMA接口的类型"><a href="#4、DMA接口的类型" class="headerlink" title="4、DMA接口的类型"></a>4、DMA接口的类型</h3><h4 id="①、选择型"><a href="#①、选择型" class="headerlink" title="①、选择型"></a>①、选择型</h4><p>在物理上连接多个设备</p><p>在逻辑上只允许连接一个设备</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220424175028733.png" alt="image-20220424175028733"></p><h4 id="②、多路型"><a href="#②、多路型" class="headerlink" title="②、多路型"></a>②、多路型</h4><p>在物理上连接多个设备</p><p>在逻辑上允许连接多个设备同时工作</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520210712983.png" alt="image-20220520210712983"> </p><h4 id="③、多路型DMA接口的工作原理"><a href="#③、多路型DMA接口的工作原理" class="headerlink" title="③、多路型DMA接口的工作原理"></a>③、多路型DMA接口的工作原理</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220520210753529.png" alt="image-20220520210753529">  </p><h2 id="5-7、习题"><a href="#5-7、习题" class="headerlink" title="5.7、习题"></a>5.7、习题</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220524113256934.png" alt="image-20220524113256934"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220524113308978.png" alt="image-20220524113308978"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220524113323002.png" alt="image-20220524113323002"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220524113340530.png" alt="image-20220524113340530"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220524113349996.png" alt="image-20220524113349996"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618231151916.png" alt="image-20220618231151916"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618231223760.png" alt="image-20220618231223760"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618231319517.png" alt="image-20220618231319517"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220526093350603.png" alt="image-20220526093350603"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220526093703224.png" alt="image-20220526093703224"> </p><p>18<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220526100122479.png" alt="image-20220526100122479"> </p><h1 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h1><h1 id="七、指令系统"><a href="#七、指令系统" class="headerlink" title="七、指令系统"></a>七、指令系统</h1><p>机器指令系统的分类、寻址方式、指令格式以及设计指令系统时应考虑的各种因素。</p><h2 id="7-1、机器指令"><a href="#7-1、机器指令" class="headerlink" title="7.1、机器指令"></a>7.1、机器指令</h2><p>机器指令：每一条机器语言的语句</p><p>指令系统：全部机器指令的集合</p><h3 id="1、指令的一般格式"><a href="#1、指令的一般格式" class="headerlink" title="1、指令的一般格式"></a>1、指令的一般格式</h3><p>指令是由<strong>地址码</strong>和<strong>操作码</strong>组成的。</p><table><thead><tr><th>操作码字段</th><th>地址码字段</th></tr></thead></table><h4 id="①、操作码"><a href="#①、操作码" class="headerlink" title="①、操作码"></a>①、操作码</h4><h4 id="②、地址码"><a href="#②、地址码" class="headerlink" title="②、地址码"></a>②、地址码</h4><p>地址码用来指出该指令的源操作数的地址（一个或两个）、结果的地址以及下一条指令的地址。这里的地址可以是主存、寄存器、I&#x2F;O设备的地址。</p><p>（1）四地址指令</p><table><thead><tr><th>OP</th><th>A<sub>1</sub></th><th>a<sub>2</sub></th><th>a<sub>3</sub></th><th>a<sub>4</sub></th></tr></thead></table><p>OP为操作码；A<sub>1</sub>为第一操作数地址；A<sub>2</sub>为第二操作数地址；A<sub>3</sub>为结果地址;A<sub>4</sub>为下一条指令的地址<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220602212734694.png" alt="image-20220602212734694"> </p><p>该指令完成（A<SUB>1</SUB></p><h2 id="7-2、习题"><a href="#7-2、习题" class="headerlink" title="7.2、习题"></a>7.2、习题</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618225915373.png" alt="image-20220618225915373"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618225923671.png" alt="image-20220618225923671"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618225933247.png" alt="image-20220618225933247"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618230011500.png" alt="image-20220618230011500"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618230543446.png" alt="image-20220618230543446"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618230808350.png" alt="image-20220618230808350"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618230844660.png" alt="image-20220618230844660"> </p><h1 id="八、CPU的结构和功能"><a href="#八、CPU的结构和功能" class="headerlink" title="八、CPU的结构和功能"></a>八、CPU的结构和功能</h1><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224529509.png" alt="image-20220618224529509"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224538937.png" alt="image-20220618224538937"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224635678.png" alt="image-20220618224635678"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224722018.png" alt="image-20220618224722018"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224729915.png" alt="image-20220618224729915"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618225234707.png" alt="image-20220618225234707"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618225411257.png" alt="image-20220618225411257"></p><h1 id="九、控制单元的功能"><a href="#九、控制单元的功能" class="headerlink" title="九、控制单元的功能"></a>九、控制单元的功能</h1><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224035197.png" alt="image-20220618224035197"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224115972.png" alt="image-20220618224115972"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20220618224301992.png" alt="image-20220618224301992"></p><h1 id="计算机组成原理（12-22，43，44）"><a href="#计算机组成原理（12-22，43，44）" class="headerlink" title="计算机组成原理（12-22，43，44）"></a><strong>计算机组成原理（12-22，43，44）</strong></h1><p>PC、PSW、还有通用寄存器是可见的</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps29.jpg" alt="img"> </p><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 <strong>计算机系统概述</strong></h2><h3 id="1-1、冯诺依曼计算机"><a href="#1-1、冯诺依曼计算机" class="headerlink" title="1.1、冯诺依曼计算机"></a><strong>1.1、冯诺依曼计算机</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps30.jpg" alt="img"> </p><h3 id="1-2、计算机系统层次结构"><a href="#1-2、计算机系统层次结构" class="headerlink" title="1.2、计算机系统层次结构"></a><strong>1.2、计算机系统层次结构</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps31.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps32.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps33.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps34.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps35.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps36.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps37.jpg" alt="img"> </p><p>MAR,MDR在CPU内</p><p>地址译码器在主存内</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps38.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps39.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps40.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps41.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps42.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps43.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps44.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps45.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps46.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps47.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps48.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps49.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps50.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps51.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps52.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps53.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps54.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps55.jpg" alt="img"> </p><h3 id="1-3、计算机性能指标"><a href="#1-3、计算机性能指标" class="headerlink" title="1.3、计算机性能指标"></a><strong>1.3、计算机性能指标</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps56.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps57.jpg" alt="img"> </p><p>寄存器的基本单元是D触发器</p><p>磁盘可以永久性存放数据和程序</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps58.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps59.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps60.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps61.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps62.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps63.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps64.jpg" alt="img"> </p><h2 id="第二章-数据的表示和运算"><a href="#第二章-数据的表示和运算" class="headerlink" title="第二章 数据的表示和运算"></a><strong>第二章 数据的表示和运算</strong></h2><h3 id="2-1、数制与编码"><a href="#2-1、数制与编码" class="headerlink" title="2.1、数制与编码"></a><strong>2.1、数制与编码</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps65.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps66.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps67.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps68.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps69.jpg" alt="img"> </p><p>同一个数的补码和移码表示，其数值部分相同，而符号相反</p><p>移码表示浮点数的阶，补码表示定点整数</p><p>补码中，减法可以用加法实现</p><p>补码中，符合位可以和数值部分一起参加计算</p><p>主存地址用无符号数表示</p><h3 id="2-2、运算方法与运算电路"><a href="#2-2、运算方法与运算电路" class="headerlink" title="2.2、运算方法与运算电路"></a><strong>2.2、运算方法与运算电路</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps70.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps71.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps72.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps73.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps74.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps75.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps76.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps77.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps78.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps79.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps80.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps81.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps82.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps83.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps84.jpg" alt="img"> </p><h3 id="2-3、浮点数的表示和运算"><a href="#2-3、浮点数的表示和运算" class="headerlink" title="2.3、浮点数的表示和运算"></a><strong>2.3、浮点数的表示和运算</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps85.jpg" alt="img"> </p><p>r:基数</p><p>变形补码就是双符号位</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps86.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps87.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps88.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps89.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps90.jpg" alt="img"> </p><p>浮点数的规格化可以增加表示精度</p><p>8421码是二进制编码的十进制数，如十进制16用8421码表示是0001 0110</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps91.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps92.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps93.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps94.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps95.jpg" alt="img"> </p><h2 id="第三章-存储系统"><a href="#第三章-存储系统" class="headerlink" title="第三章 存储系统"></a>第三章 <strong>存储系统</strong></h2><h3 id="3-1、"><a href="#3-1、" class="headerlink" title="3.1、"></a><strong>3.1、</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps96.jpg" alt="img"> </p><h3 id="3-2、主存储器"><a href="#3-2、主存储器" class="headerlink" title="3.2、主存储器"></a><strong>3.2、主存储器</strong></h3><p>DRAM需要定期刷新，ROM不需要定期刷新</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps97.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps98.jpg" alt="img"> </p><p>地址复用技术后，行列通选替代了片选线</p><p>DRAM默认使用地址复用技术</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps99.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps100.jpg" alt="img"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps101.jpg" alt="img"> </p><p>Cache:SRAM</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps102.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps103.jpg" alt="img"> </p><p>U盘是Flash Memory</p><p>DRAM一次完整的刷新过程只需要占用一个存储周期</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps104.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps105.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps106.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps107.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps108.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps109.jpg" alt="img"> </p><h3 id="大题"><a href="#大题" class="headerlink" title="大题"></a><strong>大题</strong></h3><p>、<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps110.jpg" alt="img"></p><h3 id="3-4、外部存储器"><a href="#3-4、外部存储器" class="headerlink" title="3.4、外部存储器"></a><strong>3.4、外部存储器</strong></h3><p>U盘（闪存）是一种只读存储器，是这样叫的，但可修改，除此之外还要固态硬盘（SSD）,PROM,EPROM,EEPROM</p><p>RAID技术会降低磁盘的磁记录密度和磁盘利用率</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps111.jpg" alt="img"> </p><p>SSD基于闪存（U盘）的技术，随机写比较慢，因为需要擦除；容易磨损</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps112.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps113.jpg" alt="img"> </p><p>RAID可靠性：镜像、校验</p><p>条带化：一块数据分到不同的磁盘上，如上图，在滑动过程中可以同时读取</p><h3 id="3-5、高速缓冲存储器"><a href="#3-5、高速缓冲存储器" class="headerlink" title="3.5、高速缓冲存储器"></a><strong>3.5、高速缓冲存储器</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps114.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps115.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps116.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps117.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps118.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps119.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps120.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps121.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps122.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps123.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps124.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps125.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps126.jpg" alt="img"> </p><p>突发传送可以只发送一次首地址和读命令；如果不是突发传送，则每次都需要发一次命令，传送一次</p><p>Ddd</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps127.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps128.jpg" alt="img"> </p><h3 id="3-6、虚拟存储器"><a href="#3-6、虚拟存储器" class="headerlink" title="3.6、虚拟存储器"></a><strong>3.6、虚拟存储器</strong></h3><p>TLB：SRAM</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps129.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps130.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps131.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps132.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps133.jpg" alt="img"> </p><p>快表采用相联存储器，按照查找内容访问</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps134.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps135.jpg" alt="img"> </p><h2 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a><strong>第四章 指令系统</strong></h2><h3 id="4-2、指令的寻址方式"><a href="#4-2、指令的寻址方式" class="headerlink" title="4.2、指令的寻址方式"></a><strong>4.2、指令的寻址方式</strong></h3><p>程序控制主要靠转移指令实现</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps136.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps137.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps138.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps139.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps140.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps141.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps142.jpg" alt="img"> </p><p>转移指令、子程度调用与返回指令，用于解决指令调用次序</p><p>无符号</p><p>进位&#x2F;借位标志CF CF&#x3D;1，借位了</p><p>零标志ZF ZF&#x3D;1，结果是0</p><p>有符号</p><p>符号标志SF</p><p>溢出标志OF</p><h3 id="大题-1"><a href="#大题-1" class="headerlink" title="大题"></a><strong>大题</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps143.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps144.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps145.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps146.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps147.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps148.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps149.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps150.jpg" alt="img"> </p><h2 id="第五章-中央处理器"><a href="#第五章-中央处理器" class="headerlink" title="第五章 中央处理器"></a><strong>第五章 中央处理器</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps151.jpg" alt="img"> </p><h3 id="5-1CPU功能和基本结构"><a href="#5-1CPU功能和基本结构" class="headerlink" title="5.1CPU功能和基本结构"></a><strong>5.1CPU功能和基本结构</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps152.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps153.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps154.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps155.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps156.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps157.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps158.jpg" alt="img"> </p><p>通用寄存器不可以替代指令寄存器</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps159.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps160.jpg" alt="img"> </p><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a><strong>5.2</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps161.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps162.jpg" alt="img"> </p><p>DMA传送一个数据，需要一个存取周期</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps163.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps164.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps165.jpg" alt="img"> </p><p>机器周期：一次总线事务访问一次主存或I&#x2F;O的时间</p><p>每个指令周期不一定有中断响应周期</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps166.jpg" alt="img"> </p><p>取指操作是控制器固有的功能，不需要在操作码控制下完成</p><p>在指令长度相同的情况下，所有指令的取指操作是相同的</p><p>中断周期是在指令执行完成后出现的</p><p>指令字长等于存储字长的前提下，取指周期等于机器周期</p><p>指令字长和机器字长的长度没有关系</p><h3 id="5-3-数据通路的功能和基本结构"><a href="#5-3-数据通路的功能和基本结构" class="headerlink" title="5.3 数据通路的功能和基本结构"></a><strong>5.3 数据通路的功能和基本结构</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps167.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps168.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps169.jpg" alt="img"> </p><p>数据总线双向，地址总线单向</p><h3 id="5-5-异常和中断机制"><a href="#5-5-异常和中断机制" class="headerlink" title="5.5 异常和中断机制"></a><strong>5.5 异常和中断机制</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps170.jpg" alt="img"> </p><h3 id="大题-2"><a href="#大题-2" class="headerlink" title="大题"></a><strong>大题</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps171.jpg" alt="img"> </p><h3 id="5-4-控制器的功能和工作原理"><a href="#5-4-控制器的功能和工作原理" class="headerlink" title="5.4 控制器的功能和工作原理"></a><strong>5.4 控制器的功能和工作原理</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps172.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps173.jpg" alt="img"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps174.jpg" alt="img"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps175.jpg" alt="img"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps176.jpg" alt="img"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps177.jpg" alt="img"><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps178.jpg" alt="img"> </p><h3 id="5-6、指令流水线"><a href="#5-6、指令流水线" class="headerlink" title="5.6、指令流水线"></a><strong>5.6、指令流水线</strong></h3><p>数据通路：数据在指令执行过程中所经过的路径，包括路径上的不见称为数据通路，如PC、ALU、通用寄存器、状态寄存器、异常和中断处理逻辑鞥</p><p>数据通路由控制部件控制，控制部件根据每条指令功能的不同生成对数据通路的控制信号。因此不包括控制部件</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps179.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps180.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps181.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps182.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps183.jpg" alt="img"> </p><p>流水CPU是时间并行</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps184.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps185.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps186.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps187.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps188.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps189.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps190.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps191.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps192.jpg" alt="img"> </p><h2 id="第六章-总线"><a href="#第六章-总线" class="headerlink" title="第六章 总线"></a><strong>第六章 总线</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps193.jpg" alt="img"> </p><h3 id="6-1、总线概述"><a href="#6-1、总线概述" class="headerlink" title="6.1、总线概述"></a><strong>6.1、总线概述</strong></h3><p>靠近CPU的总线速度较快</p><p>总线之间须通过桥接器相连，后者起流量交换的作用</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps194.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps195.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps196.jpg" alt="img"> </p><p>地址线：用于指定主存和I&#x2F;O接口电路的地址</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps197.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps198.jpg" alt="img"> </p><p>CPU识别地址和数据，通过控制单元（CU），在不同时间</p><p>主存识别地址和数据，通过总线的类型</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps199.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps200.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps201.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps202.jpg" alt="img"> </p><p>突发（猝发）传输：送首地址，连续读写。比如传送4个字的数据，只用发一次首地址（一个周期），再加4次传送数据（4个周期）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps203.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps204.jpg" alt="img"> </p><h3 id="6-2、总线事务和定时"><a href="#6-2、总线事务和定时" class="headerlink" title="6.2、总线事务和定时"></a><strong>6.2、总线事务和定时</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps205.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps206.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps207.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps208.jpg" alt="img"> </p><p>同步通信时，同步时钟信号不可由各设备提供，有误差</p><p>半同步通信时，握手信号的采样由同步时钟控制，</p><p>异步总线中，传送操作按需分配时间</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps209.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps210.jpg" alt="img"> </p><h2 id="第七章-输入输出系统"><a href="#第七章-输入输出系统" class="headerlink" title="第七章 输入输出系统"></a>第七章 <strong>输入输出系统</strong></h2><h3 id="7-1、I-O系统基本概念"><a href="#7-1、I-O系统基本概念" class="headerlink" title="7.1、I&#x2F;O系统基本概念"></a><strong>7.1、I&#x2F;O系统基本概念</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps211.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps212.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps213.jpg" alt="img"> </p><p>视频传输标准：VGA、DVI、HDMI</p><p>打字原理：击打式、非击打式</p><p>能否打出汉字：点阵式、活字式</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps214.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps215.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps216.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps217.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps218.jpg" alt="img"> </p><h3 id="7-2、I-O接口"><a href="#7-2、I-O接口" class="headerlink" title="7.2、I&#x2F;O接口"></a><strong>7.2、I&#x2F;O接口</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps219.jpg" alt="img"> </p><p>统一编址：依靠地址码区分</p><p>独立编址：特殊指令区分</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps220.jpg" alt="img"> </p><p>磁盘是串行设备，磁盘常见的SATA总线就是串行总线</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps221.jpg" alt="img"> </p><p>外部设备就是设备控制器</p><h3 id="7-3、I-O方式"><a href="#7-3、I-O方式" class="headerlink" title="7.3、I&#x2F;O方式"></a><strong>7.3、I&#x2F;O方式</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps222.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps223.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps224.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps225.jpg" alt="img"> </p><p>中断源编码：决定该中断的中断向量的位置（即中断服务程序的入口地址）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps226.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps227.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps228.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps229.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps230.jpg" alt="img"> </p><p>检查有无DMA请求：每次访问完内存的时候，比如取指周期的前半个周期使用了内存的系统总线，后半个周期就不用访问内存，就可以检查DMA请求</p><p>中断返回指令和无条件转移指令本质都是通过修改PC值改变程序执行顺序，虽然本质一样，但不能说中断返回指令就是无条件指令</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps231.jpg" alt="img"> </p><p>中断响应优先级从高到低：访管-》程序性-》重新启动</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps232.jpg" alt="img"> </p><p>CPU引起的：访管中断</p><p>I&#x2F;O中断：外设引起的</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps233.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps234.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps235.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps236.jpg" alt="img"> </p><p>中断隐指令：将中断触发器置0，硬件实现</p><p>中断：CPU与外设并行工作，传送与主程序串行工作</p><p>DMA：CPU与外设并行工作，传送与主程序并行工作</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps237.jpg" alt="img"> </p><p>DMA在预处理、后处理中断，传送时不需要中断</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps238.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps239.jpg" alt="img"> </p><p>DMA请求：每个机器周期结束，总线空闲时</p><p>中断：当前指令结束</p><p>优先级：DMA请求&gt;非屏蔽中断&gt;可屏蔽中断</p><p>直接存储器存取（DMA）不是一种程序控制方式，不用软件的方式实现</p><p>屏蔽字：屏蔽自己和低优先级中断</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps240.jpg" alt="img"> </p><p>I&#x2F;O控制：低速外设</p><p>中断机制：提高CPU效率和灵活性</p><p>DMA：CPU与外设并行</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps241.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps242.jpg" alt="img"> </p><h3 id="I-O大题"><a href="#I-O大题" class="headerlink" title="I&#x2F;O大题"></a><strong>I&#x2F;O大题</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps243.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps244.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps245.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps246.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps247.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps248.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps249.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps250.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps251.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps252.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps253.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps254.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps255.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/wps256.jpg" alt="img"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-因特网概述"><a href="#1-1-因特网概述" class="headerlink" title="1.1 因特网概述"></a>1.1 因特网概述</h2><h3 id="1-1-1、网络、互联网和因特网之间的区别与联系"><a href="#1-1-1、网络、互联网和因特网之间的区别与联系" class="headerlink" title="1.1.1、网络、互联网和因特网之间的区别与联系"></a>1.1.1、网络、互联网和因特网之间的区别与联系</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112210855872.png" alt="image-20230112210855872"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112210905802.png" alt="image-20230112210905802"> </p><ul><li>若干节点和链路互联形成<strong>网络</strong></li><li>若干网络通过路由器互联形成<strong>互连网（互联网）</strong></li><li><strong>因特网</strong>是当今世界上最大的互联网</li></ul><blockquote><p>注意：人们并没有严格区分互联网和因特网，许多人口中的互联网就是因特网</p></blockquote><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112211134871.png" alt="image-20230112211134871"> </p><h3 id="1-1-2、因特网概述"><a href="#1-1-2、因特网概述" class="headerlink" title="1.1.2、因特网概述"></a>1.1.2、因特网概述</h3><ul><li>因特网发展的三个阶段</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112211225695.png" alt="image-20230112211225695"></p><ul><li>因特网服务提供者（Internet Service Provider，ISP）<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.assets/image-20230112211748635.png" alt="image-20230112211748635"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112211850193.png" alt="image-20230112211850193"> </li><li>因特网已发展成为<strong>基于ISP的多层次结构的互连网络</strong><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112211955406.png" alt="image-20230112211955406"> </li><li>因特网的<strong>标准化</strong>工作<ul><li>因特网的标准化工作是<strong>面向公众</strong>的，其任何一个建议标准在成为因特网标准之前都以RFC技术文档的形式在因特网上发表。</li><li>RFC（Request For Comments）的意思是“<strong>请求评论</strong>”。任何人都可以从因特网上免费下载RFC文档（<a href="http://www.ietf.org/rfc.html%EF%BC%89%EF%BC%8C%E5%B9%B6%E9%9A%8F%E6%97%B6%E5%AF%B9%E6%9F%90%E4%B8%AARFC%E6%96%87%E6%A1%A3%E5%8F%91%E8%A1%A8%E6%84%8F%E8%A7%81%E5%92%8C%E5%BB%BA%E8%AE%AE%E3%80%82">http://www.ietf.org/rfc.html），并随时对某个RFC文档发表意见和建议。</a></li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112212247557.png" alt="image-20230112212247557"></li></ul></li><li>因特网的<strong>管理机构</strong><ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112212337810.png" alt="image-20230112212337810"></li></ul></li><li>因特网的<strong>组成</strong><ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112212433301.png" alt="image-20230112212433301"></li></ul></li></ul><h2 id="1-2-电路交换、分组交换和报文交换"><a href="#1-2-电路交换、分组交换和报文交换" class="headerlink" title="1.2 电路交换、分组交换和报文交换"></a>1.2 电路交换、分组交换和报文交换</h2><h3 id="1-2-1、电路交换、分组交换和报文交换"><a href="#1-2-1、电路交换、分组交换和报文交换" class="headerlink" title="1.2.1、电路交换、分组交换和报文交换"></a>1.2.1、电路交换、分组交换和报文交换</h3><ul><li>电路交换<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112212713479.png" alt="image-20230112212713479"><br>计算机之间的数据传送是<strong>突发式</strong>的，当使用<strong>电路交换</strong>来传送计算机数据时，其<strong>线路的传输效率一般都会很低</strong>，线路上真正用来传送数据的时间往往不到10%甚至1%。 </li><li>分组交换<ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112212909209.png" alt="image-20230112212909209"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112212942181.png" alt="image-20230112212942181"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112213022313.png" alt="image-20230112213022313"></li></ul></li><li>报文交换<ul><li>报文交换是分组交换的前身</li><li>在报文交换中，<strong>报文被整个地发送</strong>，而不是拆分成若干个分组进行发送</li><li>交换结点将报文<strong>整体接收完成后</strong>才能查找转发表，将这个报文<strong>转发到</strong>下一个节点</li><li>因此，报文交换比分组交换带来的<strong>转发时延要长很多</strong>，需要交换节点具有的<strong>缓存空间也大很多</strong>。</li></ul></li></ul><h3 id="1-2-2、三种交换的对比"><a href="#1-2-2、三种交换的对比" class="headerlink" title="1.2.2、三种交换的对比"></a>1.2.2、三种交换的对比</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112213314741.png" alt="image-20230112213314741"> </p><ul><li>若要连续传送大量的数据，并且数据传送时间远大于建立连接的时间，则使用电路交换可以有较高的传输效率。然而<strong>计算机的数据传送</strong>往往是<strong>突发式</strong>的，<strong>采用电路交换</strong>时通信<strong>线路的利用率会很低</strong>。</li><li>报文交换和分组交换都<strong>不需要建立连接</strong>（即预先分配通信资源），在<strong>传送计算机的突发数据</strong>时可以<strong>提高通信线路的利用率</strong>。</li><li>将报文构造成若干个更小的分组进行<strong>分组交换</strong>，比将整个报文进行报文交换的<strong>时延要小</strong>，并且还可以<strong>避免太长的报文长时间占用链路，有利于差错控制</strong>，同时具有更好的灵活性。</li></ul><h2 id="1-3-计算机网络定义与分类"><a href="#1-3-计算机网络定义与分类" class="headerlink" title="1.3 计算机网络定义与分类"></a>1.3 计算机网络定义与分类</h2><h3 id="1-3-1-计算机网络定义"><a href="#1-3-1-计算机网络定义" class="headerlink" title="1.3.1 计算机网络定义"></a>1.3.1 计算机网络定义</h3><p>计算机网络有着不同的定义，主要可以分为三类：广义的观点、资源共享的观点以及用户透明性的观点。</p><p>其中，资源共享更准确地描述出了计算机网络的基本特征。</p><p>资源共享观点的定义：以能够相互共享资源的方式<strong>互联</strong>起来的<strong>自治计算机系统的集合</strong>。这一定义可从以下四个方面来理解：</p><ol><li>计算机网络建立的主要目的是<strong>实现资源共享</strong><ul><li>资源共享包括硬件资源共享、软件资源共享以及数据共享。</li><li>用户既可以使用本地计算机资源，又可通过网络访问联网的远程计算机资源，还可以调用网络中几台不同的计算机共同完成任务。</li></ul></li><li>互联的计算机是分布在不同地理位置的多台独立的“自治计算机”<ul><li>互联的计算机之间没有明确的主从关系。</li><li>每台计算机即可联网工作，也可脱网工作。联网计算机可以为本地用户提供服务，也可为远程用户服务。</li><li>独立的“自治计算机”称为<strong>主机</strong>（Host），在网络中也称为结点（Node）或节点。</li><li>结点不仅仅包含计算机，其它通信设备也可以。</li></ul></li><li>连网计算机之间的通信必须遵循共同的网络协议<ul><li>不同的计算机为了保持正常的通信，必须遵循某种事先规定好的规范。这就是网络协议。</li></ul></li><li>互联计算机之间的连接需要有一条通道，即由传输介质实现物理互联<ul><li>物理通道既可以是双绞线、同轴电缆或光纤等“有线”介质；也可以是激光等“无线”介质。</li></ul></li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112214317404.png" alt="image-20230112214317404"></p><h3 id="1-3-2-计算机网络分类"><a href="#1-3-2-计算机网络分类" class="headerlink" title="1.3.2 计算机网络分类"></a>1.3.2 计算机网络分类</h3><h4 id="1、交换方式"><a href="#1、交换方式" class="headerlink" title="1、交换方式"></a>1、交换方式</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112214532464.png" alt="image-20230112214532464"> </p><h4 id="2、使用者"><a href="#2、使用者" class="headerlink" title="2、使用者"></a>2、使用者</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112214624383.png" alt="image-20230112214624383"></p><h4 id="3、-传输介质"><a href="#3、-传输介质" class="headerlink" title="3、 传输介质"></a>3、 传输介质</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112214729263.png" alt="image-20230112214729263"></p><h4 id="4、覆盖范围"><a href="#4、覆盖范围" class="headerlink" title="4、覆盖范围"></a>4、覆盖范围</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112214822586.png" alt="image-20230112214822586"> </p><h4 id="5、拓扑结构"><a href="#5、拓扑结构" class="headerlink" title="5、拓扑结构"></a>5、拓扑结构</h4><p>1）星型拓扑结构</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909222425138.png" alt="image-20220909222425138"> </p><p>一台设备为中央结点，其他外围结点都通过一条点到点的链路单独与中心结点相连，其他外围结点之间的通信必须通过中心结点。<br>优点：结构简单、容易实现、容易添加、易于维护、管理<br>缺点：对中央结点的要求高；如果中央结点发生故障，整个系统瘫痪</p><p>2）环形拓扑结构<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909222658297.png" alt="image-20220909222658297"> </p><p>各结点通过链路相连，形成一个环，信息单向流动，线路共享<br>优点：结构简单，容易实现，传输延迟时间固定<br>缺点：增加新结点困难，链路故障对网络影响大（一处故障，全部瘫痪）</p><p>3）总线型拓扑结构<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909222932302.png" alt="image-20220909222932302"> </p><p>所有结点均连接到一条称为总线的公共线路上，所有结点共享同一条数据通道，结点间通过广播进行通信<br>优点：结构简单，易于实现，组网灵活，所用的线缆最短，增加和撤销结点灵活，个别故障不影响整体<br>缺点：传输能力低，安全性低，总线故障会导致网络瘫痪，结点数量增多也会影响性能</p><p>4）树型拓扑结构<br>信息交换主要在上、下结点之间进行，相邻及同层结点一般不进行数据交换<br>缺点：延迟较大，适用于分级管理和控制的网络系统</p><p>5）网状拓扑结构<br>由不同地点、各自独立的结点链路组成，每个结点至少有一条链路与其他结点相连，每两个结点间的链路可能不止一条，需要进行路由选择<br>缺点：结构复杂、管理难度大、头则费用高</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220918155720256.png" alt="image-20220918155720256"></p><h2 id="1-4-计算机网络组成"><a href="#1-4-计算机网络组成" class="headerlink" title="1.4 计算机网络组成"></a>1.4 计算机网络组成</h2><p>计算机网络的两大基本功能：数据处理和数据通信</p><h4 id="1-资源子网"><a href="#1-资源子网" class="headerlink" title="1. 资源子网"></a>1. 资源子网</h4><p>资源子网  由主机（Host）、终端（Terminal）、终端控制器、连网外设、各种软件资源与信息资源组成。资源子网负责全网的数据处理业务，向网络用户提供各种网络资源与网络服务。<br>         主机：资源子网的主要组成单元。可以是各种计算机。主机是软件资源和信息资源的拥有者<br>         终端（Terminal）：直接面向用户的交互设备。<br>         连网外设：网络中的一些共享设备，如打印机、硬盘等</p><h4 id="2-通信子网"><a href="#2-通信子网" class="headerlink" title="2. 通信子网"></a>2. 通信子网</h4><p>通信子网  由通信控制处理机，通信线路与其他通信设备组成。通信子网负责完成网络数据传输、路由与分组转发等通信处理任务。</p><p><strong>通信控制处理机</strong>：<br>其主要功能一是作为主机和网络接口，负责管理和收发主机和网络所交换的信息；<br>二是作为发送信息、接收信息、交换信息和转发信息的通信设备，负责接收其他网络节点送来的信息，并选择一条合适的通信线路发送出去，完成信息的交换和转发功能。 </p><p><strong>通信线路：</strong><br> 通信线路：通信线路是网络节点间信息传输的通道，通信线路的传输媒体主要有双绞线、同轴电缆、光纤、无线电和微波等。</p><h2 id="1-5-计算机网络体系结构"><a href="#1-5-计算机网络体系结构" class="headerlink" title="1.5 计算机网络体系结构"></a>1.5 计算机网络体系结构</h2><ul><li>网络体系结构(Network Architecture)是计算机网络的各层及其协议的集合。 </li><li>体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。</li><li>体系结构只讨论定义，不讨论实现</li><li>实现(implementation)是遵循这种体系结构的前提下用何种硬件或软件完成这些功能的问题。</li><li>体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件。</li></ul><h3 id="1-5-1-常见的三种体系结构"><a href="#1-5-1-常见的三种体系结构" class="headerlink" title="1.5.1 常见的三种体系结构"></a>1.5.1 常见的三种体系结构</h3><p>物理层不参与数据封装</p><p>物理层：比特，数据链路层：帧，网络层：分组报文段，运输层：报文段</p><p>OSI的</p><ul><li>表示层：数据格式转换及压缩</li></ul><p>TCP&#x2F;IP参考模型：</p><ul><li>网际层：IP数据报在多个网络间的传输</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222838248.png" alt="image-20230112222838248"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222909262.png" alt="image-20230112222909262"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222920370.png" alt="image-20230112222920370"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113152419834.png" alt="image-20230113152419834"></p><p>表示层：数据格式转换</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113152833804.png" alt="image-20230113152833804"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113153339810.png" alt="image-20230113153339810"> </p><h3 id="1-5-2-分层的必要性"><a href="#1-5-2-分层的必要性" class="headerlink" title="1.5.2 分层的必要性"></a>1.5.2 分层的必要性</h3><p>“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。 </p><ul><li>相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。 </li><li>“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。</li></ul><p>网络层次的好处：</p><ol><li><strong>各层之间是独立的</strong>：高层不需要知道低层是如何实现功能的，仅需要得到该层的接口即可</li><li><strong>灵活性好</strong>：如果对某一层次进行修改，只要接口不变，不影响其他层</li><li><strong>结构上可分割开</strong>：各层都采用最合适的技术来实现</li><li><strong>易于实现和维护</strong>：一个系统分为多个小部分，问题容易解决</li><li><strong>能促进标准化工作</strong>：每层的功能和服务都有精确的说明</li></ol><p><strong>各层的功能：</strong></p><ol><li><strong>差错控制</strong>：检测或纠正数据在传输过程中的差错，使得和网络对等端的响应层次的通信更加可靠</li><li><strong>流量控制</strong>：控制发送数据的频率</li><li><strong>分段和重装</strong>：在发送端将数据划分为适当的大小，在接收端复原</li><li><strong>复用和分用</strong>：发送端几个高层会话复用一条低层的连接，在接收端再进行分用</li><li><strong>连接建立和释放</strong>：交换数据前先建立一条逻辑连接，待数据传输结束后再释放连接</li><li><strong>寻址</strong>：发送端的分组通过寻址传送到目的端</li></ol><p>缺点：有些功能可能在不同层次重复出现，产生额外开销</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223140019.png" alt="image-20230112223140019"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223303042.png" alt="image-20230112223303042"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223337195.png" alt="image-20230112223337195"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223356285.png" alt="image-20230112223356285"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223413354.png" alt="image-20230112223413354"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223425135.png" alt="image-20230112223425135"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223451104.png" alt="image-20230112223451104"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223713748.png" alt="image-20230112223713748"></p><h3 id="1-5-3-分层思想举例"><a href="#1-5-3-分层思想举例" class="headerlink" title="1.5.3 分层思想举例"></a>1.5.3 分层思想举例</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112223909740.png" alt="image-20230112223909740"> </p><h3 id="1-5-4-专用术语"><a href="#1-5-4-专用术语" class="headerlink" title="1.5.4 专用术语"></a>1.5.4 专用术语</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224202145.png" alt="image-20230112224202145"> </p><h4 id="1、实体"><a href="#1、实体" class="headerlink" title="1、实体"></a>1、实体</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224301854.png" alt="image-20230112224301854"> </p><h4 id="2、-协议"><a href="#2、-协议" class="headerlink" title="2、 协议"></a>2、 协议</h4><p>网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。</p><ul><li><strong>协议</strong>是控制两个对等实体在“<strong>水平方向</strong>” 进行“<strong>逻辑通信</strong>”的<strong>规则</strong>的集合。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224420408.png" alt="image-20230112224420408"> </p><p>网络协议的三要素：</p><ul><li>语法，用户数据与控制信息的结构与格式。例如，地址字段多长以及它在整个分组中的什么位置。</li><li>语义，需要发送何种控制信息，以及要完成的动作与响应。</li><li>时序（或同步），对事件实现顺序的详细说明。</li></ul><h4 id="3、服务"><a href="#3、服务" class="headerlink" title="3、服务"></a>3、服务</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224504652.png" alt="image-20230112224504652"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224520676.png" alt="image-20230112224520676"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224533996.png" alt="image-20230112224533996"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224546435.png" alt="image-20230112224546435"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224600080.png" alt="image-20230112224600080"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112224611647.png" alt="image-20230112224611647"></p><h2 id="1-6-计算机网络性能指标"><a href="#1-6-计算机网络性能指标" class="headerlink" title="1.6 计算机网络性能指标"></a>1.6 计算机网络性能指标</h2><p>计算机网络的性能指标被用来从不同方面<strong>度量计算机网络的性能</strong>。</p><h3 id="1-6-1-速率"><a href="#1-6-1-速率" class="headerlink" title="1.6.1 速率"></a>1.6.1 速率</h3><ul><li><strong>比特</strong>（bit，记为小写b）是计算机中<strong>数据量的基本单位</strong>，一个比特就是<strong>二进制数字中的一个1或0</strong>。</li><li>数据量的常用单位有<strong>字节</strong>（byte，记为大写B）、<strong>千字节</strong>（KB）、<strong>兆字节</strong>（MB）、<strong>吉字节</strong>（GB）以及<strong>太字节</strong>（TB）。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112215547288.png" alt="image-20230112215547288"> </p><ul><li>速率是指<strong>数据的传送速率</strong>（即<strong>每秒传送多少个比特</strong>），也称为<strong>数据率</strong>（Data Rate）或<strong>比特率</strong>（Bit Rate）。</li><li>速率的基本单位是<strong>比特&#x2F;秒</strong>（bit&#x2F;s，可简记为b&#x2F;s，有时也记为bps，即bit per second）。速率的常用单位有千比特&#x2F;秒（kb&#x2F;s或kbps）、<strong>兆比特&#x2F;秒</strong>（Mb&#x2F;s或Mbps）、<strong>吉比特&#x2F;秒</strong>（Gb&#x2F;s或Gbps）以及<strong>太比特&#x2F;秒</strong>（Tb&#x2F;s或Tbps）。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112215731111.png" alt="image-20230112215731111"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112215759689.png" alt="image-20230112215759689"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112215845886.png" alt="image-20230112215845886"> </p><h3 id="1-6-2-带宽"><a href="#1-6-2-带宽" class="headerlink" title="1.6.2 带宽"></a>1.6.2 带宽</h3><ul><li>“带宽”(bandwidth)本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。</li><li>现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b&#x2F;s (bit&#x2F;s)。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112220007576.png" alt="image-20230112220007576"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112220116265.png" alt="image-20230112220116265"> </p><h3 id="1-6-3-吞吐量"><a href="#1-6-3-吞吐量" class="headerlink" title="1.6.3 吞吐量"></a>1.6.3 吞吐量</h3><ul><li>吞吐量是指在<strong>单位时间内通过某个网络或接口的实际数据量</strong>。吞吐量常被用于对实际网络的测量，以便获知到底有多少数据量通过了网络。</li><li><strong>吞吐量受网络带宽的限制。</strong></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221215521.png" alt="image-20230112221215521"> </p><h3 id="1-6-4-延迟"><a href="#1-6-4-延迟" class="headerlink" title="1.6.4 延迟"></a>1.6.4 延迟</h3><p>时延是指数据从网络的一端传送到另一端所耗费的时间，也称为延迟或迟延。 数据可由一个或多个分组、甚至是一个比特构成。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221310374.png" alt="image-20230112221310374"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221323465.png" alt="image-20230112221323465"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221357053.png" alt="image-20230112221357053"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221414554.png" alt="image-20230112221414554"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221430702.png" alt="image-20230112221430702"> </p><ul><li>发送延迟（传输时延 ）    发送数据时，数据块从结点进入到传输媒体所需要的时间。</li><li>发送速率      通常是以信道最高数据率发送数据，因此就是信道带宽。</li></ul><p>$$<br>{发送延迟}&#x3D;\frac{数据帧长度（比特）}{发送速率（比特&#x2F;秒）}<br>$$</p><ul><li>传播延迟    电磁波在信道中需要传播一定的距离而花费的时间。 </li><li>信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。</li></ul><p>$$<br>{传播延迟}&#x3D;\frac{信道长度（米）}{信号在信道上的传播速率（米&#x2F;秒）}<br>$$</p><ul><li>处理延迟    交换结点为存储转发而进行一些必要的处理所花费的时间。 </li><li>排队延迟    结点缓存队列中分组排队所经历的时延。</li><li>排队延迟的长短往往取决于网络中当时的通信量，随时间变化会很大。</li><li>分组从一个结点转发到另一个结点所经历的总延迟就是以上四种延迟之和： </li><li>总延迟 &#x3D; 发送延迟 + 传播延迟 + 处理延迟 + 排队延迟</li></ul><h3 id="1-6-5-时延带宽积"><a href="#1-6-5-时延带宽积" class="headerlink" title="1.6.5 时延带宽积"></a>1.6.5 时延带宽积</h3><ul><li>时延带宽积是<strong>传播时延</strong>和<strong>带宽</strong>的乘积。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221547021.png" alt="image-20230112221547021"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221621409.png" alt="image-20230112221621409"></p><h3 id="1-6-6-往返时间RTT"><a href="#1-6-6-往返时间RTT" class="headerlink" title="1.6.6 往返时间RTT"></a>1.6.6 往返时间RTT</h3><ul><li>往返时间（Round-Trip Time，RTT）是指从发送端发送数据分组开始，到发送端收到接收端发来的相应确认分组为止，总共耗费的时间。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112221757476.png" alt="image-20230112221757476"> </p><h3 id="1-6-7-利用率"><a href="#1-6-7-利用率" class="headerlink" title="1.6.7 利用率"></a>1.6.7 利用率</h3><ul><li>分为<strong>信道利用率</strong>和<strong>网络利用率</strong>。</li><li><strong>信道利用率</strong>指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。</li><li><strong>网络利用率</strong>则是全网络的信道利用率的加权平均值。</li><li>信道利用率并非越高越好。<strong>当某信道的利用率增大时，该信道引起的时延也就迅速增加。</strong></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222148289.png" alt="image-20230112222148289"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222207347.png" alt="image-20230112222207347"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222218673.png" alt="image-20230112222218673"> </p><h3 id="1-6-8-丢包率"><a href="#1-6-8-丢包率" class="headerlink" title="1.6.8 丢包率"></a>1.6.8 丢包率</h3><ul><li>丢包率是指在一定的时间范围内，传输过程中<strong>丢失的分组数量与总分组数量的比率</strong>。</li></ul><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222304171.png" alt="image-20230112222304171"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230112222328852.png" alt="image-20230112222328852"> </p><h3 id="1-6-9-误码率"><a href="#1-6-9-误码率" class="headerlink" title="1.6.9 误码率"></a>1.6.9 误码率</h3><ul><li>误码率又称码元差错率，是指在传输的码元总数中错误接收的码元数所占的比例。</li><li>码元指对数据进行编码的一个编码单元。</li><li>误码率指某一段时间的平均误码率，对于同一条数据电路由于测量的时间长短不同，误码率就不一样。</li></ul><h2 id="1-7-习题"><a href="#1-7-习题" class="headerlink" title="1.7 习题"></a>1.7 习题</h2><ol><li>D</li><li>C</li><li>C</li><li>B</li><li>A</li><li>A</li><li><strong>C</strong>(不可直接约分)</li><li>B</li><li>A</li><li>B</li><li>D</li><li>D</li><li>A</li><li>C</li><li>B</li><li><strong>A</strong></li><li><strong>B</strong></li><li><strong>B</strong></li><li><strong>B</strong></li><li><strong>D</strong></li><li>B</li><li>A</li><li>C</li><li>C*</li><li>A</li><li><strong>D</strong></li><li><strong>B</strong></li><li><strong>B</strong></li><li><strong>B</strong></li><li>C</li><li>C</li><li><strong>B</strong></li><li>D</li><li>C*</li><li>A</li><li><strong>C</strong></li><li>C</li><li><strong>B</strong></li></ol><h1 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h1><h2 id="2-1-物理层概述"><a href="#2-1-物理层概述" class="headerlink" title="2.1 物理层概述"></a>2.1 物理层概述</h2><p>作用：尽可能地屏蔽掉不同传输媒体和通信手段的差异，为数据传输提供可靠的环境。</p><h3 id="2-1-1-物理层要实现的功能"><a href="#2-1-1-物理层要实现的功能" class="headerlink" title="2.1.1 物理层要实现的功能"></a>2.1.1 物理层要实现的功能</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113200012729.png" alt="image-20230113200012729"> </p><ul><li>物理层要尽可能地屏蔽掉物理设备、 传输媒体、 通信手段的不同， 使数据链路层感觉不到这些差异， 只考虑完成本层的协议和服务。</li><li>给其服务用户 （ 数据链路层） 在一条物理传输媒体上传送和接收比特流的能力，为此物理层应该解决物理连接的建立、 维持和释放问题。</li><li>在两个相邻系统之间对数据电路进行唯一的标识。</li></ul><h3 id="2-1-2-物理层接口特性"><a href="#2-1-2-物理层接口特性" class="headerlink" title="2.1.2 物理层接口特性"></a>2.1.2 物理层接口特性</h3><p>物理层协议的主要任务就是确定与传输媒体的接口的一些特性，即： </p><p>机械特性    指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。</p><p>电气特性    指明在接口电缆的各条线上出现的电压的范围。</p><p>功能特性    指明某条线上出现的某一电平的电压表示何种意义。</p><p>规程特性    指明对于不同功能的各种可能事件的出现顺序。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113200513099.png" alt="image-20230113200513099"> </p><h2 id="2-2-物理层下面的传输媒体"><a href="#2-2-物理层下面的传输媒体" class="headerlink" title="2.2 物理层下面的传输媒体"></a>2.2 物理层下面的传输媒体</h2><h3 id="2-2-1-传输媒体的分类"><a href="#2-2-1-传输媒体的分类" class="headerlink" title="2.2.1 传输媒体的分类"></a>2.2.1 传输媒体的分类</h3><ul><li><strong>传输媒体</strong>是计算机网络设备之间的物理通路，也称为传输介质或传输媒介。</li><li>传输媒体在物理层之下，并<strong>不包含在计算机网络体系结构中</strong>。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113200848245.png" alt="image-20230113200848245"> </p><h3 id="2-2-2-导向型传输媒体"><a href="#2-2-2-导向型传输媒体" class="headerlink" title="2.2.2 导向型传输媒体"></a>2.2.2 导向型传输媒体</h3><p><strong>同轴电缆</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113200932651.png" alt="image-20230113200932651"> </p><p><strong>双绞线</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201018775.png" alt="image-20230113201018775"> </p><table><thead><tr><th><strong>双绞线类别</strong></th><th><strong>带 宽</strong></th><th><strong>线缆特点</strong></th><th><strong>典型应用</strong></th></tr></thead><tbody><tr><td>3</td><td>16MHz</td><td>2对4芯双绞线</td><td>传统以太网10Mb&#x2F;s；模拟电话</td></tr><tr><td>4</td><td>20MHz</td><td>4对8芯双绞线</td><td>曾用于令牌局域网</td></tr><tr><td>5</td><td>100MHz</td><td>与4类相比增加了绞合度</td><td>传输速率不超过100Mb&#x2F;s的应用</td></tr><tr><td>5E（超5类）</td><td>125MHz</td><td>与5类相比衰减更小</td><td>传输速率不超过1Gb&#x2F;s的应用</td></tr><tr><td>6</td><td>250MHz</td><td>与5类相比改善了串扰等性能</td><td>传输速率高于1Gb&#x2F;s的应用</td></tr><tr><td>7</td><td>600MHz</td><td>使用屏蔽双绞线</td><td>传输速率高于10Gb&#x2F;s的应用</td></tr></tbody></table><p><strong>光纤</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201147517.png" alt="image-20230113201147517"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201211949.png" alt="image-20230113201211949"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201223817.png" alt="image-20230113201223817"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201302509.png" alt="image-20230113201302509"></p><p>如果光纤的直径减小到只有光的一个波长大小，那么光沿直线传播 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201314882.png" alt="image-20230113201314882"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201355407.png" alt="image-20230113201355407"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201408018.png" alt="image-20230113201408018"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201418432.png" alt="image-20230113201418432"> </p><h3 id="2-2-3-非导向型传输媒体"><a href="#2-2-3-非导向型传输媒体" class="headerlink" title="2.2.3 非导向型传输媒体"></a>2.2.3 非导向型传输媒体</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201454324.png" alt="image-20230113201454324"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201504484.png" alt="image-20230113201504484"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201529658.png" alt="image-20230113201529658"> </p><p><strong>无线电波</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201623254.png" alt="image-20230113201623254"> </p><p><strong>微波</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201657415.png" alt="image-20230113201657415"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201705087.png" alt="image-20230113201705087"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201715117.png" alt="image-20230113201715117"> </p><p><strong>红外线</strong></p><p>已被淘汰，但手机中一般还保留</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113201759373.png" alt="image-20230113201759373"></p><h2 id="2-3-传输方式"><a href="#2-3-传输方式" class="headerlink" title="2.3 传输方式"></a>2.3 传输方式</h2><h3 id="2-3-1-串行传输和并行传输"><a href="#2-3-1-串行传输和并行传输" class="headerlink" title="2.3.1 串行传输和并行传输"></a>2.3.1 串行传输和并行传输</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113202548077.png" alt="image-20230113202548077"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113202602626.png" alt="image-20230113202602626"></p><h3 id="2-3-2-同步传输和异步传输"><a href="#2-3-2-同步传输和异步传输" class="headerlink" title="2.3.2 同步传输和异步传输"></a>2.3.2 同步传输和异步传输</h3><p><strong>同步传输</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113202642271.png" alt="image-20230113202642271"> </p><p><strong>异步传输</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113202703307.png" alt="image-20230113202703307"> </p><h3 id="2-3-3-单向通信、双向交替通信和双向同时通信"><a href="#2-3-3-单向通信、双向交替通信和双向同时通信" class="headerlink" title="2.3.3 单向通信、双向交替通信和双向同时通信"></a>2.3.3 单向通信、双向交替通信和双向同时通信</h3><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113202802782.png" alt="image-20230113202802782"> </p><h2 id="2-4-编码与调制"><a href="#2-4-编码与调制" class="headerlink" title="2.4 编码与调制"></a>2.4 编码与调制</h2><h3 id="2-4-1-编码与调制的基本概念"><a href="#2-4-1-编码与调制的基本概念" class="headerlink" title="2.4.1 编码与调制的基本概念"></a>2.4.1 编码与调制的基本概念</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203227857.png" alt="image-20230113203227857"> </p><ul><li>码元<ul><li>在使用时间域的波形表示信号时，代表不同离散数值的<strong>基本波形</strong>称为码元。</li></ul></li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203314541.png" alt="image-20230113203314541"> </p><h3 id="2-4-2-常用编码方式"><a href="#2-4-2-常用编码方式" class="headerlink" title="2.4.2 常用编码方式"></a>2.4.2 常用编码方式</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203610106.png" alt="image-20230113203610106"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203636057.png" alt="image-20230113203636057"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203700200.png" alt="image-20230113203700200"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203715798.png" alt="image-20230113203715798"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203737885.png" alt="image-20230113203737885"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113203832432.png" alt="image-20230113203832432"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113204005240.png" alt="image-20230113204005240"> </p><h3 id="2-4-3-基本的带通调制方法和混合调制方法"><a href="#2-4-3-基本的带通调制方法和混合调制方法" class="headerlink" title="2.4.3 基本的带通调制方法和混合调制方法"></a>2.4.3 基本的带通调制方法和混合调制方法</h3><p><strong>基本的带通调制方法</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113204043461.png" alt="image-20230113204043461"> </p><p><strong>混合调制方法</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113204148945.png" alt="image-20230113204148945"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113204201587.png" alt="image-20230113204201587"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113205414163.png" alt="image-20230113205414163"></p><h2 id="2-5-信道的极限容量"><a href="#2-5-信道的极限容量" class="headerlink" title="2.5 信道的极限容量"></a>2.5 信道的极限容量</h2><h3 id="2-5-1-造成信号失真的主要因素"><a href="#2-5-1-造成信号失真的主要因素" class="headerlink" title="2.5.1 造成信号失真的主要因素"></a>2.5.1 造成信号失真的主要因素</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113205958065.png" alt="image-20230113205958065"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210016115.png" alt="image-20230113210016115"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210056801.png" alt="image-20230113210056801"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210134007.png" alt="image-20230113210134007"> </p><h3 id="2-5-2-奈氏准则"><a href="#2-5-2-奈氏准则" class="headerlink" title="2.5.2 奈氏准则"></a>2.5.2 奈氏准则</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210359598.png" alt="image-20230113210359598"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210432818.png" alt="image-20230113210432818"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210454097.png" alt="image-20230113210454097"> </p><h3 id="2-5-3-香农公式"><a href="#2-5-3-香农公式" class="headerlink" title="2.5.3 香农公式"></a>2.5.3 香农公式</h3><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210556222.png" alt="image-20230113210556222"> </p><ul><li>信道的频率带宽W或信道中的信噪比S&#x2F;N越大，信道的极限信息传输速率C就越高。</li><li>实际信道不可能无限制地提高频率带宽W或信道中的信噪比S&#x2F;N。</li><li>实际信道中能够达到的信息传输速率，要比香农公式给出的极限传输速率低不少。<br>这是因为在实际信道中，信号还要受到其他一些损伤，例如各种脉冲干扰和信号衰<br>减等，这些因素在香农公式中并未考虑。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210732789.png" alt="image-20230113210732789"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113210922240.png" alt="image-20230113210922240"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113211010924.png" alt="image-20230113211010924"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113211053980.png" alt="image-20230113211053980"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113211202404.png" alt="image-20230113211202404"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113211257263.png" alt="image-20230113211257263"> </p><h2 id="2-6-信道复用技术"><a href="#2-6-信道复用技术" class="headerlink" title="2.6 信道复用技术"></a>2.6 信道复用技术</h2><h3 id="2-6-1-信道复用技术的基本原理"><a href="#2-6-1-信道复用技术的基本原理" class="headerlink" title="2.6.1 信道复用技术的基本原理"></a>2.6.1 信道复用技术的基本原理</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212311482.png" alt="image-20230113212311482"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212325816.png" alt="image-20230113212325816"> </p><h3 id="2-6-2-常见的信道复用技术"><a href="#2-6-2-常见的信道复用技术" class="headerlink" title="2.6.2 常见的信道复用技术"></a>2.6.2 常见的信道复用技术</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212346112.png" alt="image-20230113212346112"> </p><p><strong>频分复用FDM</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212435504.png" alt="image-20230113212435504"></p><p><strong>时分复用TDM</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212502435.png" alt="image-20230113212502435"> </p><p><strong>波分复用WDM</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212553171.png" alt="image-20230113212553171"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212600531.png" alt="image-20230113212600531"> </p><p><strong>码分复用CDM</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212624139.png" alt="image-20230113212624139"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212716301.png" alt="image-20230113212716301"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212728283.png" alt="image-20230113212728283"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212741104.png" alt="image-20230113212741104"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212756022.png" alt="image-20230113212756022"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212810268.png" alt="image-20230113212810268"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113212942268.png" alt="image-20230113212942268"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909154010668.png" alt="image-20220909154010668"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909154520706.png" alt="image-20220909154520706"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909154752602.png" alt="image-20220909154752602"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909155023400.png" alt="image-20220909155023400"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909155318455.png" alt="image-20220909155318455"></p><p>V:传播速率</p><p>L：光波大小</p><p>F：频带大小 </p><h2 id="2-7-习题"><a href="#2-7-习题" class="headerlink" title="2.7 习题"></a>2.7 习题</h2><ol><li>D</li><li>C</li><li><strong>C</strong></li><li>A</li><li>B</li><li><strong>C</strong><br>光纤不受电磁干扰和噪声影响</li><li>C</li><li><strong>B</strong></li><li><strong>B</strong><br>WIFI一般使用2.4GHz和5.8GHz，是微波</li><li>B</li><li>D</li><li>B</li><li>B</li><li>B</li><li>A</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113221244928.png" alt="image-20230113221244928"></li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113221317773.png" alt="image-20230113221317773"></li><li>C</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113221348772.png" alt="image-20230113221348772"></li><li>C</li><li>A</li><li>D</li><li>C</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113221652093.png" alt="image-20230113221652093"> </li><li>A</li><li>B</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113221912277.png" alt="image-20230113221912277"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113222029754.png" alt="image-20230113222029754"> </li><li>B</li><li>B</li><li>C</li><li>A</li><li>D</li><li>B</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113222250967.png" alt="image-20230113222250967"> </li><li>C</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113222446252.png" alt="image-20230113222446252"> </li><li>C</li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113222601214.png" alt="image-20230113222601214"> </li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20230113222645872.png" alt="image-20230113222645872"></li></ol><h1 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h1><h2 id="3-1-数据链路层的功能"><a href="#3-1-数据链路层的功能" class="headerlink" title="3.1 数据链路层的功能"></a>3.1 数据链路层的功能</h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909161944314.png" alt="image-20220909161944314"> </p><p>封装成帧</p><p>透明传输</p><p>差错检测</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909162238337.png" alt="image-20220909162238337"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909162454805.png" alt="image-20220909162454805"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909162746590.png" alt="image-20220909162746590"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163038787.png" alt="image-20220909163038787"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163047776.png" alt="image-20220909163047776"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163217249.png" alt="image-20220909163217249"> </p><p>MTU最大传输单元</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163428287.png" alt="image-20220909163428287"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163901746.png" alt="image-20220909163901746"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163938107.png" alt="image-20220909163938107"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909163948011.png" alt="image-20220909163948011"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909164133584.png" alt="image-20220909164133584"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909164201988.png" alt="image-20220909164201988"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909164538897.png" alt="image-20220909164538897"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909164635170.png" alt="image-20220909164635170"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909164833311.png" alt="image-20220909164833311"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165037345.png" alt="image-20220909165037345"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165118512.png" alt="image-20220909165118512"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165210380.png" alt="image-20220909165210380"> </p><p>CRC检错，不纠错</p><p>k+n</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165343971.png" alt="image-20220909165343971"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165622775.png" alt="image-20220909165622775"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165701646.png" alt="image-20220909165701646"> </p><h2 id="3-2-点对点协议ppp"><a href="#3-2-点对点协议ppp" class="headerlink" title="3.2 点对点协议ppp"></a>3.2 点对点协议ppp</h2><p>HDLC</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165804271.png" alt="image-20220909165804271"> </p><p>IETF制定，</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909165930232.png" alt="image-20220909165930232"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909170047915.png" alt="image-20220909170047915"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220909170213833.png" alt="image-20220909170213833"> </p><h3 id="3-2-2"><a href="#3-2-2" class="headerlink" title="3.2.2"></a>3.2.2</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913151805352.png" alt="image-20220913151805352"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913153153655.png" alt="image-20220913153153655"> </p><h2 id="3-3-传统以太网"><a href="#3-3-传统以太网" class="headerlink" title="3.3 传统以太网"></a>3.3 传统以太网</h2><p>现有的高速以太网、吉比特以太网及10 吉比特以太网已经成为局域网的代名词。</p><p>1）局域网优点：<br>    地理覆盖范围小、站点数量少，具有传输速率高、延时和误码率低、系统扩展方便、可靠性及可用性高等优点</p><p>2）局域网三种拓扑结构：</p><p>星型拓扑结构、环型拓扑结构及总线型拓扑结构</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913153405142.png" alt="image-20220913153405142"> </p><p>集线器：hub</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913153925544.png" alt="image-20220913153925544"> </p><p>局域网介质及广播功能</p><ul><li>局域网传播介质：<br>双绞线，造价比较低</li><li>局域网的广播功能</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913154107046.png" alt="image-20220913154107046"> </p><p>实现共享信道的技术</p><p>1）静态划分：<br>    静态划分主要包括频分多路复用、时分多路复用、波分多路复用及码分多路复用等技术，各个用户独享自己分配到的信道资源，不会与其他用户产生冲突，但是这种静态划分信道的方法代价较大，并不适合局域网。动态接入也称为多点接入，在数据通信过程中，通信信道动态分配给各个站点。<br>2）动态接入 ：</p><ul><li><p>随机接入：</p><p>​ 随机接入的特点是接入站点均可以随机发送数据，使用起来非常灵活，是局域网主要采用的模式。在随机接入工作模式下，如果有两个或者两个以上的站点同时发送数据，那么就会在共享信道上产生碰撞，也就是发生了冲突，进而导致站点数据发送失败。所以 随机接入要求必须有专门的协议来加以控制，如 CSMA&#x2F;CD 协议。</p></li><li><p>受控接入：</p><p>​受控接入的特点是想要发送数据的站点需要提前取得授权，也就是在一定条件控制下的随机发送。其典型代表有令牌环网和多点线路探询。</p></li></ul><h3 id="3-3-1-载波监听多点接入-碰撞检测协议（CSMA-CD协议）"><a href="#3-3-1-载波监听多点接入-碰撞检测协议（CSMA-CD协议）" class="headerlink" title="3.3.1 载波监听多点接入&#x2F;碰撞检测协议（CSMA&#x2F;CD协议）"></a>3.3.1 载波监听多点接入&#x2F;碰撞检测协议（CSMA&#x2F;CD协议）</h3><h4 id="1-CSMA-CD协议要点"><a href="#1-CSMA-CD协议要点" class="headerlink" title="1. CSMA&#x2F;CD协议要点"></a>1. CSMA&#x2F;CD协议要点</h4><p>为避免在同一时间段内有两台或两台以上的计算机同时发送数据，造成干扰， 使得发送的数据产生冲突、相互破坏，导致数据发送失败。以太网中采用载波监听多点接入&#x2F;碰撞检测协议（ CSMA&#x2F;CD 协议）进行解决。</p><p>（1）多点接入</p><p>“多点接入”主要是指总线型网络，多台计算机各自使用自己的接入点连入同一跟总线上。目前，局域网主要采用星型拓扑结构，但以集线器为核心的星型拓扑结构其本质依然是总线型网络。</p><p>（2）载波监听</p><p>“载波监听”就是 “检测信道” 的意思，是指某个站点利用电子技术对总线进行检测，看一下在总线上是否有其他站点在发送数据。</p><p>（3）碰撞检测</p><p>所谓 “碰撞检测”， 是指站点一边发送数据， 一边检测信道上信号电压的变化情况， 以便判断本站在发送数据时， 是否有其他站点也在发送数据。</p><h4 id="2-碰撞的产生及检测"><a href="#2-碰撞的产生及检测" class="headerlink" title="2. 碰撞的产生及检测"></a>2. 碰撞的产生及检测</h4><p>Ａ、Ｂ 两个站点相距 １ ｋｍ，这两个站点进行碰撞检测的过程如下：<br>（１） 当 ｔ ＝０ 时，Ａ 站点开始发送数据，此时 Ｂ 站点检测到信道空闲。<br>（２） 当 ｔ ＝ α － β 时，Ａ 站点发送的数据还没有到达 Ｂ 站点，Ｂ 站点因为检测到信道空闲，所以开始发送数据。<br>（３） 当 ｔ ＝ α － β／２ 时，Ａ 站点发送的数据和 Ｂ 站点发送的数据发生了碰撞，但是，此时Ａ 站点和 Ｂ 站点均不知道发生了碰撞；<br>（４） 当 ｔ ＝ α 时，Ａ 站点发送的数据达到 Ｂ 站点，Ｂ 站点由此检测到发生了碰撞，于是立即停止发送数据。<br>（５） 当 ｔ ＝２α － β 时， Ｂ 站点发送的数据 （因为 Ｂ 站点检测到碰撞后立即停止了数据发送， 所以到达 Ａ 站点的数据为残缺的帧） 到达 Ａ 站点， 于是 Ａ 站点也检测到发生碰撞， 立即停止数据发送。<br>经过此次碰撞， Ａ 站点和 Ｂ 站点的数据发送均失败了， 它们都需要推迟一段时间后， 再重新发送数据。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913160145145.png" alt="image-20220913160145145"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220913160852086.png" alt="image-20220913160852086"> </p><p>截断二进制指数退避算法：</p><p>截断二进制指数退避算<br>法的具体做法如下：<br>（１） 协议规定了基本退避时间为争用期 ２α， 具体的争用期时间为 51.2 μｓ。 对于１０ Ｍｂ ／ ｓ 以太网， 在争用期内可发送 ５１２ ｂｉｔ 数据， 把发送 ５１２ ｂｉｔ 所需的时间称为 ５１２ 比特<br>时间 （１ 比特时间就是发送 １ ｂｉｔ 数据所需的时间）。 为了计算方便， 可以直接使用比特作为<br>争用期的单位， 所以， 争用期是 ５１２ ｂｉｔ， 等同于争用期是发送 ５１２ ｂｉｔ 数据所需的时间。<br>（２） 从离散的整数集合 ［０， １， …， （２ｋ － １）］ 中随机取出一个数， 记为 ｒ， 重传应推后的时间应当是 ｒ 倍的争用期。 若重传次数小于 １０， 则 ｋ 的取值就是重传次数； 若重传次数<br>大于等于 １０， 则 ｋ 的取值始终为 １０。<br>（３） 当重传达到 １６ 次时， 若仍不能发送成功， 则将当前帧丢弃， 并向高层报错。 若连<br>续多次发生冲突， 说明当前总线上有多个站点参与争用信道， 使用上述方法可以使重传所需<br>推迟的平均时间随着重传次数的增大而增大， 进而降低碰撞发生的概率， 提高整个系统的稳<br>定性。 但是， 这种碰撞重传的方法并没有兼顾各个站点的公平性， 虽然适配器每次发送一个<br>新的帧时都会执行一次 ＣＳＭＡ／ ＣＤ 算法， 但是它对之前发生的碰撞过程却没有记忆功能， 也<br>就没办法给多次发生碰撞的站点以额外的 “关照”， 即当有多个站点的适配器在同时执行指<br>数退避算法时， 有可能某一个适配器发送的新帧碰巧成功的插入到信道中， 获得了发送权，<br>而已经推迟了好几次发送的站点， 却依然没有获得发送权， 需要继续执行截断二进制指数退<br>避算法， 以争取下一个发送权。</p><h2 id="3-4-扩展以太网"><a href="#3-4-扩展以太网" class="headerlink" title="3.4 扩展以太网"></a>3.4 扩展以太网</h2><h2 id="3-5-无线局域网"><a href="#3-5-无线局域网" class="headerlink" title="3.5 无线局域网"></a>3.5 无线局域网</h2><h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><p>网络层是处理端到端数据传输的最底层，关注的是如何将源端数据分组一路送到接收方。为了将数据分组送到接收方，沿途可能要经过许多台中间路由器。<br>与数据链路层的功能不同，数据链路层只是将帧从线路一端传送到另一端。</p><p>网络层就是在路由器等中间设备组成的拓扑结构中，寻找到一条路径，到达接收方。</p><h2 id="4-1-网络层概述"><a href="#4-1-网络层概述" class="headerlink" title="4.1 网络层概述"></a>4.1 网络层概述</h2><p>网络中最主要的组件是网络服务提供商（ISP）的设备（通过传输线路连接的路由器）和客户端设备，在图中，ISP的设备位于椭圆内，而客户设备位于椭圆之外。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928182153596.png" alt="image-20220928182153596"> </p><p><strong>使用方式</strong>：如果一台主机要发送一个数据包，它就将数据包传输给最近的路由器，路由器的链路层完成了对它校验和的验证之后，它先被存储在路由器上；然后沿着路径被转发到下一个路由器，直至到达目标主机。这种机制即为<strong>存储转发数据包交换</strong></p><h3 id="4-1-1-网络层提供的两种服务"><a href="#4-1-1-网络层提供的两种服务" class="headerlink" title="4.1.1 网络层提供的两种服务"></a>4.1.1 网络层提供的两种服务</h3><p>网络层通过网络层&#x2F;传输层接口向传输层提供服务。一个重要的问题是<strong>明确网络层向传输层提供什么类型的服务。</strong><br>在设计网络层服务时，一定要牢记下面这些目标：<br>    （1）向上提供的服务应该独立于路由器技术；<br>    （2）应该向传输层屏蔽路由器的数量、类型和拓扑关系；<br>    （3）传输层可用的网络地址应该有一个统一编址方案，甚至可以跨越LAN和WAN。</p><p>给定这些目标后，网络层设计者有很大的自由度来编写提供给传输层的详细服务规范。这种自由度通常演变为两个竞争派别之间的激烈争斗。最终讨论的焦点集中在网络层应该提供面向连接的服务还是提供无连接的服务。</p><p>一个阵营（以 Internet社团为代表）认为，路由器的任务仅仅是传送数据包，不用再做别的事情。按照他们的观点，不管如何设计网络，从本质上讲它总是不可靠的。因此，主机应该接受这样的事实，自己来完成错误控制（即错误检测和纠正）和流量控制任务。</p><p>另一大阵营（以电话公司为代表）认为，网络应该提供可靠的、面向连接的服务。他们声称，具有100多年成功经验的全球电话系统就是一个极好的范例。按照他们的观点，服务质量是最主要的因素，并且如果在网络中没有连接，要实现服务质量非常困难，特别对于诸如语音和视频这样的实时流量。</p><h4 id="1-数据报服务"><a href="#1-数据报服务" class="headerlink" title="1. 数据报服务"></a>1. 数据报服务</h4><p>所有的数据包都被独立地注入到网络中，并且每个数据包独立路由，不需要提前建立任何设置。数据包通常称为数据报（datagram），对应的网络称为数据报网络（datagram network）。</p><ul><li>数据包写上目标地址与原地址，通过路由器识别地址转发到相应目的地，这叫<strong>数据报服务</strong>。</li><li>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li>网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><p><strong>特点</strong></p><ul><li>数据包的传输路径会根据数据包中的原地址和目的地址动态确定传输路线，有多种可能。即使最佳路径断了，也可以通过其他路径传输，只是速度没那么快，非常可靠。</li><li>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）。</li><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的主机中的运输层负责（包括差错处理、流量控制（即A发快了，B让停停）等）。</li><li>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用。</li><li>因特网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928182516410.png" alt="image-20220928182516410"> </p><p>进程P1欲将长消息发送给P2。传输层在消息的前面加上一个传输头后交给网络层，网络层将消息拆分成4个合适长度的数据包:1、2、3和4，将这些数据包依次发送给路由器A。但是后续的路径选择都是独立的，4个数据包可能走不同的路由器。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928182539758.png" alt="image-20220928182539758"> </p><p>例如，在图4-2中，A只有两条出境线路分别通向B和C，所以，每一个入境数据包必须被转发给这两台路由器之一，即使它最终目标地址是其他某一台路由器。A的初始路由表如图中标示的“初始化”。 </p><p>每一台路由器都有一个内部表，它指明了针对每一个可能的目标地址应该将数据包送到哪里去。每个表项由两部分数据组成:目标地址和通往目标地址所使用的出境线路。当然，只能使用直接连接的线路。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928182606344.png" alt="image-20220928182606344"> </p><p>数据包1、2和3分别到达入境线路并且经过验证校验和之后，被路由器暂时保存起来。然后，根据A上的表，每个数据包被放在一个新帧中，并且被转发到通往C的出境链路；之后数据包1被转发给E，进一步又被转发给F。当它到达F时，它被封装在一个帧内通过连有H2的LAN被发送出去。数据包2和3遵循同样的路径。</p><p>然而，数据包4的情形有所不同。当它到达A之后，尽管它的目标地址也是指向F，但它被A转发给了路由器B。出于某种原因，A决定采用不同于前三个数据包的路径来发送数据包4。或许它了解到在ACE路径上发生了流量拥塞，因而更新了路由表，如图中标示的“稍后”。管理这些路由表并做出路由选择的算法称为路由算法（routing algorithm）。  </p><h4 id="2-虚电路服务"><a href="#2-虚电路服务" class="headerlink" title="2. 虚电路服务"></a>2. 虚电路服务</h4><ul><li>数据包传输前先建立和确认一条虚电路，确认之后数据包不用加地址，直接通过虚电路由一端传送到另一端，这叫做<strong>虚电路服务</strong>。</li></ul><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928182722765.png" alt="image-20220928182722765"> </p><p>请注意，这里有一个冲突，因为，尽管A很容易区分出标识连接1的数据包是来自H1还是来自H3，但是，C无法区分它们。基于这个原因，A给第二个连接的出境流量分配一个不同的连接标识符。路由器需要具备替换出境数据包中连接标识符的能力(多协议标签交换MPLS：MultiProtocol Label Switching)。 </p><p>现在我们来考虑如果H3也希望与H2建立连接则情形会怎么样。H3选择连接标识符1（因为是它发起连接，而且这是它唯一的连接），并且告诉网络要建立虚电路。因此路由表增加了第二行。</p><p>考虑图4-3的情形，主机H1已经建立了一条与主机H2之间的连接1。这条连接被记录在每个路由表中的第一项中。A路由表的第一行说明如果一个标示了连接标识符1的数据包来自于H1，那么它将被发送到路由器C，并且赋予连接标识符1。类似地，C路由表中的第一项将该数据包路由到E，也赋予连接标识符1。</p><h4 id="3-虚电路与数据报网络的比较"><a href="#3-虚电路与数据报网络的比较" class="headerlink" title="3. 虚电路与数据报网络的比较"></a>3. 虚电路与数据报网络的比较</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928182756966.png" alt="image-20220928182756966"></p><h3 id="4-1-2-分组转发的路由选择"><a href="#4-1-2-分组转发的路由选择" class="headerlink" title="4.1.2 分组转发的路由选择"></a>4.1.2 分组转发的路由选择</h3><p>网络层的主要功能是将数据包从源机器路由到目标机器。</p><p><strong>选择路由的算法以及这些算法所用的数据结构是网络层设计的最主要内容。</strong> </p><p>路由器主要完成两个功能:是**路由选择 (确定哪一条路径)<strong>，二是</strong>分组转发 (当一个分组 到达时所采取的动作)**。</p><ul><li>路由选择。指按照复杂的分布式算法，根据从各相邻路由器所得到的关于整个网络拓扑的变化情况，动态地改变所选择的路由。</li><li>分组转发。指路由器根据转发表将用户的IP数据报从合适的端口转发出去。</li></ul><p><strong>路由表</strong>是根据<strong>路由选择算法</strong>得出的，而<strong>转发表</strong>是从<strong>路由表</strong>得出的。<br><strong>路由表</strong>则需要对<strong>网络拓扑变化的计算最优化</strong>, <strong>转发表</strong>的结构应当使<strong>查找过程最优化</strong>。</p><p>在讨论路由选择的原理时，往往不去区分转发表和路由表，而是笼统地使用<code>路由表</code>一词。</p><p>路由算法（routing algorithm）是网络层软件的一部分，它负责确定一个入境数据包应该被发送到哪一条输出线路上。<br>如果网络内部使用了数据报，那么路由器必须针对每一个到达的数据包重新选择路径，因为自上一次选择了路径之后，最佳路径可能已经发生了改变。<br>如果网络内部使用虚电路，那么只有当建立一条新的虚电路时，才需要做路由决策此后，数据包只要沿着已经建立的路径向前传递即可。后一种情形有时候也称为会话路由 （session routing），因为在整个会话过程中（比如VPN上的一个终端登录会话），路径必须保持有效。</p><p>有的时候对路由和转发这两个功能进行区分是非常有用的，路由即对使用哪一条路径做出决策，而转发则是当一个数据包到达时该采取什么动作。可以把路由器想象成内部有两个进程。其中一个进程在每个数据包到达的时候对它进行处理，它在路由表中査找该数据包所对应的出境线路。这个进程即为转发（forwarding）进程；另一个进程负责生成和更新路由表，这正是路由算法发挥作用的地方。 </p><p>无论是针对每个数据包独立选择路由，还是仅在建立新连接时选择路径，路由算法必须满足某些特性:正确性、简单性、鲁棒性、稳定性、公平性和有效性。鲁棒性:路由算法应该能够处理拓扑结构和流量方面的各种变化，而且不能要求所有主机都停止所有的工作。稳定性:一个稳定的算法应该迅速收敛达到平衡，并且保持平衡状态。<br>公平性和有效性往往是两个相互矛盾的目标。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928184641577.png" alt="image-20220928184641577"> </p><p>在图4-4中，假设在A和A’之间、B和B’之间以及C和C’之间有足够的流量使得水平的链路达到饱和。为了使总流量达到最大，X和X’之间的流量应该完全被切断。不幸的是，X和X’可能看不到这一点。很显然，在全局效率和单个连接的公平性之间必须有一种折中的处理办法。 </p><p>性能指标优化中相互冲突的两个目标:使数据包的平均延迟达到最小是有效发送流量的一种很明显的选择，但是使网络的总吞吐量最大化也是一种不错的选择。许多网络企图最小化一个数据包必须经过的跳数或简单降低其经历的跳数，从而减小延迟和带宽的消耗，提高整个网络的吞吐量。 </p><p>路由算法可以分成两大类：<strong>非自适应算法和自适应算法</strong>。<br>非自适应算法（nonadaptive algorithm）不会根据当前测量或者估计的流量和拓扑结构，来调整它们的路由决策；<br>自适应算法（adaptive algorithm）则会改变它们的路由决策以便反映出拓扑结构的变化，通常也会反映出流量的变化情况。 </p><h2 id="4-2-网络协议"><a href="#4-2-网络协议" class="headerlink" title="4.2 网络协议"></a>4.2 网络协议</h2><p>网际协议IP是TCP&#x2F;IP体系中两个最主要的协议之一，也是最重要的互联网标准协议之一。严格来说，这里所讲的IP其实是IP的第4个版本，应记为IPv4。但在讲述IP协议的各种原理时，往往不在IP后面加上版本号。在后面的章节我们再介绍较新的版本IPv6（版本1-3和版本5都未曾使用过）。</p><p>与IP协议配套使用的还有三个协议：<br>    （1) 地址解析协议ARP（Address resolution protocol）<br>    （2) 网际控制报文协议ICMP（Internet Control Message Protocol）<br>    （3) 网际组管理协议IGMP（Internet Group Management Protocol）<br>    本来还有一个协议叫做逆地址解析协议RARP（Reverse Address Resolution Protocol），是和ARP协应用层议配合使用的。但现在已被淘汰不使用了。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928190137710.png" alt="image-20220928190137710"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928190144910.png" alt="image-20220928190144910"> </p><p>由于网际协议IP是用来使互连起来的许多计算机网络能够进行通信的，因此TCP&#x2F;IP体系中的网络层常常被称为网际层（internet layer），或IP层。使用“网际层”这个名词的好处是强调这是由很多网络构成的互连网络。在讨论网际协议IP之前，必须了解什么是虚拟互连网络。</p><p>图4-5画出了这三个协议和网际协议IP的关系。在这一层中，ARP画在最下面，因为IP经常要使用这个协议。ICMP和IGMP画在这一层的上部，因为它们要使用IP协议。这三个协议将在后面陆续介绍。</p><h3 id="4-2-1-虚拟互联网络"><a href="#4-2-1-虚拟互联网络" class="headerlink" title="4.2.1 虚拟互联网络"></a>4.2.1 虚拟互联网络</h3><p>从一般的概念来讲，将网络互相连接起来要使用一些中间设备。根据中间设备所在的层次，可以有以下四种不同的中间设备：<br>    （1） 物理层使用的中间设备叫做<strong>转发器（repeater）</strong>；<br>    （2） 数据链路层使用的中间设备叫做<strong>网桥或桥接器（bridge）</strong>；<br>    （3） 网络层使用的中间设备叫做<strong>路由器（router）</strong>；<br>    （4） 在网络层以上使用的中间设备叫做<strong>网关（gateway）</strong>，用网关连接两个不兼容的系统需要在高层进行协议的转换。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928190327304.png" alt="image-20220928190327304"> </p><p>图4-6（A）表示有许多计算机网络通过一些路由器进行互连。由于参加互连的计算机网络都使用相同的网际协议IP（Internet Protocol），因此可以把互连以后的计算机网络看成如图4-7（B）所示的一个虚拟互连网络（internet）。 </p><p>所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用IP协议就可以使这些性能各异的网络在网络层上看起来好像是一个统一的网络。这种使用IP协议的虚拟互连网络可简称为IP网（IP网是虚拟的，但平常不必每次都强调“虚拟”二字）。使用IP网的好处是：当IP网上的主机进行通信时，就好像在一个单个网络上通信一样，它们看不见互连的各网络的具体异构细节（如具体的编址方案、路由选择协议，等等）。如果在这种覆盖全球的IP网的上层使用TCP协议，那么就是现在的互联网（Internet）。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928190348825.png" alt="image-20220928190348825"> </p><p>我们注意到，主机的协议栈共有五层，但路由器的协议栈只有下三层。如果我们只从网络层考虑问题，那么IP数据报就可以想象是在网络层中传送，其传送路径是：H1→R1→R2→R3→H2。这样就不必画出许多完整的协议栈使问题的描述更加简单。</p><p>R1在查找了自己的路由表后，知道应当把数据报转发给R2进行间接交付。这样一直转发下去，最后由路由器R3知道自己是和H2连接在同一个网络上，不需要再使用别的路由器转发了，于是就把数据报直接交付给目的主机H2。图中画出了源主机、目的主机以及各路由器的协议栈。</p><p>在图4-7所示的互联网中的源主机H1要把一个数据报发送给目的主机H2。根据分组交换的存储转发概念，主机H1先要查找自己的路由表，看目的主机是否就在本网络上。如是，则不需要经过任何路由器而是直接交付，任务就完成了。如不是，则必须把IP数据报发送给某个路由器（图中的R1）。</p><h3 id="4-2-2-分类的IP地址"><a href="#4-2-2-分类的IP地址" class="headerlink" title="4.2.2 分类的IP地址"></a>4.2.2 分类的IP地址</h3><h4 id="1-IP地址及其表示方法"><a href="#1-IP地址及其表示方法" class="headerlink" title="1. IP地址及其表示方法"></a>1. IP地址及其表示方法</h4><p>​    整个互联网就是一个单一的、抽象的网络（虚拟互连网络）。</p><p>IP地址就是给互联网上的每一台主机（或路由器）的每一个接口分配一个在全世界范围内唯一的32位的标识符。IP地址的结构使我们可以在互联网上很方便地进行寻址。IP地址现在由互联网名字和数字分配机构ICANN（Internet Corporation for Assigned Names and Numbers）进行分配。</p><p>IP地址的编址方法共经过了三个<strong>历史阶段</strong>：<br>    （1）分类的IP地址：这是最基本的编址方法，在1981年就通过了相应的标准协议；<br>    （2）子网的划分：这是对最基本的编址方法的改进，其标准RFC950在1985年通过；<br>    （3）构成超网：这是比较新的无分类编址方法。1993年提出后很快就得到推广应用。</p><p><strong>分类的IP地址</strong></p><p>就是将IP地址划分为若干个固定类，每一类地址都由两个固定长度的字段组成，<br>其中第一个字段是网络号（net-id），它标志主机（或路由器）所连接到的网络，一个网络号在整个互联网范围内必须是唯一的。<br>第二个字段是主机号（host-id），它标志该主机（或路由器）。一个主机号在它前面的网络号所指明的网络范围内必须是唯一的。由此可见，一个IP地址在整个互联网范围内是唯一的。 </p><p>这种两级的IP地址可以记为<br>IP地址：&#x3D;{&lt;网络号&gt;，&lt;主机号&gt;}         （4-1）<br>式（4-1）中的符号“∷&#x3D;”表示“定义为”。 </p><p><strong>点分十进制记法</strong> （dotted decimal notation）:对主机或路由器来说，IP地址都是32位的二进制代码。为了提高可读性，我们常常把32位的IP地址中的每8位插入一个空格（但在机器中并没有这样的空格）。为了便于书写，可用其等效的十进制数字表示，并且在这些数字之间加上一个点</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928190518931.png" alt="image-20220928190518931"> </p><p>这里要指出，由于近年来已经广泛使用无分类IP地址进行路由选择，A类、B类和C类地址的区分已成为历史[RFC 1812]，但由于很多文献和资料都还使用传统的分类的IP地址，而且从概念的演进上更清晰，因此我们在这里还要从分类的IP地址讲起。 </p><p>127.0.0.1本机地址</p><p>127.0.0.0、127.255.255.255一般不能使用，特殊使用</p><p>后三个全为0，代表网络号</p><p>后三个全为1，代表广播地址</p><p>（1）A类、B类和C类地址的网络号字段（在图中这个字段是灰色的）分别为1个、2个和3个字节长，而在网络号字段的最前面有1~3位的类别位，其数值分别规定为0，10和110。</p><p>（2）A类、B类和C类地址的主机号字段分别为3个、2个和1个字节长。<br>（3）D类地址（前4位是1110）用于多播（一对多通信）。我们将在4.6节讨论IP多播<br>（4）E类地址（前4位是1111）保留为以后用。 </p><p>图4-8给出了各种IP地址的网络号字段和主机号字段，这里A类、B类和C类地址都是单播地址（一对一通信），是最常用的。</p><p>从IP地址的结构来看，IP地址并不仅仅指明一台主机，而是还指明了主机所连接到的网络。把IP地址划分为A类、B类、C类三个类别，当初是这样考虑的。各种网络的差异很大，有的网络拥有很多主机，而有的网络上的主机则很少。把IP地址划分为A类、B类和C类是为了更好地满足不同用户的要求。当某个单位申请到一个IP地址时，实际上是获得了具有同样网络号的一块地址。其中具体的各台主机号则由该单位自行分配，只要做到在该单位管辖的范围内无重复的主机号即可。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928190611575.png" alt="image-20220928190611575"> </p><p>图4-9是一个C类IP地址的表示方法。显然，202.97.224.68比10000000 00001011 00000011 00011111书写起来要方便得多。 </p><h4 id="2-常用的三种类别的IP地址"><a href="#2-常用的三种类别的IP地址" class="headerlink" title="2. 常用的三种类别的IP地址"></a>2. 常用的三种类别的IP地址</h4><p>A类地址的网络号字段占1个字节，只有7位可供使用（该字段的第一位已固定为0），但可指派的网络号是126个（即2<sup>7</sup>-2）。减2的原因是：第一，IP地址中的全0表示“这个（this）”。网络号字段为全0的IP地址是个保留地址，意思是“本网络”；第二，网络号为127（即01111111）作为本地软件环回测试（loopback test）本主机进程之间的通信之用。若主机发送一个目的地址为环回地址（例如127.0.0.1）的IP数据报，则本主机中的协议软件仅处理数据报中的数据，而不会把数据报发送到任何网络。目的地址为环回地址的IP数据报永远不会出现在任何网络上，因为网络号为127的地址根本不是一个网络地址。 </p><p><strong>公司：</strong>ICANN分配</p><p>旧的分配</p><p>IP地址的指派范围</p><table><thead><tr><th><strong>网络类别</strong></th><th><strong>最大可指派的网络数</strong></th><th>主机号</th><th><strong>第一个可指派的网络号</strong></th><th><strong>最后一个可指派的网络号</strong></th><th><strong>每个网络中的最大主机数</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td>1~126（2<sup>7</sup>-2）</td><td>2<sub>24</sub>-2</td><td>1</td><td>126</td><td>16777214</td></tr><tr><td><strong>B</strong></td><td>16383（2<sup>14</sup>-1）</td><td>2<sup>16</sup>-2</td><td>128.1</td><td>191.255</td><td>65534</td></tr><tr><td><strong>C</strong></td><td>2097151（2<sup>21</sup>-1）</td><td>2<sup>8</sup>-20</td><td>192.0.1</td><td>223.255.255</td><td>254</td></tr></tbody></table><p>一般不使用的IP地址</p><table><thead><tr><th><strong>网络号</strong></th><th><strong>主机号</strong></th><th><strong>源地址使用</strong></th><th><strong>目的地址使****用</strong></th><th><strong>代表的意思</strong></th></tr></thead><tbody><tr><td><strong>0</strong></td><td>0</td><td>可以</td><td>可以</td><td>在本网络上的本主机</td></tr><tr><td><strong>0</strong></td><td>host-id</td><td>可以</td><td>不可以</td><td>在本网络上的某台主机host-id</td></tr><tr><td><strong>全</strong>1</td><td>全1</td><td>不可以</td><td>可以</td><td>只在本网络上进行广播（路由器不转发）</td></tr><tr><td><strong>net-id</strong></td><td>全1</td><td>不可以</td><td>可以</td><td>对net-id上的所有主机进行广播</td></tr><tr><td><strong>127</strong></td><td>非全0或全1的任何数</td><td>可以</td><td>可以</td><td>用于本地软件环回测试</td></tr></tbody></table><p>新的分配网络</p><p>全0和全1也可以使用</p><h4 id="3-IP地址的特点"><a href="#3-IP地址的特点" class="headerlink" title="3. IP地址的特点"></a>3. IP地址的特点</h4><p>IP地址具有以下一些重要特点</p><p>（1）每一个IP地址都由网络号和主机号两部分组成。从这个意义上说，IP地址是一种分等级的地址结构。<br>分两个等级的好处是：第一，IP地址管理机构在分配IP地址时只分配网络号（第一级），而剩下的主机号（第二级）则由得到该网络号的单位自行分配。这样就方便了IP地址的管理；第二，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间以及查找路由表的时间。 </p><p>（2）实际上IP地址是标志一台主机（或路由器）和一条链路的接口。<br>当一台主机同时连接到两个网络上时，该主机就必须同时具有两个相应的IP地址，其网络号必须是不同的。这种主机称为多归属主机（multihomed host）。由于一个路由器至少应当连接到两个网络，因此一个路由器至少应当有两个不同的IP地址。这好比一个建筑正好处在学海街和中原路的交叉口上，那么这个建筑就可以拥有两个门牌号码。例如，学海街1239号和中原路38号。 </p><p>（3）按照互联网的观点，一个网络是指具有相同网络号 net-id的主机的集合，因此，用转发器或网桥连接起来的若干个局域网仍为一个网络，因为这些局域网都具有同样的网络号。具有不同网络号的局域网必须使用路由器进行互连。<br>（4）在IP地址中，所有分配到网络号的网络（不管是范围很小的局域网，还是可能覆盖很大地理范围的广域网）都是平等的。所谓平等，是指互联网同等对待每一个IP地址。</p><h4 id="4-IP地址举例"><a href="#4-IP地址举例" class="headerlink" title="4. IP地址举例"></a>4. IP地址举例</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220929141303361.png" alt="image-20220929141303361"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.assets/image-20220928191726931.png" alt="image-20220928191726931"> </p><p>图4-10画出了三个局域网（LAN1，LAN2和LAN3）通过三个路由器（R1，R2和R3）互连起来所构成的一个互联网（此互联网用虚线圆角方框表示）。其中局域网LAN2是由两个网段通过网桥B互连的。图中的小圆圈表示需要有一个IP地址。 </p><p>我们应当注意到：在同一个局域网上的主机或路由器的IP地址中的网络号必须是一样的。图中所示的网络号就是IP地址中的网络号字段的值，这也是文献中常见的一种表示方法。另一种表示方法是用主机号为全0的网络IP地址。<br>用网桥（它只在链路层工作）互连的网段仍然是一个局域网，只能有一个网络号。</p><p>路由器总是具有两个或两个以上的IP地址。即路由器的每一个接口都有一个不同网络号的IP地址。当两个路由器直接相连时（例如通过一条租用线路），在连线两端的接口处，可以分配也可以不分配IP地址。如分配了IP地址，则这一段连线就构成了只包含一段线路的特殊“网络”（如图中的N1，N2和N3）。之所以叫做“网络”是因为它有IP地址。但为了节省IP地址资源，对于这种仅由一段连线构成的特殊“网络”，现在也常常不分配IP地址。通常把这样的特殊网络叫做无编号网络（unnumbered network）或无名网络（anonymous network）。 </p><h3 id="4-2-3-IP地址与硬件地址"><a href="#4-2-3-IP地址与硬件地址" class="headerlink" title="4.2.3 IP地址与硬件地址"></a>4.2.3 IP地址与硬件地址</h3><p>在学习IP地址时，很重要的一点就是要弄懂主机的IP地址与硬件地址的区别。图4-11说明了这两种地址的区别。</p><p>从层次的角度看，物理地址是数据链路层和物理层使用的地址，而IP地址是网络层和以上各层使用的地址，是一种逻辑地址（称IP地址为逻辑地址是因为IP地址是用软件实现的）。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928191803295.png" alt="image-20220928191803295"> </p><p>IP地址放在IP数据报的首部，而硬件地址则放在MAC帧的首部。在网络层和网络层以上使用的是IP地址，而数据链路层及以下使用的是硬件地址 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928191815609.png" alt="image-20220928191815609"> </p><p>IP地址不变，MAC地址发生变化 </p><h3 id="4-2-4-地址解析协议ARP"><a href="#4-2-4-地址解析协议ARP" class="headerlink" title="4.2.4 地址解析协议ARP"></a>4.2.4 地址解析协议ARP</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928191848692.png" alt="image-20220928191848692"> </p><p>地址解析协议ARP:已经知道了一个机器（主机或路由器）的IP地址，需要找出其相应的硬件地址。动态更新ARP高速缓存中存放的IP地址到硬件地址的映射表。 </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928191859023.png" alt="image-20220928191859023"> </p><p>请求分组带有自己的IP地址和硬件地址，接收方直接获得一条映射，接收方回送响应时可以使用单播。 </p><p>ARP的四种典型方式</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220929143837686.png" alt="image-20220929143837686"> </p><h3 id="4-2-5-IP数据报的格式"><a href="#4-2-5-IP数据报的格式" class="headerlink" title="4.2.5 IP数据报的格式"></a>4.2.5 IP数据报的格式</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928191926851.png" alt="image-20220928191926851"> </p><p>一个IP数据报由首部和数据两部分组成。首部的前20字节必须具备。固定部分的后面是一些可选字段，其长度是可变的。 先发首部，方便接收者处理。 </p><h4 id="1-1-IP-数据报首部的固定部分中的各字段"><a href="#1-1-IP-数据报首部的固定部分中的各字段" class="headerlink" title="1. 1.  IP 数据报首部的固定部分中的各字段"></a>1. 1.  IP 数据报首部的固定部分中的各字段</h4><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220928192036459.png"></p><p>版本：4位，0100</p><p>首部长度：4位，4~7bit，代表的是IP的头部的长度</p><p>总长度：占16位，指首部和数据之和的长度，字节为单位</p><p>标识：占16位</p><p>标志：占3位</p><p>片偏移（12位）：</p><p>生存时间（8位）记为TTL（Time To Live）数据包在网络中可通过的路由器数的最大值</p><p>协议（8位）字段指出此数据报携带的数据使用何种协议以便目的</p><p>首部校验和（16位）字段只检验数据报的首部</p><h4 id="2-IP数据报首部的可变部分"><a href="#2-IP数据报首部的可变部分" class="headerlink" title="2. IP数据报首部的可变部分"></a>2. IP数据报首部的可变部分</h4><ul><li>IP首部的可变部分是一个选项部分，用来支持排错、测量以及安全等措施</li><li>选项字段的长度可变，从1个字节到40个字节不等，取决于所选择的项目</li><li>增加首部的可变部分是为了增加IP数据报的功能，但这</li></ul><h3 id="4-2-6-IP层转发分组的流程"><a href="#4-2-6-IP层转发分组的流程" class="headerlink" title="4.2.6 IP层转发分组的流程"></a>4.2.6 IP层转发分组的流程</h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221004152315506.png" alt="image-20221004152315506"> </p><p><strong>直接交付：</strong></p><p><strong>间接交付：</strong></p><p>​根据目的网络地址就能确定下一跳路由器，这样做的结果是：<br>IP 数据报最终一定可以找到目的主机所在目的网络上的路由器（可能要通过多次的间接交付）。<br>只有到达最后一个路由器时，才试图向目的主机进行直接交付。 </p><p><strong>特定主机路由</strong><br>虽然互联网所有的分组转发都是基于目的主机所在的网络，但在大多数情况下都允许有这样的特例，即为特定的目的主机指明一个路由。<br>采用特定主机路由可使网络管理人员能更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。 </p><p><strong>默认路由（其它网络）：</strong>上面的除直接交付、间接交付和特定主机路由外的 其它网络都从这里过</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221004153430832.png" alt="image-20221004153430832"> </p><h2 id="4-3-划分子网"><a href="#4-3-划分子网" class="headerlink" title="4.3 划分子网"></a>4.3 划分子网</h2><ol><li>目标地址D，得到网络号N</li><li>判断网络号N是直连的吗？<br>如果直连，直接交付；<br>不是直连，</li><li>特定主机路由？</li><li>N在路由表中？</li><li>默认路由</li><li>报错</li></ol><h3 id="4-3-1"><a href="#4-3-1" class="headerlink" title="4.3.1"></a>4.3.1</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>原来的IP地址是两级结构：网络号 主机号</p><p>现在的IP地址是三级结构：网络号 子网号 主机号</p><p>子网号就是在主机号中拿几位作为划分不同区域的标志，剩下的再作为相应区域的主机号。</p><p>对外来说，已经划分的子网还是一个整体</p><h4 id="2-子网掩码"><a href="#2-子网掩码" class="headerlink" title="2. 子网掩码"></a>2. 子网掩码</h4><p>子网掩码是地址的前n位（网络号、子网号）<br>前n位全部写为1，后面的位数全部写为0</p><p> <img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221004155356117.png" alt="image-20221004155356117"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221004155600229.png" alt="image-20221004155600229"> </p><p>IP      141.14.72.24</p><p>掩码  255.255.192.0</p><p>网络号+子网号&#x3D;141.14.64.0</p><p>子网号占n位，  $\displaystyle{ {子网数}&#x3D;{2^n-2}}$</p><p>B 类地址的子网划分选择（使用固定长度子网）</p><table><thead><tr><th><strong>子网号的位数</strong></th><th><strong>子网掩码</strong></th><th><strong>子网数</strong></th><th><strong>每个子网的主机数</strong></th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>255.255.192.0</strong></td><td><strong>2</strong></td><td><strong>16382</strong></td></tr><tr><td><strong>3</strong></td><td><strong>255.255.224.0</strong></td><td><strong>6</strong></td><td><strong>8190</strong></td></tr><tr><td><strong>4</strong></td><td><strong>255.255.240.0</strong></td><td><strong>14</strong></td><td><strong>4094</strong></td></tr><tr><td><strong>5</strong></td><td><strong>255.255.248.0</strong></td><td><strong>30</strong></td><td><strong>2046</strong></td></tr><tr><td><strong>6</strong></td><td><strong>255.255.252.0</strong></td><td><strong>62</strong></td><td><strong>1022</strong></td></tr><tr><td><strong>7</strong></td><td><strong>255.255.254.0</strong></td><td><strong>126</strong></td><td><strong>510</strong></td></tr><tr><td><strong>8</strong></td><td><strong>255.255.255.0</strong></td><td><strong>254</strong></td><td><strong>254</strong></td></tr><tr><td><strong>9</strong></td><td><strong>255.255.255.128</strong></td><td><strong>510</strong></td><td><strong>126</strong></td></tr><tr><td><strong>10</strong></td><td><strong>255.255.255.192</strong></td><td><strong>1022</strong></td><td><strong>62</strong></td></tr><tr><td><strong>11</strong></td><td><strong>255.255.255.224</strong></td><td><strong>2046</strong></td><td><strong>30</strong></td></tr><tr><td><strong>12</strong></td><td><strong>255.255.255.240</strong></td><td><strong>4094</strong></td><td><strong>14</strong></td></tr><tr><td><strong>13</strong></td><td><strong>255.255.255.248</strong></td><td><strong>8190</strong></td><td><strong>6</strong></td></tr><tr><td><strong>14</strong></td><td><strong>255.255.255.252</strong></td><td><strong>16382</strong></td><td><strong>2</strong></td></tr></tbody></table><p>表中的“子网号的位数”中没有0, 1, 15和16这四种情况，因为这没有意义。</p><h4 id="2-转发分组"><a href="#2-转发分组" class="headerlink" title="2. 转发分组"></a>2. 转发分组</h4><ol><li>取目的D</li><li>直接交付</li><li>特定主机路由？</li><li>N网络</li></ol><h2 id="4-5-路由协议"><a href="#4-5-路由协议" class="headerlink" title="4.5 路由协议"></a>4.5 路由协议</h2><ul><li>IGP<ul><li>RIP 距离矢量 临战全表。UDP</li><li>OSPF 链路状态 全区链路 IP</li></ul></li><li>EGP-BGP 可达网络AS路径 发言人 TCP 可靠</li></ul><h1 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h1><h2 id="5-4-拥塞控制"><a href="#5-4-拥塞控制" class="headerlink" title="5.4 拥塞控制"></a>5.4 拥塞控制</h2><h1 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h1><h1 id="期中"><a href="#期中" class="headerlink" title="期中"></a>期中</h1><p><strong>1.试述具有五层协议的网络体系结构的要点，包括各层的主要功能。（12分）</strong></p><p>物理层 物理层的任务就是透明地传送比特流。（注意：传递信息的物理载体，如双绞线、同轴电缆、光缆等，是在物理层的下面，当作第0层）物理层还要确定连接电缆插头的定义及连接法。</p><p>数据链路层：数据链路层的任务是在两个相邻结点间的线路上无差错地传送以帧（frame）为单位的数据。每一帧包括数据和必要的控制信息。</p><p>网络层：网络层的任务就是要选择合适的路由，使发送站的运输层所传下来的分组能够正确无误地按照地址找到目的站，并交付给目的站的运输层。</p><p>运输层：运输层的任务是向上一层的进行通信的两个进程之间提供一个可靠的端到端服务，使它们看不见运输层以下的数据通信的细节。</p><p>应用层 应用层直接为用户的应用进程提供服务。</p><p><strong>2.试解释以下名词：数据，信号，模拟数据，模拟信号，基带信号，带通信号，数字数据，数字信号，码元，单工通信，半双工通信，串行传输，并行传输。（13分）</strong></p><p>答：数据：是运送信息的实体。<br>信号：则是数据的电气的或电磁的表现。<br>模拟数据：运送信息的模拟信号。<br>模拟信号：连续变化的信号。</p><p>基带信号（即基本频带信号）——来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号<br>都属于基带信号。<br>带通信号——把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅<br>在一段频率范围内能够通过信道）。</p><p>数字信号：取值为有限的几个离散值的信号。<br>数字数据：取值为不连续数值的数据。<br>码元(code)：在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。<br>单工通信：即只有一个方向的通信而没有反方向的交互。<br>半双工通信：即通信和双方都可以发送信息，但不能双方同时发送（当然也不能同时接收）。这种通信方式是一方发送另一方接收，过一段时间再反过来。</p><p>–<br>全双工通信：即通信的双方可以同时发送和接收信息。</p><p>并行数据传输:<br>是在传输中有多个数据位同时在设备之间进行的传输.一个编了码的字符通常是由若干位二进制数表示,如用ASCII码编码的符号是由8位二进制数表示的,则并行传输ASCII编码符号就需要8个传输信道,使表示一个符号的所有数据位能同时沿着各自的信道并排的传输.<br>串行数据传输:是在传输中只有1个数据位在设备之间进行的传输.对任何一个由若干位二进制表示的字符,串行传输都是用一个传输信道,按位有序的对字符进行传输.<br>区别:<br>串行传输的速度比并行传输的速度要慢得多,但费用低.并行传输适用距离短,而串行传输适用远距离传输.</p><p><strong>3.共有四个站进行码分多址CDMA通信。四个站的码片序列为：</strong></p><p><strong>A：（-1-1-1+1+1-1+1+1)</strong></p><p><strong>B：（-1-1+1-1+1+1+1-1）</strong></p><p><strong>C：（-1+1-1+1+1+1-1-1）</strong></p><p><strong>D：（-1+1-1-1-1-1+1-1）</strong></p><p><strong>现收到这样的码片序列：（-1+1-3+1-1-3+1+1）。问哪个站发送数据了？发送数据的站发送的是1还是0？</strong></p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/36c41fbb3e484ab8b3406a698b275b65?orderByHotValue=1&page=1&onlyReference=false">https://www.nowcoder.com/questionTerminal/36c41fbb3e484ab8b3406a698b275b65?orderByHotValue=1&amp;page=1&amp;onlyReference=false</a><br>来源：牛客网</p><p>将每个选项与得到的码片序列对应项相乘，然后乘完相加求和，再除以8，如果结果为1，则说明发送数据1，如果为-1，说明发送数据0，如果为0，则说明没有发送数据。 </p><p>  例如A:(-1 -1 -1 +1 +1 -1 +1 +1) 与码片序列(-1 +1 -3 +1 -1 -3 +1 +1)对应项相乘 </p><p>  第一项：(-1)*(-1)&#x3D;1 </p><p>  第二项：(-1)*1&#x3D;(-1) </p><p>  第三项：(-1)*(-3)&#x3D;3 </p><p>  第四项：1*1&#x3D;1 </p><p>  第五项：1*(-1)&#x3D;(-1) </p><p>  第六项：(-1)*(-3)&#x3D;3 </p><p>  第七项：1*1&#x3D;1 </p><p>  第八项：1*1&#x3D;1 </p><p>  然后将八项乘积相加求和 1+(-1)+3+1+(-1)+3+1+1&#x3D;8 </p><p>  然后将求到的和除以8  即8&#x2F;8&#x3D;1 </p><p>  所以选项A发送数据为1，其他选项类似。</p><p>AD发送1， B发送0 C没发送</p><p><strong>4.假定1km的CSMA&#x2F;CS网络的数据率为1Gbit&#x2F;s。设信号在网络上的传播速率为200000km&#x2F;s。求能够使用此协议的最短帧长。（10分）</strong></p><p>(1)传播时延&#x3D;1km÷200000km&#x2F;s&#x3D;5×106、s&#x3D;5μs [3分]</p><p>(2)往还时延&#x3D;2×传播时延&#x3D;2×5μs&#x3D;10μs [2分]</p><p>(3)最短帧长&#x3D;1Gb&#x2F;s×往还时延&#x3D;1Gb&#x2F;s×10μs&#x3D;10000bit [5分] &#x3D;1250B</p><p><strong>5.假定在使用CSMA&#x2F;CD协议的10Mbit&#x2F;s以太网中某个站在发送数据时检测到碰撞，执行退避算法时选择了随机数r&#x3D;100。试问这个站需要等待多长时间后才能再次发送数据？如果是100Mbits&#x2F;s的以太网呢？（10分）</strong></p><p>答:对于10mb&#x2F;s的以太网,以太网把争用期定为51。2微秒,要退后100个争用期,等待时间是51。2(微秒)*100&#x3D;5.12ms</p><p>对于100mb&#x2F;s的以太网,以太网把争用期定为5.12微秒,要退后100个争用期,等待时间是5。12(微秒)*100&#x3D;512微秒</p><p><strong>6.假定站点A和B在同一个10Mbit&#x2F;s以太网段上。这两个站点之间的传播时延为225比特时间。现假定A开始发送一帧，并且在A发送之前B也发送一帧。如果A发送的是以太网所容许的最短的帧，那么A在检测到和B发生碰撞之前能否把自己的数据发送完毕？换言之，如果A在发送完毕之前没有检测到碰撞，那么能否肯定A所发送的帧不会和B发送的帧发生碰撞？（10分）</strong></p><p>答:设在 t&#x3D;0 时 A 开始发送,在 t&#x3D;(64+8)*8&#x3D;576 比特时间, A 应当发送完毕。 t&#x3D;225 比特时间, B 就检 测出 A 的信号。只要 B 在 t&#x3D;224 比特时间之前发送数据, A 在发送完毕之前就一定检测到碰撞,就能够肯 定以后也不会再发送碰撞了</p><p>如果A在发送完毕之前并没有检测到碰撞, 那么就能够肯定 A所发送的帧不会和 B发送的帧发生碰撞</p><p>(当然也不会和其他站点发生碰撞)。</p><p><strong>7.试辨认以下IP地址的网络类别：（18分）</strong></p><p><strong>（1）128.36.199.3</strong></p><p><strong>（2）21.12.240.17</strong></p><p><strong>（3）183.194.76.253</strong></p><p><strong>（4）192.12.69.248</strong></p><p><strong>（5）89.3.0.1</strong></p><p><strong>（6）200.3.6.2</strong></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221017192139088.png" alt="image-20221017192139088"></p><p><strong>8.一个3200位长的TCP报文传到IP层，加上160位的首部后成为数据报。下面的互联网由两个局域网通过路由器连接起来，但第二个局域网所能传送的最长数据帧中的数据部分只有1200位，因此数据报在路由器必须进行分片。试问第二个局域网向其上层要传送多少比特的数据（这里的”数据“当然指的是局域网看见的数据）？（15分）</strong></p><p>MTU&#x3D;1200bit,每一帧传输的最大数据部分为1200-160&#x3D;1040bit,但是分片时要求数据部分为8字节的整数倍，因此本题中选择最大数据部分为1024bit,数据部分总共3200bit，所以要分四片分别为160+1024、160+1024、160+1024、160+128bit，总bit数为3840bit。</p><p>答:3200+4×160&#x3D;3840 bit</p><p>因为第二个局域网所能传送的最长数据帧中的数据部分只有1200bit,即每个IP数据片的数据部分&lt;1200-160,所以IP数据片的数据部分最大不超过1024bit,由于片偏移是以8字节即64bit为单位的,这样3200bit的报文要分4个数据片,所以第二个局域网向上传送的比特数等于〔3200+4×160〕,共3840bit.</p><h1 id="期末"><a href="#期末" class="headerlink" title="期末"></a>期末</h1><p>网络分层的体系结构，各层引入报头后效率的计算。各层协议的功能(ARP HTTP OSPF RIP BGP TCP UDP FTP DNS TELNET)<br>物理层：带宽和传输速率、编码方式的计算关系，CDMA的计算，编码波形的识别，<br>数据链路层：需要解决那些问题，CSMA&#x2F;CD的原理<br>网络层：IP地址的表示方法、IP地址的分类（含V6），子网掩码的作用，根据子网掩码计算网络号、最小地址、最大地址<br> 网络实验配置路由器的命令<br>运输层：TCP可靠传输的实现方法、序号和确认序号的含义，tcp建立连接和拆除连接的过程<br>应用层：DNS的工作方式机各层的封装过程、FTP通信使用的两个连接<br>理解上次课最后演示实验中讲的HTTP通信中使用DNS、arp详细流程</p><p>网络分层的体系结构：<br>OSI模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br>TCP&#x2F;IP模型：主机网络层、          互联层、传输层、应用层</p><p>物理层: 如何在物理媒体上传送比特流。<br>数据链路层: 相邻节点间分组(帧)的传输。<br>网络层: 如何将分组从源主机通过中间路由器传送到目的主机。<br>传输层: 提供不同主机上应用程序间的数据传输服务。<br>会话层:维护两个结点之间的传输链接以及管理数据交换等。<br>表示层:用于处理在两个通信系统中交换信息的表示方式。<br>应用层:如何通过应用进程间的交互来完成特定网络应用。</p><p><strong>各层协议的功能</strong>：</p><p>网络层 ARP:是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题。<br>OSPF:内部网关协议，开放最短路径优先协议，用于传送路由表信息<br>RIP:内部网关协议，让互联网中的路由器都和自己的相邻路由器不断交换路由信息，并不断更新路由表，使得每一个路由器到每一个目的网络的路由都是最短的<br>BGP:外部网关协议，不同自治系统的路由器之间交换路由信息的协议，力求找到一条能够到达目的网络且比较好的路由</p><p>HTTP:超文本传送协议，是一个应用层协议，使用TCP连接进行可靠的传送。</p><p>传输层 TCP:传输控制协议，提供可靠的，按序传送数据的服务，确保数据的可靠传输。<br>            UDP:用户数据报协议，提供对应用进程的复用和分用功能，以及提供对数据差分的差错检验<br>FTP:文件传输协议，解决文件传输的兼容问题<br>DNS:将域名转换为IP地址，也可以将IP地址转换为相应的域名地址 域名解析功能<br>TELNET:远程登录协议，通过TCP连接登录到远地的另一个主机，将用户的击键传到远地主机，也能将远地主机的输出通过TCP连接返回</p><p><strong>物理层：带宽和传输速率、编码方式的计算关系，CDMA的计算，编码波形的识别</strong></p><p>带宽：现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b&#x2F;s (bit&#x2F;s)。 </p><ul><li>发送延迟（传输时延 ）    发送数据时，数据块从结点进入到传输媒体所需要的时间。</li><li>发送速率      通常是以信道最高数据率发送数据，因此就是信道带宽。</li></ul><p>$$<br>{发送延迟}&#x3D;\frac{数据帧长度（比特）}{发送速率（比特&#x2F;秒）}<br>$$</p><ul><li>传播延迟    电磁波在信道中需要传播一定的距离而花费的时间。 </li><li>信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。</li></ul><p>$$<br>{传播延迟}&#x3D;\frac{信道长度（米）}{信号在信道上的传播速率（米&#x2F;秒）}<br>$$</p><ul><li>处理延迟    交换结点为存储转发而进行一些必要的处理所花费的时间。 </li><li>排队延迟    结点缓存队列中分组排队所经历的时延。</li><li>排队延迟的长短往往取决于网络中当时的通信量，随时间变化会很大。</li><li>分组从一个结点转发到另一个结点所经历的总延迟就是以上四种延迟之和： </li><li>总延迟 &#x3D; 发送延迟 + 传播延迟 + 处理延迟 + 排队延迟</li></ul><p>2-16 共有4个站进行码分多址通信。4个站的码片序列为 A：（－1－1－1＋1＋1－1＋1＋1） B：（－1－1＋1－1＋1＋1＋1－1） C：（－1＋1－1＋1＋1＋1－1－1） D：（－1＋1－1－1－1－1＋1－1） 现收到这样的码片序列S：（－1＋1－3＋1－1－3＋1＋1）。问哪个站发送数据了？发送数据的站发送的是0还是1？</p><p>解：S•A&#x3D;（＋1－1＋3＋1－1＋3＋1＋1）／8&#x3D;1， A发送1</p><p>S•B&#x3D;（＋1－1－3－1－1－3＋1－1）／8&#x3D;－1， B发送0</p><p>S•C&#x3D;（＋1＋1＋3＋1－1－3－1－1）／8&#x3D;0， C无发送</p><p>S•D&#x3D;（＋1＋1＋3－1＋1＋3＋1－1）／8&#x3D;1， D发送1</p><p>不归零制：正电平代表 1，负电平代表 0。<br>归零制：正脉冲代表 1，负脉冲代表 0。<br>曼彻斯特编码：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。<br>差分曼彻斯特编码：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20221214171811781.png" alt="image-20221214171811781"> </p><p><strong>数据链路层：需要解决那些问题，CSMA&#x2F;CD的原理</strong> </p><p>解决的问题：封装成帧、透明传输、差错检测</p><p>载波监听多点接入&#x2F;碰撞检测协议</p><p>Ａ、Ｂ 两个站点相距 １ ｋｍ，这两个站点进行碰撞检测的过程如下：<br>（１） 当 ｔ ＝０ 时，Ａ 站点开始发送数据，此时 Ｂ 站点检测到信道空闲。<br>（２） 当 ｔ ＝ α － β 时，Ａ 站点发送的数据还没有到达 Ｂ 站点，Ｂ 站点因为检测到信道空闲，所以开始发送数据。<br>（３） 当 ｔ ＝ α － β／２ 时，Ａ 站点发送的数据和 Ｂ 站点发送的数据发生了碰撞，但是，此时Ａ 站点和 Ｂ 站点均不知道发生了碰撞；<br>（４） 当 ｔ ＝ α 时，Ａ 站点发送的数据达到 Ｂ 站点，Ｂ 站点由此检测到发生了碰撞，于是立即停止发送数据。<br>（５） 当 ｔ ＝２α － β 时， Ｂ 站点发送的数据 （因为 Ｂ 站点检测到碰撞后立即停止了数据发送， 所以到达 Ａ 站点的数据为残缺的帧） 到达 Ａ 站点， 于是 Ａ 站点也检测到发生碰撞， 立即停止数据发送。<br>经过此次碰撞， Ａ 站点和 Ｂ 站点的数据发送均失败了， 它们都需要推迟一段时间后， 再重新发送数据。</p><p><strong>网络层：IP地址的表示方法、IP地址的分类（含V6），子网掩码的作用，根据子网掩码计算网络号、最小地址、最大地址<br> 网络实验配置路由器的命令</strong></p><p>表示方法：主机号：网络号，点分十进制表示， 冒号十六进制记法</p><table><thead><tr><th><strong>网络类别</strong></th><th><strong>最大可指派的网络数</strong></th><th>主机号</th><th><strong>第一个可指派的网络号</strong></th><th><strong>最后一个可指派的网络号</strong></th><th><strong>每个网络中的最大主机数</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td>1~126（2<sup>7</sup>-2）</td><td>2<sub>24</sub>-2</td><td>1</td><td>126</td><td>16777214</td></tr><tr><td><strong>B</strong></td><td>16383（2<sup>14</sup>-1）</td><td>2<sup>16</sup>-2</td><td>128.1</td><td>191.255</td><td>65534</td></tr><tr><td><strong>C</strong></td><td>2097151（2<sup>21</sup>-1）</td><td>2<sup>8</sup>-20</td><td>192.0.1</td><td>223.255.255</td><td>254</td></tr></tbody></table><p>子网掩码的作用：分隔网络、计算网络号<br>                            用来判断任意两台计算机的IP地址是否属于同一子网络</p><hr><p><strong>运输层：TCP可靠传输的实现方法、序号和确认序号的含义，tcp建立连接和拆除连接的过程</strong></p><p>可靠传输的实现方法：<br>1、停止等待协议：每发送完一个分组就停止发送，等待对方的确认<br>2、无差错，等待对方确认<br>3、出现差错，超时重传<br>4、确认丢失和确认迟到<br>5、自动重传请求ARQ</p><p>TCP 连接的每一端都必须设有两个窗口——一个发送窗口和一个接收窗口。<br>TCP 的可靠传输机制用字节的序号进行控制。TCP 所有的确认都是基于序号而不是基于报文段。<br>TCP 两端的四个窗口经常处于动态变化之中。<br>TCP连接的往返时间 RTT 也不是固定不变的。需要使用特定的算法估算较为合理的重传时间。</p><p>序号字段——占 4 字节。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。 </p><p>确认号字段——占 4 字节，是期望收到对方的下一个报文段的数据的第一个字节的序号。 </p><p><strong>建立连接</strong></p><p>A 的 TCP 向 B 发出连接请求报文段，其首部中的同步位 SYN &#x3D; 1，并选择序号 x，表明下一个报文段的第一个数据字节的序号是 x + 1。<br>B 的 TCP 收到连接请求报文段后，如同意，则发回确认，在确认报文段中使 SYN &#x3D; 1 和 ACK &#x3D; 1，其确认号应为 ack &#x3D; x  1，并选择序号seq &#x3D; y。<br>A 收到此报文段后，向 B 给出确认，其 ACK &#x3D; 1，序号应为 seq &#x3D; x + 1，确认号应为 ack &#x3D; y  1。<br>A 的 TCP 通知上层应用进程，连接已经建立。<br>当运行服务器进程的主机 B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程，连接已经建立。 </p><p><strong>连接释放</strong></p><p><strong>应用层：DNS的工作方式机各层的封装过程、FTP通信使用的两个连接</strong></p><p>DNS的工作方式：递归查询，迭代查询，默认端口53</p><p>FTP通信使用的两个连接；控制连接和数据连接 默认端口21</p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a><strong>计算机网络</strong></h1><p>DHCP分配IP地址时，只需要写范围就行，不需要写掩码，比如写成111.123.15.5~111.123.15.254就可以了</p><p>源IP和目的IP也是一样，不需要写掩码，不要写</p><p>ARP请求的是广播，返回的是单播</p><p>计算机网络最基本的功能是 数据通信</p><p>局域网和广域网的差异不仅在于它们所覆盖的范围不同，还主要在于它们它们所采用的协议和网络技术不同。广域网采用点对点技术，局域网采用广播技术</p><p>访问互连网时，其实就是默认路由，目的IP为0.0.0.0，掩码为0.0.0.0</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a><strong>第一章</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps365.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps366.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps367.jpg" alt="img"> </p><h2 id="二、物理层-1"><a href="#二、物理层-1" class="headerlink" title="二、物理层"></a>二、<strong>物理层</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps368.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps369.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps370.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps371.jpg" alt="img"> </p><p>电路交换不提供差错控制</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps372.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps373.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps374.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps375.jpg" alt="img"> </p><p>奈氏准则的码元传输速率又叫做调制速度</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps376.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps377.jpg" alt="img"> </p><p>建立虚电路时，分组携带完整的目标地址，进行路由选择</p><p>之后，只需要携带虚电路号就可以</p><p>虚电路不需要预分配带宽</p><h2 id="三、数据链路层-1"><a href="#三、数据链路层-1" class="headerlink" title="三、数据链路层"></a>三、<strong>数据链路层</strong></h2><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps378.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps379.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps380.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps381.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps382.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps383.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps384.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps385.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps386.jpg" alt="img"> </p><h3 id="3-1、数据链路层功能"><a href="#3-1、数据链路层功能" class="headerlink" title="3.1、数据链路层功能"></a><strong>3.1、数据链路层功能</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps387.jpg" alt="img"> </p><h3 id="3-2、组帧"><a href="#3-2、组帧" class="headerlink" title="3.2、组帧"></a><strong>3.2、组帧</strong></h3><h3 id="3-3、差错控制"><a href="#3-3、差错控制" class="headerlink" title="3.3、差错控制"></a><strong>3.3、差错控制</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps388.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps389.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps390.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps391.jpg" alt="img"> </p><h3 id="3-4、流量控制与可靠传输机制"><a href="#3-4、流量控制与可靠传输机制" class="headerlink" title="3.4、流量控制与可靠传输机制"></a><strong>3.4、流量控制与可靠传输机制</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps392.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps393.jpg" alt="img"> </p><p>GBN序列号≥发送窗口数+1</p><p>发送窗口+接收窗口≤帧序号</p><h3 id="3-5、介质访问控制"><a href="#3-5、介质访问控制" class="headerlink" title="3.5、介质访问控制"></a><strong>3.5、介质访问控制</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps394.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps395.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps396.jpg" alt="img"> </p><p>以太网帧长1500B </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps397.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps398.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps399.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps400.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps401.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps402.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps403.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps404.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps405.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps406.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps407.jpg" alt="img"> </p><p>以太网广播后，发送结点也可以收到</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps408.jpg" alt="img"> </p><p>VLAN建立在交换技术上，以软件方式实现逻辑分组与管理，与实际位置无关</p><p>三种划分①基于端口②基于网卡地址MAC地址③基于网络层地址</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps409.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps410.jpg" alt="img"> </p><table><thead><tr><th></th><th></th><th>接收地址</th><th>发送地址</th><th></th><th></th></tr></thead><tbody><tr><td>去往AP</td><td>来自AP</td><td>地址1</td><td>地址2</td><td>地址3</td><td>地址4</td></tr><tr><td>0</td><td>1</td><td>目的地址</td><td>AP地址</td><td>源地址</td><td></td></tr><tr><td>1</td><td>0</td><td>AP地址</td><td>源地址</td><td>目的地址</td><td></td></tr></tbody></table><p>无线CSMA&#x2F;CA进行信道预约的方法是交换RTS与CTS帧</p><p>RTS请求发送帧</p><p>CTS允许发送帧</p><p>CSMA&#x2F;CD的冲突处理方法：二进制指数退避法</p><p>CSMA&#x2F;CA帧的帧间间隔IFS有三种：DIFS、PIFS、SIFS</p><p>DIFS：站点发送数据前，若载波监听道信道空闲，需等待DIFS后发送RTS预约通道（实践最初）</p><p>SIFS：网络中的控制帧以及对所接收数据的确认帧都采用SIFS作为发送之前的等待时延</p><h3 id="3-6、局域网"><a href="#3-6、局域网" class="headerlink" title="3.6、局域网"></a><strong>3.6、局域网</strong></h3><h3 id="3-7、广域网"><a href="#3-7、广域网" class="headerlink" title="3.7、广域网"></a><strong>3.7、广域网</strong></h3><p>从互连网的角度，广域网和互连网是平等的</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps411.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps412.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps413.jpg" alt="img"> </p><p>PPP协议：面向字节、不可靠</p><p>PPP工作过程：物理层-》LCP-&gt;NCP-&gt;数据</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps414.jpg" alt="img"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps415.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps416.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps417.jpg" alt="img"> </p><h3 id="3-8、数据链路层设备"><a href="#3-8、数据链路层设备" class="headerlink" title="3.8、数据链路层设备"></a><strong>3.8、数据链路层设备</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps418.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps419.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps420.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps421.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps422.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps423.jpg" alt="img"> </p><p>收到是所有人都收到，转发的话是除了自己以外的所有</p><h2 id="四、网络层-1"><a href="#四、网络层-1" class="headerlink" title="四、网络层"></a><strong>四、网络层</strong></h2><table><thead><tr><th>目的网络IP地址</th><th>子网掩码</th><th>下一跳IP地址（下一个路由器）</th><th>接口（自己的接口）</th></tr></thead><tbody><tr><td>①目的网络 ②目的主机③默认路由</td><td>0.0.0.0</td><td></td><td></td></tr></tbody></table><p>默认网关：安保、门卫、当转发一个并不在自己子网内的地址</p><p>访问一个域名过程：（看强化那个图）</p><p>①DNS-&gt;IP（递归+迭代）</p><p>判断是不是同属一个子网（在同一个子网：用ARP广播找，单播响应；不在同一个子网：默认网关MAC相与，ARP广播，</p><p>单播响应）</p><p>②ARP-&gt;MAC</p><p>IPV4(32位）MAC地址（48位）IPV6（128位）</p><p>BGP、DHCP是应用层的协议</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps424.jpg" alt="img"> </p><h3 id="4-1、功能"><a href="#4-1、功能" class="headerlink" title="4.1、功能"></a><strong>4.1、功能</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps425.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps426.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps427.jpg" alt="img"> </p><h3 id="4-2、路由算法"><a href="#4-2、路由算法" class="headerlink" title="4.2、路由算法"></a><strong>4.2、路由算法</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps428.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps429.jpg" alt="img"> </p><p>慢收敛导致路由回路</p><p>DHCP分配IP地址时，只需要写范围就行，不需要写掩码，比如写成111.123.15.5~111.123.15.254就可以了</p><h3 id="4-3、IPV4"><a href="#4-3、IPV4" class="headerlink" title="4.3、IPV4"></a><strong>4.3、IPV4</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps430.jpg" alt="img"> </p><p>版本字段：4表示IPV4，6表示IPV6</p><p>协议字段：6表示TCP，17表示UDP</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps431.jpg" alt="img"> </p><p>总长度包含首部长度</p><p>判断是否分片要看DF,MF和片偏移</p><p>以太网的MTU为1500B</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps432.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps433.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps434.jpg" alt="img"> </p><p>不考虑NAT，IP地址不会改变</p><p>考虑NAT，内网IP地址会改变</p><p>只要经过路由器，MAC地址都改变</p><p>NAT地址转换，考虑是否在内网中</p><p>1台主机可以有多个IP地址，但是必须属于多个逻辑网络</p><p>CIDR（无分类编址）：把小的网络汇聚成大的超网（网络前缀，代表前x位为网络号）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps435.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps436.jpg" alt="img"> </p><p>NAT中，本地端口和IP地址不匹配会丢弃，不会新增条目，增加条目是****管理员****的任务</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps437.jpg" alt="img"> </p><p>ARP请求是广播，ARP响应是单播</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps438.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps439.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps440.jpg" alt="img"> </p><p>源点抑制：拥塞</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps441.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps442.jpg" alt="img"> </p><h3 id="4-4、IPV6"><a href="#4-4、IPV6" class="headerlink" title="4.4、IPV6"></a><strong>4.4、IPV6</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps443.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps444.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps445.jpg" alt="img"> </p><p>默认网关设为0.0.0.0&#x2F;0</p><p>TTL考虑路由器数量</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps446.jpg" alt="img"> </p><h3 id="4-5、路由协议"><a href="#4-5、路由协议" class="headerlink" title="4.5、路由协议"></a><strong>4.5、路由协议</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps447.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps448.jpg" alt="img"> </p><p>x<img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps449.jpg" alt="img"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps450.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps451.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps452.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps453.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps454.jpg" alt="img"> </p><p>RIP直连跳数为1</p><p>TTL就是看的是路由器的个数</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps455.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps456.jpg" alt="img"> </p><h3 id="4-6、IP组播"><a href="#4-6、IP组播" class="headerlink" title="4.6、IP组播"></a><strong>4.6、IP组播</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps457.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps458.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps459.jpg" alt="img"> </p><p>应该到7f-ff-ff，上面错了</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps460.jpg" alt="img"> </p><h3 id="4-7、移动IP"><a href="#4-7、移动IP" class="headerlink" title="4.7、移动IP"></a><strong>4.7、移动IP</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps461.jpg" alt="img"> </p><h3 id="4-8、设备"><a href="#4-8、设备" class="headerlink" title="4.8、设备"></a><strong>4.8、设备</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps462.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps463.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps464.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps465.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps466.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps467.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps468.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps469.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps470.jpg" alt="img"> </p><h2 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a><strong>五、传输层</strong></h2><h3 id="5-1、服务"><a href="#5-1、服务" class="headerlink" title="5.1、服务"></a><strong>5.1、服务</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps471.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps472.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps473.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps474.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps475.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps476.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps477.jpg" alt="img"> </p><p>21FTP的控制连接</p><p>20FTP的数据连接（连接时先控制，断开时后控制）</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps478.jpg" alt="img"> </p><p>网络层：点到点</p><p>传输层：端到端</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps479.jpg" alt="img"> </p><h3 id="5-2、UDP协议"><a href="#5-2、UDP协议" class="headerlink" title="5.2、UDP协议"></a><strong>5.2、UDP协议</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps480.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps481.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps482.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps483.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps484.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps485.jpg" alt="img"> </p><p>分用依据的目的端口</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps486.jpg" alt="img"> </p><h3 id="5-3、TCP协议"><a href="#5-3、TCP协议" class="headerlink" title="5.3、TCP协议"></a><strong>5.3、TCP协议</strong></h3><p>TCP面向字节流</p><p>UDP面向报文</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps487.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps488.jpg" alt="img">协议字段：TCP是6、UDP是17</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps489.jpg" alt="img"> </p><p>TCP面向字节，但是是对****报文段****进行确认</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps490.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps491.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps492.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps493.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps494.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps495.jpg" alt="img"> </p><p>发生超时，则是慢开始；发生****3个冗余ACK报文****，则是快开始</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps496.jpg" alt="img"> </p><p>FIN&#x3D;5001表示第5001字节未发送</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps497.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps498.jpg" alt="img"> </p><p>以太网帧最小46B，最大1500B</p><p>开始时的SYN占用一个序号，但不传送数据</p><p>结束时的FIN占用一个序号，但不传送数据</p><h2 id="六、应用层-1"><a href="#六、应用层-1" class="headerlink" title="六、应用层"></a>六、<strong>应用层</strong></h2><h3 id="6-1、网络应用模型"><a href="#6-1、网络应用模型" class="headerlink" title="6.1、网络应用模型"></a><strong>6.1、网络应用模型</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps499.jpg" alt="img"> </p><h3 id="6-2、域名系统DNS"><a href="#6-2、域名系统DNS" class="headerlink" title="6.2、域名系统DNS"></a><strong>6.2、域名系统DNS</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps500.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps501.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps502.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps503.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps504.jpg" alt="img"> </p><h3 id="6-3、文件传输协议FTP"><a href="#6-3、文件传输协议FTP" class="headerlink" title="6.3、文件传输协议FTP"></a><strong>6.3、文件传输协议FTP</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps505.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps506.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps507.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps508.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps509.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps510.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps511.jpg" alt="img"> </p><h3 id="6-4、电子邮件"><a href="#6-4、电子邮件" class="headerlink" title="6.4、电子邮件"></a><strong>6.4、电子邮件</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps512.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps513.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps514.jpg" alt="img"> </p><p>POP3、IMAP明文</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps515.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps516.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps517.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps518.jpg" alt="img"> </p><h3 id="6-5、万维网（WWW）"><a href="#6-5、万维网（WWW）" class="headerlink" title="6.5、万维网（WWW）"></a><strong>6.5、万维网（WWW）</strong></h3><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps519.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps520.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps521.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps522.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps523.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps524.jpg" alt="img"> </p><p>Connection:Close 非持续连接</p><p>Connection:keep-alive 持续连接</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps525.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps526.jpg" alt="img"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/wps527.jpg" alt="img"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oxidized</title>
      <link href="/2024/07/07/%E8%AE%BA%E6%96%87/Oxidized/"/>
      <url>/2024/07/07/%E8%AE%BA%E6%96%87/Oxidized/</url>
      
        <content type="html"><![CDATA[<h1 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><p><a href="https://cloud.tencent.com/developer/article/1657021">构建企业级网络设备自动备份系统 – Oxidized （ubuntu 20.04 LTS）-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h2 id="1-2、下载ruby3"><a href="#1-2、下载ruby3" class="headerlink" title="1.2、下载ruby3"></a>1.2、下载ruby3</h2><p><a href="https://zhuanlan.zhihu.com/p/684381088">ubuntu20 安装 ruby 3.0 - 知乎 (zhihu.com)</a></p><p>注意：ruby3是在用户模式下下载的，它的环境也在用户模式下；如果使用sudo，那就是在root用户下，它的环境还是ruby2.7</p><h2 id="1-3、pip换源"><a href="#1-3、pip换源" class="headerlink" title="1.3、pip换源"></a>1.3、pip换源</h2><p><a href="https://blog.csdn.net/JineD/article/details/124774570">完美解决 Could not find a version that satisfies the requirement 安装包名字 (from versions: )-CSDN博客</a></p><h2 id="1-3、下载virtualenv-venv"><a href="#1-3、下载virtualenv-venv" class="headerlink" title="1.3、下载virtualenv&#x2F;venv"></a>1.3、下载virtualenv&#x2F;venv</h2><p>[要不我们还是用回 virtualenv&#x2F;venv 和 pip 吧 - 知乎 (zhihu.com)](<a href="https://zhuanlan.zhihu.com/p/81568689#:~:text=%E5%9C%A8">https://zhuanlan.zhihu.com/p/81568689#:~:text=在</a> Windows 下使用下面的命令安装 virtualenv： %24 pip install virtualenv,pip 的方式安装 Python 包，但这仍然是最简单和统一的方式。 更安全的方式是使用系统包管理器来安装，或是使用 pip –user 方式安装。)</p><p>doubanio.com</p><p>[ERROR: Could not open requirements file: <a href="https://blog.csdn.net/qq_30722795/article/details/104077236">Errno 2] 没有那个文件或目录: ‘requrements.txt’-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程</title>
      <link href="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
      <url>/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>第一章：软件生命周期、软件生命周期模型（大点）、每一种开发模型和开发方法的对应关系<br>第二章：纯收入、投资回收期、需求分析的问题识别（11点，课件上好像没有，老教材好像有）、流程图<br>第三章：耦合性和内聚性（大点、定义、每一种的特点强弱）、软件结构准则（5条）、算法描述（4个工具）、模块的属性<br>第五章：白盒测试（大点、定义、3方法掌握两个循环不用掌握）、黑盒测试（定义、方法，5个掌握三个）<br>    系统测试（幻灯片一页、每种类型）<br>    测试用例的定义（<br>    软件错误的类型（有哪几种）<br>    软件可测试性可具备的特性（课件上好像没有）<br>    测试组件<br>    调试时修改错误的原则（课件有）<br>第六章：维护的副作用（数据文档什么什么三个，每一个副作用有一页，有啥内容）<br>第八章：数据流图（大点）<br>    结构化语言判定表判定树（大点）<br>    变换型、事务型咋映射为软件结构图的过程</p><p>第一章：软件生命周期、软件生命周期模型（大点）、每一种开发模型和开发方法的对应关系</p><ul><li><p>软件生命周期：（七个阶段）</p><ul><li>软件生命周期是指一个软件从提出开发要求直到该软件报废为止的整个时期，分为可行性分析和项目开发计划、需求分析、概要设计、详细设计、编码、测试和维护7个阶段。</li><li>可行性分析和项目开发计划（数据流图）</li><li>需求分析（流程图）</li><li>概要设计（映射成软件结构图、功能模块图）（任务：确定系统的结构）</li><li>详细设计</li><li>编码</li><li>测试（单元测试、集成测试、确认测试、系统测试、验收测试）</li><li>维护</li></ul></li><li><p>软件生命周期模型（大点）、每一种开发模型和开发方法的对应关系</p></li><li><p>软件生命周期模型是描述软件开发过程中各种活动如何执行的模型。</p><ol><li>瀑布模型——结构化方法、Jackson方法</li><li>增量模型——结构化方法、Jackson方法</li><li>螺旋模型——结构化方法</li><li>喷泉模型——面向对象的开发方法</li><li>基于知识的模型——结构化方法</li><li>变换模型——形式化的维也纳方法</li><li>统一过程——面向对象的开发方法</li></ol><p>结构化方法可使用瀑布模型、增量模型和螺旋模型、基于知识的模型</p><p>Jackson方法可使用瀑布模型、增量模型</p><p>面向对象的开发方法可使用喷泉模型和统一过程</p><p>形式化的维也纳方法只能用变换模型进行开发</p></li></ul><p>第二章：纯收入、投资回收期、需求分析的问题识别（11点，课件上好像没有，老教材好像有）、流程图</p><p>纯收入：在软件生命周期内，累计的经济收益与最初的投资之差</p><p>投资回收期：累计的经济效益等于最初投资所用的时间</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509194002698.png" alt="image-20230509194002698"></p><ul><li>问题识别：（不一定对）<ol><li>功能需求</li><li>性能需求</li><li>环境需求</li><li>用户界面需求</li><li>可靠性</li><li>安全性</li><li>保密性</li><li>可移植性</li><li>可维护性</li><li>资源使用需求</li><li>软件成本消耗与开发进度需求</li></ol></li></ul><p>流程图：</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509163927202.png" alt="image-20230509163927202"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509163938844.png" alt="image-20230509163938844"></p><p>第三章：耦合性和内聚性（大点、定义、每一种的特点强弱）、软件结构准则（5条）、算法描述（4个工具）、模块的属性</p><ul><li><p><strong>耦合性（也称块间联系，指软件系统结构中各模块间相互联系紧密程度的一种度量</strong></p><ol><li>无直接耦合：指两个模块之间没有直接的联系</li><li>数据耦合：两个模块之间有调用关系，传递的是简单的数据值（最想要）</li><li>标记耦合：指两个模块之间传递的是数据结构</li><li>控制耦合：指一个模块调用另一个模块时，传递的是控制变量（如开关、标识等）</li><li>公共耦合：指通过一个公告数据环境相互左右的那些模块间的耦合（使用全局数据变量或公用的数据区）</li><li>内容耦合：最高程度的耦合，也是最差的耦合。模块之间有公用的部分</li></ol></li><li><p><strong>内聚性：也称为块内联系，指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量</strong></p><ol><li>偶然内聚：指一个模块内的各处理元素之间没有任何联系</li><li>逻辑内聚：指模块内执行几个逻辑上相似的功能，通过参数确定该模块完成哪一步的功能</li><li>时间内聚：把需要同时执行的动作组合在一起形成的模块。</li><li>过程内聚：</li><li>通信内聚：指模块内所有处理元素都在同一个数据结构上操作，或者指各处理使用相同的输入数据或者产生相同的输出数据</li><li>信息内聚：使用相同的数据结构（几个加工同时引用一个共同的数据）</li><li>功能内聚：指模块内所有元素共同完成一个功能，缺一不可。</li></ol></li><li><p>软件结构准则（5条）</p><ol><li>模块独立性准则</li><li>控制范围与作用范围之间的准则</li><li>软件结构的形态特征准则</li><li>模块的大小准则</li><li>模块的接口准则</li></ol></li><li><p>算法描述（4个工具）、</p><ol><li>流程图</li><li>PAD图（问题分析图）</li><li>盒图</li><li>PDL语言<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230506083228859.png" alt="image-20230506083228859"></li><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230506083241034.png" alt="image-20230506083241034"></li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509201035663.png" alt="image-20230509201035663"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509201057391.png" alt="image-20230509201057391"> </p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509201110576.png" alt="image-20230509201110576"></p></li><li><p>模块的属性</p><ol><li>接口：指模块的输入与输出</li><li>功能：指模块实现什么功能</li><li>逻辑：描述内部如何实现要求的功能及所需的数据</li><li>状态：指该模块的运行环境，即模块的调用与被调用关系</li></ol></li></ul><hr><p>第五章：</p><ul><li><p>白盒测试（大点、定义、3方法掌握两个循环不用掌握）、</p><ol><li><p>逻辑覆盖（先画图）</p><ol><li><p>语句覆盖：使程序中每个语句至少执行一次。（真假分支中的语句）<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204116135.png" alt="image-20230509204116135"></p></li><li><p>判定覆盖（分支覆盖）：使每个判定的真假分支都至少执行一次。<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204103381.png" alt="image-20230509204103381"></p></li><li><p>条件覆盖：使每个判定的每个条件的可能取值至少执行一次。<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204050433.png" alt="image-20230509204050433"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204027230.png" alt="image-20230509204027230"></p></li><li><p>判定&#x2F;条件覆盖：选取足够多的测试用例，使判断中的每个条件的所有可能取值至少执行一次，同时每个判断本身的所有可能判断结果至少执行一次。<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204013370.png" alt="image-20230509204013370"></p></li><li><p>条件组合覆盖：所有可能的条件取值组合至少执行一次<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509203949395.png" alt="image-20230509203949395"></p></li><li><p>路径覆盖：覆盖每一个可能的路径<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509203936002.png" alt="image-20230509203936002"></p></li></ol></li><li><p>基本路径测试法：<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230506085215479.png" alt="image-20230506085215479"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204452201.png" alt="image-20230509204452201"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204331036.png" alt="image-20230509204331036"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204426251.png" alt="image-20230509204426251"></p></li></ol></li><li><p>黑盒测试（定义、方法，5个掌握三个）</p><ol><li><p>等价类划分<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509211418577.png" alt="image-20230509211418577"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230506085429926.png" alt="image-20230506085429926"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509211440914.png" alt="image-20230509211440914"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509211458429.png" alt="image-20230509211458429"></p></li><li><p>边界值分析<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230506085505315.png" alt="image-20230506085505315"></p></li><li><p>错误推测</p></li><li><p>因果图</p></li><li><p>综合策略</p></li></ol><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509204704256.png" alt="image-20230509204704256"></p></li><li><p>​系统测试（幻灯片一页、每种类型）</p><ol><li>恢复测试：以不同的方式强使软件出现故障，检测软件能否恰当地完成恢复<br>自动恢复：检测重新初始化、监测点设置、数据恢复、重新启动等是否正确<br>人工干预恢复：检测平均恢复时间是否在允许范围内</li><li>安全性测试：设计测试用例，突破软件安全机构的安全保密措施，检验系统预防机制的漏洞</li><li>强度测试：设计测试用例，检验系统能i最高能达到的实际限度，让系统处于资源的异常数量、异常频率、异常批量的条件下测试系统的承受能力。一般比平常限度高5-10倍的限度做测试用例</li><li>性能测试：设计测试用例，并记录软件运行性能，与性能要求比较，检验是否达到性能要求规格。</li></ol></li><li><p>​测试用例的定义（<br>测试用例是一组输入和期待的结果，它根据引起故障和检查的目的来使用组件。</p></li><li><p>​软件错误的类型（有哪几种）</p><ol><li>功能错(需求分析错误)</li><li>软件结构错</li><li>数据错</li><li>编码错</li><li>软件集成错</li><li>测试定义与测试执行错误</li></ol></li><li><p>​软件可测试性可具备的特性（课件上好像没有）</p><ol><li>可操作性</li><li>可观察性</li><li>可控制性</li><li>可分解性</li><li>稳定性</li><li>简单易理解</li></ol></li><li><p>​测试组件</p><ul><li>是系统中可以孤立进行测试的部分，一个组件可以是对象，一组对象，一个或多个子系统。</li></ul></li><li><p>​调试时修改错误的原则</p><ol><li>注意错误的群集现象、在错误近邻检查</li><li>找到错误的本质并修改</li><li>采用回归测试，避免因修改而引起的新错误</li></ol></li></ul><hr><ul><li>第六章：</li><li>维护的副作用（数据文档什么什么三个，每一个副作用有一页，有啥内容）<ol><li><p>编码副作用</p><ol><li>删除或修改一个子程序、一个标号和一个标识符</li><li>改变程序代码的时序关系、改变占用存储的大小、改变逻辑运算符</li><li>修改文件的打开或关闭</li><li>改进程序的执行效率</li><li><strong>把设计上的改变翻译成代码的改变</strong></li><li>为边界条件的逻辑测试做出改变</li></ol></li><li><p>数据副作用</p><ol><li><strong>重新定义局部或全局的常量、记录或文件格式</strong></li><li>增加或减少一个数组或高层数据结构的大小</li><li>修改全局或公共数据</li><li>重新初始化控制标志或指针</li><li>重新排列输入、输出或子程序的参数</li></ol></li><li><p>文档副作用</p><ol><li><strong>修改交互输入的顺序或格式，没有正确的记入文档中</strong></li><li>过时的文档内容、索引和文本可能造成冲突等</li></ol></li></ol></li></ul><p>第八章：</p><ul><li><p>数据流图（大点）</p><ul><li><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509211923556.png" alt="image-20230509211923556"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230506094907601.png" alt="image-20230506094907601"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509212002202.png" alt="image-20230509212002202"><br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509211723161.png" alt="image-20230509211723161"></li></ul></li><li><p>​结构化语言判定表判定树（大点）<br><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509212052461.png" alt="image-20230509212052461"></p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20230509211832558.png" alt="image-20230509211832558"></p></li><li><p>​变换型、事务型咋映射为软件结构图的过程</p></li></ul><p>事务型</p><p><img src="/2024/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/../../../Blogs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B.assets/image-20230509212218744.png" alt="image-20230509212218744"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
