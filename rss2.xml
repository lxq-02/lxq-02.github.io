<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>李新乾的个人博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>命由我做，福自己求</description>
    <pubDate>Fri, 23 Aug 2024 07:17:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>http://example.com/2024/08/23/Untitled/</link>
      <guid>http://example.com/2024/08/23/Untitled/</guid>
      <pubDate>Fri, 23 Aug 2024 07:17:17 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/2024/08/23/Untitled/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typora</title>
      <link>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/</link>
      <guid>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/</guid>
      <pubDate>Thu, 22 Aug 2024 08:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;0-Typora&quot;&gt;&lt;a href=&quot;#0-Typora&quot; class=&quot;headerlink&quot; title=&quot;0 Typora&quot;&gt;&lt;/a&gt;0 Typora&lt;/h1&gt;&lt;p&gt;基础Typora是一款&lt;strong&gt;支持实时预览的Markdown文本编辑器&lt;/stron</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="0-Typora"><a href="#0-Typora" class="headerlink" title="0 Typora"></a>0 Typora</h1><p>基础Typora是一款<strong>支持实时预览的Markdown文本编辑器</strong>。它有OS X、Windows、Linux三个平台的版本，且<strong>完全免费。</strong></p><h2 id="0-1-Markdown"><a href="#0-1-Markdown" class="headerlink" title="0.1 Markdown"></a>0.1 Markdown</h2><p>Markdown 是用来编写结构化文档的一种纯文本模式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度 的格式排版。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较收到认可的是 GFM标准，它是由著名代码托管网站 Github 所制定的。 Typora 主要使用的是 GFM 标准。</p><h1 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a>一、基本知识</h1><h2 id="1-0-打字机模式和专注模式"><a href="#1-0-打字机模式和专注模式" class="headerlink" title="1.0 打字机模式和专注模式"></a>1.0 打字机模式和专注模式</h2><p>[打字机模式]使得你所编辑的那一行永远处于屏幕正中。</p><p>[专注模式] 使你正在编辑的哪一行保留颜色，而其他行的字体呈灰色</p><p>你可以在 $视图-专注模式 &#x2F; 打字机模式$ 中勾选使用这两个模式</p><h2 id="1-1-空格和换行"><a href="#1-1-空格和换行" class="headerlink" title="1.1 空格和换行"></a>1.1 空格和换行</h2><p>Typora 在空格与换行部分主要是 使用 CommonMark 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><strong>空格</strong>：在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个  <code>\</code>转义符，或者直接使用 HTML风格的<code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行</strong>：需要说明的是，在 Markdown 语法下，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在Typora 中，你可以通过 <code>shift + Enter</code>完成一次软换行，软换行只在编辑界面可见，当文本导出时换行会省略。</li><li>**硬换行： **你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li></ul><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105094332841.png" alt="image-20211105094332841"></p><h2 id="1-2-emoji-表情"><a href="#1-2-emoji-表情" class="headerlink" title="1.2  emoji 表情"></a>1.2  emoji 表情</h2><p>在 Typora 中，你可以用 <code>:emoji:</code>的形式来打出 emoji，软件会自动给出图形的提示。</p><p>:horse:</p><h2 id="1-3-学术文档编辑器"><a href="#1-3-学术文档编辑器" class="headerlink" title="1.3 学术文档编辑器"></a>1.3 学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p><p><strong>LaTex</strong></p><p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ol><p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 &#96;&#96;&#96;&#96;&#96; 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/51bf2f290592e1ddbadb95765c04f297-1636077212750.png" alt="img"><strong>链接引用与脚注</strong></h3><p>**链接引用 **类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p>**脚注 **在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="  文件系统"></a><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/5f82606e6d89fe1eb24705c4ca6b895d.png" alt="img">  文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。</li></ul><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/ba295f21f0b71646bb36a0517e868ced.png" alt="img"></p><h1 id="二、数字符号"><a href="#二、数字符号" class="headerlink" title="二、数字符号"></a>二、数字符号</h1><h2 id="2-1-上标、下标、求和、括号"><a href="#2-1-上标、下标、求和、括号" class="headerlink" title="2.1 上标、下标、求和、括号"></a>2.1 上标、下标、求和、括号</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>上标</td><td><code>x^2</code>、<code>x^y</code>、<code>e^3</code></td><td>$x^2、x^y、e^3$</td></tr><tr><td>下标</td><td><code>x_0</code>、<code>a_1</code>、<code>T_1</code></td><td>$x_0、a_1、T_1$</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>$\sum$</td></tr><tr><td>求和上下标</td><td>\sum_0^3 、\sum\limits_0^{\infty} 、\sum\limits_{-\infty}^{\infty}</td><td>$\sum_0^3、\sum\limits_0^{\infty}、\sum\limits_{-\infty}^{\infty}$</td></tr><tr><td>中括号</td><td><code>[s(s+1)-(s-1)(s-2)]</code></td><td>$[s(s+1)-(s-1)(s-2)]$</td></tr><tr><td>花括号</td><td><code>\lbrace x-y \rbrace</code></td><td>$\lbrace x-y \rbrace$</td></tr></tbody></table><h2 id="2-2-三角函数、指数、对数"><a href="#2-2-三角函数、指数、对数" class="headerlink" title="2.2 三角函数、指数、对数"></a>2.2 三角函数、指数、对数</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>sin</td><td><code>\sin(x)</code></td><td>$\sin(x)$</td></tr><tr><td>cos</td><td><code>\cos(x)</code></td><td>$\cos(x)$</td></tr><tr><td>tan</td><td><code>\tan(x)</code></td><td>$\tan(x)$</td></tr><tr><td>log</td><td><code>\log_2 10</code></td><td>$\log_2 10$</td></tr><tr><td>ln</td><td><code>\ln2</code></td><td>$\ln2$</td></tr></tbody></table><h2 id="2-3-运算符"><a href="#2-3-运算符" class="headerlink" title="2.3 运算符"></a>2.3 运算符</h2><table><thead><tr><th></th><th><strong>markdown语法（输入在两个$$之间）</strong></th><th><strong>显示</strong></th></tr></thead><tbody><tr><td>乘</td><td><code>\times</code></td><td>$\times$</td></tr><tr><td>除</td><td><code>\div</code></td><td>$\div$</td></tr><tr><td>加减</td><td><code>\pm</code></td><td>$\pm$</td></tr><tr><td>减加</td><td><code>\mp</code></td><td>$\mp$</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>$\sum$</td></tr><tr><td>求积</td><td><code>\prod</code></td><td>$\prod$</td></tr><tr><td>微分</td><td><code>\partial</code></td><td>$\partial$</td></tr><tr><td>积分</td><td><code>\int</code>、<code>\displaystyle\int</code></td><td>$\int$、$\displaystyle\int $</td></tr><tr><td>不等于</td><td><code>\neq</code></td><td>$\neq$</td></tr><tr><td>大于等于</td><td><code>\geq</code></td><td>$\geq$</td></tr><tr><td>小于等于</td><td><code>\leq</code></td><td>$\leq$</td></tr><tr><td>约等于</td><td><code>\approx</code></td><td>$\approx$</td></tr><tr><td>不大于等于</td><td><code>x+y  \ngeq z</code></td><td>$x+y  \ngeq z$</td></tr><tr><td>点乘</td><td><code>a \cdot b</code></td><td>$ a \cdot b$</td></tr><tr><td>星乘</td><td><code>a \ast b</code></td><td>$a \ast b$</td></tr><tr><td>分式</td><td><code>\frac&#123;y&#125;&#123;x&#125;</code>、<code>\frac&#123;1&#125;&#123;x+1&#125;</code></td><td>$\frac{y}{x}、\frac{1}{x+1}$</td></tr></tbody></table><h2 id="2-4-导数，省略号"><a href="#2-4-导数，省略号" class="headerlink" title="2.4 导数，省略号"></a>2.4 导数，省略号</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>无穷</td><td><code>\infty</code></td><td>$\infty$</td></tr><tr><td>矢量</td><td><code>\vec&#123;a&#125;</code></td><td>$\vec{a}$</td></tr><tr><td>一阶导数</td><td><code>\dot&#123;x&#125;</code></td><td>$\dot{x}$</td></tr><tr><td>二阶导数</td><td><code>\ddot&#123;x&#125;</code></td><td>$\ddot{x}$</td></tr><tr><td>算数平均值</td><td><code>\bar&#123;a&#125;</code></td><td>$\bar{a}$</td></tr><tr><td>概率分布</td><td><code>\hat&#123;a&#125;</code></td><td>$\hat{a}$</td></tr><tr><td>虚数 i、j</td><td><code>\imath</code>、<code>\jmath</code></td><td>$\imath$  $\jmath$</td></tr><tr><td>四种省略符号</td><td><code>\ldots</code> <code>\cdots</code> <code>vdots</code> <code>\ddots</code></td><td>$\dots$  $\cdots$  $\vdots$ $\ddots$</td></tr></tbody></table><h2 id="2-5-积分、微分"><a href="#2-5-积分、微分" class="headerlink" title="2.5 积分、微分"></a>2.5 积分、微分</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>平均数运算</td><td><code>\overline&#123;xyz&#125;</code></td><td>$\overline{xyz}$</td></tr><tr><td>开二次方运算</td><td><code>\sqrt&#123;x&#125;</code></td><td>$\sqrt{x}$</td></tr><tr><td>极限运算</td><td><code>\lim^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;y&#125;&#123;x&#125;&#125;</code></td><td>$\lim^{x \to \infty}_{y \to 0}{\frac{y}{x}}$</td></tr><tr><td>求和运算</td><td><code>\sum^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;y&#125;&#123;x&#125;&#125;</code></td><td>$\sum^{x \to \infty}_{y \to 0}{\frac{y}{x}}$</td></tr><tr><td>积分运算</td><td><code>\int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;</code></td><td>$\int^{\infty}_{0}{xdx}$</td></tr><tr><td></td><td><code>\displaystyle \int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;</code></td><td>$\displaystyle \int^{\infty}_{0}{xdx}$</td></tr><tr><td>微分运算</td><td><code>\frac&#123;\partial x&#125;&#123;\partial y&#125;</code></td><td>$\frac{\partial x}{\partial y}$</td></tr></tbody></table><h2 id="2-6-集合运算"><a href="#2-6-集合运算" class="headerlink" title="2.6 集合运算"></a>2.6 集合运算</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>属于</td><td><code>\in</code></td><td>$\in$</td></tr><tr><td>不属于</td><td><code>\notin</code></td><td>$\notin$</td></tr><tr><td>包含于</td><td><code>\subset</code> <code>\supset</code></td><td>$\subset$ $\supset$</td></tr><tr><td>真包含于</td><td><code>\subseteq</code> <code>\supseteq</code></td><td>$\subseteq$ $\supseteq$</td></tr><tr><td>并集</td><td><code>\cup</code></td><td>$\cup$</td></tr><tr><td>交集</td><td><code>\cap</code></td><td>$\cap$</td></tr><tr><td>差集</td><td><code>\setminus</code></td><td>$\setminus$</td></tr><tr><td>同或</td><td><code>\bigodot</code></td><td>$\bigodot$</td></tr><tr><td>同与</td><td><code>\bigotimes</code></td><td>$\bigotimes$</td></tr><tr><td>异或</td><td><code>\bigoplus</code></td><td>$\bigoplus$</td></tr><tr><td>实数集合</td><td><code>\mathbb&#123;R&#125;</code></td><td>$\mathbb{R}$</td></tr><tr><td>自然数集合</td><td><code>\mathbb&#123;Z&#125;</code></td><td>$\mathbb{Z}$</td></tr><tr><td>析取联结词</td><td><code>$\vee$</code></td><td>$\vee$</td></tr><tr><td>合取联结词</td><td><code>$\wedge$</code></td><td>$\wedge$</td></tr><tr><td>蕴涵连接词</td><td><code>$\rightarrow$</code></td><td>$\rightarrow$</td></tr></tbody></table><h2 id="2-7、箭头"><a href="#2-7、箭头" class="headerlink" title="2.7、箭头"></a>2.7、箭头</h2><table><thead><tr><th align="center">Markdown语法</th><th>形状</th></tr></thead><tbody><tr><td align="center"><code>$\uparrow$</code></td><td>$\uparrow$</td></tr><tr><td align="center"><code>$\Uparrow&amp;</code></td><td>$\Uparrow$</td></tr><tr><td align="center"><code>&amp;\downarrow$</code></td><td>$\downarrow$</td></tr><tr><td align="center"><code>$\Downarrow$</code></td><td>$\Downarrow$</td></tr><tr><td align="center"><code>$\leftarrow$</code></td><td>$\leftarrow$</td></tr><tr><td align="center"><code>$\Leftarrow$</code></td><td>$\Leftarrow$</td></tr><tr><td align="center"><code>$\rightarrow$</code></td><td>$\rightarrow$</td></tr><tr><td align="center"><code>$\Rightarrow$</code></td><td>$\Rightarrow$</td></tr><tr><td align="center">$<code>\updownarrow$</code></td><td>$\updownarrow$</td></tr><tr><td align="center">$<code>\Updownarrow$</code></td><td>$\Updownarrow$</td></tr><tr><td align="center"><code>$\leftrightarrow$</code></td><td>$\leftrightarrow$</td></tr><tr><td align="center"><code>$\Leftrightarrow$</code></td><td>$\Leftrightarrow$</td></tr></tbody></table><hr><p>长箭头</p><table><thead><tr><th align="center">MarkDown</th><th>箭头形状</th></tr></thead><tbody><tr><td align="center"><code>$\longleftarrow$</code></td><td>$\longleftarrow$</td></tr><tr><td align="center"><code>$\Longleftarrow$</code></td><td>$\Longleftarrow$</td></tr><tr><td align="center"><code>$\longrightarrow$</code></td><td>$\longrightarrow$</td></tr><tr><td align="center"><code>$\Longrightarrow$</code></td><td>$\Longrightarrow$</td></tr><tr><td align="center"><code>$\longleftrightarrow$</code></td><td>$\longleftrightarrow$</td></tr><tr><td align="center"><code>$\Longleftrightarrow$</code></td><td>$\Longleftrightarrow$</td></tr></tbody></table><hr><p>其他箭头</p><table><thead><tr><th align="center">MarkDown</th><th>箭头形状</th></tr></thead><tbody><tr><td align="center"><code>$\twoheadrightarrow$</code></td><td>$\twoheadrightarrow$</td></tr><tr><td align="center">![\rightarrowtail](Typora文档.assets</td><td>$\rightarrowtail$</td></tr><tr><td align="center"><code>$\looparrowright$</code></td><td>$\looparrowright$</td></tr><tr><td align="center"><code>$\curvearrowright$</code></td><td>$\curvearrowright$</td></tr><tr><td align="center"><code>$\circlearrowright$</code></td><td>$\circlearrowright$</td></tr><tr><td align="center"><code>$\Rsh$</code></td><td>$\Rsh$</td></tr><tr><td align="center"><code>$\multimap$</code></td><td>$\multimap$</td></tr><tr><td align="center"><code>$\leftrightsquigarrow$</code></td><td>$\leftrightsquigarrow$</td></tr><tr><td align="center"><code>$\rightsquigarrow$</code></td><td>$\rightsquigarrow$</td></tr><tr><td align="center"><code>$\leadsto$</code></td><td>$\leadsto$</td></tr><tr><td align="center"><code>$\nearrow$</code></td><td>$\nearrow$</td></tr><tr><td align="center"><code>$\searrow$</code></td><td>$\searrow$</td></tr><tr><td align="center"><code>$\swarrow$</code></td><td>$\swarrow$</td></tr><tr><td align="center"><code>$\nwarrow$</code></td><td>$\nwarrow$</td></tr><tr><td align="center"><code>$\nleftarrow$</code></td><td>$\nleftarrow$</td></tr><tr><td align="center"><code>$\nLeftarrow$</code></td><td>$\nLeftarrow$</td></tr><tr><td align="center"><code>$\nrightarrow$</code></td><td>$\nrightarrow$</td></tr><tr><td align="center"><code>$\nRightarrow$</code></td><td>$\nRightarrow$</td></tr><tr><td align="center"><code>$\nleftrightarrow$</code></td><td>$\nleftrightarrow$</td></tr><tr><td align="center"><code>$\nLeftrightarrow$</code></td><td>$\nLeftrightarrow$</td></tr><tr><td align="center"><code>$\dashrightarrow$</code></td><td>$\dashrightarrow$</td></tr><tr><td align="center"><code>$\dashleftarrow$</code></td><td>$\dashleftarrow$</td></tr><tr><td align="center"><code>$\leftleftarrows$</code></td><td>$\leftleftarrows$</td></tr><tr><td align="center"><code>$\leftrightarrows$</code></td><td>$\leftrightarrows$</td></tr><tr><td align="center"><code>$\Lleftarrow$</code></td><td>$\Lleftarrow$</td></tr><tr><td align="center"><code>$\twoheadleftarrow$</code></td><td>$\twoheadleftarrow$</td></tr><tr><td align="center"><code>$\leftarrowtail</code>$</td><td>$\leftarrowtail$</td></tr><tr><td align="center"><code>$\looparrowleft$</code></td><td>$\looparrowleft$</td></tr><tr><td align="center"><code>$\curvearrowleft$</code></td><td>$\curvearrowleft$</td></tr></tbody></table><hr><table><thead><tr><th align="center">箭头形状</th><th>MarkDown</th></tr></thead><tbody><tr><td align="center"><code>$\circlearrowleft$</code></td><td>$\circlearrowleft$</td></tr><tr><td align="center"><code>$\Lsh$</code></td><td>$\Lsh$</td></tr><tr><td align="center"><code>$\mapsto$</code></td><td>$\mapsto$</td></tr><tr><td align="center"><code>$\hookleftarrow$</code></td><td>$\hookleftarrow$</td></tr><tr><td align="center"><code>$\hookrightarrow</code>$</td><td>$\hookrightarrow$</td></tr><tr><td align="center"><code>$\upharpoonright$</code></td><td>$\upharpoonright$</td></tr><tr><td align="center"><code>$\upharpoonleft$</code></td><td>$\upharpoonleft$</td></tr><tr><td align="center"><code>$\downharpoonright</code>$</td><td>$\downharpoonright$</td></tr><tr><td align="center"><code>$\downharpoonleft</code>$</td><td>$\downharpoonleft$</td></tr><tr><td align="center"><code>$\leftharpoonup$</code></td><td>$\leftharpoonup$</td></tr><tr><td align="center"><code>$\rightharpoonup$</code></td><td>$\rightharpoonup$</td></tr><tr><td align="center"><code>$\rightharpoondown$</code></td><td>$\rightharpoondown$</td></tr><tr><td align="center"><code>$\leftharpoondown$</code></td><td>$\leftharpoondown$</td></tr><tr><td align="center"><code>$\upuparrows$</code></td><td>$\upuparrows$</td></tr><tr><td align="center"><code>$\downdownarrows$</code></td><td>$\downdownarrows$</td></tr><tr><td align="center"><code>$\rightrightarrows$</code></td><td>$\rightrightarrows$</td></tr><tr><td align="center"><code>$\rightleftarrows$</code></td><td>$\rightleftarrows$</td></tr><tr><td align="center"><code>$\leftleftarrows$</code></td><td>$\leftleftarrows$</td></tr><tr><td align="center"><code>$\leftrightarrows$</code></td><td>$\leftrightarrows$</td></tr><tr><td align="center"><code>$\rightleftharpoons$</code></td><td>$\rightleftharpoons$</td></tr><tr><td align="center"><code>$\leftrightharpoons$</code></td><td>$\leftrightharpoons$</td></tr></tbody></table><h2 id="2-8-其他"><a href="#2-8-其他" class="headerlink" title="2.8 其他"></a>2.8 其他</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>加粗</td><td><code>\textbf&#123;Latex&#125;</code></td><td>$\textbf{Latex}$</td></tr><tr><td>波浪号</td><td><code>\sim</code></td><td>$\sim$</td></tr><tr><td></td><td></td><td></td></tr><tr><td>字体变大</td><td><code>\displaystyle</code></td><td>$\displaystyle\frac{x+y}{y+z}$</td></tr><tr><td>下划线</td><td><code>\underline</code></td><td>$\underline{x+y}$</td></tr><tr><td>上大括号</td><td><code>\overbrace&#123;&#125;</code></td><td>$\overbrace{x+y}$</td></tr><tr><td>下大括号</td><td><code>\underbrace&#123;&#125;</code></td><td>$\underbrace{x+y}$</td></tr><tr><td>不是斜体</td><td><code>\rm</code></td><td>$\rm e$</td></tr><tr><td>字母上方或下方加数字</td><td><code>$\mathop&#123;U&#125;^&#123;n&#125;\limits_&#123;i=1&#125;$</code></td><td>$\mathop{U}^{n}\limits_{i&#x3D;1}$</td></tr><tr><td>存在</td><td><code>\exists</code></td><td>$\exists$</td></tr><tr><td>任意</td><td><code>\forall</code></td><td>$\forall$</td></tr></tbody></table><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母（大写）</th><th>markdown语法（输入在两个$$之间）</th><th>字母小写</th><th>markdown语法</th></tr></thead><tbody><tr><td>$A$</td><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>$B$</td><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>\Gamma</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>\Delta</td><td>$\delta$</td><td>\delta</td></tr><tr><td>$E$</td><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>$Z$</td><td>Z</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>$H$</td><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>\Theta</td><td>$\theta$</td><td>\theta</td></tr><tr><td>$I$</td><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>$K$</td><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>\Lambda</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>M</td><td></td><td>$\mu$</td><td>\mu</td></tr><tr><td>$N$</td><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>\Xi</td><td>$\xi$</td><td>\xi</td></tr><tr><td>$O$</td><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>\Pi</td><td>$\pi$</td><td>\pi</td></tr><tr><td>$P$</td><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>\Sigmma</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>$T$</td><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>\Upsilon</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>\Phi</td><td>$\phi$</td><td>\phi</td></tr><tr><td>$X$</td><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>\Psi</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>\Omega</td><td>$\omega$</td><td>\omega</td></tr><tr><td></td><td></td><td>$\varphi$</td><td>\varphi</td></tr></tbody></table><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20220423092649473.png" alt="image-20220423092649473"></p><h1 id="三、-Markdown-LaTex公式"><a href="#三、-Markdown-LaTex公式" class="headerlink" title="三、 Markdown&#x2F;LaTex公式"></a>三、 Markdown&#x2F;LaTex公式</h1><h2 id="3-1-基本函数公式"><a href="#3-1-基本函数公式" class="headerlink" title="3.1 基本函数公式"></a>3.1 基本函数公式</h2><ul><li>行内公式：$\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt$</li></ul><p><code>\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt</code></p><ul><li><p>行间公式<br>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105113339912.png" alt="image-20211105113339912"></p></li><li><p>$y_k &#x3D; \varphi(u_k+v_k)$<br><code>$y_k = \varphi(u_k+v_k)$</code></p></li><li><p>$y(x)&#x3D;x^3+2x^2+x+1$<br><code>$y(x)=x^3+2x^2+x+1$</code></p></li><li><p>$x^{y}&#x3D;(1+{\rm e}^x)^{-2xy}$<br><code>$x^&#123;y&#125;=(1+&#123;\rm e&#125;^x)^&#123;-2xy&#125;$</code></p></li><li><p>$\displaystyle f(n)&#x3D;\sum_{i&#x3D;1}^{n}{n*(n+1)}$<br><code>$\displaystyle f(n)=\sum_&#123;i=1&#125;^&#123;n&#125;&#123;n*(n+1)&#125;$</code></p></li></ul><h2 id="3-2-分段函数"><a href="#3-2-分段函数" class="headerlink" title="3.2 分段函数"></a>3.2 分段函数</h2><ul><li><p>分段函数<br>$$<br>y&#x3D;\begin{cases}<br>2x+1,&amp;x\leq0\<br>x,&amp;x&gt;0<br>\end{cases}<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105114606132.png" alt="image-20211105114606132"></p></li><li><p>齐次方程<br>$$<br>\left<br>{<br>\begin{array}{}<br>a_1x+b_1y+c_1z&#x3D;d_1 \<br>a_2x+b_2y+c_2z&#x3D;d_2 \<br>a_3x+b_3y+c_3z&#x3D;d_3<br>\end{array}<br>\right.<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115235227.png" alt="image-20211105115235227"></p></li></ul><h2 id="3-3-积分"><a href="#3-3-积分" class="headerlink" title="3.3 积分"></a>3.3 积分</h2><ul><li><p>一重积分<br>$$<br>\int_{\theta_1(x)^{\theta_2(x)}}&#x3D;1<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115407660.png" alt="image-20211105115407660"></p></li><li><p>二重积分<br>$$<br>\iint dx dy &#x3D;\sigma<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115458340.png" alt="image-20211105115458340"></p></li><li><p>三重积分<br>$$<br>\iiint dx dydz&#x3D;\nu<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115553987.png" alt="image-20211105115553987"></p></li></ul><h2 id="3-4-微分和偏微分"><a href="#3-4-微分和偏微分" class="headerlink" title="3.4 微分和偏微分"></a>3.4 微分和偏微分</h2><ul><li><p>一阶微分方程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;dy&#125;&#123;dx&#125;+P(x)y = Q(x) \\</span><br><span class="line">\left. \frac&#123;&#123;\rm d&#125;y&#125;&#123;&#123;\rm d&#125;x&#125; \right|_&#123;x=0&#125; =3x+1=1</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115859719.png" alt="image-20211105115859719"></p></li><li><p>二阶微分方程<br>$$y’’+py’+qy&#x3D;f(x)$$<br>$$\frac{d^2y}{dx^2}+p\frac{dy}{dx}+qy&#x3D;f(x)$$</p></li><li><p>偏微分方程<br>$$<br>\frac{\partial u}{\partial t}&#x3D; h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2}+ \frac{\partial^2 u}{\partial z^2}\right)<br>$$</p></li></ul><h2 id="3-5-矩阵和行列式"><a href="#3-5-矩阵和行列式" class="headerlink" title="3.5 矩阵和行列式"></a>3.5 矩阵和行列式</h2><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105120251402.png" alt="image-20211105120251402"></p><ul><li><p>单位矩阵<br>$$\begin{bmatrix}<br>1&amp;0&amp;0\<br>0&amp;1&amp;0\<br>0&amp;0&amp;1\<br>\end{bmatrix}<br>$$</p><p>横省略号：\cdots<br>竖省略号：\vdots<br>斜省略号：\ddots</p></li><li><p><em>m</em> X <em>n</em> 矩阵<br>$$A&#x3D;\begin{bmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{bmatrix}$$</p></li><li><p>行列式<br>$$D&#x3D;\begin{vmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{vmatrix}$$</p></li><li><p>表格</p><p>$$\begin{array}{c|lll}<br>{}&amp;{a}&amp;{b}&amp;{c}\<br>\hline<br>{R_1}&amp;{c}&amp;{b}&amp;{a}\<br>{R_2}&amp;{b}&amp;{c}&amp;{c}\<br>\end{array}$$</p></li><li><p>增广矩阵<br>$$<br>\left[  \begin{array}  {c c | c}<br>1 &amp; 2 &amp; 3 \<br>\hline %插入横线，如果去掉\hline就是增广矩阵<br>4 &amp; 5 &amp; 6<br>\end{array}  \right]<br>$$</p></li></ul><h2 id="3-6-极限"><a href="#3-6-极限" class="headerlink" title="3.6 极限"></a>3.6 极限</h2><p>$$<br>f(n)&#x3D;\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$$<br>$$\frac{1}{\lim_{u \rightarrow \infty}}, \frac{1}{\lim\limits_{u \rightarrow \infty}}<br>$$</p><h2 id="3-7-其他"><a href="#3-7-其他" class="headerlink" title="3.7 其他"></a>3.7 其他</h2><table><thead><tr><th></th><th><strong>markdown语法（输入在两个$$之间）</strong></th><th><strong>显示</strong></th></tr></thead><tbody><tr><td>圆括号（小括号）</td><td>\left( \frac{a}{b} \right )</td><td>$\left(\frac{a}{b}\right)$</td></tr><tr><td>方括号（中括号）</td><td>\left[ \frac{a}{b} \right]</td><td>$\left[\frac{a}{b}\right]$</td></tr><tr><td>角括号</td><td>\left \langle \frac{a}{b} \right \rangle</td><td>$\left \langle \frac{a}{b} \right \rangle$</td></tr><tr><td>取整函数</td><td>\left \lfloor \frac{a}{b} \right \rfloor</td><td>$\left \lfloor \frac{a}{b} \right \rfloor$</td></tr><tr><td>取顶函数</td><td>\left \lceil \frac{c}{d} \right \rceil</td><td>$\left \lceil \frac{c}{d} \right \rceil$</td></tr><tr><td>斜线与反斜线</td><td>\left &#x2F; \frac{a}{b} \right \backslash</td><td>$\left &#x2F; \frac{a}{b} \right \backslash$</td></tr><tr><td>上下箭头</td><td>\left \uparrow \frac{a}{b} \right \downarrow</td><td>$\left \uparrow \frac{a}{b} \right \downarrow$</td></tr><tr><td>混合括号</td><td>\left [ 0,1 \right )</td><td>$\left [ 0,1 \right )$</td></tr><tr><td>空格</td><td><code>&amp;nbsp;&amp;ensp;&amp;emsp;&amp;thinsp;</code></td><td></td></tr><tr><td>左对齐</td><td><code>\begin&#123;array&#125;&#123;l&#125;    \end&#123;array&#125;</code></td><td></td></tr><tr><td>居中对齐</td><td><code>\begin&#123;array&#125;&#123;c&#125;    \end&#123;array&#125;</code></td><td></td></tr><tr><td>右对齐</td><td><code>\begin&#123;array&#125;&#123;r&#125;    \end&#123;array&#125;</code></td><td></td></tr></tbody></table><h2 id="3-8、空格"><a href="#3-8、空格" class="headerlink" title="3.8、空格"></a>3.8、空格</h2><table><thead><tr><th></th><th>markdown语法</th><th>显示</th></tr></thead><tbody><tr><td>两个quad空格</td><td>a \qquad b</td><td>$a \qquad b$</td></tr><tr><td>quad空格</td><td>a \quad b</td><td>$a \quad b$</td></tr><tr><td>大空格</td><td>a \ b</td><td>$ a\ b$</td></tr><tr><td>中等空格</td><td>a ;b</td><td>$a;b$</td></tr><tr><td>小空格</td><td>a , b</td><td>$a,b$</td></tr><tr><td>紧贴</td><td><code>a\! b</code></td><td>$a!b$</td></tr></tbody></table><h1 id="四、Typora优化"><a href="#四、Typora优化" class="headerlink" title="四、Typora优化"></a>四、Typora优化</h1><p><a href="https://zhuanlan.zhihu.com/p/361486179">Typora打造最适合编程笔记的精美主题（浅色版和修改后的深色版），可自行修改喜欢的样式。 - 知乎 (zhihu.com)</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/Typora/">Typora</category>
      
      
      <comments>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mingw</title>
      <link>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/</link>
      <guid>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/</guid>
      <pubDate>Thu, 22 Aug 2024 08:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）&quot;&gt;&lt;a href=&quot;#下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）&quot; class=&quot;headerlink&quot; t</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）"><a href="#下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）" class="headerlink" title="下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）"></a>下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）</h1><p><a href="https://blog.csdn.net/jjxcsdn/article/details/123058745">下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）-CSDN博客</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/mingw/">mingw</category>
      
      
      <comments>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VS</title>
      <link>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/</link>
      <guid>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/</guid>
      <pubDate>Thu, 22 Aug 2024 08:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、配置&quot;&gt;&lt;a href=&quot;#一、配置&quot; class=&quot;headerlink&quot; title=&quot;一、配置&quot;&gt;&lt;/a&gt;一、配置&lt;/h1&gt;&lt;h2 id=&quot;1-1、安装&quot;&gt;&lt;a href=&quot;#1-1、安装&quot; class=&quot;headerlink&quot; title=&quot;1.1、安</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><p><a href="https://blog.csdn.net/qq_53862369/article/details/117295784">Visual Studio 2013下载及其安装_vs2013下载官方下载-CSDN博客</a></p><p><a href="https://blog.csdn.net/YSJ367635984/article/details/104648941">visual studio 2019安装教程（详细的很）_vs2019安装教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_49329264/article/details/132640725">VS2022工具箱消失或者工具箱控件变为灰色不可用解决方案_vs工具箱控件灰色-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhebushibiaoshifu/article/details/132940838">Visual Studio复制、拷贝C++项目与第三方库配置信息到新的项目中_vs如何把项目配置完全添加到另外一个项目-CSDN博客</a></p><h2 id="1-2、VS调试"><a href="#1-2、VS调试" class="headerlink" title="1.2、VS调试"></a>1.2、VS调试</h2><p><a href="https://blog.csdn.net/weixin_74310945/article/details/128998270">https://blog.csdn.net/weixin_74310945/article/details/128998270</a></p><h2 id="1-3、快捷键"><a href="#1-3、快捷键" class="headerlink" title="1.3、快捷键"></a>1.3、快捷键</h2><ul><li>关闭文件：Ctrl + F4</li><li>关闭所有文件： Alt + W + L</li><li>回到上一步：Ctrl + -</li><li>隐藏：Ctrl + M，之后Ctrl + H</li></ul><h2 id="1-4、VS2022配置QT"><a href="#1-4、VS2022配置QT" class="headerlink" title="1.4、VS2022配置QT"></a>1.4、VS2022配置QT</h2><p><a href="https://www.cnblogs.com/W-cats/p/18177801">https://www.cnblogs.com/W-cats/p/18177801</a></p><h1 id="二、报错"><a href="#二、报错" class="headerlink" title="二、报错"></a>二、报错</h1><h2 id="LNK2005"><a href="#LNK2005" class="headerlink" title="LNK2005"></a>LNK2005</h2><p><a href="https://blog.csdn.net/zhanghefu/article/details/116266727">LNK2005错误的原因与解决-CSDN博客</a></p><h2 id="LNK2038"><a href="#LNK2038" class="headerlink" title="LNK2038"></a>LNK2038</h2><p><a href="https://www.cnblogs.com/arxive/p/11220854.html">error LNK2038: 检测到“RuntimeLibrary”的不匹配项: 值“MDd_DynamicDebug”不匹配值“MD_DynamicRelease” - wenglabs - 博客园 (cnblogs.com)</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/VS/">VS</category>
      
      
      <comments>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git</title>
      <link>http://example.com/2024/08/22/Git/git/</link>
      <guid>http://example.com/2024/08/22/Git/git/</guid>
      <pubDate>Thu, 22 Aug 2024 07:54:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、Git&quot;&gt;&lt;a href=&quot;#一、Git&quot; class=&quot;headerlink&quot; title=&quot;一、Git&quot;&gt;&lt;/a&gt;一、Git&lt;/h1&gt;&lt;h2 id=&quot;1-1、版本控制器的方式&quot;&gt;&lt;a href=&quot;#1-1、版本控制器的方式&quot; class=&quot;headerli</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h1><h2 id="1-1、版本控制器的方式"><a href="#1-1、版本控制器的方式" class="headerlink" title="1.1、版本控制器的方式"></a>1.1、版本控制器的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a、集中式版本控制工具</span><br><span class="line">集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。</span><br><span class="line">svn因为每次存的都是差异 需要的硬盘空间会相对的小一点  可是回滚的速度会很慢</span><br><span class="line">举例：SVN和CVS</span><br><span class="line">优点: </span><br><span class="line">    代码存放在单一的服务器上 便于项目的管理</span><br><span class="line">缺点: </span><br><span class="line">    服务器宕机: 员工写的代码得不到保障</span><br><span class="line">    服务器炸了: 整个项目的历史记录都会丢失</span><br><span class="line">    </span><br><span class="line">b、分布式版本控制工具</span><br><span class="line">分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。</span><br><span class="line">git每次存的都是项目的完整快照 需要的硬盘空间会相对大一点</span><br><span class="line">    (Git团队对代码做了极致的压缩 最终需要的实际空间比svn多不了太多 可是Git的回滚速度极快)</span><br><span class="line">举例：Git</span><br><span class="line">优点:</span><br><span class="line">    完全的分布式</span><br><span class="line">缺点:    </span><br><span class="line">    学习起来比SVN陡峭</span><br></pre></td></tr></table></figure><h2 id="1-2、SVN"><a href="#1-2、SVN" class="headerlink" title="1.2、SVN"></a>1.2、SVN</h2><p><img src="/2024/08/22/Git/git/SVN.png" alt="SVN"></p><h2 id="1-3、Git"><a href="#1-3、Git" class="headerlink" title="1.3、Git"></a>1.3、Git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。</span><br><span class="line">git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line">同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</span><br><span class="line">到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</span><br><span class="line"> 速度</span><br><span class="line"> 简单的设计</span><br><span class="line"> 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</span><br><span class="line"> 完全分布式</span><br><span class="line"> 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/Git/git/Git.png" alt="Git"></p><h2 id="1-4、Git工作流程图"><a href="#1-4、Git工作流程图" class="headerlink" title="1.4、Git工作流程图"></a>1.4、Git工作流程图</h2><p><img src="/2024/08/22/Git/git/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Git工作流程图"></p><p>命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h2 id="1-5、资源"><a href="#1-5、资源" class="headerlink" title="1.5、资源"></a>1.5、资源</h2><ul><li><a href="https://blog.csdn.net/TroyeSivanlp/article/details/121172010">git教程1–如何操作本地仓库（保姆级教程，好上手）_gitlab-ce 本地仓库操作-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_43142509/article/details/123134869#Git_4">使用Git上传项目到GitHub（详细版）-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_41621896/article/details/118569844">gitLab配置ssh-CSDN博客</a></li><li><a href="https://blog.csdn.net/zongzhankui/article/details/78888651">Git提交到多个远程仓库_git怎样提交两个仓库的修改-CSDN博客</a></li><li><a href="https://blog.csdn.net/u011870022/article/details/117883717">windows下git配置github和gitee SSH-Key密钥方便同时将本地分支推送到远程仓库_git ecdsa key-CSDN博客</a></li></ul><h1 id="二、Git环境配置"><a href="#二、Git环境配置" class="headerlink" title="二、Git环境配置"></a>二、Git环境配置</h1><p>常用命令：</p><ul><li><code>ls</code>&#x2F;<code>ll</code> 查看当前目录</li><li><code>cat</code> 查看文件内容</li><li><code>touch</code> 创建文件</li><li><code>vi</code> vi编辑器（使用vi编辑器是为了方便展示效果，学员可以记事本、EditPlus、NotePad++等其它编辑器）</li></ul><h2 id="2-1、下载与安装"><a href="#2-1、下载与安装" class="headerlink" title="2.1、下载与安装"></a>2.1、下载与安装</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="/2024/08/22/Git/git/Git%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85.png" alt="Git下载与安装"></p><p>下载完成后可以得到如下安装文件：</p><p><img src="/2024/08/22/Git/git/Git%E5%AE%89%E8%A3%85%E5%8C%85.png" alt="Git安装包"></p><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录)点击右键，如果能够看到如下两个菜单则说明Git安装成功。</p><p><img src="/2024/08/22/Git/git/Git%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.png" alt="Git右键菜单"></p><p>备注：</p><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><h2 id="2-2、基本配置"><a href="#2-2、基本配置" class="headerlink" title="2.2、基本配置"></a>2.2、基本配置</h2><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “itcast”</span><br><span class="line">git config --global user.email “hello@itcast.cn”</span><br></pre></td></tr></table></figure></li></ol><p>查看配置信息<br><code>git config --global user.name</code><br><code>git config --global user.email</code></p><h2 id="2-3、为常用指令配置别名（可选）"><a href="#2-3、为常用指令配置别名（可选）" class="headerlink" title="2.3、为常用指令配置别名（可选）"></a>2.3、为常用指令配置别名（可选）</h2><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li><p>打开用户目录，创建<code>.bashrc</code>文件<br> 部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行<code>touch ~/.bashrc</code><br> <img src="/2024/08/22/Git/git/%E5%88%9B%E5%BB%BAbashrc.png" alt="创建bashrc"></p></li><li><p>在<code>.bashrc</code>文件中输入如下内容：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span></span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure></li><li><p>打开gitBash，执行<code>source ~/.bashrc</code><br> <img src="/2024/08/22/Git/git/bashrc.png" alt="bashrc"></p></li></ol><h2 id="2-4、解决GitBash乱码问题"><a href="#2-4、解决GitBash乱码问题" class="headerlink" title="2.4、解决GitBash乱码问题"></a>2.4、解决GitBash乱码问题</h2><ol><li><p>打开GitBash执行下面命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure></li><li><p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>文件最后加入下面两行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="三、获取本地仓库"><a href="#三、获取本地仓库" class="headerlink" title="三、获取本地仓库"></a>三、获取本地仓库</h1><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库<br>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库<br>2）进入这个目录中，点击右键打开Git bash窗口<br>3）执行命令<code>git init</code><br>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p><img src="/2024/08/22/Git/git/%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="获取本地仓库"></p><h1 id="四、基础操作指令"><a href="#四、基础操作指令" class="headerlink" title="四、基础操作指令"></a>四、基础操作指令</h1><p>Git工作目录下对于文件的<strong>修改</strong>（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行Git的命令而发生变化。</p><p><img src="/2024/08/22/Git/git/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.png" alt="基础操作指令"></p><p>本章节主要讲解如何使用命令来控制这些状态之间的转换：</p><ol><li>git add (工作区 –&gt; 暂存区)</li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><h2 id="4-1、-查看修改的状态-status"><a href="#4-1、-查看修改的状态-status" class="headerlink" title="4.1、&#x3D;&#x3D;查看修改的状态(status)&#x3D;&#x3D;"></a>4.1、&#x3D;&#x3D;查看修改的状态(status)&#x3D;&#x3D;</h2><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：<code>git status</code></li></ul><h2 id="4-2、-添加工作区到暂存区-add"><a href="#4-2、-添加工作区到暂存区-add" class="headerlink" title="4.2、&#x3D;&#x3D;添加工作区到暂存区(add)&#x3D;&#x3D;"></a>4.2、&#x3D;&#x3D;添加工作区到暂存区(add)&#x3D;&#x3D;</h2><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：<code>git add 单个文件名|通配符</code><ul><li>将所有修改加入暂存区：<code>git add .</code></li></ul></li></ul><h2 id="4-3、-提交暂存区到本地仓库-commit"><a href="#4-3、-提交暂存区到本地仓库-commit" class="headerlink" title="4.3、&#x3D;&#x3D;提交暂存区到本地仓库(commit)&#x3D;&#x3D;"></a>4.3、&#x3D;&#x3D;提交暂存区到本地仓库(commit)&#x3D;&#x3D;</h2><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：<code>git commit -m &#39;注释内容&#39;</code></li></ul><h2 id="4-4、-查看提交日志-log"><a href="#4-4、-查看提交日志-log" class="headerlink" title="4.4、&#x3D;&#x3D;查看提交日志(log)&#x3D;&#x3D;"></a>4.4、&#x3D;&#x3D;查看提交日志(log)&#x3D;&#x3D;</h2><p><strong>在2.3中配置的别名<code>git-log</code>就包含了这些参数，所以后续可以直接使用指令<code>git-log</code></strong></p><ul><li>作用:查看提交记录</li><li>命令形式：<code>git log [option]</code><ul><li>options<ul><li><code>--all</code> 显示所有分支</li><li><code>--pretty=oneline</code> 将提交信息显示为一行</li><li><code>--abbrev-commit</code> 使得输出的commitID更简短</li><li><code>--graph</code> 以图的形式显示</li></ul></li></ul></li></ul><h2 id="4-5、版本回退"><a href="#4-5、版本回退" class="headerlink" title="4.5、版本回退"></a>4.5、版本回退</h2><ul><li>作用：版本切换</li><li>命令形式：<code>git reset --hard commitID</code><ul><li>commitID 可以使用<code>git-log</code>或<code>git log</code>指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li><code>git reflog</code></li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h2 id="4-6、添加文件至忽略列表"><a href="#4-6、添加文件至忽略列表" class="headerlink" title="4.6、添加文件至忽略列表"></a>4.6、添加文件至忽略列表</h2><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为<code> .gitignore</code>的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no .a files</span></span><br><span class="line">*.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">but <span class="keyword">do</span> track lib.a, even though you<span class="string">&#x27;re ignoring .a files above</span></span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only ignore the &#x27;</span>TODO<span class="string">&#x27; file in the current directory, not subdir/TODO</span></span></span><br><span class="line">/TODO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all files in the &#x27;</span>build/<span class="string">&#x27; directory</span></span></span><br><span class="line">build/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore doc/notes.txt, but not doc/server/arch.txt</span></span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all .pdf files in the doc/ directory</span></span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h2 id="4-7、查询"><a href="#4-7、查询" class="headerlink" title="4.7、查询"></a>4.7、查询</h2><p>   git  status   :  查看工作目录中文件的状态(已跟踪(已提交 已暂存 已修改) 未跟踪)<br>   git  diff     :  查看未暂存的修改<br>   git  diff –cache : 查看未提交的暂存<br>   git  log –oneline : 查看提交记录</p><h2 id="练习-基础操作"><a href="#练习-基础操作" class="headerlink" title="练习:基础操作"></a>练习:基础操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################仓库初始化######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录（git_test01）并在目录下打开gitbash</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################创建文件并提交#####################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录下创建文件 file01.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改提交到本地仓库，提交记录内容为：commit 001</span></span><br><span class="line">git commit -m &#x27;commit 001&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################修改文件并提交######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改file01的内容为：count=1</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 将修改提交到本地仓库，提交记录内容为：update file01</span></span></span><br><span class="line">git commit -m &#x27;update file01&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################将最后一次修改还原##################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到倒数第2次提交的commitID</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本回退</span></span><br><span class="line">git reset commitID --hard</span><br></pre></td></tr></table></figure><hr><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h2 id="5-1、查看本地分支"><a href="#5-1、查看本地分支" class="headerlink" title="5.1、查看本地分支"></a>5.1、查看本地分支</h2><ul><li>命令：<code>git branch</code></li></ul><h2 id="5-2、创建本地分支"><a href="#5-2、创建本地分支" class="headerlink" title="5.2、创建本地分支"></a>5.2、创建本地分支</h2><ul><li>命令：<code>git branch 分支名</code></li></ul><h2 id="5-3、切换分支-checkout"><a href="#5-3、切换分支-checkout" class="headerlink" title="5.3、切换分支(checkout)"></a>5.3、切换分支(checkout)</h2><ul><li>命令：<code>git checkout 分支名</code></li></ul><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><ul><li>命令：<code>git checkout -b 分支名</code></li></ul><h2 id="5-4、合并分支-merge"><a href="#5-4、合并分支-merge" class="headerlink" title="5.4、合并分支(merge)"></a>5.4、合并分支(merge)</h2><p>一个分支（合并分支）上的提交可以合并到另一个分支（目标分支）</p><ul><li>需要先切换到目标分支：<code>git checkout 目标分支名</code></li><li>合并命令：<code>git merge 合并分支名</code></li></ul><h2 id="5-5、删除分支"><a href="#5-5、删除分支" class="headerlink" title="5.5、删除分支"></a>5.5、删除分支</h2><p><strong>不能删除当前分支，只能删除其他分支</strong></p><ul><li><code>git branch -d 分支名</code> 删除分支时，需要做各种检查</li><li><code>git branch -D 分支名</code> 不做任何检查，强制删除</li><li>E.g.<br>  <img src="/2024/08/22/Git/git/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png" alt="删除分支"></li></ul><h2 id="5-6、解决冲突"><a href="#5-6、解决冲突" class="headerlink" title="5.6、解决冲突"></a>5.6、解决冲突</h2><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><p>就是哪里合并有问题，你手动更改，再进行提交</p><p>冲突部分的内容处理如下所示：</p><p><img src="/2024/08/22/Git/git/%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86.png" alt="冲突处理.png"></p><h2 id="5-7、开发中分支使用原则与流程"><a href="#5-7、开发中分支使用原则与流程" class="headerlink" title="5.7、开发中分支使用原则与流程"></a>5.7、开发中分支使用原则与流程</h2><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支<br>  线上分支，主分支，中小规模项目作为线上运行的应用对应的分支。</li><li>develop（开发）分支<br>  是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支<br>  从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。</li><li>hotfix&#x2F;xxxx分支，<br>  从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等。</li><li><img src="/2024/08/22/Git/git/%E5%88%86%E6%94%AF.png" alt="分支"></li></ul><h2 id="练习-分支操作"><a href="#练习-分支操作" class="headerlink" title="练习:分支操作"></a>练习:分支操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################创建并切换到dev01分支，在dev01分支提交</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]创建分支dev01</span></span><br><span class="line">git branch dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]切换到dev01</span></span><br><span class="line">git checkout dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]创建文件file02.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file02 on dev&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################切换到master分支，将dev01合并到master分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]合并dev01到master分支</span></span><br><span class="line">git merge dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]查看文件变化(目录下也出现了file02.txt)</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################删除dev01分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]删除dev01分支</span></span><br><span class="line">git branch -d dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br></pre></td></tr></table></figure><hr><h1 id="六、远程仓库"><a href="#六、远程仓库" class="headerlink" title="六、远程仓库"></a>六、远程仓库</h1><h2 id="6-1、-常用的托管服务-远程仓库"><a href="#6-1、-常用的托管服务-远程仓库" class="headerlink" title="6.1、 常用的托管服务[远程仓库]"></a>6.1、 常用的托管服务[远程仓库]</h2><p>​gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub<br>​码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快<br>​GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</p><h2 id="6-2、-注册码云"><a href="#6-2、-注册码云" class="headerlink" title="6.2、 注册码云"></a>6.2、 注册码云</h2><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><p><img src="/2024/08/22/Git/git/%E6%B3%A8%E5%86%8C%E7%A0%81%E4%BA%91.png" alt="注册码云"></p><h2 id="6-3、创建远程仓库"><a href="#6-3、创建远程仓库" class="headerlink" title="6.3、创建远程仓库"></a>6.3、创建远程仓库</h2><p><img src="/2024/08/22/Git/git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="创建远程仓库"></p><p>仓库创建完成后可以看到仓库地址，如下图所示:</p><p><img src="/2024/08/22/Git/git/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="仓库地址"></p><h2 id="6-4、配置SSH公钥"><a href="#6-4、配置SSH公钥" class="headerlink" title="6.4、配置SSH公钥"></a>6.4、配置SSH公钥</h2><ul><li>生成SSH公钥<ul><li><code>ssh-keygen -t rsa</code></li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li><code>cat ~/.ssh/id_rsa.pub</code></li></ul></li><li><img src="/2024/08/22/Git/git/SSH%E5%85%AC%E9%92%A5.png" alt="SSH公钥"></li><li>验证是否配置成功<ul><li><code>ssh -T git@gitee.com</code></li></ul></li></ul></li></ul><h2 id="6-5、操作远程仓库"><a href="#6-5、操作远程仓库" class="headerlink" title="6.5、操作远程仓库"></a>6.5、操作远程仓库</h2><h3 id="6-5-1、添加远程仓库"><a href="#6-5-1、添加远程仓库" class="headerlink" title="6.5.1、添加远程仓库"></a>6.5.1、添加远程仓库</h3><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li><p>命令： <code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code></p><ul><li><p>远端名称，默认是origin，取决于远端服务器设置</p></li><li><p>仓库路径，从远端服务器获取此URL</p></li><li><p>例如：<br>  <code>git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</code><br>  <code>git remote set-url --add origin https://github.com/zkzong/mongodb.git</code><br>  <code>git push origin --all</code></p><p>  <img src="/2024/08/22/Git/git/%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="添加远程仓库"></p></li></ul></li></ul><h3 id="6-5-2、查看远程仓库"><a href="#6-5-2、查看远程仓库" class="headerlink" title="6.5.2、查看远程仓库"></a>6.5.2、查看远程仓库</h3><ul><li>命令：<code>git remote</code><br>  <img src="/2024/08/22/Git/git/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="查看远程仓库"></li><li>查看详细链接：<code>git remote -v</code></li></ul><h3 id="6-5-3、推送到远程仓库"><a href="#6-5-3、推送到远程仓库" class="headerlink" title="6.5.3、推送到远程仓库"></a>6.5.3、推送到远程仓库</h3><ul><li>命令：<code>git push[ -f][ --set-upstream][ 远端名称[ 本地分支名[:远端分支名]]]</code><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支<ul><li><code>git push origin master</code>&#x3D;<code>git push origin master:master</code><br>  <img src="/2024/08/22/Git/git/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95.png" alt="推送到远程仓库-两种写法"></li></ul></li><li><code>-f</code> &#x3D; <code>--force</code> 表示强制覆盖</li><li><code>-u</code> &#x3D; <code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<ul><li><code>git push --set-upstream origin master</code></li></ul></li><li>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。<ul><li><code>git push</code> 将master分支推送到已关联的远端分支。<br>  <img src="/2024/08/22/Git/git/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="推送到远程仓库"></li></ul></li></ul></li></ul><p>查询远程仓库</p><p><img src="/2024/08/22/Git/git/%E6%9F%A5%E8%AF%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="查询远程仓库"></p><h3 id="6-5-4、-本地分支与远程分支的关联关系"><a href="#6-5-4、-本地分支与远程分支的关联关系" class="headerlink" title="6.5.4、 本地分支与远程分支的关联关系"></a>6.5.4、 本地分支与远程分支的关联关系</h3><ul><li>查看关联关系我们可以使用 <code>git branch -vv</code> 命令</li></ul><p><img src="/2024/08/22/Git/git/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="查看本地分支和远程分支的关联关系"></p><h3 id="6-5-5、从远程仓库克隆"><a href="#6-5-5、从远程仓库克隆" class="headerlink" title="6.5.5、从远程仓库克隆"></a>6.5.5、从远程仓库克隆</h3><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: <code>git clone &lt;仓库路径&gt; [本地目录]</code><ul><li>本地目录可以省略，会自动生成一个目录</li></ul></li></ul><p><img src="/2024/08/22/Git/git/%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0.png" alt="克隆远程仓库到本地"></p><h3 id="6-5-6、从远程仓库中抓取和拉取"><a href="#6-5-6、从远程仓库中抓取和拉取" class="headerlink" title="6.5.6、从远程仓库中抓取和拉取"></a>6.5.6、从远程仓库中抓取和拉取</h3><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><ul><li>抓取 命令：<code>git fetch [remote name] [branch name]</code><ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong></li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li>拉取 命令：<code>git pull [remote name] [branch name]</code><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><ol><li>在test01这个本地仓库进行一次提交并推送到远程仓库<br> <img src="/2024/08/22/Git/git/%E5%9C%A8test01%E8%BF%99%E4%B8%AA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="在test01这个本地仓库进行一次提交并推送到远程仓库"></li><li>在另一个仓库将远程提交的代码拉取到本地仓库<br> <img src="/2024/08/22/Git/git/%E5%B0%86%E4%BB%93%E5%BA%93%E9%87%8C%E8%BF%9C%E7%A8%8B%E6%8F%90%E4%BA%A4%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="将仓库里远程提交的代码拉取到本地仓库"></li></ol><h3 id="6-5-7、解决合并冲突"><a href="#6-5-7、解决合并冲突" class="headerlink" title="6.5.7、解决合并冲突"></a>6.5.7、解决合并冲突</h3><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>，如下图所示。</p><p><img src="/2024/08/22/Git/git/%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png" alt="解决远程仓库合并冲突"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong>，在此不再赘述，需要学员自己练习。</p><h3 id="练习-远程仓库操作"><a href="#练习-远程仓库操作" class="headerlink" title="练习:远程仓库操作"></a>练习:远程仓库操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################1-将本地仓库推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]添加远程仓库</span></span><br><span class="line">git remote add origin git@gitee.com/**/**.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span></span><br><span class="line">git push --set-upstream origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################2-将远程仓库克隆到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库克隆到本地git_test02目录下</span></span><br><span class="line">git clone git@gitee.com/**/**.git git_test02</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################3-将本地修改推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]创建文件file03.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支的修改推送到远程仓库</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################4-将远程仓库的修改更新到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]将远程仓库修改再拉取到本地</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件变化(目录下也出现了file03.txt)</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure><h1 id="附-几条铁令"><a href="#附-几条铁令" class="headerlink" title="附:几条铁令"></a>附:几条铁令</h1><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li><li>遇到任何问题都不要删除文件目录，第1时间找老师</li></ol>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Git/">Git</category>
      
      
      <comments>http://example.com/2024/08/22/Git/git/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2024/08/09/MFC/MFC(%E4%B8%80)/</link>
      <guid>http://example.com/2024/08/09/MFC/MFC(%E4%B8%80)/</guid>
      <pubDate>Fri, 09 Aug 2024 08:13:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、MFC概念和作用&quot;&gt;&lt;a href=&quot;#一、MFC概念和作用&quot; class=&quot;headerlink&quot; title=&quot;一、MFC概念和作用&quot;&gt;&lt;/a&gt;一、MFC概念和作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MFC：微软基础类库 （Microsoft  Founda</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、MFC概念和作用"><a href="#一、MFC概念和作用" class="headerlink" title="一、MFC概念和作用"></a>一、MFC概念和作用</h1><ul><li><p>MFC：微软基础类库 （Microsoft  Foundation Class Library），封装了windows应用程序的各种API和相关机制的C++类库</p></li><li><p>总结：</p><ol><li>MFC是一个大的类库</li><li>MFC是一个应用程序框架</li></ol></li><li><p>为什么使用MFC？</p><ul><li>应用提供的框架，可以快速开发</li></ul></li><li><p>MFC常用的头文件</p><ul><li>afx.h-将各种MFC头文件包含在内</li><li>afxwin.h-包含了各种MFC窗口类。包含afx.h和windows.h</li><li>afxext.h-提供了扩展窗口类的支持，例如工具栏</li></ul></li></ul><h1 id="二、空win32程序模板"><a href="#二、空win32程序模板" class="headerlink" title="二、空win32程序模板"></a>二、空win32程序模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口过程函数声明</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序入口点</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义窗口类名</span></span><br><span class="line">    <span class="type">static</span> TCHAR szAppName[] = <span class="built_in">TEXT</span>(<span class="string">&quot;HelloWin&quot;</span>);</span><br><span class="line">    HWND hwnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    WNDCLASS wndclass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口类属性</span></span><br><span class="line">    wndclass.style = CS_HREDRAW | CS_VREDRAW; <span class="comment">// 水平和垂直重绘</span></span><br><span class="line">    wndclass.lpfnWndProc = WndProc; <span class="comment">// 指向窗口过程函数的指针</span></span><br><span class="line">    wndclass.cbClsExtra = <span class="number">0</span>; <span class="comment">// 类附加内存</span></span><br><span class="line">    wndclass.cbWndExtra = <span class="number">0</span>; <span class="comment">// 窗口附加内存</span></span><br><span class="line">    wndclass.hInstance = hInstance; <span class="comment">// 当前实例句柄</span></span><br><span class="line">    wndclass.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>, IDI_APPLICATION); <span class="comment">// 加载默认应用程序图标</span></span><br><span class="line">    wndclass.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_ARROW); <span class="comment">// 加载箭头光标</span></span><br><span class="line">    wndclass.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH); <span class="comment">// 设置背景颜色为白色</span></span><br><span class="line">    wndclass.lpszMenuName = <span class="literal">NULL</span>; <span class="comment">// 无菜单</span></span><br><span class="line">    wndclass.lpszClassName = szAppName; <span class="comment">// 窗口类名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------- 以下为 窗口类的注册 --------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">RegisterClass</span>(&amp;wndclass))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;This program requires Windows NT!&quot;</span>), szAppName, MB_ICONERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------- 创建窗口 --------------------------</span></span><br><span class="line">    hwnd = <span class="built_in">CreateWindow</span>(szAppName, <span class="comment">// 窗口类名</span></span><br><span class="line">        <span class="built_in">TEXT</span>(<span class="string">&quot;The Hello Program&quot;</span>), <span class="comment">// 窗口标题</span></span><br><span class="line">        WS_OVERLAPPEDWINDOW, <span class="comment">// 窗口样式</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始水平位置</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始垂直位置</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始宽度</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始高度</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 父窗口句柄</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 菜单句柄</span></span><br><span class="line">        hInstance, <span class="comment">// 当前实例句柄</span></span><br><span class="line">        <span class="literal">NULL</span>); <span class="comment">// 窗口创建数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------- 显示窗口 ------------------------</span></span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwnd, iCmdShow);</span><br><span class="line">    <span class="comment">// ---------------------- 绘制用户区 ---------------------------</span></span><br><span class="line">    <span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------- 消息循环 -----------------------------------</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg); <span class="comment">// 翻译消息</span></span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg); <span class="comment">// 分发消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg.wParam; <span class="comment">// 返回消息的wParam值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------- 以下为窗口函数WndProc--------------------------------</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hdc;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    RECT rect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="comment">// 创建窗口时播放声音</span></span><br><span class="line">        <span class="built_in">PlaySound</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;hellowin.wav&quot;</span>), <span class="literal">NULL</span>, SND_FILENAME | SND_ASYNC);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        <span class="comment">// 绘制窗口内容</span></span><br><span class="line">        hdc = <span class="built_in">BeginPaint</span>(hwnd, &amp;ps);</span><br><span class="line">        <span class="built_in">GetClientRect</span>(hwnd, &amp;rect); <span class="comment">// 获取客户区矩形</span></span><br><span class="line">        <span class="built_in">DrawText</span>(hdc, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello, Windows 98!&quot;</span>), <span class="number">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER); <span class="comment">// 绘制文本</span></span><br><span class="line">        <span class="built_in">EndPaint</span>(hwnd, &amp;ps);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="comment">// 销毁窗口时退出消息循环</span></span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认窗口过程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、加载bmp文件"><a href="#三、加载bmp文件" class="headerlink" title="三、加载bmp文件"></a>三、加载bmp文件</h1><p>bmp文件是MFC中使用的位图，用来显示图片</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：LoadBitmapFromFile</span></span><br><span class="line"><span class="comment">// 说明：从文件加载一个位图，并返回该位图的句柄</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">//   - HINSTANCE hInstance: 当前应用程序实例的句柄</span></span><br><span class="line"><span class="comment">//   - LPCTSTR lpszName: 包含位图文件路径的字符串</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">//   - 如果成功，返回加载的位图的句柄</span></span><br><span class="line"><span class="comment">//   - 如果失败，返回NULL</span></span><br><span class="line"><span class="function">HBITMAP <span class="title">LoadBitmapFromFile</span><span class="params">(HINSTANCE hInstance, LPCTSTR lpszName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个变量 hBitmap 并初始化为 NULL，用于存储加载的位图句柄</span></span><br><span class="line">    HBITMAP hBitmap = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 LoadImage 函数从文件加载位图</span></span><br><span class="line">    hBitmap = (HBITMAP)<span class="built_in">LoadImage</span>(</span><br><span class="line">        hInstance,  <span class="comment">// 当前应用程序实例的句柄</span></span><br><span class="line">        lpszName,   <span class="comment">// 位图文件路径</span></span><br><span class="line">        IMAGE_BITMAP,  <span class="comment">// 指明要加载的是位图</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,  <span class="comment">// 位图的宽度和高度，0 表示使用文件的原始大小</span></span><br><span class="line">        LR_LOADFROMFILE | LR_CREATEDIBSECTION  <span class="comment">// 从文件加载图像并创建一个 DIB 节</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 LoadImage 是否成功加载了位图</span></span><br><span class="line">    <span class="keyword">if</span> (hBitmap == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 hBitmap 仍然是 NULL，表示加载失败</span></span><br><span class="line">        <span class="comment">// 在这里添加错误处理代码，例如：</span></span><br><span class="line">        <span class="comment">// MessageBox(NULL, TEXT(&quot;Failed to load bitmap&quot;), TEXT(&quot;Error&quot;), MB_ICONERROR);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回加载的位图句柄</span></span><br><span class="line">    <span class="keyword">return</span> hBitmap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、更改文本框数据"><a href="#四、更改文本框数据" class="headerlink" title="四、更改文本框数据"></a>四、更改文本框数据</h1><p>这是一个按钮控件，通过点击按钮，更改文本数据</p><ol><li>使用CString定义一个字符串</li><li>使用Format 设置格式和内容</li><li>使用SetDlgItemText将字符串和控件练习起来</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnTractionMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">m_iTractionMax = m_iControlMH;</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;电位值：%d&quot;</span>), m_iTractionMax);</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_TRACTION_MAX, strTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、读取文件"><a href="#五、读取文件" class="headerlink" title="五、读取文件"></a>五、读取文件</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取司控器信息配置文件函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::ReadControllerInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义用于存储文件路径的缓冲区</span></span><br><span class="line">    TCHAR strFilePath[MAX_PATH];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前工作目录并存储到缓冲区中</span></span><br><span class="line">    <span class="built_in">GetCurrentDirectory</span>(MAX_PATH, strFilePath);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将文件名 &quot;controller.ini&quot; 拼接到当前工作目录路径后面</span></span><br><span class="line">    <span class="built_in">wcscat_s</span>(strFilePath, <span class="built_in">TEXT</span>(<span class="string">&quot;\\controller.ini&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 &quot;controller.ini&quot; 文件的 &quot;Controller&quot; 节读取 &quot;TractionMax&quot; 键的值</span></span><br><span class="line">    <span class="comment">// 如果未找到该键，则返回默认值 0</span></span><br><span class="line">    m_iTractionMax = <span class="built_in">GetPrivateProfileInt</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Controller&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;TractionMax&quot;</span>), <span class="number">0</span>, strFilePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义临时字符串变量用于格式化显示值</span></span><br><span class="line">    CString strTemp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将读取到的 &quot;TractionMax&quot; 值格式化为字符串并存储在 strTemp 中</span></span><br><span class="line">    strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;电位值：%d&quot;</span>), m_iTractionMax);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将格式化后的字符串显示在对话框控件上，控件的ID为 IDC_TRACTION_MAX</span></span><br><span class="line">    <span class="built_in">SetDlgItemText</span>(IDC_TRACTION_MAX, strTemp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、写入文件"><a href="#六、写入文件" class="headerlink" title="六、写入文件"></a>六、写入文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">TCHAR strFilePath[MAX_PATH];</span><br><span class="line"><span class="built_in">GetCurrentDirectory</span>(MAX_PATH, strFilePath);</span><br><span class="line"><span class="built_in">wcscat_s</span>(strFilePath, <span class="built_in">TEXT</span>(<span class="string">&quot;\\controller.ini&quot;</span>));</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>), m_iTractionMax);</span><br><span class="line"><span class="built_in">WritePrivateProfileString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Controller&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;TractionMax&quot;</span>), strTemp, strFilePath);</span><br><span class="line">    <span class="comment">// 这里创建[Controller]，并在它下面创建TractionMax</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是为空情况下自动创建的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Controller]</span><br><span class="line">TractionMax=0</span><br><span class="line">TractionMin=5</span><br><span class="line">BreakMin=2010</span><br><span class="line">BreakMax=4000</span><br></pre></td></tr></table></figure><p>这是节点之后，更新的</p><p>其中的 # 和 ；是注释，自动跳过，没有影响</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>司控器设置</span><br><span class="line"></span><br><span class="line">[Controller]</span><br><span class="line">TractionMax =0</span><br><span class="line">;司控器最大牵引位</span><br><span class="line">TractionMin =5</span><br><span class="line">;司控器最小牵引位</span><br><span class="line">BreakMin =2010</span><br><span class="line">;司控器最小制动位</span><br><span class="line">BreakMax =4000</span><br><span class="line">;司控器最大制动位</span><br></pre></td></tr></table></figure><h1 id="七、创建子窗口"><a href="#七、创建子窗口" class="headerlink" title="七、创建子窗口"></a>七、创建子窗口</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnViewSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">m_pDlgSend-&gt;<span class="built_in">ShowWindow</span>(SW_NORMAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建主窗口类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMainDlg.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMainDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CChildDialog* m_pChildDlg; <span class="comment">// 指向子窗口的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMainDlg.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMainDlg::OnBnClickedBtnCreateChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_pChildDlg == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pChildDlg = <span class="keyword">new</span> <span class="built_in">CChildDialog</span>(<span class="keyword">this</span>); <span class="comment">// 创建子对话框对象</span></span><br><span class="line">        m_pChildDlg-&gt;<span class="built_in">Create</span>(IDD_CHILD_DIALOG, <span class="keyword">this</span>); <span class="comment">// 创建子对话框</span></span><br><span class="line">        m_pChildDlg-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW); <span class="comment">// 显示子对话框</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建子窗口类</p></li><li><p>添加对话框资源<br>确保在资源文件中添加了 <code>IDD_MAIN_DIALOG</code>（主对话框）和 <code>IDD_CHILD_DIALOG</code>（子对话框）的对话框资源，并在主对话框中添加一个按钮，其 ID 设置为 <code>IDC_BTN_CREATE_CHILD</code>，用来创建和显示子对话框。</p></li></ol><h1 id="八、添加列表控件"><a href="#八、添加列表控件" class="headerlink" title="八、添加列表控件"></a>八、添加列表控件</h1><h4 id="设置列表控件样式和列头"><a href="#设置列表控件样式和列头" class="headerlink" title="设置列表控件样式和列头"></a>设置列表控件样式和列头</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CDlgSend::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialog::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置列表控件的扩展样式，包括全行选中、网格线、头部拖放和单行选择</span></span><br><span class="line">    DWORD dwExListStyle = m_listSend.<span class="built_in">GetExtendedStyle</span>() | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP | LVS_EX_SINGLEROW;</span><br><span class="line">    m_listSend.<span class="built_in">SetExtendedStyle</span>(dwExListStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义列头的标题和宽度</span></span><br><span class="line">    CString strListHead[] = &#123; <span class="built_in">TEXT</span>(<span class="string">&quot;ID&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Name&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Value&quot;</span>) &#125;;</span><br><span class="line">    <span class="type">int</span> nListWidth[] = &#123; <span class="number">50</span>, <span class="number">580</span>, <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加列头到列表控件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(nListWidth) / <span class="built_in">sizeof</span>(<span class="type">int</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m_listSend.<span class="built_in">InsertColumn</span>(i, strListHead[i], LVCFMT_LEFT, nListWidth[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充列表控件的数据</span></span><br><span class="line">    <span class="built_in">FillListSend</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器，每隔100毫秒执行一次</span></span><br><span class="line">    <span class="built_in">SetTimer</span>(IDT_TIMER_SEND, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">    <span class="comment">// 异常:  OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDlgSend::FillListSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_listSend.<span class="built_in">DeleteAllItems</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(strSend)/<span class="built_in">sizeof</span>(strSend[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line">m_listSend.<span class="built_in">InsertItem</span>(i, <span class="built_in">TEXT</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>), i + <span class="number">1</span>);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">0</span>, strTemp);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">1</span>, strSend[i]);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">2</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;0&quot;</span>));</span><br><span class="line"></span><br><span class="line">m_listSend.<span class="built_in">SetItemData</span>(i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h4><ol><li><p>**设置列表控件样式 (<code>LVS_EX_</code> 开头的扩展样式)**：</p><ul><li><code>LVS_EX_FULLROWSELECT</code>：允许整行选择。</li><li><code>LVS_EX_GRIDLINES</code>：显示网格线。</li><li><code>LVS_EX_HEADERDRAGDROP</code>：允许头部拖放。</li><li><code>LVS_EX_SINGLEROW</code>：只允许选择单行。</li><li>这些样式通过按位或运算符 <code>|</code> 结合到 <code>dwExListStyle</code> 中，然后通过 <code>m_listSend.SetExtendedStyle(dwExListStyle);</code> 应用到列表控件。</li></ul></li><li><p><strong>定义和添加列头</strong>：</p><ul><li><code>CString strListHead[]</code> 定义了列头的标题。</li><li><code>int nListWidth[]</code> 定义了每列的宽度。</li><li>通过 <code>m_listSend.InsertColumn(i, strListHead[i], LVCFMT_LEFT, nListWidth[i], -1);</code> 将每个标题和对应的宽度添加到列表控件中。</li></ul></li><li><p><strong>填充列表控件数据</strong>：</p><ul><li><code>FillListSend();</code> 函数用于填充列表控件的数据。这个函数可能会从数据源获取数据，并将数据插入到列表控件的行中。</li></ul></li><li><p><strong>设置定时器</strong>：</p><ul><li><code>SetTimer(IDT_TIMER_SEND, 100, NULL);</code> 设置了一个定时器，每隔100毫秒触发一次定时器消息。这通常用于执行定时任务，如周期性地更新列表数据或其他界面操作。</li></ul></li><li><p><strong>返回值</strong>：</p><ul><li>函数最后返回 <code>TRUE</code>，除非将焦点设置到某个控件，否则应该返回 <code>TRUE</code>。在 MFC 对话框中，通常是 <code>TRUE</code>，除非你有特定的需求返回 <code>FALSE</code>。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 <code>CDlgSend::OnInitDialog()</code> 函数中，你初始化了 <code>m_listSend</code> 列表控件的样式、列头和数据。这些操作确保了列表控件的外观和行为符合预期，并且设置了定时器以便于定时执行任务。如果需要进一步的解释或有其他问题，请随时告诉我！</p><h1 id="九、套接字"><a href="#九、套接字" class="headerlink" title="九、套接字"></a>九、套接字</h1><p>这个套接字通讯是在你的程序，与电路板之间进行服务的，发送给电路板使用的是sendto()函数，需要注意，发送信息的DO数据，需要nMsg和nID都定义好，才可以发送给对方</p><p>你的代码展示了一个在 MFC 应用程序中初始化和关闭服务器端套接字的过程。以下是对这段代码的详细解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::InitSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WORD wVersionRequested;<span class="comment">// 存储请求的Winsock版本</span></span><br><span class="line">WSADATA wsaData;<span class="comment">// 接受Winsock的详细信息</span></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载套接字库 1.1版本</span></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化库，获取的信息保存到wsaData中</span></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Load winsock failed!\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">1</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();<span class="comment">// 清理资源</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建套接字 </span></span><br><span class="line"><span class="comment">// AF_INET IPv4协议</span></span><br><span class="line"><span class="comment">// SOCK_DGRAM: 使用数据报套接字UDP</span></span><br><span class="line"><span class="comment">// 0:使用默认协议UDP</span></span><br><span class="line"><span class="comment">// 返回套接字描述符</span></span><br><span class="line">m_sockServer[i] = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (m_sockServer[i] == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Create socket failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> strPcIP[MAX_PATH];</span><br><span class="line">hostent* pHost;</span><br><span class="line"><span class="built_in">gethostname</span>(strPcIP, MAX_PATH); <span class="comment">//获得主机名</span></span><br><span class="line">pHost = <span class="built_in">gethostbyname</span>(strPcIP); <span class="comment">//获得主机结构</span></span><br><span class="line"></span><br><span class="line">m_addrServer[i].sin_addr.S_un.S_addr = (*(<span class="keyword">struct</span> in_addr *)pHost-&gt;h_addr_list[<span class="number">0</span>]).S_un.S_addr; <span class="comment">//本地IP地址</span></span><br><span class="line">m_addrServer[i].sin_family = AF_INET;</span><br><span class="line">m_addrServer[i].sin_port = <span class="built_in">htons</span>(m_myModuleInfo[i].nModulePcPort); <span class="comment">//本地端口号</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> strIP[MAX_PATH];</span><br><span class="line"><span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, m_myModuleInfo[i].strModuleIP, <span class="number">-1</span>, strIP, MAX_PATH, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">m_addrClient[i].sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(strIP); <span class="comment">//模块IP地址</span></span><br><span class="line">m_addrClient[i].sin_family = AF_INET;</span><br><span class="line">m_addrClient[i].sin_port = <span class="built_in">htons</span>(m_myModuleInfo[i].nModulePort); <span class="comment">//模块端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(m_sockServer[i], (SOCKADDR*)&amp;m_addrServer[i], <span class="built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Bind socket failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAAsyncSelect</span>(m_sockServer[i], <span class="keyword">this</span>-&gt;m_hWnd, WM_SOCKET, FD_READ | FD_WRITE) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;WSAAsyncSelect failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束服务器端套接字函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::DestroySocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_iModuleNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更清晰地理解这个过程，我们可以看看UDP套接字通信的基本步骤：</p><ol><li><p><strong>创建套接字</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_sockSrv[<span class="number">0</span>] = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>设置客户端地址</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m_addrClient[<span class="number">0</span>].sin_family = AF_INET;</span><br><span class="line">m_addrClient[<span class="number">0</span>].sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">m_addrClient[<span class="number">0</span>].sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;client_ip_address&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>发送数据</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sendto</span>(m_sockSrv[<span class="number">0</span>], (<span class="type">char</span>*)&amp;data, <span class="built_in">sizeof</span>(data), <span class="number">0</span>, (SOCKADDR*)&amp;m_addrClient[<span class="number">0</span>], <span class="built_in">sizeof</span>(SOCK</span><br></pre></td></tr></table></figure></li></ol><p>在这个套接字消息响应函数中，处理了来自套接字的不同消息类型。让我们逐步分析这个函数的具体作用和逻辑：</p><h3 id="套接字接收代码详细解释："><a href="#套接字接收代码详细解释：" class="headerlink" title="套接字接收代码详细解释："></a>套接字接收代码详细解释：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">CInterfaceDlg::OnSocket</span><span class="params">(WPARAM wParam, LPARAM lParam)</span> <span class="comment">// 套接字响应，获取DI信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYDATA mdRecv[<span class="number">2</span>];<span class="comment">//每次接收两次数据 长度为0x0D*2</span></span><br><span class="line">SOCKADDR_IN addrTemp;</span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">WSAGETSELECTEVENT</span>(lParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> FD_READ:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mdRecv, <span class="number">0</span>, <span class="built_in">sizeof</span>(mdRecv));</span><br><span class="line"><span class="built_in">recvfrom</span>((SOCKET)wParam, (<span class="type">char</span>*)mdRecv, <span class="built_in">sizeof</span>(mdRecv), <span class="number">0</span>, (SOCKADDR*)&amp;addrTemp, &amp;nLen);</span><br><span class="line"><span class="comment">// 获取远程IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 获取远程IP地址和端口号</span></span><br><span class="line"><span class="comment">//CString strIP;</span></span><br><span class="line"><span class="comment">//strIP.Format(_T(&quot;%d.%d.%d.%d&quot;),</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b1,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b2,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b3,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b4);</span></span><br><span class="line"><span class="comment">//UINT nPort = ntohs(addrTemp.sin_port);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 显示远程IP地址和端口号</span></span><br><span class="line"><span class="comment">//CString strMsg;</span></span><br><span class="line"><span class="comment">//strMsg.Format(_T(&quot;远程IP: %s\n远程端口: %d&quot;), strIP, nPort);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(strMsg);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_iModuleNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_sockServer[i] == (SOCKET)wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nMsg = mdRecv[j].myByteData.nMsg &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nID = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; COM_ID_NUM; k++)</span><br><span class="line">&#123;</span><br><span class="line">nID = nID &lt;&lt; <span class="number">8</span>;</span><br><span class="line">nID = nID + (mdRecv[j].myByteData.nID[k] &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nMsg == COM_MSG &amp;&amp; nID == COM_DI)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_mdModuleDI[i], &amp;mdRecv[j], <span class="built_in">sizeof</span>(MYDATA));</span><br><span class="line"><span class="comment">// 检查和调试信息</span></span><br><span class="line"><span class="comment">//CString strDebug;</span></span><br><span class="line"><span class="comment">//strDebug.Format(_T(&quot;匹配的DI数据: nMsg = %d, nID = %d, bt_00 = %d, bt_01 = %d&quot;),</span></span><br><span class="line"><span class="comment">//nMsg, nID,</span></span><br><span class="line"><span class="comment">//m_mdModuleDI[i].myBitData.bt_00,</span></span><br><span class="line"><span class="comment">//m_mdModuleDI[i].myBitData.bt_01);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(strDebug);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> FD_WRITE:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码逻辑："><a href="#代码逻辑：" class="headerlink" title="代码逻辑："></a>代码逻辑：</h3><ol><li><p><strong>FD_READ</strong>: 当接收到FD_READ事件时，表示有数据可以读取。</p><ul><li>使用<code>recvfrom</code>从套接字读取数据到<code>chRecv</code>数组中。</li><li>检查数据前缀是否为<code>0x88</code>，如果是则解析ID，并根据ID检查是否为<code>0x00000060</code>。</li><li>如果ID匹配，从数据中提取按钮状态到<code>nBtn</code>数组中。</li><li>再次检查数据中的另一段（从索引13开始），重复上述步骤。</li></ul></li><li><p><strong>数据处理</strong>:</p><ul><li>遍历所有模块的套接字，找到与当前套接字匹配的模块。</li><li>对接收到的两段数据（<code>mdRecv</code>数组中的数据）进行处理：<ul><li>提取消息和ID。</li><li>根据消息和ID，决定将数据复制到<code>m_mdModuleDI</code>或<code>m_mdModuleAI</code>中，或处理其他类型的数据。</li></ul></li></ul></li><li><p><strong>FD_WRITE</strong>: 当接收到FD_WRITE事件时，表示套接字可以写入数据。此处未进行任何操作。</p></li><li><p><strong>默认处理</strong>: 对于其他未处理的事件类型，未进行任何操作。</p></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><p><strong>ID的计算</strong>：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nID = (chRecv[<span class="number">1</span>] &lt;&lt; <span class="number">24</span>) + (chRecv[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (chRecv[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) + chRecv[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p> ID的计算方式需要使用括号确保操作顺序正确，否则可能导致计算结果不正确。</p></li><li><p><strong>消息类型的处理</strong>：</p><ul><li>确保对每种消息类型和ID的处理逻辑正确。</li><li>对于未知消息类型或ID，可以考虑增加日志记录或错误处理。</li></ul></li><li><p><strong>内存操作</strong>：</p><ul><li>使用<code>memcpy</code>时，确保源和目标内存区域大小匹配，防止缓冲区溢出或内存损坏。</li></ul></li></ol><p>这个函数主要用于处理从套接字接收到的数据，并将解析后的数据存储到相应的模块结构中。</p><h2 id="程序发送数据到电路板"><a href="#程序发送数据到电路板" class="headerlink" title="程序发送数据到电路板"></a>程序发送数据到电路板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::UpdateDataRecv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m_mdModuleDO[0].myBitData.bt_00 = m_dataRecv.bRisepanto; //升弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_00 = <span class="number">0</span>; <span class="comment">//升弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_01 = m_dataRecv.bDNPanto;<span class="comment">//降弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_02 = m_dataRecv.bRiseMode;<span class="comment">//升级模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印目标 IP 和端口号</span></span><br><span class="line"><span class="comment">//CString ipAddr(inet_ntoa(m_addrClient[0].sin_addr));</span></span><br><span class="line"><span class="comment">//CString port;</span></span><br><span class="line"><span class="comment">//port.Format(TEXT(&quot;%d&quot;), ntohs(m_addrClient[0].sin_port));</span></span><br><span class="line"><span class="comment">//CString msg;</span></span><br><span class="line"><span class="comment">//msg.Format(TEXT(&quot;Sending to IP: %s, Port: %s&quot;), ipAddr, port);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(msg);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="built_in">sendto</span>(m_sockServer[<span class="number">0</span>], (<span class="type">char</span>*)&amp;m_mdModuleDO[<span class="number">0</span>], <span class="built_in">sizeof</span>(MYDATA), <span class="number">0</span>, (SOCKADDR*)&amp;m_addrClient[<span class="number">0</span>], <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，DO数据需要设置标志字段，直接发送是没办法收到的</p><h1 id="十、编辑框和按钮"><a href="#十、编辑框和按钮" class="headerlink" title="十、编辑框和按钮"></a>十、编辑框和按钮</h1><p>1、添加编辑框控件和按钮，然后更改ID和Caption</p><p><img src="/2024/08/09/MFC/MFC(%E4%B8%80)/image-20240716135319855.png" alt="image-20240716135319855"></p><p>2、编辑框添加成员变量，用来保存输入的编辑框信息<br><img src="/2024/08/09/MFC/MFC(%E4%B8%80)/image-20240716135443062.png" alt="image-20240716135443062"></p><p>添加之后，Dlg.h会多出变量定义，Dlg.cpp会将变量和控件绑定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dlg.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDlg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dlg.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTextToSpeechDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、设置编辑框默认文本，在OnInitDialog()中设置初始文本或水印文字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CTextToSpeechDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//m_edtText.SetWindowTextW(_T(&quot;请输入&quot;));</span></span><br><span class="line">m_edtText.<span class="built_in">SetCueBanner</span>(_T(<span class="string">&quot;请输入&quot;</span>));<span class="comment">// 设置水印文字，点击时自动消失</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、双击按钮，系统会自动初始化按钮触发的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTextToSpeechDlg::OnBnClickedTranfer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CString strText;</span><br><span class="line">m_edtText.<span class="built_in">GetWindowText</span>(strText);<span class="comment">// 获取编辑框的输入</span></span><br><span class="line">m_edtText.<span class="built_in">SetCueBanner</span>(_T(<span class="string">&quot;请再次输入&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 CString 格式化字符串，检测是否得到编辑框信息</span></span><br><span class="line">CString message;</span><br><span class="line">message.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), strText);</span><br><span class="line"><span class="built_in">MessageBox</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/08/09/MFC/MFC(%E4%B8%80)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>QT_基础(一)</title>
      <link>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/</link>
      <guid>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/</guid>
      <pubDate>Thu, 08 Aug 2024 08:48:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、QT概述&quot;&gt;&lt;a href=&quot;#一、QT概述&quot; class=&quot;headerlink&quot; title=&quot;一、QT概述&quot;&gt;&lt;/a&gt;一、QT概述&lt;/h1&gt;&lt;h2 id=&quot;1-1、介绍&quot;&gt;&lt;a href=&quot;#1-1、介绍&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、QT概述"><a href="#一、QT概述" class="headerlink" title="一、QT概述"></a>一、QT概述</h1><h2 id="1-1、介绍"><a href="#1-1、介绍" class="headerlink" title="1.1、介绍"></a>1.1、介绍</h2><ul><li>跨平台的图形用户界面应用程序框架</li><li>面向对象</li><li>可以扩展</li></ul><h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h2><ol><li>跨平台</li><li>接口简单，容易上手</li><li>简化了内存回收</li></ol><h2 id="1-3、版本"><a href="#1-3、版本" class="headerlink" title="1.3、版本"></a>1.3、版本</h2><ul><li>商业版</li><li>开源版</li></ul><h2 id="1-4、历史"><a href="#1-4、历史" class="headerlink" title="1.4、历史"></a>1.4、历史</h2><ul><li>1991年，奇趣科技</li><li>1996年，进入商业领域， 成功案例：Linux的桌面环境</li></ul><h2 id="1-5、下载"><a href="#1-5、下载" class="headerlink" title="1.5、下载"></a>1.5、下载</h2><p>官方下载地址：<a href="http://download.qt.io/archive/qt/">http://download.qt.io/archive/qt/</a> </p><p>清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/development_releases/online_installers/">Index of &#x2F;qt&#x2F;development_releases&#x2F;online_installers&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>下载教程（先在powershell输入第11条命令）：<a href="https://blog.csdn.net/qq_40296728/article/details/131917751">QT下载安装教程_qt安装教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_40296728/category_12531577.html">QT_在巴厘岛冲浪的阿k的博客-CSDN博客</a></p><h2 id="1-6、成功案例"><a href="#1-6、成功案例" class="headerlink" title="1.6、成功案例"></a>1.6、成功案例</h2><ul><li>Linux桌面环境KDE</li><li>WPS Office办公软件</li></ul><h2 id="1-7、问题汇总"><a href="#1-7、问题汇总" class="headerlink" title="1.7、问题汇总"></a>1.7、问题汇总</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240822141901547.png" alt="image-20240822141901547"></p><h1 id="二、新建项目"><a href="#二、新建项目" class="headerlink" title="二、新建项目"></a>二、新建项目</h1><h2 id="2-1、新建"><a href="#2-1、新建" class="headerlink" title="2.1、新建"></a>2.1、新建</h2><p>点击新建项目(open project)，选择Qt Widgets Application，它会提供一个包含主窗口的项目</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805101610765.png" alt="image-20240805101610765"></p><h2 id="2-2、Location"><a href="#2-2、Location" class="headerlink" title="2.2、Location"></a>2.2、Location</h2><p>选择项目名称和保存路径，注意都不可以包含中文和空格</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805102541909.png" alt="image-20240805102541909"></p><h2 id="2-3、构建系统"><a href="#2-3、构建系统" class="headerlink" title="2.3、构建系统"></a>2.3、构建系统</h2><p><a href="https://blog.csdn.net/secondtonone1/article/details/137644031">QT系列教程(2) 创建项目和编译_qt构建系统选哪个-CSDN博客</a></p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805103945902.png" alt="image-20240805103945902"></p><h2 id="2-4、Details"><a href="#2-4、Details" class="headerlink" title="2.4、Details"></a>2.4、Details</h2><p>QWidget是父类，空窗口，可以直接使用ui拖动进行设计</p><p>QMainWindow（窗口）,QDialog都是子类。QDialog是对话框。</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805104342958.png" alt="image-20240805104342958"></p><h2 id="2-5、Translation"><a href="#2-5、Translation" class="headerlink" title="2.5、Translation"></a>2.5、Translation</h2><p>翻译语言选择：无</p><h2 id="2-6、构建套件"><a href="#2-6、构建套件" class="headerlink" title="2.6、构建套件"></a>2.6、构建套件</h2><p>构建套件：</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805104619462.png" alt="image-20240805104619462"></p><h2 id="2-7、汇总"><a href="#2-7、汇总" class="headerlink" title="2.7、汇总"></a>2.7、汇总</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805104639477.png" alt="image-20240805104639477"></p><p>.pro 工程文件，类似VS中的.sln，可以双击打开文件</p><p>main.cpp 程序入口</p><p>mywidget.cpp,mywidget.h是窗口文件</p><h2 id="2-8、结果"><a href="#2-8、结果" class="headerlink" title="2.8、结果"></a>2.8、结果</h2><p>点击完成之后，获得项目</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240805105338326.png" alt="image-20240805105338326"></p><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span> <span class="comment">// 包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main程序入口</span></span><br><span class="line"><span class="comment">// argc命令行变量的数量</span></span><br><span class="line"><span class="comment">// argv 命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a 应用程序对象，在Qt中，应用程序对象，有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 窗口对象 myWidget父类 -&gt; QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">// 窗口对象，默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让应用程序对象进入消息循环</span></span><br><span class="line">    <span class="comment">// 让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、项目文件"><a href="#三、项目文件" class="headerlink" title="三、项目文件"></a>三、项目文件</h1><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/image-20240822141620385.png" alt="image-20240822141620385"></p><h2 id="3-1、-pro文件"><a href="#3-1、-pro文件" class="headerlink" title="3.1、.pro文件"></a>3.1、.pro文件</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80" alt="Qt5 模块">&#x2F;Qt5 模块.png)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QT       += core guiQt包含的模块</span><br><span class="line"></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets<span class="comment">// 大于4版本以上，包含Qt的widgets模块</span></span><br><span class="line"></span><br><span class="line">CONFIG += c+<span class="number">+17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过取消注释来禁用所有在QT6.0之前已弃用的API</span></span><br><span class="line"># You can make your code fail to compile <span class="keyword">if</span> it uses deprecated APIs.</span><br><span class="line"># In order to <span class="keyword">do</span> so, uncomment the following line.</span><br><span class="line">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=<span class="number">0x060000</span>    <span class="meta"># disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line">SOURCES += \<span class="comment">// 源文件</span></span><br><span class="line">    main.cpp \</span><br><span class="line">    mywidget.cpp</span><br><span class="line"></span><br><span class="line">HEADERS += \<span class="comment">// 头文件</span></span><br><span class="line">    mywidget.h</span><br><span class="line"></span><br><span class="line"># Default rules <span class="keyword">for</span> deployment.</span><br><span class="line">qnx: target.path = /tmp/$$&#123;TARGET&#125;/bin</span><br><span class="line"><span class="keyword">else</span>: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span><br><span class="line">!<span class="built_in">isEmpty</span>(target.path): INSTALLS += target</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2、main-cpp"><a href="#3-2、main-cpp" class="headerlink" title="3.2、main.cpp"></a>3.2、main.cpp</h2><p>项目的开始文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span> <span class="comment">// 包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main程序入口</span></span><br><span class="line"><span class="comment">// argc命令行变量的数量</span></span><br><span class="line"><span class="comment">// argv 命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a 应用程序对象，在Qt中，应用程序对象，有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 窗口对象 myWidget父类 -&gt; QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">// 窗口对象，默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 让应用程序对象进入消息循环</span></span><br><span class="line">    <span class="comment">// 让代码阻塞到这行</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3、-h文件"><a href="#3-3、-h文件" class="headerlink" title="3.3、.h文件"></a>3.3、.h文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span>  <span class="comment">// 包含头文件 QWidget 窗口类</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT    <span class="comment">// Q_OBJECT宏，允许类中使用信号和槽的机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);    <span class="comment">// 构造函数</span></span><br><span class="line">    ~<span class="built_in">myWidget</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4、-cpp文件"><a href="#3-4、-cpp文件" class="headerlink" title="3.4、.cpp文件"></a>3.4、.cpp文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助文档</span></span><br><span class="line"><span class="comment">// 第一种方式 F1</span></span><br><span class="line"><span class="comment">// 第二种 左侧按钮</span></span><br><span class="line"><span class="comment">// 第三种 assistant.exe E:\Qt\6.6.3\mingw_64\bin</span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>() &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5、快捷键"><a href="#3-5、快捷键" class="headerlink" title="3.5、快捷键"></a>3.5、快捷键</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快捷键</span></span><br><span class="line"><span class="comment">// 注释 Ctrl + /</span></span><br><span class="line"><span class="comment">// 运行 ctrl + r</span></span><br><span class="line"><span class="comment">// 编译 ctrl + b</span></span><br><span class="line"><span class="comment">// 字体缩放 ctrl + 鼠标滚轮</span></span><br><span class="line"><span class="comment">// 查找 ctrl + f</span></span><br><span class="line"><span class="comment">// 整行移动 ctrl + shift + ↑或者↓</span></span><br><span class="line"><span class="comment">// 帮助文档 F1</span></span><br><span class="line"><span class="comment">// 自动对齐 ctrl + i</span></span><br><span class="line"><span class="comment">// 同名之间的.h 和 .cpp切换 F4</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/QT/">QT</category>
      
      
      <comments>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%80)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>QT_基础(三)-窗口与布局</title>
      <link>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/</link>
      <guid>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/</guid>
      <pubDate>Thu, 08 Aug 2024 08:48:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;七、QMainWindow&quot;&gt;&lt;a href=&quot;#七、QMainWindow&quot; class=&quot;headerlink&quot; title=&quot;七、QMainWindow&quot;&gt;&lt;/a&gt;七、QMainWindow&lt;/h1&gt;&lt;p&gt;​		QMainWindow是一个为用户提供主窗口程</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="七、QMainWindow"><a href="#七、QMainWindow" class="headerlink" title="七、QMainWindow"></a>七、QMainWindow</h1><p>​QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)、一个状态栏(status bar)及一个中心部件(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps1-1722905784198.jpg" alt="img"></p><h2 id="7-1-菜单栏"><a href="#7-1-菜单栏" class="headerlink" title="7.1 菜单栏"></a>7.1 菜单栏</h2><p>最多有一个</p><p>引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>QMenuBar * bar &#x3D; MenuBar();</li><li>setMenuBar( bar ) </li><li>QMenu * fileMenu &#x3D; bar -&gt; addMenu(“文件”)  创建菜单</li><li>QAction * newAction &#x3D;  fileMenu -&gt;addAction(“新建”); 创建菜单项</li><li>添加分割线 fileMenu-&gt;addSeparator();</li></ol><h2 id="7-2-工具栏"><a href="#7-2-工具栏" class="headerlink" title="7.2 工具栏"></a>7.2 工具栏</h2><p>可以有多个</p><ol><li>QToolBar * toolbar &#x3D; new QToolBar(this);</li><li>addToolBar( 默认停靠区域， toolbar );  Qt::LeftToolBarArea</li><li>设置  后期停靠区域，设置浮动，设置移动</li><li>添加菜单项 或者添加 小控件</li></ol><h2 id="7-3-状态栏"><a href="#7-3-状态栏" class="headerlink" title="7.3 状态栏"></a>7.3 状态栏</h2><p>最多一个</p><p>1.3.1 QStatusBar * stBar &#x3D; statusBar();</p><p>1.3.2 设置到窗口中 setStatusBar(stBar);</p><p>1.3.3  stBar-&gt;addWidget(label);放左侧信息</p><p>1.3.4  stBar-&gt;addPermanentWidget(label2); 放右侧信息</p><h2 id="7-4-铆接部件"><a href="#7-4-铆接部件" class="headerlink" title="7.4 铆接部件"></a>7.4 铆接部件</h2><p>浮动窗口  可以多个</p><ol><li>QDockWidget </li><li>addDockWidget( 默认停靠区域，浮动窗口指针)</li><li>设置后期停靠区域</li></ol><h2 id="7-5-设置核心部件"><a href="#7-5-设置核心部件" class="headerlink" title="7.5 设置核心部件"></a>7.5 设置核心部件</h2><p>  只能一个</p><ol><li>setCentralWidget(edit);</li></ol><h2 id="7-6、资源文件"><a href="#7-6、资源文件" class="headerlink" title="7.6、资源文件"></a>7.6、资源文件</h2><p>1.1 将图片文件 拷贝到项目位置下</p><p>1.2 右键项目-&gt;添加新文件 –&gt;  Qt - &gt; Qt recourse File  - &gt;给资源文件起名</p><p>1.3 res 生成  res.qrc  </p><p>1.4 open in editor  编辑资源</p><p>1.5 添加前缀  添加文件</p><p>1.6 使用  “ : + 前缀名 + 文件名 ”</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/image-20240806100528590.png" alt="image-20240806100528590"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ui-&gt;actionnew-&gt;setIcon(QIcon(&quot;F:\\QT\\05_QtSource\\Image\\Luffy.png&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用添加Qt资源 &quot;: +前缀名 +文件名&quot;</span></span><br><span class="line">    ui-&gt;actionnew-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/Image/Luffy.png&quot;</span>));</span><br><span class="line">    ui-&gt;actionopen-&gt;<span class="built_in">setIcon</span>(<span class="built_in">QIcon</span>(<span class="string">&quot;:/Image/LuffyQ.png&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、对话框"><a href="#八、对话框" class="headerlink" title="八、对话框"></a>八、对话框</h1><h2 id="8-1-分类-："><a href="#8-1-分类-：" class="headerlink" title="8.1 分类 ："></a>8.1 分类 ：</h2><ol><li>模态对话框  不可以对其他窗口进行操作 阻塞<ol><li>QDialog  dlg(this)</li><li>dlg.exec();</li></ol></li><li>非模态对话框  可以对其他窗口进行操作<ol><li>防止一闪而过 创建到堆区</li><li>QDialog * dlg &#x3D; new QDialog(this)</li><li>dlg-&gt;show();</li><li>dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose); &#x2F;&#x2F;55号 属性</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击新建按钮，弹出一个对话框</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;actionnew, &amp;QAction::triggered,[=]()&#123;</span><br><span class="line">    <span class="comment">// 对话框 两种分类</span></span><br><span class="line">    <span class="comment">// 模态对话框（不可以对其他窗口进行操作）阻塞</span></span><br><span class="line">    <span class="comment">// 非模态对话框（可以对其他窗口进行操作）</span></span><br><span class="line">    <span class="comment">// QDialog dlg(this);</span></span><br><span class="line">    <span class="comment">// dlg.resize(200, 100);</span></span><br><span class="line">    <span class="comment">// dlg.exec();</span></span><br><span class="line">    <span class="comment">// qDebug() &lt;&lt; &quot;模态对话框弹出了&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非模态对话框</span></span><br><span class="line">    QDialog * dlg2 = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">    dlg2-&gt;<span class="built_in">resize</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">    dlg2-&gt;<span class="built_in">show</span>();</span><br><span class="line">    dlg2-&gt;<span class="built_in">setAttribute</span>(Qt::WA_DeleteOnClose);   <span class="comment">// 55号属性</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;非模态对话框弹出了&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8-2-标准对话框-–-消息对话框"><a href="#8-2-标准对话框-–-消息对话框" class="headerlink" title="8.2 标准对话框 –  消息对话框"></a>8.2 标准对话框 –  消息对话框</h2><p>1.2.1 QMessageBox 静态成员函数  创建对话框</p><p>1.2.2 错误、信息、提问、警告</p><p>1.2.3 参数1  父亲 参数2  标题  参数3  显示内容 参数4  按键类型  参数5 默认关联回车按键</p><p>1.2.4 返回值 也是StandardButton类型，利用返回值判断用户的输入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew, &amp;QAction::triggered,[=]()&#123;</span><br><span class="line">        <span class="comment">// 消息对话框</span></span><br><span class="line">        <span class="comment">// 错误对话框</span></span><br><span class="line">        <span class="comment">//QMessageBox::critical(this, &quot;critical&quot;, &quot;错误&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 信息对话框</span></span><br><span class="line">        <span class="comment">//QMessageBox::information(this, &quot;info&quot;, &quot;信息&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提问对话框</span></span><br><span class="line">        <span class="comment">// 参数1：父亲</span></span><br><span class="line">        <span class="comment">// 参数2：标题</span></span><br><span class="line">        <span class="comment">// 参数3：提示内容</span></span><br><span class="line">        <span class="comment">// 参数4：按键类型</span></span><br><span class="line">        <span class="comment">// 参数5：默认关联回车按键</span></span><br><span class="line">        <span class="comment">// if (QMessageBox::Save == QMessageBox::question(this, &quot;ques&quot;,&quot;提问&quot;, QMessageBox::Save | QMessageBox::Cancel))</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;选择的是保存&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// else</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     qDebug() &lt;&lt; &quot;选择的是取消&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 警告对话框</span></span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;警告&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-其他标准对话框"><a href="#8-3-其他标准对话框" class="headerlink" title="8.3 其他标准对话框"></a>8.3 其他标准对话框</h2><ul><li>颜色对话框  QColorDialog：：getColor </li><li>文件对话框  QFileDialog：：getOpenFileName(父亲，标题，默认路径，过滤文件)</li><li>字体对话框  QFontDialog：：getFont</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QColorDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFontDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击新建按钮，弹出一个对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew, &amp;QAction::triggered,[=]()&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 其他标准对话框</span></span><br><span class="line">        <span class="comment">// 颜色对话框</span></span><br><span class="line">        <span class="comment">// QColor color = QColorDialog::getColor(QColor(255, 0, 0));</span></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; &quot;r = &quot; &lt;&lt; color.red() &lt;&lt; &quot; g = &quot; &lt;&lt; color.green() &lt;&lt; &quot; b = &quot; &lt;&lt; color.blue();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件对话框</span></span><br><span class="line">        <span class="comment">// 参数1 父亲</span></span><br><span class="line">        <span class="comment">// 参数2 标题</span></span><br><span class="line">        <span class="comment">// 参数3 默认打开路径</span></span><br><span class="line">        <span class="comment">// 参数4 过滤文件格式</span></span><br><span class="line">        <span class="comment">// 返回值是 选取的路径</span></span><br><span class="line">        <span class="comment">// QString str = QFileDialog::getOpenFileName(this, &quot;打开&quot;, &quot;C:\\Users\\Administrator\\Desktop&quot;, &quot;(*.txt)&quot;);</span></span><br><span class="line">        <span class="comment">// qDebug() &lt;&lt; str;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字体对话框</span></span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        QFont font = QFontDialog::<span class="built_in">getFont</span>(&amp;flag, <span class="built_in">QFont</span>(<span class="string">&quot;华文彩云&quot;</span>, <span class="number">36</span>));</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;字体：&quot;</span> &lt;&lt; font.<span class="built_in">family</span>().<span class="built_in">toUtf8</span>().<span class="built_in">data</span>() &lt;&lt; <span class="string">&quot; 字号：&quot;</span> &lt;&lt; font.<span class="built_in">pointSize</span>() &lt;&lt; <span class="string">&quot; 是否加粗：&quot;</span> &lt;&lt; font.<span class="built_in">bold</span>() &lt;&lt; <span class="string">&quot; 是否倾斜：&quot;</span> &lt;&lt; font.<span class="built_in">italic</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、布局管理器"><a href="#九、布局管理器" class="headerlink" title="九、布局管理器"></a>九、布局管理器</h1><p>​所谓 GUI 界面，归根结底，就是一堆组件的叠加。我们创建一个窗口，把按钮放上面，把图标放上面，这样就成了一个界面。在放置时，组件的位置尤其重要。我们必须要指定组件放在哪里，以便窗口能够按照我们需要的方式进行渲染。这就涉及到组件定位的机制。</p><p><strong>Qt 提供了两种组件定位机制：绝对定位和布局定位。</strong></p><p>​绝对定位就是一种最原始的定位方法：给出这个组件的坐标和长宽值。</p><p>​这样，Qt 就知道该把组件放在哪里以及如何设置组件的大小。但是这样做带来的一个问题是，如果用户改变了窗口大小，比如点击最大化按钮或者使用鼠标拖动窗口边缘，采用绝对定位的组件是不会有任何响应的。这也很自然，因为你并没有告诉 Qt，在窗口变化时，组件是否要更新自己以及如何更新。或者，还有更简单的方法：禁止用户改变窗口大小。但这总不是长远之计。</p><p>​布局定位：你只要把组件放入某一种布局，布局由专门的布局管理器进行管理。当需要调整大小或者位置的时候，Qt 使用对应的布局管理器进行调整。</p><p>布局定位完美的解决了使用绝对定位的缺陷。</p><p>Qt 提供的布局中以下三种是我们最常用的：</p><ul><li>QHBoxLayout：按照水平方向从左到右布局；</li><li>QVBoxLayout：按照竖直方向从上到下布局；</li><li>QGridLayout：在一个网格中进行布局，类似于 HTML 的 table；</li></ul><h2 id="9-1-系统提供的布局控件"><a href="#9-1-系统提供的布局控件" class="headerlink" title="9.1 系统提供的布局控件"></a><strong>9.1 系统提供的布局控件</strong></h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps2.jpg" alt="img"> </p><p>这4个为系统给我们提供的布局的控件，但是使用起来不是非常的灵活，这里就不详细介绍了。</p><h2 id="9-2-利用widget做布局"><a href="#9-2-利用widget做布局" class="headerlink" title="9.2 利用widget做布局"></a><strong>9.2 利用widget做布局</strong></h2><p>第二种布局方式是利用控件里的widget来做布局，在Containers中</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps3.jpg" alt="img"> </p><p>在widget中的控件可以进行水平、垂直、栅格布局等操作，比较灵活。</p><p>再布局的同时我们需要灵活运用弹簧的特性让我们的布局更加的美观，下面是一个登陆窗口，利用widget可以搭建出如下登陆界面：</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/wps4.jpg" alt="img"></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/QT/">QT</category>
      
      
      <comments>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%B8%89)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>QT_基础(二)-控件、信号量和槽</title>
      <link>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</link>
      <guid>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/</guid>
      <pubDate>Thu, 08 Aug 2024 08:48:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;四、基本控件&quot;&gt;&lt;a href=&quot;#四、基本控件&quot; class=&quot;headerlink&quot; title=&quot;四、基本控件&quot;&gt;&lt;/a&gt;四、基本控件&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;窗口操作&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="四、基本控件"><a href="#四、基本控件" class="headerlink" title="四、基本控件"></a>四、基本控件</h1><p><strong>窗口操作</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重置窗口的大小</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">// 设置固定的窗口大小</span></span><br><span class="line"><span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置窗口标题</span></span><br><span class="line"><span class="built_in">setWindowTitle</span>(<span class="string">&quot;第一个窗口&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="4-1、按钮控件"><a href="#4-1、按钮控件" class="headerlink" title="4.1、按钮控件"></a>4.1、按钮控件</h2><p>​一个按钮其实就是一个QPushButton类下的对象，如果只是创建出对象，是无法显示到窗口中的，所以我们需要依赖一个父窗口，也就是指定一个父亲利用setParent函数即可，如果想设置按钮上显示的文字利用setText，移动按钮位置用move</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">// 按钮控件的头文件</span></span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">// btn-&gt;show();    // show以顶层方式弹出窗口控件</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);<span class="comment">// 让btn 依赖在myWidget窗口中</span></span><br><span class="line"></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;第一个按钮&quot;</span>);<span class="comment">// 显示文本</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建第二个按钮，并指定父类 按照控件的大小创建窗口</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;第二个按钮&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动btn2按钮</span></span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 按钮也可以设置大小</span></span><br><span class="line">    btn2-&gt;<span class="built_in">resize</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Qt中的坐标系</p><ul><li>左上角为 0 ， 0 点</li><li>x以右为正方向</li><li>y以下为正方向</li></ul><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/wps1.jpg" alt="img"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn-&gt;<span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);<span class="comment">// 设置坐标为（100， 100）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2、QLabel控件"><a href="#4-2、QLabel控件" class="headerlink" title="4.2、QLabel控件"></a><strong>4.2、QLabel控件</strong></h2><p>QLabel是我们最常用的控件之一，其功能很强大，我们可以用来显示文本，图片和动画等。</p><h3 id="4-2-1、显示文字"><a href="#4-2-1、显示文字" class="headerlink" title="4.2.1、显示文字"></a>4.2.1、显示文字</h3><p>通过QLabel类的setText函数设置显示的内容:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span><span class="title">setText</span><span class="params">(<span class="type">const</span> QString &amp;)</span></span></span><br></pre></td></tr></table></figure><ul><li>可以显示普通文本字符串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QLable *label = <span class="keyword">new</span> QLable;</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setText</span>(“Hello, World!”);</span><br></pre></td></tr></table></figure><ul><li><p>显示中文</p><ul><li><p>避免中文乱码，可以使用QStringLiteral</p></li><li><pre><code class="cpp">QString str = QStringLiteral(&quot;正在发送信息.......&quot;);label-&gt;setText(str);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 中文字体也可以进行丰富，使用`QFont`设置格式，也可以使用 `setStyleSheet` 设置格式</span><br><span class="line"></span><br><span class="line">- ```cpp</span><br><span class="line">  QFont font;</span><br><span class="line">  font.setFamily(&quot;Microsoft YaHei UI&quot;);  // 设置字体为宋体</span><br><span class="line">  font.setPointSize(20);     // 设置字体大小</span><br><span class="line">  </span><br><span class="line">  QLabel * safeInfo = new QLable;</span><br><span class="line">  safeInfo-&gt;setText(str);</span><br><span class="line">  safeInfo-&gt;setFont(font);</span><br><span class="line">  safeInfo-&gt;setStyleSheet(&quot;color: red;&quot;);// 字体为中文</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>可以显示HTML格式的字符串</p><ul><li>比如显示一个链接:</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QLabel * label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Hello, World&quot;</span>);</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setText</span>(<span class="string">&quot;&lt;h1&gt;&lt;a href=\&quot;https://www.baidu.com\&quot;&gt;百度一下&lt;/a&gt;&lt;/h1&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">label-&gt;<span class="built_in">setOpenExternalLinks</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>​其中setOpenExternalLinks()函数是用来设置用户点击链接之后是否自动打开链接，如果参数指定为true则会自动打开。</p><h3 id="4-2-2、显示图片"><a href="#4-2-2、显示图片" class="headerlink" title="4.2.2、显示图片"></a>4.2.2、显示图片</h3><ul><li><p>可以使用QLabel的成员函数setPixmap设置图片</p><ul><li><pre><code class="cpp">voidsetPixmap(const QPixmap &amp;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 流程为：</span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    // 首先定义QPixmap对象</span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    </span><br><span class="line">    // 然后加载图片</span><br><span class="line">    pixmap.load(&quot;:/Image/boat.jpg&quot;);</span><br><span class="line">    </span><br><span class="line">    // 最后将图片设置到QLabel中</span><br><span class="line">    QLabel *label = new QLabel;</span><br><span class="line">    label.setPixmap(pixmap);</span><br></pre></td></tr></table></figure>-</code></pre></li></ul></li><li><p>也可以使用setStyleSheet的方式设置图片</p><ul><li><pre><code class="cpp">QLabel * label = new QLabel;label-&gt;setStyleSheet(&quot;background-image: url(:/image/warningRed.png);&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.2.3、显示动画</span><br><span class="line"></span><br><span class="line">可以使用QLabel 的成员函数setMovie加载动画，可以播放gif格式的文件</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">voidsetMovie(QMovie * movie)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>首先定义QMovied对象，并初始化:</p><ul><li><pre><code class="cpp">QMovie *movie = new QMovie(&quot;:/Mario.gif&quot;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 播放加载的动画：</span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    movie-&gt;start();</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>将动画设置到QLabel中：</p><ul><li><pre><code class="cpp">QLabel *label = new QLabel；label-&gt;setMovie(movie);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">## **4.3 QLineEdit**</span><br><span class="line"></span><br><span class="line">Qt提供的单行文本编辑框。</span><br><span class="line"></span><br><span class="line">### 4.3.1、设置/获取内容</span><br><span class="line"></span><br><span class="line">-   获取编辑框内容使用text（），函数声明如下：</span><br><span class="line">    -   `QStringtext() const`</span><br><span class="line">-   设置编辑框内容</span><br><span class="line">    -   `voidsetText(const QString &amp;)`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.3.2、设置显示模式</span><br><span class="line"></span><br><span class="line">使用QLineEdit类的setEchoMode () 函数设置文本的显示模式,</span><br><span class="line"></span><br><span class="line">函数声明:`voidsetEchoMode(EchoMode mode)`</span><br><span class="line"></span><br><span class="line">EchoMode是一个枚举类型,一共定义了四种显示模式:</span><br><span class="line"></span><br><span class="line">1.  QLineEdit::Normal 模式显示方式，按照输入的内容显示。</span><br><span class="line">2.  QLineEdit::NoEcho不显示任何内容，此模式下无法看到用户的输入。</span><br><span class="line">3.  QLineEdit::Password密码模式，输入的字符会根据平台转换为特殊字符。</span><br><span class="line">4.  QLineEdit::PasswordEchoOnEdit编辑时显示字符否则显示字符作为密码。</span><br><span class="line"></span><br><span class="line">另外，我们再使用QLineEdit显示文本的时候，希望在左侧留出一段空白的区域，那么，就可以使用QLineEdit给我们提供的setTextMargins函数：</span><br><span class="line"></span><br><span class="line">`void setTextMargins(int left, int top, int right, int bottom)`</span><br><span class="line"></span><br><span class="line">用此函数可以指定显示的文本与输入框上下左右边界的间隔的像素数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## **4.4 自定义控件**</span><br><span class="line"></span><br><span class="line">自定义一个控件SmallWidget，可以作为独立的窗口显示,也可以作为一个控件来使用：</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps5.jpg) </span><br><span class="line"></span><br><span class="line">打开Qt的.ui文件,因为SmallWidget是派生自Qwidget类,所以需要在ui文件中先放入一个QWidget控件, 然后再上边鼠标右键</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps6.jpg) </span><br><span class="line"></span><br><span class="line">弹出提升窗口部件对话框</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps7.jpg) </span><br><span class="line"></span><br><span class="line">添加要提升的类的名字,然后选择 添加 </span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps8.jpg) </span><br><span class="line"></span><br><span class="line">添加之后,类名会显示到上边的列表框中,然后单击提升按钮,完成操作.</span><br><span class="line"></span><br><span class="line">我们可以看到, 这个窗口对应的类从原来的QWidget变成了SmallWidget</span><br><span class="line"></span><br><span class="line">![img](Qt_基础(二)/wps9.jpg) </span><br><span class="line"></span><br><span class="line">再次运行程序,这个widget_3中就能显示出我们自定义的窗口了.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**操作流程：**</span><br><span class="line"></span><br><span class="line">1.  添加新文件 Qt-&gt;设计师界面类 ，得到（.h，.cpp，.ui）</span><br><span class="line">2.  .ui中设计QSpinBox和QSlider两个控件</span><br><span class="line">3.  Widget中使用自定义控件，拖拽一个Widget，点击”提升为“，点击“提升”</span><br><span class="line">4.  实现功能，改变数字，滑动条跟着移动</span><br><span class="line"></span><br><span class="line">在使用Qt的ui文件搭建界面的时候，工具栏栏中只为我们提供了标准的窗口控件，如果我们想使用自定义控件怎么办？</span><br><span class="line"></span><br><span class="line">例如：我们从QWidget派生出一个类SmallWidget，实现了一个自定义窗口，可以在自定义窗口使用ui设计界面，然后通过信号量和槽进行设置相关的逻辑</span><br><span class="line"></span><br><span class="line"> ```cpp</span><br><span class="line">#include &lt;QWidget&gt;</span><br><span class="line"></span><br><span class="line">namespace Ui &#123;</span><br><span class="line">class smallWidget;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class smallWidget : public QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    explicit smallWidget(QWidget *parent = nullptr);</span><br><span class="line">    ~smallWidget();</span><br><span class="line"></span><br><span class="line">    // 设置数字</span><br><span class="line">    void setNum(int num);</span><br><span class="line">    // 获取数字</span><br><span class="line">    int getNum();</span><br><span class="line">private:</span><br><span class="line">    Ui::smallWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // SMALLWIDGET_H</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;smallwidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_smallwidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">smallWidget::<span class="built_in">smallWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::smallWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// QSpinBox移动，QSlider跟着移动</span></span><br><span class="line">    <span class="comment">// 定义一个函数指针，指向QSpinBox::valueChanged(int)信号</span></span><br><span class="line">    <span class="comment">// 这样做是为了处理函数重载，因为valueChanged有int和QString两个版本</span></span><br><span class="line">    <span class="built_in">void</span> (QSpinBox:: * spSignal)(<span class="type">int</span>) = &amp;QSpinBox::valueChanged;</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;spinBox, spSignal, ui-&gt;horizontalSlider, &amp;QSlider::setValue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// QSlider滑动 QSpinxBox跟着改变</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;horizontalSlider, &amp;QSlider::valueChanged, ui-&gt;spinBox, &amp;QSpinBox::setValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">smallWidget::~<span class="built_in">smallWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数字</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">smallWidget::setNum</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;spinBox-&gt;<span class="built_in">setValue</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">smallWidget::getNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ui-&gt;spinBox-&gt;<span class="built_in">value</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后在widget类中使用这个自定义控件，可以通过ui指向对应的自定义控件的槽函数</p><p>注意：使用ui绘图时，不要使用widget嵌入widget，因为可能控制不了内部widget的操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击获取 获取控件当前的值</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btn_get, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; ui-&gt;widget_2-&gt;<span class="built_in">getNum</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置到一半</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;btn_set, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        ui-&gt;widget_2-&gt;<span class="built_in">setNum</span>(<span class="number">50</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-5、常用控件"><a href="#4-5、常用控件" class="headerlink" title="4.5、常用控件"></a>4.5、常用控件</h2><h3 id="4-5-1、按钮组"><a href="#4-5-1、按钮组" class="headerlink" title="4.5.1、按钮组"></a>4.5.1、按钮组</h3><ul><li><p>QPushButton  常用按钮 </p></li><li><p>QToolButton  工具按钮  用于显示图片，如图想显示文字，修改风格：toolButtonStyle ， 凸起风格autoRaise</p><ul><li><pre><code class="cpp">QToolButton *toolButton = new QToolButton(this);toolButton-&gt;setText(&quot;Tool Button&quot;);toolButton-&gt;setIcon(QIcon(&quot;:/icons/tool.png&quot;));  // 设置图标toolButton-&gt;setToolButtonStyle(Qt::ToolButtonTextUnderIcon);  // 显示文字在图标下方toolButton-&gt;setAutoRaise(true);  // 设置凸起风格// 连接信号与槽connect(toolButton, &amp;QToolButton::clicked, this, &amp;MainWindow::handleToolButtonClick);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- radioButton  单选按钮，设置默认 ui-&gt;rBtnMan-&gt;setChecked(true); </span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    QRadioButton *rBtnMan = new QRadioButton(&quot;Man&quot;, this);</span><br><span class="line">    QRadioButton *rBtnWoman = new QRadioButton(&quot;Woman&quot;, this);</span><br><span class="line">    rBtnMan-&gt;setChecked(true);  // 设置默认选中</span><br><span class="line">    </span><br><span class="line">    // 连接信号与槽</span><br><span class="line">    connect(rBtnMan, &amp;QRadioButton::toggled, this, &amp;MainWindow::handleRadioButtonToggled);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>checkbox多选按钮，监听状态，2 选中  1 半选 0 未选中</p><ul><li><pre><code class="cpp">QCheckBox *checkBox = new QCheckBox(&quot;Option&quot;, this);// 设置默认状态（可选）checkBox-&gt;setCheckState(Qt::PartiallyChecked);// 连接信号与槽connect(checkBox, &amp;QCheckBox::stateChanged, this, &amp;MainWindow::handleCheckBoxStateChanged);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4.5.2、QListWidget 列表容器</span><br><span class="line"></span><br><span class="line">- QListWidgetItem * item 一行内容 </span><br><span class="line"></span><br><span class="line">- ui-&gt;listWidget -&gt;addItem ( item )</span><br><span class="line"></span><br><span class="line">- 设置居中方式item-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">- 可以利用addItems一次性添加整个诗内容</span><br><span class="line"></span><br><span class="line">- 两种方式添加语句</span><br><span class="line"></span><br><span class="line">- ```cpp</span><br><span class="line">  Widget::Widget(QWidget *parent)</span><br><span class="line">      : QWidget(parent)</span><br><span class="line">      , ui(new Ui::Widget)</span><br><span class="line">  &#123;</span><br><span class="line">      ui-&gt;setupUi(this);</span><br><span class="line">  </span><br><span class="line">      // 利用listWidget写诗</span><br><span class="line">      QListWidgetItem * item = new QListWidgetItem(&quot;锄禾日当午&quot;);</span><br><span class="line">      item-&gt;setTextAlignment(Qt::AlignCenter);</span><br><span class="line">      // 将一行诗放入到listWidget控件中</span><br><span class="line">      ui-&gt;listWidget-&gt;addItem(item);</span><br><span class="line">  </span><br><span class="line">      // QStringList List&lt;String&gt;</span><br><span class="line">      QStringList list;</span><br><span class="line">      list &lt;&lt; &quot;锄禾日当午&quot; &lt;&lt; &quot;汗滴禾下土&quot; &lt;&lt; &quot;谁知盘中餐&quot; &lt;&lt; &quot;粒粒皆辛苦&quot;;</span><br><span class="line">      ui-&gt;listWidget-&gt;addItems(list);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="4-5-3、QTreeWidget-树控件"><a href="#4-5-3、QTreeWidget-树控件" class="headerlink" title="4.5.3、QTreeWidget 树控件"></a>4.5.3、QTreeWidget 树控件</h3><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/image-20240806142429779.png" alt="image-20240806142429779"></p><ul><li><p>设置头  </p><ul><li>ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt; “英雄”&lt;&lt; “英雄介绍”);</li></ul></li><li><p>创建根节点</p><ul><li>QTreeWidgetItem * liItem &#x3D; new QTreeWidgetItem(QStringList()&lt;&lt; “力量”);</li></ul></li><li><p>添加根节点 到 树控件上</p><ul><li>ui-&gt;treeWidget-&gt;addTopLevelItem(liItem);</li></ul></li><li><p>添加子节点</p></li><li><p>liItem-&gt;addChild(l1);</p></li><li><pre><code class="cpp">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    // treeWidget树控件的使用    // 设置水平头    ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList() &lt;&lt; &quot;英雄&quot; &lt;&lt; &quot;英雄简介&quot;);    QTreeWidgetItem * liItem = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;力量&quot;);    QTreeWidgetItem * minItem = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;敏捷&quot;);    QTreeWidgetItem * zhiItem = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;智慧&quot;);    // 加载顶层节点    ui-&gt;treeWidget-&gt;addTopLevelItem(liItem);    ui-&gt;treeWidget-&gt;addTopLevelItem(minItem);    ui-&gt;treeWidget-&gt;addTopLevelItem(zhiItem);    // 追加子节点    QStringList heroL1;    heroL1 &lt;&lt; &quot;钢背猪&quot; &lt;&lt; &quot;前排坦克能在吸收伤害的同时造成可观的范围输出&quot;;    QTreeWidgetItem * li = new QTreeWidgetItem(heroL1);    liItem-&gt;addChild(li);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 4.5.4、QTableWidget 表格控件</span><br><span class="line"></span><br><span class="line">![image-20240806144019566](Qt_基础(二)/image-20240806144019566.png)</span><br><span class="line"></span><br><span class="line">- 设置列数 </span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setColumnCount(3);</span><br><span class="line"></span><br><span class="line">- 设置水平表头</span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;&quot;姓名&quot;&lt;&lt; &quot;性别&quot;&lt;&lt; &quot;年龄&quot;);</span><br><span class="line"></span><br><span class="line">- 设置行数 </span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setRowCount(5);</span><br><span class="line"></span><br><span class="line">- 设置正文</span><br><span class="line"></span><br><span class="line">  -   ui-&gt;tableWidget-&gt;setItem(0,0, new QTableWidgetItem(&quot;亚瑟&quot;));</span><br><span class="line"></span><br><span class="line">- ```cpp</span><br><span class="line">  Widget::Widget(QWidget *parent)</span><br><span class="line">      : QWidget(parent)</span><br><span class="line">      , ui(new Ui::Widget)</span><br><span class="line">  &#123;</span><br><span class="line">      ui-&gt;setupUi(this);</span><br><span class="line">  </span><br><span class="line">      // TableWidget控件</span><br><span class="line">      // 设置列数</span><br><span class="line">      ui-&gt;tableWidget-&gt;setColumnCount(3);</span><br><span class="line">      // 设置水平表头</span><br><span class="line">      ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList() &lt;&lt;&quot;姓名&quot; &lt;&lt; &quot;性别&quot; &lt;&lt; &quot;年龄&quot;);</span><br><span class="line">      // 设置行数</span><br><span class="line">      ui-&gt;tableWidget-&gt;setRowCount(5);</span><br><span class="line">  </span><br><span class="line">      // 设置正文</span><br><span class="line">      // ui-&gt;tableWidget-&gt;setItem(0, 0, new QTableWidgetItem(&quot;亚瑟&quot;));</span><br><span class="line">      QStringList nameList;</span><br><span class="line">      nameList &lt;&lt; &quot;亚瑟&quot; &lt;&lt; &quot;赵云&quot; &lt;&lt; &quot;张飞&quot; &lt;&lt; &quot;关羽&quot; &lt;&lt; &quot;花木兰&quot;;</span><br><span class="line">  </span><br><span class="line">      QList&lt;QString&gt; sexList;</span><br><span class="line">      sexList &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;女&quot; ;</span><br><span class="line">      for (int i = 0; i &lt; 5; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          int col = 0;</span><br><span class="line">          ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(nameList[i]));</span><br><span class="line">          ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(sexList.at(i)));</span><br><span class="line">          // int 转    QString</span><br><span class="line">          ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(QString::number(i+18)));</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="4-5-5、其他控件介绍"><a href="#4-5-5、其他控件介绍" class="headerlink" title="4.5.5、其他控件介绍"></a>4.5.5、其他控件介绍</h3><ul><li><p>stackedWidget  栈控件</p><ul><li>ui-&gt;stackedWidget-&gt;setCurrentIndex(1);</li></ul></li><li><p>下拉框</p><ul><li>ui-&gt;comboBox-&gt;addItem(“奔驰”);</li></ul></li></ul><h1 id="五、对象树"><a href="#五、对象树" class="headerlink" title="五、对象树"></a>五、对象树</h1><p>当创建的对象在堆区时候，如果指定的父类是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，系统会自动将对象放入对象树中。</p><p>一定程度上简化了内存回收机制</p><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/Qt%E5%AF%B9%E8%B1%A1%E6%A0%91.png" alt="Qt对象树"></p><p>这个MyPushButton是myWidget的子类，它得到了myWidget的this指针，构造是从父类一直向子类来构造，析构是子类析构，然后向父类析构，但是。这个结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我的按钮类构造调用</span><br><span class="line">~myWidget的析构调用</span><br><span class="line">我的按钮类析构</span><br></pre></td></tr></table></figure><p>也没有错，它是从上往下开始调用，到mywidget的析构时，它是先执行里面的操作，然后查看是否有它的子类，再跑到MyPushButton的析构，直到确定没有子类了，才开始释放资源</p><p>也就是说执行操作和释放资源不是同步的，它是先从上往下执行操作，再从下往上释放资源</p><p><strong>父类</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span>  <span class="comment">// 按钮控件的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mypushbutton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">// 让btn 对依赖在myWidget窗口中</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个自己的按钮对象</span></span><br><span class="line">    MyPushButton * myBtn = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">    myBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;我自己的按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">    myBtn-&gt;<span class="built_in">move</span>(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">    myBtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>); <span class="comment">// 设置到对象树中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;~myWidget的析构调用&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>派生类</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPushButton</span> : <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyPushButton</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyPushButton</span>();</span><br><span class="line">signals:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYPUSHBUTTON_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mypushbutton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyPushButton::<span class="built_in">MyPushButton</span>(QWidget *parent)</span><br><span class="line">    : QPushButton&#123;parent&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我的按钮类构造调用&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPushButton::~<span class="built_in">MyPushButton</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我的按钮类析构&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、信号量和槽"><a href="#六、信号量和槽" class="headerlink" title="六、信号量和槽"></a>六、信号量和槽</h1><h2 id="6-1、系统提供的信号和槽"><a href="#6-1、系统提供的信号和槽" class="headerlink" title="6.1、系统提供的信号和槽"></a>6.1、系统提供的信号和槽</h2><p>连接函数 connect</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：点击按钮，关闭窗口</span></span><br><span class="line"><span class="comment">// 参数1：信号的发送者</span></span><br><span class="line"><span class="comment">// 参数2：发送的信号(函数的地址）</span></span><br><span class="line"><span class="comment">// 参数3：信号的接收者</span></span><br><span class="line"><span class="comment">// 参数4：处理的槽函数，信号的槽（函数的地址）</span></span><br><span class="line"><span class="comment">// connect(myBtn, &amp;MyPushButton::clicked, this, &amp;myWidget::close);</span></span><br><span class="line"><span class="built_in">connect</span>(myBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><p>实现了松散耦合，信号和实现没有固定的关系，是connect联系起来的</p><h2 id="6-2、自定义信号和槽"><a href="#6-2、自定义信号和槽" class="headerlink" title="6.2、自定义信号和槽"></a>6.2、自定义信号和槽</h2><ul><li><p>自定义信号和槽</p><ul><li>自定义信号<ul><li>写到 signals下</li><li>返回 void</li><li>需要声明，不需要实现</li><li>可以有参数，可以重载</li></ul></li><li>自定义槽函数<ul><li>返回void</li><li>需要声明 ，也需要实现</li><li>可以有参数 ，可以重载</li><li>写到 public slot下 或者public 或者全局函数</li></ul></li></ul></li><li><p>触发自定义的信号</p><ul><li>emit 自定义信号</li></ul></li></ul><p><strong>案例</strong>-下课后，老师触发饿了信号，学生响应信号，请客吃饭</p><p><strong>老师类，定义信号</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// 自定义信号 写到signals下</span></span><br><span class="line">    <span class="comment">// 返回值是void，只需要声明，不需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Hungry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>学生类，定义槽函数和实现</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 早期Qt版本，必须要写道public slots，高级版本可以写道public或者全局下</span></span><br><span class="line">    <span class="comment">// 返回值void， 需要声明，也需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以发生重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>widget窗口类，连接信号和槽，调用</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    Teacher * zt;</span><br><span class="line">    Student * st;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">classIsOver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher 类 老师类</span></span><br><span class="line"><span class="comment">// Student 类 学生类</span></span><br><span class="line"><span class="comment">// 下课后，老师会触发一个信号，饿了，学生响应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老师饿了 学生请客的连接</span></span><br><span class="line">    <span class="built_in">connect</span>(zt, &amp;Teacher::Hungry, st, &amp;Student::treat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 下课函数，调用后 触发老师饿了的信号</span></span><br><span class="line">    emit zt-&gt;<span class="built_in">Hungry</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3、自定义信号和槽出现重载"><a href="#6-3、自定义信号和槽出现重载" class="headerlink" title="6.3、自定义信号和槽出现重载"></a>6.3、自定义信号和槽出现重载</h2><ol><li>需要利用函数指针 明确指向函数的地址</li><li>void( Teacher:: * tSignal )( QString ) &#x3D; &amp;Teacher::hungry;</li><li>QString 转成  char *   <ol><li>.toUtf8() 转为 QByteArray</li><li>.data() 转为 Char *信号可以连接信号</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Teacher 类 老师类</span></span><br><span class="line"><span class="comment">// Student 类 学生类</span></span><br><span class="line"><span class="comment">// 下课后，老师会触发一个信号，饿了，学生响应信号，请客吃饭</span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老师饿了 学生请客的连接</span></span><br><span class="line">    <span class="comment">// connect(zt, &amp;Teacher::Hungry, st, &amp;Student::treat);</span></span><br><span class="line">    <span class="comment">// 连接带参数的信号和槽</span></span><br><span class="line">    <span class="comment">// 函数 -》 地址</span></span><br><span class="line">    <span class="comment">// 函数指针 -》 函数地址</span></span><br><span class="line">    <span class="built_in">void</span> (Teacher:: *teacherSignal)(QString) = &amp;Teacher::Hungry;</span><br><span class="line">    <span class="built_in">void</span> (Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt, teacherSignal, st, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::classIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 下课函数，调用后 触发老师饿了的信号</span></span><br><span class="line">    <span class="comment">// emit zt-&gt;Hungry();</span></span><br><span class="line">    emit zt-&gt;<span class="built_in">Hungry</span>(<span class="string">&quot;宫保鸡丁&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 早期Qt版本，必须要写道public slots，高级版本可以写道public或者全局下</span></span><br><span class="line">    <span class="comment">// 返回值void， 需要声明，也需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以发生重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">(QString foodName)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">(QString foodName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// QString -&gt; char*</span></span><br><span class="line">    <span class="comment">// 先转成QByteArray (.toUtf8) 再转char *（.data）</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;请老师吃饭，老师要吃：&quot;</span> &lt;&lt; foodName.<span class="built_in">toUtf8</span>().<span class="built_in">data</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// 自定义信号 写到signals下</span></span><br><span class="line">    <span class="comment">// 返回值是void，只需要声明，不需要实现</span></span><br><span class="line">    <span class="comment">// 可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Hungry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Hungry</span><span class="params">(QString foodName)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-4、扩展"><a href="#6-4、扩展" class="headerlink" title="6.4、扩展"></a>6.4、扩展</h2><ol><li>信号可以连接信号</li><li>一个信号可以连接多个槽函数</li><li>多个信号 可以连接 同一个槽函数</li><li>信号和槽函数的参数类型 必须一一对应</li><li>信号和槽的参数个数 是不是要一致？ 信号的参数个数 可以多于槽函数的参数个数</li></ol><p>断开信号  disconnect</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个老师对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;zt = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个学生对象</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;st = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老师饿了 学生请客的连接</span></span><br><span class="line">    <span class="comment">// connect(zt, &amp;Teacher::Hungry, st, &amp;Student::treat);</span></span><br><span class="line">    <span class="comment">// 连接带参数的信号和槽</span></span><br><span class="line">    <span class="comment">// 函数 -》 地址</span></span><br><span class="line">    <span class="comment">// 函数指针 -》 函数地址</span></span><br><span class="line">    <span class="built_in">void</span> (Teacher:: *teacherSignal)(QString) = &amp;Teacher::Hungry;</span><br><span class="line">    <span class="built_in">void</span> (Student:: *studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt, teacherSignal, st, studentSlot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用下课函数</span></span><br><span class="line">    <span class="built_in">classIsOver</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击一个 下课的按钮，再触发下课</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;下课&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 充值窗口大小</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击按钮，触发下课</span></span><br><span class="line">    <span class="comment">// connect(btn, &amp;QPushButton::clicked, this, &amp;Widget::classIsOver);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参信号和槽连接</span></span><br><span class="line">    <span class="built_in">void</span> (Teacher:: *teacherSignal2)(<span class="type">void</span>) = &amp;Teacher::Hungry;</span><br><span class="line">    <span class="built_in">void</span> (Student:: *studentSlot2)(<span class="type">void</span>) = &amp;Student::treat;</span><br><span class="line">    <span class="built_in">connect</span>(zt, teacherSignal2, st, studentSlot2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信号连接信号</span></span><br><span class="line">    <span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, zt, teacherSignal2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 断开信号</span></span><br><span class="line">    <span class="built_in">disconnect</span>(zt, teacherSignal2, st, studentSlot2);</span><br></pre></td></tr></table></figure><h2 id="6-5、Qt4版本以前的信号和槽连接方式"><a href="#6-5、Qt4版本以前的信号和槽连接方式" class="headerlink" title="6.5、Qt4版本以前的信号和槽连接方式"></a>6.5、Qt4版本以前的信号和槽连接方式</h2><p>发送的信号SIGNAL（信号）</p><p>槽函数SLOT(槽函数)</p><p>缺点：类型不做检测</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参信号和槽连接</span></span><br><span class="line"><span class="built_in">void</span> (Teacher:: *teacherSignal2)(<span class="type">void</span>) = &amp;Teacher::Hungry;</span><br><span class="line"><span class="comment">//void (Student:: *studentSlot2)(void) = &amp;Student::treat;</span></span><br><span class="line"><span class="comment">//connect(zt, teacherSignal2, st, studentSlot2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号连接信号</span></span><br><span class="line"><span class="built_in">connect</span>(btn, &amp;QPushButton::clicked, zt, teacherSignal2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开信号</span></span><br><span class="line"><span class="comment">//disconnect(zt, teacherSignal2, st, studentSlot2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Qt4版本以前的信号和槽连接方式</span></span><br><span class="line"><span class="comment">// 利用Qt4信号槽 连接无参版本</span></span><br><span class="line"><span class="comment">// Qt4版本 底层SIGNAL(&quot;Hungry&quot;)，是根据字符串匹配的，所以不需要看参数</span></span><br><span class="line"><span class="built_in">connect</span>(zt, <span class="built_in">SIGNAL</span>(<span class="built_in">Hungry</span>()), st, <span class="built_in">SLOT</span>(<span class="built_in">treat</span>()));</span><br><span class="line"><span class="comment">// Qt4版本有点：参数直观 缺点：类型不做检测</span></span><br><span class="line"><span class="comment">// Qt5以上 支持Qt4的版本写法，反之不支持</span></span><br></pre></td></tr></table></figure><h2 id="6-6、Lambda表达式"><a href="#6-6、Lambda表达式" class="headerlink" title="6.6、Lambda表达式"></a>6.6、Lambda表达式</h2><p>QT5.4之后支持lambda表达式</p><p>QT5.4之前需要在.pro中添加<code>CONFIG += C++11</code></p><ul><li><p>Lambda表达式</p><ul><li>[]标识符  匿名函数 </li><li>&#x3D; 值传递</li><li>&amp; 引用传递</li></ul></li><li><p>() 参数 </p></li><li><p>{} 实现体</p></li><li><p>mutable 修饰 值传递变量 ，可以修改拷贝出的数据，改变不了本体</p></li><li><p>返回值<code> []() -&gt;int &#123;&#125;</code></p></li></ul><p>lambda表达式 最常用<code>[=]()&#123;&#125;</code></p><h2 id="6-7、Notes"><a href="#6-7、Notes" class="headerlink" title="6.7、Notes"></a>6.7、Notes</h2><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C" alt="Qt信号和槽 ">&#x2F;Qt信号和槽 .png)</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/QT/">QT</category>
      
      
      <comments>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%8C)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>QT_基础(五)-绘图和文件操作</title>
      <link>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/</link>
      <guid>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/</guid>
      <pubDate>Thu, 08 Aug 2024 08:48:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;十一、绘图和绘图设备&quot;&gt;&lt;a href=&quot;#十一、绘图和绘图设备&quot; class=&quot;headerlink&quot; title=&quot;十一、绘图和绘图设备&quot;&gt;&lt;/a&gt;十一、绘图和绘图设备&lt;/h1&gt;&lt;h2 id=&quot;11-1、QPainter-绘图&quot;&gt;&lt;a href=&quot;#11-1、</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="十一、绘图和绘图设备"><a href="#十一、绘图和绘图设备" class="headerlink" title="十一、绘图和绘图设备"></a>十一、绘图和绘图设备</h1><h2 id="11-1、QPainter-绘图"><a href="#11-1、QPainter-绘图" class="headerlink" title="11.1、QPainter 绘图"></a>11.1、QPainter 绘图</h2><p>1.1 绘图事件  void paintEvent()</p><p>1.2 声明一个画家对象  QPainter  painter(this)  this指定绘图设备</p><p>1.3 画线、画圆、画矩形、画文字</p><p>1.4 设置画笔 QPen  设置画笔宽度 、风格</p><p>1.5 设置画刷 QBrush 设置画刷 风格</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 实例化画家对象 this指定的是绘图的设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="comment">// 设置画笔的宽度</span></span><br><span class="line">    pen.<span class="built_in">setWidth</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 设置画笔的风格</span></span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line">    <span class="comment">// 让画家使用这个笔</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画刷</span></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">(Qt::cyan)</span></span>;</span><br><span class="line">    <span class="comment">// 设置画刷风格</span></span><br><span class="line">    brush.<span class="built_in">setStyle</span>(Qt::Dense7Pattern);</span><br><span class="line">    <span class="comment">// 让画家使用画刷</span></span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画线</span></span><br><span class="line">    painter.<span class="built_in">drawLine</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画圆 椭圆</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">100</span>, <span class="number">100</span>), <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="built_in">QPoint</span>(<span class="number">40</span>, <span class="number">40</span>), <span class="built_in">QPoint</span>(<span class="number">80</span>, <span class="number">80</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画文字</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(<span class="number">10</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>), <span class="string">&quot;好好学习天天向上&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/image-20240807101324349.png" alt="image-20240807101324349"></p><h2 id="11-2、-QPainter高级设置"><a href="#11-2、-QPainter高级设置" class="headerlink" title="11.2、 QPainter高级设置"></a>11.2、 QPainter高级设置</h2><ul><li><p>抗锯齿 效率低</p><ul><li>painter.setRenderHint(QPainter::Antialiasing);</li></ul></li><li><p>对画家进行移动</p><ul><li>painter.translate(100,0);</li><li>保存状态 save</li><li>还原状态 restore</li></ul></li><li><p>如果想手动调用绘图事件 利用update</p></li><li><p>利用画家画图片 painter.drawPixmap( x，y，QPixmap(  路飞) )</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------高级设置-----------------------------</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="comment">// painter.drawEllipse(QPoint(100, 50), 50, 50);</span></span><br><span class="line">    <span class="comment">// // 设置 抗锯齿能力</span></span><br><span class="line">    <span class="comment">// painter.setRenderHint(QPainter::Antialiasing);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// painter.drawEllipse(QPoint(200, 50), 50, 50);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动画家</span></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存画家状态</span></span><br><span class="line">    painter.<span class="built_in">save</span>();</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">translate</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还原画家保存状态</span></span><br><span class="line">    painter.<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击移动按钮，移动图片</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line">        <span class="comment">// 如果要手动调用绘图事件， 用update更新</span></span><br><span class="line">        <span class="built_in">update</span>();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图事件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//----------------------利用画家 画资源图片------------------</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    posX += <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果超出屏幕，从0开始</span></span><br><span class="line">    <span class="keyword">if</span> (posX &gt; <span class="keyword">this</span>-&gt;<span class="built_in">width</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        posX = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    painter.<span class="built_in">drawPixmap</span>(posX, <span class="number">0</span>, <span class="built_in">QPixmap</span>(<span class="string">&quot;:/Image/Luffy.png&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-3、-QPaintDevice绘图设备"><a href="#11-3、-QPaintDevice绘图设备" class="headerlink" title="11.3、 QPaintDevice绘图设备"></a>11.3、 QPaintDevice绘图设备</h2><ul><li><p>QPixmap QImage  QBitmap(黑白色) QPicture  QWidget</p></li><li><p>QPixmap 对不同平台做了显示的优化</p><ul><li><p>QPixmap pix( 300,300)</p></li><li><p>pix.fill( 填充颜色 )</p></li><li><p>利用画家 往pix上画画  QPainter painter( &amp; pix)</p></li><li><p>保存  pix.save( “路径”)</p></li><li><pre><code class="cpp">#include &lt;QPixmap&gt;#include &lt;QPainter&gt;#include &lt;QImage&gt;#include &lt;QPicture&gt;Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    // // Pixmap绘图设备 专门为平台做了显示的优化    // QPixmap pix(300, 300);    // // 填充颜色    // pix.fill(Qt::white);    // // 声明画家    // QPainter painter(&amp;pix);    // painter.setPen(QPen(Qt::green));    // painter.drawEllipse(QPoint(150,150), 100, 100);    // // 保存    // pix.save(&quot;F:\\pix.png&quot;);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line">- Qimage 可以对像素进行访问</span><br><span class="line"></span><br><span class="line">  - 使用和QPixmap差不多 QImage img(300,300,**QImage::Format_RGB32**);</span><br><span class="line"></span><br><span class="line">  - 其他流程和QPixmap一样</span><br><span class="line"></span><br><span class="line">  - 可以对像素进行修改 img.setPixel(i,j,value);</span><br><span class="line"></span><br><span class="line">  - ```cpp</span><br><span class="line">    #include &quot;widget.h&quot;</span><br><span class="line">    #include &quot;ui_widget.h&quot;</span><br><span class="line">    #include &lt;QPixmap&gt;</span><br><span class="line">    #include &lt;QPainter&gt;</span><br><span class="line">    #include &lt;QImage&gt;</span><br><span class="line">    #include &lt;QPicture&gt;</span><br><span class="line">    </span><br><span class="line">    Widget::Widget(QWidget *parent)</span><br><span class="line">        : QWidget(parent)</span><br><span class="line">        , ui(new Ui::Widget)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;setupUi(this);</span><br><span class="line">    </span><br><span class="line">        // QImage 绘图设备 可以对像素进行访问</span><br><span class="line">        QImage img(300, 300, QImage::Format_RGB32);</span><br><span class="line">        img.fill(Qt::white);</span><br><span class="line">    </span><br><span class="line">        QPainter painter(&amp;img);</span><br><span class="line">        painter.setPen(QPen(Qt::blue));</span><br><span class="line">        painter.drawEllipse(QPoint(150,150), 100, 100);</span><br><span class="line">    </span><br><span class="line">        // 保存</span><br><span class="line">        img.save(&quot;F:\\img.png&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Widget::~Widget()</span><br><span class="line">    &#123;</span><br><span class="line">        delete ui;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 绘图事件</span><br><span class="line">    void Widget::paintEvent(QPaintEvent *)</span><br><span class="line">    &#123;</span><br><span class="line">        QPainter painter(this);</span><br><span class="line">    </span><br><span class="line">        // 利用QImage 对像素进行修改</span><br><span class="line">        QImage img;</span><br><span class="line">        img.load(&quot;:/Image/Luffy.png&quot;);</span><br><span class="line">    </span><br><span class="line">        // 修改像素点</span><br><span class="line">        for (int i = 50; i &lt; 100; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 50; j &lt; 100; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                QRgb value = qRgb(255, 0, 0);</span><br><span class="line">                img.setPixel(i, j, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        painter.drawImage(0, 0, img);</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></code></pre></li><li></li></ul></li><li><p>QPicture  记录和重现 绘图指令</p><ul><li><p>QPicture pic</p></li><li><p>painter.begin(&amp;pic);</p></li><li><p>保存 pic.save( 任意后缀名 )</p></li><li><p>重现 利用画家可以重现painter.drawPicture(0,0,pic);</p></li><li><pre><code class="cpp">#include &quot;widget.h&quot;#include &quot;ui_widget.h&quot;#include &lt;QPixmap&gt;#include &lt;QPainter&gt;#include &lt;QImage&gt;#include &lt;QPicture&gt;Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    // QPicture 绘图设备 可以记录和重现绘图指令    QPicture pic;    QPainter painter;    painter.begin(&amp;pic);    // 开始往pic上画    painter.setPen(QPen(Qt::cyan));    painter.drawEllipse(QPoint(150, 150), 100, 150);    painter.end();  // 结束画画    // 保存到磁盘    pic.save(&quot;F:\\pic.zt&quot;);&#125;Widget::~Widget()&#123;    delete ui;&#125;// 绘图事件void Widget::paintEvent(QPaintEvent *)&#123;    // 重现QPicture的绘图指令    QPainter painter(this);    QPicture pic;    pic.load(&quot;F:\\pic.zt&quot;);    painter.drawPicture(0, 0, pic);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 十二、文件系统</span><br><span class="line"></span><br><span class="line">## 12.1、 QFile 对文件进行读写操作</span><br><span class="line"></span><br><span class="line">-   QFile进行读写操作</span><br><span class="line">    -   QFile file( path 文件路径)</span><br><span class="line">    -   读</span><br><span class="line">        -   file.open(打开方式) QIODevice::readOnly</span><br><span class="line">        -   全部读取  file.readAll()  按行读  file.readLine()  atend()判断是否读到文件尾</span><br><span class="line">        -   默认支持编码格式 utf-8</span><br><span class="line">        -   利用编码格式类 指定格式 QTextCodeC </span><br><span class="line">            -   [QT6中QTextcodec头文件找不到的解决方法_C 语言_脚本之家 (jb51.net)](https://www.jb51.net/article/275365.htm)</span><br><span class="line">            -   QTextCodec * codec = QTextCodec::codecForName(&quot;gbk&quot;);</span><br><span class="line">            -   //ui-&gt;textEdit-&gt;setText( codec-&gt;toUnicode(array)  );</span><br><span class="line">        -   文件对象关闭 close</span><br><span class="line">    -   写</span><br><span class="line">        -   file.open( QIODevice::writeOnly  / Append)</span><br><span class="line">        -   file.write(内容)</span><br><span class="line">        -   file.close 关闭</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">#include &quot;widget.h&quot;</span><br><span class="line">#include &quot;ui_widget.h&quot;</span><br><span class="line">#include &lt;QFileDialog&gt;</span><br><span class="line">#include &lt;QFile&gt;</span><br><span class="line">#include &lt;QTextCodec&gt;</span><br><span class="line"></span><br><span class="line">Widget::Widget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">    , ui(new Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line"></span><br><span class="line">    // 点击选取文件的按钮，弹出对话框</span><br><span class="line">    connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line"></span><br><span class="line">        QString path = QFileDialog::getOpenFileName(this, &quot;打开文件&quot;, &quot;C:\\Users\\Administrator\\Desktop&quot;);</span><br><span class="line">        // 将路径放入到lineEdit中</span><br><span class="line">        ui-&gt;lineEdit-&gt;setText(path);</span><br><span class="line"></span><br><span class="line">        // 编码格式类</span><br><span class="line">        //QTextCodec * codec = QTextCodec::codecForName(&quot;gbk&quot;);</span><br><span class="line"></span><br><span class="line">        // 读取内容 放入到textEdit中</span><br><span class="line">        // QFile默认支持的格式是utf-8</span><br><span class="line">        QFile file(path);   // 参数就是读取文件的路径</span><br><span class="line">        // 设置打开方式</span><br><span class="line">        file.open(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line">        // QByteArray array = file.readAll();</span><br><span class="line"></span><br><span class="line">        QByteArray array;</span><br><span class="line">        while (!file.atEnd())</span><br><span class="line">        &#123;</span><br><span class="line">            array += file.readLine();     // 按行读</span><br><span class="line">        &#125;</span><br><span class="line">        // 将读取到的数据 放入到textEdit中</span><br><span class="line">        ui-&gt;textEdit-&gt;setText(array);</span><br><span class="line">        // ui-&gt;textEdit-&gt;setText(codec-&gt;toUnicode((array)));</span><br><span class="line"></span><br><span class="line">        // 对文件对象进行关闭</span><br><span class="line">        file.close();</span><br><span class="line"></span><br><span class="line">        // 进行写入</span><br><span class="line">        file.open(QIODevice::Append);   // 用追加的方式进行写</span><br><span class="line">        file.write(&quot;aaaaaaa&quot;);</span><br><span class="line">        file.close();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="12-2、QFileInfo-读取文件信息"><a href="#12-2、QFileInfo-读取文件信息" class="headerlink" title="12.2、QFileInfo 读取文件信息"></a>12.2、QFileInfo 读取文件信息</h2><ul><li>QFileInfo info(路径)</li><li>qDebug() &lt;&lt; “大小：” &lt;&lt; info.size() &lt;&lt; “ 后缀名：” &lt;&lt; <strong>info.suffix()</strong> &lt;&lt; “ 文件名称：”&lt;&lt;info.fileName() &lt;&lt; “ 文件路径：”&lt;&lt; info.filePath();</li><li>qDebug() &lt;&lt; “创建日期：” &lt;&lt; info.created().toString(“yyyy&#x2F;MM&#x2F;dd hh:mm:ss”);</li><li>qDebug() &lt;&lt; “最后修改日期：”&lt;&lt;info.lastModified().toString(“yyyy-MM-dd hh:mm:ss”);</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextCodec&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击选取文件的按钮，弹出对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]()&#123;</span><br><span class="line"></span><br><span class="line">        QString path = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;打开文件&quot;</span>, <span class="string">&quot;C:\\Users\\Administrator\\Desktop&quot;</span>);</span><br><span class="line">        <span class="comment">// 将路径放入到lineEdit中</span></span><br><span class="line">        ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// QFileInfo 文件消息类</span></span><br><span class="line">        QFileInfo <span class="built_in">info</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;大小：&quot;</span> &lt;&lt; info.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; 后缀名：&quot;</span> &lt;&lt; info.<span class="built_in">suffix</span>() &lt;&lt; <span class="string">&quot; 文件名称:&quot;</span> &lt;&lt; info.<span class="built_in">fileName</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、资源"><a href="#十三、资源" class="headerlink" title="十三、资源"></a>十三、资源</h1><ul><li>视频：<a href="https://www.bilibili.com/video/BV1g4411H78N">传智播客《QT从入门到实战完整版》</a></li><li>官方文档：<a href="https://doc.qt.io/">QT官方文档</a>，可以说是十分齐全，可以从<a href="https://doc.qt.io/qt-6/gettingstarted.html">Get Started</a>开始了解一下基本概念，然后按模块看<a href="https://doc.qt.io/all-topics.html">All Topics</a>中的内容，还可以看一下具体的<a href="https://doc.qt.io/qt-6/reference-overview.html">编程API</a>，这样学习相对系统。</li><li>文件代码：<a href="https://github.com/lxq-02/qt_learn">https://github.com/lxq-02/qt_learn</a></li><li><a href="https://www.xinbaoku.com/qt/">Qt教程，Qt5编程入门教程（非常详细） (xinbaoku.com)</a></li><li><a href="https://www.w3cschool.cn/learnroadqt/tufx1j3q.html">Qt 学习之路_w3cschool</a></li></ul>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/QT/">QT</category>
      
      
      <comments>http://example.com/2024/08/08/Qt/Qt_%E5%9F%BA%E7%A1%80(%E4%BA%94)/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
