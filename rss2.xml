<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>李新乾的个人博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>命由我做，福自己求</description>
    <pubDate>Tue, 27 Aug 2024 03:09:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Linux_(六)-课设</title>
      <link>http://example.com/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/</link>
      <guid>http://example.com/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/</guid>
      <pubDate>Tue, 27 Aug 2024 01:50:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;服务器端应用部署与项目发布&quot;&gt;&lt;a href=&quot;#服务器端应用部署与项目发布&quot; class=&quot;headerlink&quot; title=&quot;服务器端应用部署与项目发布&quot;&gt;&lt;/a&gt;服务器端应用部署与项目发布&lt;/h1&gt;&lt;p&gt;任务描述：&lt;/p&gt;
&lt;p&gt;&#92;1. 选择服务器：自建服</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="服务器端应用部署与项目发布"><a href="#服务器端应用部署与项目发布" class="headerlink" title="服务器端应用部署与项目发布"></a>服务器端应用部署与项目发布</h1><p>任务描述：</p><p>\1. 选择服务器：自建服务器或选择一个可靠的服务器供应商，比如 AWS、阿里云、腾讯云等。</p><p>\2. 部署环境：在服务器上搭建部署环境，包括选择操作系统、安装必要的软件包和库、配置防火墙和域名解析等。</p><p>\3. 负载均衡：使用负载均衡技术，可以将请求分发到多个服务器上，提高系统的并发处理能力和可靠性。</p><p>\4. 备份和恢复：定期备份数据，确保数据不会丢失，在发生故障时可以快速恢复。</p><p>备注：</p><p>可以使用自动化部署工具，如 Jenkins、GitLab CI&#x2F;CD 等，可以简化部署流程；或者用容器化技术，如 Docker、Kubernetes 等</p><p>1、选择服务器：使用的centos7.6系统</p><p>2、连接服务器，通过sudo su root切换为root用户<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps2.jpg" alt="img"></p><p>3、配置Apache服务</p><p>(1) 检查是否安装过apache服务<br>yum info http<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps3.jpg" alt="img"></p><p>(2) 安装apache服务<br>yum install -y httpd<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps4.jpg" alt="img"></p><p>(3) 启动apache服务<br>systemctl start httpd<br>将apache设置为开机自启动<br>systemctl enable httpd<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps5.jpg" alt="img"></p><p>(4) 查看apache服务的运行状态<br>systemctl status httpd<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps6.jpg" alt="img"><br>返回信息中出现active (running)表示正在运行</p><p>(5) 在本地主机，通过浏览器访问轻量应用服务器公网IP，测试访问Apache服务的展示页。<br>轻量应用服务器公网IP获取步骤如下：</p><p>① 返回轻量应用服务器管理控制台。</p><p>② 在****服务器列表*<em><strong>页面，单击指定服务器，进入服务器的</strong></em>*概览****页面。</p><p>③ 在****服务器信息区域****，查看轻量应用服务器公网IP<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps7.jpg" alt="img"></p><p>④ Apache页面的展示结果为：<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps8.jpg" alt="img"></p><p>4、安装jdk</p><p>(1) 查找对应的jdk<br>yum search java | grep 1.8<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps9.jpg" alt="img"></p><p>(2) 安装jdk<br>yum install java-1.8.0-openjdk-devel.x86_64<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps10.jpg" alt="img"></p><p>5、安装tomcat</p><p>(1) 从镜像源下载<br>wget <a href="https://mirrors.aliyun.com/apache/tomcat/tomcat-9/v9.0.76/bin/apache-tomcat-9.0.76.tar.gz">https://mirrors.aliyun.com/apache/tomcat/tomcat-9/v9.0.76/bin/apache-tomcat-9.0.76.tar.gz</a><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps11.jpg" alt="img"></p><p>(2) 解压缩tomcat压缩包<br>tar -zxvf apache-tomcat-9.0.76.tar.gz<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps12.jpg" alt="img"></p><p>(3) 进入tomcat的bin文件夹判断是否安装成功<br>cd apache-tomcat-9.0.76&#x2F;bin<br>.&#x2F;startup.sh<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps13.jpg" alt="img"></p><p>6、安装nginx</p><p>(1) 安装依赖<br>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps14.jpg" alt="img"></p><p>(2) 下载压缩包<br>wget <a href="http://nginx.org/download/nginx-1.20.2.tar.gz">http://nginx.org/download/nginx-1.20.2.tar.gz</a><br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps15.jpg" alt="img"></p><p>(3) 解压缩<br>解压： tar -zxvf nginx-1.20.2.tar.gz<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps16.jpg" alt="img"></p><p>(4) 进入nginx-1.20.2的目录下<br>cd nginx-1.20.2<br>.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps17.jpg" alt="img"></p><p>(5) 安装<br>make<br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml5912\wps18.jpg" alt="img"><br>make install<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps19.jpg" alt="img"></p><p>(6) 启动</p><p>① 进入对应的文件夹<br>cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin<br>.&#x2F;nginx 启动<br>.&#x2F;nginx -s stop 关闭<br>.&#x2F;nginx -s reload 重新加载<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps20.jpg" alt="img"></p><p>7、开启防火墙<br>    如果真机不成功， 可以开放防火墙80 端口，或关闭防火墙，测试<br>    systemctl stop firewalld<br>    —————————————-<br>    systemctl start firewalld<br>    firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent<br>    firewall-cmd –reload<br>    如果端口被占用. 查看80<br>    netstat -anp |grep :80 ，也可以用ps aux 查看<br>    netstat 不存在 ，则安装 yum install net-tools 即可。<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps21.jpg" alt="img"></p><p>8、负载均衡</p><table><thead><tr><th>机器名</th><th>服务器IP</th><th>用途</th></tr></thead><tbody><tr><td>主服务器</td><td>192.168.152.129</td><td>负载均衡服务器</td></tr><tr><td>服务器1</td><td>192.168.152.130</td><td>后端服务器</td></tr><tr><td>服务器2</td><td>192.168.152.131</td><td>后端服务器</td></tr></tbody></table><p>(1) 设置防火墙 三台虚拟机都要设置<br>firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent<br>systemctl restart firewalld.service<br>关闭selinux： vi &#x2F;etc&#x2F;selinux&#x2F;config<br>修改配置文件：将selinux&#x3D;enforcing改为Disabled<br>弄好后重启虚拟机，查看后出现Disabled<br>getenforce #查看selinux状态<br>或者临时关闭（不用重启机器）：setenforce 0</p><p>(2) 轮询模式负载均衡</p><p>① 打开nginx（负载负载均衡）主虚拟机<br>编辑配置文件</p><ol><li><p>进入文件夹<br>cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</p></li><li><p>备份一个配置文件，防止配置错误可重新配置<br>cp nginx.conf nginx.conf.bak</p></li><li><p>编辑文件<br>vi nginx.conf</p></li></ol><p>a. 在http{}模块里添加以下内容<br>upstream webServer {<br> server 192.168.152.130:80; #服务器1<br> server 192.168.152.131:80; #服务器2<br>}<br>server{<br> listen 80;<br> server_name 192.168.152.129;<br> location &#x2F; {<br>     index index.html index htm;<br>    proxy_pass <a href="http://webserver/">http://webServer</a>; # webServer和upstream的webServer名字一致<br>    }<br>}</p><p>b. 检查语法并重启</p><p>a) 检查语法<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t </p><p>b) 重启<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps22.jpg" alt="img"></p><p>② 配置服务器1</p><ol><li><p>进入文件夹<br>cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;</p></li><li><p>备份<br>cp index.html index.html.bak</p></li><li><p>修改<br>vi index.html #清空里面的所有配置<br>添加下面的语句<br><h>Welcome to server 1<h></h></h></p></li><li><p>保存退出</p></li></ol><p>a) 检查语法<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t </p><p>b) 重启<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p><ol start="5"><li>浏览器访问<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps23.jpg" alt="img"></li></ol><p>③ 配置服务器2</p><ol><li><p>进入文件夹<br>cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;</p></li><li><p>备份<br>cp index.html index.html.bak</p></li><li><p>修改<br>vi index.html #清空里面的所有配置<br>添加下面的语句<br><h>Welcome to server 2<h></h></h></p></li><li><p>保存退出</p></li></ol><p>a) 检查语法<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t </p><p>b) 重启<br>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</p><ol start="5"><li>浏览器访问</li></ol><p>④ 结果<br>两个服务器轮流进行处置请求<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps24.jpg" alt="img"></p><p>\5. 备份和恢复：定期备份数据，确保数据不会丢失，在发生故障时可以快速恢复。</p><p>(1) tar命令备份<br>特点：保留权限<br>备份整个目录<br>可以选择不同的压缩方式</p><p>① 备份过程</p><ol><li><p>Root权限登录，进入根目录<br>cd &#x2F;</p></li><li><p>执行完整的备份命令<br>tar cvpzf backup.tgz &#x2F; –exclude&#x3D;&#x2F;proc –exclude&#x3D;&#x2F;lost+found –exclude&#x3D;&#x2F;mnt –exclude&#x3D;&#x2F;sys –exclude&#x3D;backup.tgz<br>解释：tar 是用于打包文件的命令。<br>cvpfz 是tar的选项，分别是“创建档案文件”、“保持权限”(保留所有东西原来的权限)、“使用gzip来减小文件尺寸”。<br>Backup.gz 是我们作为备份文件的文件名。<br>“&#x2F;” 是我们要备份的目录，&#x2F;代表的是整个文件系统<br>exclude 给出的排除在外，不需要备份的目录</p></li></ol><p>② 备份完成演示<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps25.jpg" alt="img"></p><p>(2) 恢复<br>恢复系统其实非常简单，就是把之前打包的文件覆盖回去就是了。<br>首先登陆为root用户，然后把之前备份的文件“backup.tgz”拷贝到分区的根目录下。<br>Linux中可以在一个运行的系统中恢复系统，不需要用boot-cd来专门引导。当然如果系统已经无法启动， 那就只能先重装一下系统，再来恢复。</p><p>① tar恢复<br>使用下面的命令来恢复系统<br>tar xvpfz backup.tgz -C &#x2F;</p><p>② Bzip2压缩备份恢复<br>如果备份文件是使用Bzip2压缩的，那就用：<br>tar xvpfj backup.tar.bz2 -C &#x2F;</p><h1 id="日志文件处理与数据提取"><a href="#日志文件处理与数据提取" class="headerlink" title="日志文件处理与数据提取"></a>日志文件处理与数据提取</h1><p>任务描述：</p><p>在部署完成后，需要对系统进行监控和日志记录，及时发现和解决问题。服务器日志文件处理是指对服务器上产生的各种日志文件进行收集、存储、分析和归档等操作。</p><p><em><strong>*日志作用：*</strong></em></p><p>日志文件用于记录linux系统的各种运行信息的文件，相当于linux主机的日记，不同的日志文件记载了不同类型的信息,如Linux内核消息、用户登录事件、程序错误等。. 日志文件对于诊断和解决问题很有帮助，因为linux运行的程序通常把系统的消息和错误写入对应的日志文件，这样系统可以有据可查， 此外,当主机遭受攻击时,日志文件还可以帮助寻找攻击者留下的痕迹。</p><p><em><strong>*日志分类：*</strong></em></p><p><strong>1.</strong> ****内核及系统日志：****由系统服务rsyslog统一管理，配置文件在&#x2F;etc&#x2F;rsyslog.conf</p><p><strong>2.</strong> ****用户日志****：记录Linux系统用户登录及退出系统的相关信息，包括用户名、登录终端，登录时间、操作等。</p><p><strong>3.</strong> ****程序旧志****：有些应用程序会选择独立管理一份日志文件，用于记录本程序运行过程中的各种事件信息。</p><p><em><strong>*日志位置：*</strong></em></p><p>Linux系统本身和大部分服务器程序的日志文件默认放在&#x2F;var&#x2F;log&#x2F;下。</p><p>&#x2F;var&#x2F;log&#x2F;message 内核消息及各种应用程序的公共日志信息,包括启动、I&#x2F;O错误、 网络错误、</p><p>&#x2F;var&#x2F;log&#x2F;cron Crond周期性计划任务产生的时间信息</p><p>&#x2F;var&#x2F;log&#x2F;dmesg 弓|导过程中的各种时间信息</p><p>&#x2F;var&#x2F;log&#x2F; maillog 进入或发出系统的电子邮件活动</p><p>&#x2F;var&#x2F;log&#x2F;lastlog 每个用户最近的登录事件</p><p>&#x2F;var&#x2F;log&#x2F;secure 用户认证相关的安全事件信息</p><p>&#x2F;var&#x2F;log&#x2F;wtmp 每个用户登录注销及系统启动和停机事件</p><p>&#x2F;var&#x2F;log&#x2F;btmp 失败的、错误的登录尝试及验证事件</p><p>下面是几个常见的服务器日志文件处理步骤：</p><p>\1. 收集：通过服务器上运行的应用程序、操作系统或其他工具自动或手动收集日志文件。</p><p>(1) 日志等级一定要规范</p><p>(2) error日志内容一定要详实 ,info日志要简洁易懂</p><p>(3) error日志一定是全局统一收集的</p><p>\2. 存储：将收集到的日志文件保存在本地计算机或远程服务器上的文件系统中，也可以使用云存储。<br>日志存储基本都是按照时间顺序进行保存的，但也有一定的要求</p><p>(1) 单个文件的大小要控制<br>处理问题时主要关注的是最近的日志，控制单个日志的大小，对日志的性能和后期的运维是非常有利的</p><p>(2) 日志要便于浏览</p><p>(3) 日志的安全性要得到保障</p><p>(4) 日志要定时清理</p><p>\3. 分析：通过分析日志文件，获得对服务器性能的反馈，以及检测安全事件、错误等问题。分析可以手动或自动处理</p><p>(1) ：内核及大多数系统消息 内核及系统日志主要由默认安装的rsyslog软件包提供, rsyslog服务所使用的配置文件为&#x2F;etc&#x2F;rsyslog.conf ,通过查看配置文件内容可以了解到系统默认的日志位置。<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps26.jpg" alt="img"><br>可以看出大部分文件存放到公共日志文件&#x2F;var&#x2F;log&#x2F;message中，其他的直接发送给用户或独立的日志文件中</p><p>(2) 查看&#x2F;var&#x2F;log&#x2F;messages日志信息<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps27.jpg" alt="img"></p><p>\4. 归档：对于长期存储的日志文件，需要进行归档处理，以便后续读取或查询。</p><p>(1) chattr +a日志文件, a选项为append (追加) only ,即给日志文件加上a权限后,将只可以追加,不可以删除和修改之前的内容。<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps28.jpg" alt="img"></p><h1 id="Linux进程管理及定时任务"><a href="#Linux进程管理及定时任务" class="headerlink" title="Linux进程管理及定时任务"></a>Linux进程管理及定时任务</h1><p>任务描述：</p><p>进程是操作系统资源分配的基本单位，是运行中的程序实例。Linux系统中，可以使用一些命令来管理进程，本部分可以介绍几个常用的命令。</p><p>定时任务是操作系统中按照一定时间间隔执行特定任务的机制。在Linux系统中，可以使用crontab命令来配置定时任务</p><p>一、常用命令</p><p>1．静态显示系统进程信息  </p><p>（1）ps &#x2F;&#x2F;显示当前用户进程<br>   <img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps29.jpg" alt="img"></p><p><strong>ps -aux &#x2F;&#x2F;显示所有进程信息</strong>**<br>**<img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps30.jpg" alt="img">**<br>**USER  进程的启动用户</p><p>PID   进程号（进程的唯一标识）</p><p>％CPU  占CPU的百分比</p><p>％MEM 占用内存百分比</p><p>VSZ   占用的虚拟内存大小</p><p>RSS   占用的物理内存大小</p><p>TTY   进程的工作终端（？表示没有终端）</p><p>STAT  进程的状态：<br>    R: 正在执行中 S: 休眠静止状态 T: 暂停执行 Z:僵死状态</p><p>Time   占用的cpu的时间</p><p>Command 运行的程序</p><p>2、动态显示系统进程信息</p><p>使用top命令，实时显示系统各个进程的资源占用情况。说明输出信息中列的含意。</p><p>在top基本视图中，按h键进入另一个视图。</p><p>在top基本视图中，按f键进入另一个视图，在这里可以编辑基本视图中的显示字段。</p><p>在top基本视图中，按c键进入另一个视图,可以显示进程的路径。</p><p>在top基本视图中，按k键，可以在不退出top命令的情况下杀死某个正在运行的进程。</p><p>在top基本视图中，按b键，高亮显示当前正在运行的进程<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps31.jpg" alt="img"></p><p>3、Kill：终止正在运行的进程或作业</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps32.jpg" alt="img"> </p><p>4、Killall：功能：终止指定程序名的所有进程</p><p>下载killall</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps33.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps34.jpg" alt="img"> </p><p>5、Jobs：功能：显示当前所有作业<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps35.jpg" alt="img"></p><p>6、Fg：把后台的作业调入前台运行<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps36.jpg" alt="img"></p><p>7、Bg：将前台作业或进程切换到后台运行<br> <img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps37.jpg" alt="img"></p><p>8、Nice：指定将启动进程的优先级。</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps38.jpg" alt="img"> </p><p>9、Renice：修改运行中的进程的优先级</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps39.jpg" alt="img"> </p><p>二、设置定时任务</p><p>1．任务名称<br>        Cron应用：每周2,4,6早上3点启动系统</p><p>2．任务操作</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps40.jpg" alt="img"> </p><p>分钟、小时、月内的第几天、月份、每周的第几天</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps41.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps42.jpg" alt="img"> </p><h1 id="父子进程与C程序编译"><a href="#父子进程与C程序编译" class="headerlink" title="父子进程与C程序编译"></a>父子进程与C程序编译</h1><p>任务描述：</p><p>父子进程是指在操作系统中，一个进程创建的子进程。简述Linux中如何创建子进程，请使用C语言完成该功能，并进行编译</p><p>一、父子进程</p><p>1．使用fork创建子进程，功能是：<br>        父进程输出main,子进程输出child<br>        使用gcc编译，并运行</p><p>2．注意事项</p><p>（1）查看一个函数功能的方法：man fork</p><p>（2）需要包含的头文件：#include &lt;unistd.h&gt;</p><p>（3）fork返回值</p><p>a．成功时，父进程返回子进程的进程ID号；子进程返回0。</p><p>b．失败时，父进程返回-1，子进程创建失败。</p><p>二、实验结果</p><p>没有sleep(1);<br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml5912\wps43.jpg" alt="img"><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps44.jpg" alt="img"></p><p>有sleep(1);</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps45.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps46.jpg" alt="img"> </p><h1 id="Shell编程综合应用"><a href="#Shell编程综合应用" class="headerlink" title="Shell编程综合应用"></a>Shell编程综合应用</h1><p>任务描述：</p><p>Shell编程的好处是它可以快速编写简单的脚本，使得可以在命令行中完成更多的任务，而不需要在每个命令之间反复输入参数和控制流程。</p><p>Shell编程是一种非常实用的技能，可以用于编写各种类型的脚本，包括系统管理脚本、数据处理脚本、网络管理脚本等。</p><p>本部分可先介绍shell程序设计的基本语法。</p><p>然后，尝试完成如2个数字求和、批量创建用户、批量复制文件等功能。</p><p>一、基本语法</p><p>（1）变量的定义与引用</p><p>\1. 创建以.sh结尾的文件<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps47.jpg" alt="img"></p><p>\2. 修改文件权限<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps48.jpg" alt="img"></p><p>\3. 输出文件<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps49.jpg" alt="img"></p><p>\4. 在命令行定义一个整型<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps50.jpg" alt="img"></p><p>\5. 输出整型<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps51.jpg" alt="img"></p><p>（2）特定变量</p><p>1、新建脚本<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps52.jpg" alt="img"></p><p>2、设置权限<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps53.jpg" alt="img"></p><p>3、执行文件<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps54.jpg" alt="img"></p><p>(3)if语句<br>1、编写脚本<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps55.jpg" alt="img"></p><p>2、改权限<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps56.jpg" alt="img"></p><p>3、执行<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps57.jpg" alt="img"></p><p>二、根据语法完成相应的功能</p><p>1．两数求和<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps58.jpg" alt="img"></p><p>2．批量创建用户<br><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps59.jpg" alt="img"></p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps60.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps61.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps62.jpg" alt="img"> </p><p>3．批量复制文件</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps63.jpg" alt="img"> </p><p>name.txt</p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps64.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/wps65.jpg" alt="img"> </p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Linux/">Linux</category>
      
      
      <comments>http://example.com/2024/08/27/Linux/Linux%E8%AF%BE%E8%AE%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux_(五)-实验</title>
      <link>http://example.com/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/</link>
      <guid>http://example.com/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/</guid>
      <pubDate>Tue, 27 Aug 2024 01:14:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、下载安装&quot;&gt;&lt;a href=&quot;#一、下载安装&quot; class=&quot;headerlink&quot; title=&quot;一、下载安装&quot;&gt;&lt;/a&gt;一、下载安装&lt;/h1&gt;&lt;h2 id=&quot;1-1、虚拟机的安装&quot;&gt;&lt;a href=&quot;#1-1、虚拟机的安装&quot; class=&quot;headerli</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、下载安装"><a href="#一、下载安装" class="headerlink" title="一、下载安装"></a>一、下载安装</h1><h2 id="1-1、虚拟机的安装"><a href="#1-1、虚拟机的安装" class="headerlink" title="1.1、虚拟机的安装"></a>1.1、虚拟机的安装</h2><p>Windows 环境下安装vmware虚拟机。</p><p>\1. 打开安装驱动文件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1.jpg" alt="img"> </p><p>\2. 一直下一步，更改保存位置</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2.jpg" alt="img"> </p><p>\3. 一直下一步，安装</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3.jpg" alt="img"> </p><p>\4. 等待下载成功</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4.jpg" alt="img"> </p><p>\5. 输入许可证密钥</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5.jpg" alt="img"> </p><p>题目2** <strong>–</strong> <strong>安装</strong>**</p><h2 id="1-2、centos"><a href="#1-2、centos" class="headerlink" title="1.2、centos"></a>1.2、centos</h2><p>在虚拟机中，安装centos</p><p>1.进入华为云镜像下载网站<a href="https://mirrors.huaweicloud.com/home">https://mirrors.huaweicloud.com/home</a></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6.jpg" alt="img"> </p><p>2.找到Centos</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7.jpg" alt="img"> </p><p>3.在对应目录找到下载的文件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8.jpg" alt="img"> </p><p>4.打开VMware，新建虚拟机向导</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9.jpg" alt="img"> </p><p>5.保存映像文件位置</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10.jpg" alt="img"> </p><p>6.保存地址，修改名字</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12.jpg" alt="img"> </p><p>7.定义硬件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13.jpg" alt="img"> </p><p>\8. 安装成功</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14.jpg" alt="img"> </p><p>\9. 测试安装</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18.jpg" alt="img"> </p><p>10.登录账号和密码</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19.jpg" alt="img"> </p><h2 id="1-3、网络测试"><a href="#1-3、网络测试" class="headerlink" title="1.3、网络测试"></a>1.3、网络测试</h2><p>系统安装成功后，检查网络是否可用，如果不可用，开启网络。</p><p>1.登录centOS系统，登录账号，测试baidu.com</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20.jpg" alt="img"> </p><p>2.使用curl baidu.com，查看是否返回对应数据</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps21.jpg" alt="img"> </p><h2 id="1-4、远程连接工具"><a href="#1-4、远程连接工具" class="headerlink" title="1.4、远程连接工具"></a>1.4、远程连接工具</h2><p>使用工具连接到centos系统。finalshell</p><p>1.下载finalshell的文件包</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps22.jpg" alt="img"> </p><p>2.点击左上角文件夹图案的图标，右键“连接”，点击“新建”下的“SSH连接”</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23.jpg" alt="img"> </p><p>2.在centOS中输入ip addr，寻找相应的IP地址</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24.jpg" alt="img"> </p><p>3.在SSH连接后的选项里输入相应的信息</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25.jpg" alt="img"> </p><p>4.点击相应的连接，接受密钥</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps26.jpg" alt="img"> </p><p>5.连接成功</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps27.jpg" alt="img"> </p><h1 id="二、Linux命令使用"><a href="#二、Linux命令使用" class="headerlink" title="二、Linux命令使用"></a>二、Linux命令使用</h1><h2 id="2-1、熟悉目录及文件相关命令"><a href="#2-1、熟悉目录及文件相关命令" class="headerlink" title="2.1、熟悉目录及文件相关命令"></a>2.1、熟悉目录及文件相关命令</h2><p><strong>1.</strong> <strong>实验内容</strong></p><p>了解目录相关命令：cd、pwd、ls、mkdir、rmdir、rm等的使用；</p><p>说明： mkdir 的-p选项使用场景；</p><p>说明： rm -rf 的使用场景</p><p>说明： ls -al  ，ls &#x2F;etc | more 的作用</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>&#x2F;&#x2F;文字或结果截图</p><p>\1. <img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724721484828.jpg" alt="img"></p><p>\2. mkdir [-p] 参数<br>            -p，可选，表示创建前置路径，表示自动创建不存在的父目录，适用于创建连续多层级的目录<br>rm [-r -f] 参数…参数<br>-r：删除文件夹<br>-f: 强制删除<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724721484828.jpg" alt="img"></p><p>\3. ls [-a -l] 参数<br>        -a：显示所有文件<br>     -l：显示文件的所有信息<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724721484828.jpg" alt="img"></p><p>\4. ls &#x2F;etc | more：将&#x2F;etc下的文件名称翻页查看<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724721484828.jpg" alt="img"></p><h2 id="2-2、熟悉文件相关命令"><a href="#2-2、熟悉文件相关命令" class="headerlink" title="2.2、熟悉文件相关命令"></a>2.2、熟悉文件相关命令</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>文件显示：cat、more、less</p><p>文件复制、删除和移动：cp、rm、mv </p><p>创建或改变文件时间标签：touch</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1.cat 显示文件信息<br>    more 分页查看<br>    less 随意浏览文件，可以向上向下翻页<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724721484828.jpg" alt="img"></p><p>2.touch创建文件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724721484828.jpg" alt="img"> </p><p>3.cp 复制文件 rm 删除文件 mv 移动文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724721484828.jpg" alt="img"></p><h2 id="2-3、熟练运行通配符"><a href="#2-3、熟练运行通配符" class="headerlink" title="2.3、熟练运行通配符"></a>2.3、熟练运行通配符</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>基于ls命令练习通配符（？、*、[]）的使用</p><ol><li><p>在当前目录下生成 touch t{1..10}.c 文件</p></li><li><p>ls *.c 作用</p></li><li><p>ls  ??.c作用</p></li><li><p>ls t[1-5].c 的作用</p></li></ol><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><ol><li><p>   在当前目录下生成 touch t{1..10}.c 文件</p></li><li><p>   ls *.c 作用：显示所有以.c结尾的文件</p></li><li><p>   ls  ??.c作用：显示所有以.c结尾且前面有两个字符的文件</p></li><li><p>   ls t[1-5].c 的作用：显示1.c，2.c, 3.c, 4.c，5.c</p></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724721484829.jpg" alt="img"> </p><h2 id="2-4、案例一"><a href="#2-4、案例一" class="headerlink" title="2.4、案例一"></a>2.4、案例一</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>(1) 在根目录（&#x2F;）下新建一目录 test</p><p>(2) 改变当前目录至 &#x2F;test ，在该目录下，以自己名字的英文缩写建一个空的文件，再建两个子目录（xh）与（ah）；</p><p>(3) 进入到（xh）子目录中，新建一个空文件text1；</p><p>(4) 进入到（ah）子目录中，再新建一个子目录（abc）,同时建立空文件text2；</p><p>(5) 把刚建的text1文件移动到刚建立的abc子目录下，并改名为text3，同时把text2文件复制到xh子目录中；</p><p>(6) 删除text3文件与xh子目录及目录中的文件；并删除abc子目录；</p><p>(7) 清屏；</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724721484829.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724721484829.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724721484829.jpg" alt="img"> </p><h2 id="2-5、-案例二"><a href="#2-5、-案例二" class="headerlink" title="2.5、 案例二"></a>2.5、 <strong>案例二</strong></h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>(1) 查看&#x2F;etc&#x2F;passwd文件的前二行与最后二行，并记录；</p><p>(2) 查看&#x2F;etc&#x2F;目录下的文件，并记录前两个文件的文件名；</p><p>(3) 查看&#x2F;etc&#x2F;目录中所有的文件中包含有sys字母的文件并记录；</p><p>(4) 查看&#x2F;etc&#x2F;目录中文件包含有conf的前两个文件是什么；</p><p>(5) 清屏；</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><ol><li><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724721484829.jpg" alt="img"></p></li><li></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724721484829.jpg" alt="img"> </p><ol start="3"><li></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724721484829.jpg" alt="img"> </p><ol start="4"><li></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724721484829.jpg" alt="img"> </p><ol start="5"><li></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724721484829.jpg" alt="img"> </p><h2 id="2-6、统计、排序"><a href="#2-6、统计、排序" class="headerlink" title="2.6、统计、排序"></a>2.6、统计、排序</h2><p> 统计 wc</p><p>排序 sort </p><p>&#x2F;etc&#x2F;passwd 或者 &#x2F;var&#x2F;log&#x2F;</p><p>\1.<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724721711741.jpg" alt="img"></p><p>\2. 根据第13个字母进行排序<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724721711741.jpg" alt="img"></p><h2 id="2-7、查询"><a href="#2-7、查询" class="headerlink" title="2.7、查询"></a>2.7、查询</h2><p>Find xxx</p><p>-name 根据名称</p><p>-type 根据文件类型查找</p><p>-atime 按照文件访问时间查找</p><p>-size按照指定大小搜索文件</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1.在目录下查找文件名是yum.conf的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724721711741.jpg" alt="img"></p><p>2.查找大于1G的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724721711741.jpg" alt="img"></p><p>3.查找&#x2F;etc目录下有哪些子目录<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724721711741.jpg" alt="img"></p><p>4.查找&#x2F;etc目录下5天内修改的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724721711741.jpg" alt="img"></p><h2 id="2-8、grep"><a href="#2-8、grep" class="headerlink" title="2.8、grep"></a>2.8、grep</h2><p>Grep</p><p>^:开头的意思</p><p>$:结尾</p><p>[]:查找包含[]中的字符的文件</p><p>*：匹配前一个字符重复0次，或多次</p><p>?.</p><ol><li>   查找开头是“-”的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724721711741.jpg" alt="img"></li></ol><p>2.查找结尾是“$”的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724721711741.jpg" alt="img"></p><p>3.查找包含a, b, 1的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724721711741.jpg" alt="img"></p><p>4.查找至少包含一个a的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724721711741.jpg" alt="img"></p><p>5.查找有两个a或者三个a的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724721711741.jpg" alt="img"></p><h2 id="2-8、覆盖追加"><a href="#2-8、覆盖追加" class="headerlink" title="2.8、覆盖追加"></a>2.8、覆盖追加</h2><p>\1. <strong>实验内容</strong></p><p><strong>&gt;：覆盖输出</strong></p><p><strong>&gt;&gt;：追加输出</strong></p><p><strong>&lt;：输入重定向</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724721711741.jpg" alt="img"> </p><p>通过重定向 &#x2F;etc&#x2F;passwd 作为输入设备，并输出重定向到 a.txt，最终实现了将 &#x2F;etc&#x2F;passwd 文件中内容复制到 a.txt 中。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724721711742.jpg" alt="img"> </p><h2 id="2-9、管道符"><a href="#2-9、管道符" class="headerlink" title="2.9、管道符|"></a>2.9、管道符|</h2><p><strong>(1)</strong> <em><strong>*|*</strong></em></p><p><strong>(2)</strong> <em><strong>*tee：读取标准输入*</strong></em></p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1.管道符，左边的输出作为右边的输入<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724721711742.jpg" alt="img"></p><p>2.将输入的信息输入到file中</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724721711742.jpg" alt="img"></p><h2 id="2-10、last"><a href="#2-10、last" class="headerlink" title="2.10、last"></a>2.10、last</h2><p><strong>last：显示最近的登录信息，文件是&#x2F;var&#x2F;log&#x2F;wtmp</strong></p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong>**<br><strong><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724721711742.jpg" alt="img"></strong><br>**</p><h1 id="三、vi编辑器使用"><a href="#三、vi编辑器使用" class="headerlink" title="三、vi编辑器使用"></a>三、vi编辑器使用</h1><h2 id="3-1、vi工作模式的转换"><a href="#3-1、vi工作模式的转换" class="headerlink" title="3.1、vi工作模式的转换"></a>3.1、vi工作模式的转换</h2><p>打开文件：vi  [文件名]</p><p>命令模式（Command mode）：输入字符都作为命令来解释执行。不显示输入内容。</p><p>输入模式（Insert mode）：输入的任何字符都将作为文件内容被保存，并显示在屏幕上。</p><p>末行模式（Last line mode）：在屏幕最末行接收行命令输入，并执行。</p><p>练习3种工模间的切换</p><p><strong>2</strong>实验结果与分析（文字或实验结果截图）**</p><p>1.打开文件，进入命令模式</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724721970584.jpg" alt="img"> </p><p>2.在命令模式下输入i、I、a、A、o、O进入插入模式，可以在此模式下对文件进行修改，按Esc退出插入模式</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724721970585.jpg" alt="img"> </p><p>3.在命令模式下，输入 ：开始的命令，进入末行模式执行指令，如“:wq”保存退出，</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724721970585.jpg" alt="img"> </p><h2 id="3-2、退出相关命令"><a href="#3-2、退出相关命令" class="headerlink" title="3.2、退出相关命令"></a>3.2、退出相关命令</h2><p>测试 :q、  :wq、 :q!  三个退出命令的区别</p><p>\1. :q 该命令只能退出没有修改的文件<br>    修改过：</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724721970585.jpg" alt="img"> </p><p>未修改：</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724721970585.jpg" alt="img"> </p><p>\2. :wq 保存并退出<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724721970585.jpg" alt="img"></p><p>\3. :q! 强制退出，但不会保存修改的内容<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724721970585.jpg" alt="img"></p><h2 id="3-3、增删改查"><a href="#3-3、增删改查" class="headerlink" title="3.3、增删改查"></a>3.3、增删改查</h2><p>查询</p><p>插入&#x2F;删除命令（iao,dd dw x)</p><p>修改&#x2F;替换命令</p><p>:s&#x2F;str1&#x2F;str2&#x2F; 用字符串 str2 替换行中首次出现的字符串 str1</p><p>:s&#x2F;str1&#x2F;str2&#x2F;g 用字符串 str2 替换行中所有出现的字符串 str1</p><p>:%s&#x2F;str1&#x2F;str2&#x2F;g 用字符串 str2 替换所有行中，所有出现的字符串 str1</p><p> 进入插入模式：i（光标左边开始）</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724721970585.jpg" alt="img"> </p><p>进入插入模式：a（光标右边开始）</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724721970585.jpg" alt="img"> </p><p>进入插入模式：o（光标下一行开始）</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724721970585.jpg" alt="img"> </p><p>命令模式输入dd，删除光标所在行</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724721970585.jpg" alt="img"> </p><p>命令模式：输入dw，删除光标下的字母<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724721970585.jpg" alt="img"></p><p>:s&#x2F;str1&#x2F;str2&#x2F; 用字符串 str2 替换行中首次出现的字符串 str1</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724721970585.jpg" alt="img"> </p><p>:s&#x2F;str1&#x2F;str2&#x2F;g 用字符串 str2 替换行中所有出现的字符串 str1</p><p>:s&#x2F;I am&#x2F;-BBB-&#x2F;g<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724721970585.jpg" alt="img"></p><p>:%s&#x2F;str1&#x2F;str2&#x2F;g 用字符串 str2 替换所有行中，所有出现的字符串 str1</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724721970585.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724721970585.jpg" alt="img"> </p><h2 id="3-4、复制与撤销"><a href="#3-4、复制与撤销" class="headerlink" title="3.4、复制与撤销"></a>3.4、复制与撤销</h2><p>拷贝&#x2F;粘贴命令</p><p>撤销&#x2F;重做命令</p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>拷贝命令yy，复制一行的内容，按q，将拷贝的内容粘贴</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17-1724721970585.jpg" alt="img"> </p><p>撤销命令u或者U</p><p>u:撤销前一个命令</p><p>U：撤销对光标所在行的修改</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18-1724721970585.jpg" alt="img"> </p><p><strong>3</strong><strong>.</strong> <strong>结论与讨论</strong></p><h2 id="3-5、sed"><a href="#3-5、sed" class="headerlink" title="3.5、sed"></a>3.5、sed</h2><p>Sed 命令使用，参照课件</p><p>sed ‘s&#x2F;coffee&#x2F;chocolate&#x2F;’ caffeine</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19-1724721970585.jpg" alt="img"> </p><p>输入下面要求做全局修改的sed命令：</p><p>  sed  ‘s&#x2F;coffee&#x2F;chocolate&#x2F;g’  caffeine</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20-1724721970585.jpg" alt="img"> </p><p>sed命令可以用于只作用于满足要求的行。</p><p>sed  ‘&#x2F;2003&#x2F;s&#x2F;coffee&#x2F;chocolate&#x2F;g’  caffeine</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps21-1724721970585.jpg" alt="img"> </p><p>文件中所有含有字符串def的行都会被删除。</p><p>§sed  ‘&#x2F;def&#x2F;d’  caffeine</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps22-1724721970586.jpg" alt="img"> </p><p> sed  ‘&#x2F;^2&#x2F;s&#x2F;coffee&#x2F;chocolate&#x2F;g’  caffeine </p><p>选中所有以2开头的行，如果该行包含字符串coffee，</p><p>则将其替换为chocolate。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23-1724721970586.jpg" alt="img"> </p><p>输入： sed  ‘&#x2F;^c&#x2F;d’  caffeine</p><p>选中所有以字符c开头的行，然后删除这些行</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24-1724721970586.jpg" alt="img"> </p><p>输入： sed  ‘&#x2F;^$&#x2F;d’  caffeine</p><p>选中所有空行，然后删除这些行</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25-1724721970586.jpg" alt="img"> </p><h2 id="3-6、awk"><a href="#3-6、awk" class="headerlink" title="3.6、awk"></a>3.6、awk</h2><p>awk命令使用，参照课件</p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>Awk ‘&#x2F;dairy&#x2F;{print $3}’ food</p><p>将food文件下，包含dairy的行的第三字段打印出来<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps26-1724721970586.jpg" alt="img"></p><p>Awk ‘&#x2F;dairy&#x2F;{print $3,$1}’ food</p><p>将food文件下，包含dairy的行的第三字段，第一字段打印出来</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps27-1724721970586.jpg" alt="img"> </p><p>awk -F: ‘{print $1,$3,$4}’ &#x2F;etc&#x2F;passwd | more</p><p>将&#x2F;etc&#x2F;passwd文件中以冒号:为分隔符的第一、第三、第四字段打印出来</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps28-1724721970586.jpg" alt="img"> </p><h2 id="3-7、"><a href="#3-7、" class="headerlink" title="3.7、"></a>3.7、</h2><p>1.把&#x2F;etc&#x2F;inittab文件复制到&#x2F;test目录并改名为tab；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps29-1724721970586.jpg" alt="img"></p><p>2.查看tab文件共有多少行，第18行为什么，并记录；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps30-1724721970586.jpg" alt="img"></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps31-1724721970586.jpg" alt="img"> </p><p>3.在第25行后添加上自己的名字的英文缩写；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps32.jpg" alt="img"></p><p>4.把第26行分别复制到第34行下面与内容最后；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps33.jpg" alt="img"></p><p>5.查找单词now在多少行有；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps34.jpg" alt="img"></p><p>6.命令行模式下，在第10行前后分别添加一空行；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps35.jpg" alt="img"> </p><p>7.再删除该修改后内容的第25行、30行；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps36.jpg" alt="img"></p><p>8.保存并退出；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps37.jpg" alt="img"></p><p>9.在末行模式下命令q与q!分别在什么情况下使用<br>q：退出，在文件没有修改的情况的下使用<br>q!：强制退出，如果文件修改了，同样可以退出，但修改的内容不会保存</p><h1 id="四、用户组管理"><a href="#四、用户组管理" class="headerlink" title="四、用户组管理"></a>四、用户组管理</h1><h2 id="4-1、相关文件"><a href="#4-1、相关文件" class="headerlink" title="4.1、相关文件"></a>4.1、相关文件</h2><ol><li><p>查看用户账号文件―&gt;&#x2F;etc&#x2F;passwd，说明其一行的格式及各域作用</p></li><li><p>查看影子文件―&gt;&#x2F;etc&#x2F;shadow，说明其中一行的格式及各域作用</p></li><li><p>查看组文件―&gt;&#x2F;etc&#x2F;group，说明其中一行的格式及各域作用</p></li></ol><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1.查看用户账号文件―&gt;&#x2F;etc&#x2F;passwd</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724722222445.jpg" alt="img">如root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</p><p>root：登录名，区分大小写</p><p>x ： 账号密码，为了安全考虑，这个内容放到了&#x2F;etc&#x2F;shadow</p><p>0 ：账号UID,32位无符号整数，唯一，root的UID为0</p><p>0 ：账户GID，32位整数，组ID</p><p>root : GECOS字段，用户个人信息说明</p><p>&#x2F;root : 用户登录的子目录，保存该账号的配置信息</p><p>&#x2F;bin&#x2F;bash : 登录shell，默认的shell是&#x2F;bin&#x2F;bash</p><p>2.查看影子文件―&gt;&#x2F;etc&#x2F;shadow</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724722222446.jpg" alt="img"> </p><p>bin:*:18353:0:99999:7:::</p><p>bin:登录名</p><p>*:加密指令</p><p>18353:口令上次更改距1970年1月1日有18353天</p><p>0:口令更改后不可以更改的天数为0</p><p>99999:口令更改后必须在99999天后更改，也是有效期</p><p>7:口令失效前7天警告用户</p><p>Inctive:倒数第3个域，代表口令失效后被查封的天数</p><p>Expire:账号被封时距1970年1月1日的天数，</p><p>Flag：保留未用的域</p><p>3、查看组文件―&gt;&#x2F;etc&#x2F;group</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724722222446.jpg" alt="img"> </p><p>bin:x:1:</p><p>Bin : 组名</p><p>X : 加密口令</p><p>1 ：GID，组ID</p><p>最后一个区域：存放成员列表，彼此用逗号隔开，这个默认组没有成员，为空</p><p><strong>3</strong><strong>.</strong> <strong>结论与讨论</strong></p><h2 id="4-2、用户相关命令练习"><a href="#4-2、用户相关命令练习" class="headerlink" title="4.2、用户相关命令练习"></a>4.2、用户相关命令练习</h2><ol><li><p>练习添加新用户命令：useradd；</p></li><li><p>练习设置用户口令命令：passwd；</p></li><li><p>练习切换用户身份命令：su；</p></li><li><p>练习删除用户命令：userdel；</p></li><li><p>练习修改用户信息命令：usermod；</p></li></ol><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、练习添加新用户命令：useradd；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724722222446.jpg" alt="img"></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724722222446.jpg" alt="img"> </p><p>2、设置用户口令命令：passwd；<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724722222446.jpg" alt="img"></p><p>3、练习切换用户身份命令：su；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724722222446.jpg" alt="img"> </p><p>4、练习删除用户命令：userdel；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724722222446.jpg" alt="img"> </p><p>没有LLL这个账号了</p><p>5、练习修改用户信息命令：usermod；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724722222446.jpg" alt="img"> </p><h2 id="4-3、组相关命令"><a href="#4-3、组相关命令" class="headerlink" title="4.3、组相关命令"></a>4.3、组相关命令</h2><ol><li><p>练习添加组命令：groupadd；</p></li><li><p>练习删除组命令：groupdel；</p></li><li><p>练习修改组信息命令：groupmod；</p></li><li><p>添加&#x2F;删除组成员：gpasswd；</p></li></ol><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、添加组命令：groupadd</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724722222446.jpg" alt="img"> </p><p>2、删除组命令：groupdel；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724722222446.jpg" alt="img"> </p><p>没有testbed这个组了</p><p>3、修改组信息命令：groupmod；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724722222446.jpg" alt="img"> </p><p>4、添加&#x2F;删除组成员：gpasswd；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724722222446.jpg" alt="img"> </p><p>添加成员u1,u2</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724722222446.jpg" alt="img"> </p><p>Testbed2组删除了用户u1，现在只有u2用户</p><h2 id="4-4、文件相关命令练习"><a href="#4-4、文件相关命令练习" class="headerlink" title="4.4、文件相关命令练习"></a>4.4、文件相关命令练习</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><ol><li><p>修改权限命令：chmod</p></li><li><p>改变文件拥有者：chown；</p></li><li><p>更改文件所属的组：chgrp；</p></li></ol><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、修改权限命令：chmod</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724722222446.jpg" alt="img"> </p><p>2、改变文件拥有者：chown；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724722222446.jpg" alt="img"> </p><p>将abc.txt的文件拥有者和组改为LXQ</p><p>3、 更改文件所属的组：chgrp；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17-1724722222446.jpg" alt="img"> </p><h2 id="4-5、用户组管理"><a href="#4-5、用户组管理" class="headerlink" title="4.5、用户组管理"></a>4.5、用户组管理</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><ol><li><p>建立一个标准的组group1，GID&#x3D;900；</p></li><li><p>建立一个标准组group2，选项为默认，观察该组的信息有什么变化；</p></li><li><p>新建用户ah、xh，再新建一个组group3，把root、u1、user2用户添加到group1组中，把ah、xh添加到group2组，</p></li><li><p>把group3组改名为g3，GID&#x3D;1000；</p></li><li><p>查看user2所属于的组，并记录；</p></li><li><p>删除user1组与g3组，观察有什么情况发生；</p></li></ol><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、建立一个标准的组group1，GID&#x3D;900；</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18-1724722222446.jpg" alt="img"> </p><p>2、建立一个标准组group2，选项为默认，</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19-1724722222446.jpg" alt="img"> </p><p>3、新建用户ah、xh，再新建一个组group3，把root、u1、user2用户添加到group1组中，把ah、xh添加到group2组，</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20-1724722222446.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps21-1724722222446.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps22-1724722222446.jpg" alt="img"> </p><p>4、把group3组改名为g3，GID&#x3D;1000</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23-1724722222446.jpg" alt="img"> </p><p>5、查看user2所属于的组，并记录</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24-1724722222446.jpg" alt="img"> </p><p>6、删除user1组与g3组</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25-1724722222446.jpg" alt="img"> </p><h1 id="五、应用安装"><a href="#五、应用安装" class="headerlink" title="五、应用安装"></a>五、应用安装</h1><h2 id="5-1、安装apache"><a href="#5-1、安装apache" class="headerlink" title="5.1、安装apache"></a>5.1、安装apache</h2><p><strong>1.检测是否安装httpd</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724722406203.jpg" alt="img"> </p><p><strong>2.安</strong>装： yum install httpd</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724722406204.jpg" alt="img"> </p><p>3.进入目录： cd &#x2F;var&#x2F;www&#x2F;html 建立 自己index.html </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724722406204.jpg" alt="img"> </p><p>4.启动服务 systemctl start httpd <img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724722406204.jpg" alt="img"></p><p>如果真机不成功， 可以开放防火墙80 端口，或关闭防火墙，测试 </p><p>systemctl stop firewalld</p><p>-—————————————</p><p>systemctl start firewalld</p><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>如果端口被占用. 查看80</p><p>netstat -anp |grep :80 ，也可以用ps aux 查看</p><p>netstat 不存在 ，则安装 yum install net-tools 即可。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724722406204.jpg" alt="img"> </p><p>虚拟机测试： curl 127.0.0.1</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724722406204.jpg" alt="img"> </p><p><strong>虚拟机测试<a href="http://ip/">http://ip</a></strong></p><p><strong>这里的ip是自己的虚拟器ip</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724722406204.jpg" alt="img"> </p><h2 id="5-2、jdk8"><a href="#5-2、jdk8" class="headerlink" title="5.2、jdk8"></a>5.2、jdk8</h2><p>yum search java | grep 1.8</p><p>yum install java-1.8.0-openjdk-devel.x86_64</p><p>yum install java-1.8.0-openjdk.x86_64</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724722406204.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724722406204.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724722406204.jpg" alt="img"> </p><h2 id="5-3、tomcat"><a href="#5-3、tomcat" class="headerlink" title="5.3、tomcat"></a>5.3、tomcat</h2><p><strong>从镜像源下载</strong></p><p><a href="https://repo.huaweicloud.com/apache/tomcat/tomcat-9/v9.0.10/bin/apache-tomcat-9.0.10-deployer.tar.gz">wget https://mirrors.aliyun.com/apache/tomcat/tomcat-9/v9.0.72/bin/apache-tomcat-9.0.72.tar.gz</a></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724722406204.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724722406204.jpg" alt="img"> </p><p>解压缩tar -zxvf ****</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724722406204.jpg" alt="img"> </p><p>进bin 执行.&#x2F;startup.sh</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724722406204.jpg" alt="img"> </p><p>浏览器测试<a href="http://192.168.152.129:8080/">http://192.168.152.129:8080</a></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724722406204.jpg" alt="img"> </p><h2 id="5-4、安装nginx"><a href="#5-4、安装nginx" class="headerlink" title="5.4、安装nginx"></a>5.4、安装nginx</h2><p>独立源地址： <a href="http://nginx.org/">nginx.org</a></p><p>安装依赖： yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724722406204.jpg" alt="img"> </p><p>下载： wget <a href="http://nginx.org/download/nginx-1.20.2.tar.gz">http://nginx.org/download/nginx-1.20.2.tar.gz</a></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17-1724722406204.jpg" alt="img"> </p><p>解压： tar -zxvf nginx-1.20.2.tar.gz</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18-1724722406204.jpg" alt="img"> </p><p>进入目录： cd nginx-1.20.2</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19-1724722406204.jpg" alt="img"> </p><p>安装配置： .&#x2F;configure </p><p>（提示 &#x2F;usr&#x2F;local&#x2F;nginx 目录）</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20-1724722406204.jpg" alt="img"> </p><p>编译安装： make </p><p>make install</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps21-1724722406204.jpg" alt="img"> </p><p>进入目录： cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p><p>启动： .&#x2F;nginx</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps22-1724722406204.jpg" alt="img"> </p><p>停止： .&#x2F;nginx -s stop</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23-1724722406204.jpg" alt="img"> </p><p>重新加载： .&#x2F;nginx -s reload</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24-1724722406204.jpg" alt="img"> </p><p>虚拟机测试： curl 127.0.0.1</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25-1724722406204.jpg" alt="img"> </p><p>真机测试： 浏览器</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps26-1724722406204.jpg" alt="img"> </p><p>如果真机不成功， 可以开放防火墙端口，或关闭防火墙，测试 </p><p>可以进入 cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html 目录下编写自己的html 静态文件</p><h2 id="5-5、安装-MySQL"><a href="#5-5、安装-MySQL" class="headerlink" title="5.5、安装 MySQL"></a>5.5、安装 MySQL</h2><p>1、下载文件</p><p>wget <a href="https://mirrors.aliyun.com/mysql/MySQL-8.0/mysql-8.0.26-1.el7.x86_64.rpm-bundle.tar">https://mirrors.aliyun.com/mysql/MySQL-8.0/mysql-8.0.27-1.el7.x86_64.rpm-bundle.tar</a></p><p>或下载到本机，在上传到服务器</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps27-1724722406204.jpg" alt="img"> </p><p>1.1 删除系统自带的 mariadb</p><p>rpm -e mariadb-libs-5.5.68-1.el7.centos.x86_64 –nodeps</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps28-1724722406204.jpg" alt="img"> </p><p>2、解压缩</p><p>tar -xvf mysql-8.0.27-1.el7.x86_64.rpm-bundle.tar </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps29-1724722406205.jpg" alt="img"> </p><p>3、安装 common、libs、client、server</p><p>安装命令行</p><p>rpm -ivh mysql-community-common-8.0.27-1.el7.x86_64.rpm –nodeps –force </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps30-1724722406205.jpg" alt="img"> </p><p>rpm -ivh mysql-community-libs-8.0.27-1.el7.x86_64.rpm –nodeps –force</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps31-1724722406205.jpg" alt="img"> </p><p>rpm -ivh mysql-community-client-8.0.27-1.el7.x86_64.rpm –nodeps –force</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps32-1724722406205.jpg" alt="img"> </p><p>rpm -ivh mysql-community-server-8.0.27-1.el7.x86_64.rpm –nodeps –force </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps33-1724722406205.jpg" alt="img"> </p><p>4、初始化 MySQL</p><p>mysqld –initialize </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps34-1724722406205.jpg" alt="img"> </p><p>7、授权防火墙</p><p>chown mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql -R; 改变用户和用户组</p><p>systemctl start mysqld.service; </p><p>systemctl enable mysqld; 应该是默的，如果不是加上这句 </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps35-1724722406205.jpg" alt="img"> </p><p>8、查看数据库的初始化密码</p><p>cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps36-1724722406205.jpg" alt="img"> </p><p>9、登录数据库</p><p>mysql -uroot -p </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps37-1724722406205.jpg" alt="img"> </p><p>10、修改密码</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’; </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps38.jpg" alt="img"> </p><p>11、使用新密码登录</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps39.jpg" alt="img"> </p><p>12、开启远程访问</p><p>create user ‘root‘@’%’ identified with mysql_native_password by ‘root’;</p><p>grant all privileges on <em>.</em> to ‘root‘@’%’ with grant option;</p><p>flush privileges; </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps40.jpg" alt="img"> </p><p>13、开放 3306 端口</p><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –permanent</p><p>systemctl restart firewalld.service</p><p>firewall-cmd –reload </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps41.jpg" alt="img"> </p><p>14、MySQL 安装默认使用美国的时区，北京时间比美国晚 8 小时</p><p>set global time_zone&#x3D;’+8:00’; </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps42.jpg" alt="img"> </p><p>15、创建数据表</p><p>create database test character set utf8 collate utf8_general_ci;</p><p>use test;</p><p>create table user( id int primary key auto_increment, name varchar(22), birthday datetime ); insert into user(name, birthday) VALUES (‘小明’,’1999-01-01’); insert into user(name, birthday) VALUES (‘小红’,’2000-01-01’); </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps43.jpg" alt="img"> </p><h1 id="六、进程管理与定时任务"><a href="#六、进程管理与定时任务" class="headerlink" title="六、进程管理与定时任务"></a>六、进程管理与定时任务</h1><h2 id="6-1、静态显示系统进程信息"><a href="#6-1、静态显示系统进程信息" class="headerlink" title="6.1、静态显示系统进程信息"></a>6.1、静态显示系统进程信息</h2><p>\1. 实验内容</p><p>ps命令的使用,并说明常用参数的作用，及输出信息中列的含意</p><p>\2. 实验结果与分析（文字或实验结果截图）</p><p># ps 　　　&#x2F;&#x2F;显示当前用户进程</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724722600591.jpg" alt="img"> </p><p># ps –aux  &#x2F;&#x2F;显示所有进程信息</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724722600592.jpg" alt="img"> </p><p>USER  进程的启动用户</p><p>PID   进程号（进程的唯一标识）</p><p>％CPU  占CPU的百分比</p><p>％MEM 占用内存百分比</p><p>VSZ   占用的虚拟内存大小</p><p>RSS   占用的物理内存大小</p><p>TTY   进程的工作终端（？表示没有终端）</p><p>STAT  进程的状态：<br>    R: 正在执行中 S: 休眠静止状态 T: 暂停执行 Z:僵死状态</p><p>Time   占用的cpu的时间</p><p>Command 运行的程序</p><p>\3. 结论与讨论</p><h2 id="6-2、动态显示系统进程信息"><a href="#6-2、动态显示系统进程信息" class="headerlink" title="6.2、动态显示系统进程信息"></a>6.2、动态显示系统进程信息</h2><p>\1. 实验内容</p><p>使用top命令，实时显示系统各个进程的资源占用情况。说明输出信息中列的含意。</p><p>在top基本视图中，按h键进入另一个视图。</p><p>在top基本视图中，按f键进入另一个视图，在这里可以编辑基本视图中的显示字段。</p><p>在top基本视图中，按c键进入另一个视图,可以显示进程的路径。</p><p>在top基本视图中，按k键，可以在不退出top命令的情况下杀死某个正在运行的进程。</p><p>在top基本视图中，按b键，高亮显示当前正在运行的进程。</p><p>\2. 实验结果与分析（文字或实验结果截图）</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724722600592.jpg" alt="img"> </p><p>在top基本视图中，按h键进入另一个视图。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724722600592.jpg" alt="img"> </p><p>在top基本视图中，按f键进入另一个视图，在这里可以编辑基本视图中的显示字段。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724722600592.jpg" alt="img"> </p><p>在top基本视图中，按c键进入另一个视图,可以显示进程的路径。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724722600592.jpg" alt="img"> </p><p>在top基本视图中，按k键，可以在不退出top命令的情况下杀死某个正在运行的进程。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724722600592.jpg" alt="img"> </p><p>在top基本视图中，按b键，高亮显示当前正在运行的进程。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724722600592.jpg" alt="img"> </p><h2 id="6-3、其他命令"><a href="#6-3、其他命令" class="headerlink" title="6.3、其他命令"></a>6.3、其他命令</h2><p>\1. 实验内容</p><p>Kill、killall、jobs、fg、bg、nice、renice等</p><p>\2. 实验结果与分析（文字或实验结果截图）</p><p>Kill：终止正在运行的进程或作业</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724722600592.jpg" alt="img"> </p><p>Killall：功能：终止指定程序名的所有进程</p><p>下载killall</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724722600592.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724722600592.jpg" alt="img"> </p><p>jobs：功能：显示当前所有作业<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724722600592.jpg" alt="img"></p><p>Fg：把后台的作业调入前台运行<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724722600592.jpg" alt="img"></p><p>Bg：将前台作业或进程切换到后台运行<br> <img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724722600592.jpg" alt="img"></p><p>Nice：指定将启动进程的优先级。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724722600592.jpg" alt="img"> </p><p>Renice：修改运行中的进程的优先级</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724722600592.jpg" alt="img"> </p><h2 id="6-4、定时任务1"><a href="#6-4、定时任务1" class="headerlink" title="6.4、定时任务1"></a>6.4、定时任务1</h2><p>\1. 实验内容</p><p>利用at设置一个任务自动化，在当天11：00钟，在根目录下自动创建一个abc目录，并进入到abc目录中，建立一个空的文件test，同时对该文件进行打包成test.tar;</p><p>\2. 实验结果与分析（文字或实验结果截图）</p><p>步骤及实验结果截图</p><p>1.下载at命令</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17-1724722600592.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18-1724722600592.jpg" alt="img"> </p><p>2、利用at设置一个任务自动化，在当天11：00钟，</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19-1724722600592.jpg" alt="img"> </p><p>3、在根目录下自动创建一个abc目录，<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20-1724722600592.jpg" alt="img"><br>4、并进入到abc目录中<br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml15024\wps21.jpg" alt="img"><br>5、建立一个空的文件test，同时对该文件进行打包成test.tar;<br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml15024\wps22.jpg" alt="img"></p><p>6、检查定时任务<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23-1724722600593.jpg" alt="img"></p><h2 id="6-5、定时任务2"><a href="#6-5、定时任务2" class="headerlink" title="6.5、定时任务2"></a>6.5、定时任务2</h2><p>\1. 实验内容</p><p>Cron应用：每周2,4,6早上3点启动系统</p><p>\2. 实验结果与分析（文字或实验结果截图）</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24-1724722600593.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25-1724722600593.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps26-1724722600593.jpg" alt="img"> </p><h1 id="七、Linux下GCC的使用"><a href="#七、Linux下GCC的使用" class="headerlink" title="七、Linux下GCC的使用"></a>七、Linux下GCC的使用</h1><p><strong>基本用法</strong></p><p>gcc</p><p>-o：指定生成文件的名称</p><p>-E：激活预处理。生成预处理文件（ .i 文件）</p><p>-S：激活预处理、编译。生成汇编代码（ .s 文件）</p><p>-c：激活预处理、编译、汇编。生成目标文件（ .o 文件）</p><p>-I：指定头文件目录</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724722784156.jpg" alt="img"> </p><h2 id="7-1、预处理-预编译"><a href="#7-1、预处理-预编译" class="headerlink" title="7.1、预处理**(预编译)**"></a>7.1、预处理**(预编译)**</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>使编译器将 C 源代码中的包含的头文件如stdio.h编译进来，替换宏(如符号常量)。</p><p><strong>gcc -E hello.c -o hello.i</strong> </p><p><strong>cat hello.i</strong><strong>查看生成文件</strong></p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>&#x2F;&#x2F;文字或结果截图</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724722784156.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724722784156.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724722784156.jpg" alt="img"> </p><h2 id="7-2、编译"><a href="#7-2、编译" class="headerlink" title="7.2、编译"></a>7.2、编译</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>GCC 首先要检查代码的规范性、是否有语法错误等，以确定代码的实际要做的工作，在检查无误后，GCC 把代码翻译成汇编语言。</p><p><strong>gcc –S hello.i –o  hello.s</strong> 进行到编译阶段停止，并生成 汇编文件 </p><p>cat hello.s 查看生成的文件</p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724722784156.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724722784156.jpg" alt="img"> </p><h2 id="7-3、汇编"><a href="#7-3、汇编" class="headerlink" title="7.3、汇编"></a>7.3、汇编</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>把编译阶段生成的 ”.s” 文件转成二进制目标代码。</p><p>gcc –c hello.s –o hello.o</p><p>Cat 查看文件</p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724722784156.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724722784157.jpg" alt="img"> </p><h2 id="7-4、链接"><a href="#7-4、链接" class="headerlink" title="7.4、链接"></a>7.4、链接</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><ol><li>链接到库中(链接其他目标文件)，生成可执行文件。</li></ol><p>gcc hello.o –o hello.out</p><ol start="2"><li>执行文件</li></ol><p>.&#x2F;hello.out</p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724722784157.jpg" alt="img"> </p><h2 id="7-5、一次性完成"><a href="#7-5、一次性完成" class="headerlink" title="7.5、一次性完成"></a>7.5、一次性完成</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>输入命令，可以一次性完成上述步骤</p><p>gcc hello.c -o hello3.out</p><p>运行编译后的可执行程序.&#x2F;hello</p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724722784157.jpg" alt="img"> </p><h2 id="7-6、多个文件的编译"><a href="#7-6、多个文件的编译" class="headerlink" title="7.6、多个文件的编译"></a>7.6、多个文件的编译</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>现在有 3 个文件，分别是 main.c，print.c，print.h</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724722784157.jpg" alt="img"> </p><p><strong>1）</strong><em><strong>*多个文件一起编译*</strong></em><em><strong>*：*</strong></em></p><p>gcc print.c main.c -o main_print</p><p><em><strong>*执行生成文件*</strong></em></p><p><em><strong>*2）分别编译各个源文件，再对编译后输出的目标文件（.o）链接*</strong></em></p><p>gcc -c print.c -o print.o</p><p>gcc -c main.c -o main.o</p><p>gcc print.o main.o -o main_print</p><p><em><strong>*执行生成文件*</strong></em></p><p><strong>2</strong><strong>.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724722784157.jpg" alt="img"> </p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml14832\wps13.jpg" alt="img"><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724722784157.jpg" alt="img"> </p><p>1）多个文件一起编译：</p><p>gcc print.c main.c -o main_print</p><p>执行生成文件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724722784157.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724722784157.jpg" alt="img"> </p><p>2）分别编译各个源文件，再对编译后输出的目标文件（.o）链接</p><p>gcc -c print.c -o print.o</p><p>gcc -c main.c -o main.o</p><p>gcc print.o main.o -o main_print</p><p>执行生成文件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17-1724722784157.jpg" alt="img"> </p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>题目6中，如果头文件和源文件不在一同目录中，如何解决？</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18-1724722784157.jpg" alt="img"> </p><p>头文件所在目录：</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19-1724722784157.jpg" alt="img"> </p><p>主要是要加 -I 指定头文件目录：</p><p>gcc print.c main.c -o main_print -I myInclude</p><p>运行文件</p><p>\2. <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>源文件所在目录：<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20-1724722784157.jpg" alt="img"></p><p>头文件所在目录：</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps21-1724722784157.jpg" alt="img"> </p><p>主要是要加 -I 指定头文件目录：</p><p>gcc print.c main.c -o main_print -I myInclude</p><p>运行文件</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps22-1724722784157.jpg" alt="img"> </p><h2 id="7-7、makefile-Makefile"><a href="#7-7、makefile-Makefile" class="headerlink" title="7.7、makefile(Makefile)"></a>7.7、makefile(Makefile)</h2><p><strong>题目****7</strong> <strong>–</strong> <strong>makefile(Makefile)</strong></p><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>在使用gcc命令时，一个工程又有多个文件（比如100个文件），如果按照上述编译方法，往往需要输入很多指令，而且修改文件也不方便，因此引入makefile文件解决该问题。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23-1724722784157.jpg" alt="img"> </p><ol><li><strong>当前路径下内容如下：</strong></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24-1724722784157.jpg" alt="img"> </p><ol start="2"><li><strong>建立上图中makefile文件：</strong></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25-1724722784157.jpg" alt="img"> </p><p>#main是需要生成的目标文件名，它依赖main.o print.o</p><p>main:main.o print.o</p><p>#gcc命令，生成main,语句前面要用TAB</p><p>​gcc main.o input.o cal.o -o main</p><p>#main.o是目标文件，依赖main.c文件，通过gcc -c main.c生成main.o文件</p><p>main.o:main.c</p><p>​gcc -c main.c</p><p>print.o:print.c</p><p>​gcc -c print.c</p><p>#增加clean命令</p><p>clean:</p><p>#删除所有以.o结尾的文件，使用了通配符*</p><p>​rm *.o</p><p>#删除可执行文件main</p><p>​rm main</p><ol start="3"><li><strong>使用</strong></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps26-1724722784157.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps27-1724722784157.jpg" alt="img"> </p><p>\2. <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>当前路径下内容：</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps28-1724722784157.jpg" alt="img"> </p><p><strong>makefile内容：</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps29-1724722784157.jpg" alt="img"> </p><p><strong>使用：</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps30-1724722784157.jpg" alt="img"> </p><p><strong>清除：</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps31-1724722784157.jpg" alt="img"> </p><h1 id="八、shell程序设计"><a href="#八、shell程序设计" class="headerlink" title="八、shell程序设计"></a>八、shell程序设计</h1><h2 id="8-1、定义变量"><a href="#8-1、定义变量" class="headerlink" title="8.1、定义变量"></a>8.1、定义变量</h2><p><strong>1.</strong> <strong>实验内容</strong></p><p>变量的定义，变量的引用，并输出值</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>&#x2F;&#x2F;文字或结果截图</p><p>\1. 创建以.sh结尾的文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps1-1724723044919.jpg" alt="img"></p><p>\2. 修改文件权限<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps2-1724723044919.jpg" alt="img"></p><p>\3. 输出文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps3-1724723044919.jpg" alt="img"></p><p>\4. 在命令行定义一个整型<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps4-1724723044919.jpg" alt="img"></p><p>\5. 输出整型<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps5-1724723044919.jpg" alt="img"></p><h2 id="8-2、特定变量"><a href="#8-2、特定变量" class="headerlink" title="8.2、特定变量"></a>8.2、特定变量</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><ol><li><p>编写脚本，测试特定变量。</p></li><li><p>设置可执行权限。</p></li><li><p>执行脚本，查看结果。</p></li></ol><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps6-1724723044919.jpg" alt="img"> </p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、新建脚本<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps7-1724723044919.jpg" alt="img"></p><p>2、设置权限<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps8-1724723044919.jpg" alt="img"></p><p>3、执行文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps9-1724723044919.jpg" alt="img"></p><h2 id="8-3、if-语句"><a href="#8-3、if-语句" class="headerlink" title="8.3、if 语句"></a>8.3、if 语句</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>判断参数是否少于3个</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps10-1724723044919.jpg" alt="img"> </p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、编写脚本<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps11-1724723044920.jpg" alt="img"></p><p>2、改权限<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps12-1724723044920.jpg" alt="img"></p><p>3、执行<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps13-1724723044920.jpg" alt="img"></p><h2 id="8-4、两数求和"><a href="#8-4、两数求和" class="headerlink" title="8.4、两数求和"></a>8.4、两数求和</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>计算由键盘输⼊的2个数的和值。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps14-1724723044920.jpg" alt="img"> </p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps15-1724723044920.jpg" alt="img"> </p><h2 id="8-5、删除文件"><a href="#8-5、删除文件" class="headerlink" title="8.5、删除文件"></a>8.5、删除文件</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>利⽤for循环将当前⽬录下的**.c**⽂件删除</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps16-1724723044920.jpg" alt="img"> </p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps17-1724723044920.jpg" alt="img"> </p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps18-1724723044920.jpg" alt="img"> </p><h2 id="8-6、求所有参数的和"><a href="#8-6、求所有参数的和" class="headerlink" title="8.6、求所有参数的和"></a>8.6、求所有参数的和</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>编写一个Shell脚本，它带有若干数字作为参数，脚本的功能是求参数和。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps19-1724723044920.jpg" alt="img"> </p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、新建脚本<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps20-1724723044920.jpg" alt="img"></p><p>2、改权限，执行<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps21-1724723044920.jpg" alt="img"></p><h2 id="8-7、求1-100的和"><a href="#8-7、求1-100的和" class="headerlink" title="8.7、求1-100的和"></a>8.7、求1-100的和</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>编写一个Shell脚本，它带有若干数字作为参数，脚本的功能是求参数和。</p><p><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps22-1724723044920.jpg" alt="img"> </p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、新建脚本文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps23-1724723044920.jpg" alt="img"></p><p>2、改权限<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps24-1724723044920.jpg" alt="img"></p><p>3、执行<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps25-1724723044920.jpg" alt="img"></p><h2 id="8-8、统计文件数量"><a href="#8-8、统计文件数量" class="headerlink" title="8.8、统计文件数量"></a>8.8、统计文件数量</h2><p><strong>1</strong><strong>.</strong> <strong>实验内容</strong></p><p>编写一个Shell脚本，统计当前目录下所有后缀为”.c”的文件数量。</p><p>参考 题目 4 5 6</p><p><strong>2.</strong> <strong>实验结果与分析（文字或实验结果截图）</strong></p><p>1、编写脚本<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps26-1724723044920.jpg" alt="img"></p><p>2、修改权限<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps27-1724723044920.jpg" alt="img"></p><p>3、执行文件<br><img src="/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/wps28-1724723044920.jpg" alt="img"></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Linux/">Linux</category>
      
      
      <comments>http://example.com/2024/08/27/Linux/Linux%E5%AE%9E%E9%AA%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux_基础(三)-常用软件安装</title>
      <link>http://example.com/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</link>
      <guid>http://example.com/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</guid>
      <pubDate>Tue, 27 Aug 2024 01:08:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;相关命令&quot;&gt;&lt;a href=&quot;#相关命令&quot; class=&quot;headerlink&quot; title=&quot;相关命令&quot;&gt;&lt;/a&gt;相关命令&lt;/h1&gt;&lt;h2 id=&quot;·-whereis-which&quot;&gt;&lt;a href=&quot;#·-whereis-which&quot; class=&quot;header</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><h2 id="·-whereis-which"><a href="#·-whereis-which" class="headerlink" title="· whereis&amp;which"></a>· whereis&amp;which</h2><p>whereis: 可以帮助快速的找到某个命令的二进制文件、帮助页面、源码所在路径。</p><p>which: 也是可以显示命令的二进制文件的路,shows the full path of (shell) commands.</p><h2 id="·-systemctl-service-sv-servicename"><a href="#·-systemctl-service-sv-servicename" class="headerlink" title="· systemctl &amp;service (sv&#x3D;&#x3D;servicename)"></a>· systemctl &amp;service (sv&#x3D;&#x3D;servicename)</h2><p>添加开机启动 systemctl enable sv </p><p>禁止开机启动 systemctl disable sv </p><p>查看服务文件内容 systemctl cat sv</p><p>-———————–</p><p>立即启动服务 systemctl start sv service sv start</p><p>立即停止服务 systemctl stop sv service sv stop</p><p>重新启动服务 systemctl restart sv service sv restart </p><p>重新加载服务配置 systemctl reload sv service sv reload </p><p>查看服务状态 systemctl status sv service sv status </p><h2 id="·-查看端口占用"><a href="#·-查看端口占用" class="headerlink" title="· 查看端口占用"></a><strong>·</strong> 查看端口占用</h2><p>netstat -anp |grep :80 ,不存在 netstat 可 yum install net-tools</p><p>或 ss -anp | grep :80</p><h2 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h2><p>开放端口 firewall-cmd –permanent –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp </p><p>开放多个端口 firewall-cmd –permanent –zone&#x3D;public –add-port&#x3D;8080-8083&#x2F;tcp</p><p>关闭某个端口 firewall-cmd –permanent –zone&#x3D;public –remove-port&#x3D;81&#x2F;tcp</p><p>修改后重载配置 firewall-cmd –reload</p><p>列出开放的端口 firewall-cmd –list-ports </p><h2 id="yum-相关命令"><a href="#yum-相关命令" class="headerlink" title="yum 相关命令"></a>yum 相关命令</h2><p>设置yum源 : 参考阿里 或华为镜像中说明 </p><p>安装 yum install softwarename     </p><p>卸载 yum remove softwarename     </p><p>列出所有 yum list package</p><p>列出已有 yum list installed</p><p>查找 yum serach jdk</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>对应 .tar 文件：</p><p>解包：tar xvf FileName.tar</p><p>打包：tar cvf FileName.tar DirName</p><p>.tar.gz 和 .tgz文件：</p><p>解压：tar -zxvf FileName.tar.gz</p><p>压缩：tar -zcvf FileName.tar.gz DirName</p><h1 id="任务1：安装-apache"><a href="#任务1：安装-apache" class="headerlink" title="任务1：安装 apache"></a>任务1：安装 apache</h1><p>安装： yum install httpd</p><p>进入目录： cd &#x2F;var&#x2F;www&#x2F;html 建立 自己index.html </p><p>启动服务 systemctl start httpd</p><p>虚拟机测试： curl 127.0.0.1</p><p>真机测试： 浏览器</p><p>如果真机不成功， 可以开放防火墙80 端口，或关闭防火墙，测试 </p><p>systemctl stop firewalld</p><p>-—————————————</p><p>systemctl start firewalld</p><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;80&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>如果端口被占用. 查看80</p><p>netstat -anp |grep :80 ，也可以用ps aux 查看</p><p>netstat 不存在 ，则安装 yum install net-tools 即可。</p><h1 id="任务2：安装pyton3"><a href="#任务2：安装pyton3" class="headerlink" title="任务2：安装pyton3"></a>任务2：安装pyton3</h1><p>yum -y install python3 </p><p>python3 -version 查看版本</p><p>which python3 可以看命令位置 </p><p>如果不想要3.6 可以去官网或镜像下载</p><h1 id="任务3：安装jdk-8"><a href="#任务3：安装jdk-8" class="headerlink" title="任务3：安装jdk 8"></a>任务3：安装jdk 8</h1><p>yum search java | grep 1.8</p><p>yum install java-1.8.0-openjdk-devel.x86_64</p><p>yum install java-1.8.0-openjdk.x86_64</p><h1 id="任务4：-tomcat"><a href="#任务4：-tomcat" class="headerlink" title="任务4： tomcat"></a>任务4： tomcat</h1><p><a href="https://repo.huaweicloud.com/apache/tomcat/tomcat-9/v9.0.10/bin/apache-tomcat-9.0.10-deployer.tar.gz">wget https://mirrors.aliyun.com/apache/tomcat/tomcat-9/v9.0.62/bin/apache-tomcat-9.0.62.tar.gz</a></p><p>tar -zxvf ****</p><p>进bin 执行.&#x2F;startup.sh</p><p>192.168.231.139:8080</p><h1 id="任务5：-安装nginx"><a href="#任务5：-安装nginx" class="headerlink" title="任务5： 安装nginx"></a>任务5： 安装nginx</h1><p>独立源地址： <a href="http://nginx.org/">nginx.org</a></p><p>安装依赖： yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</p><p>下载： wget <a href="http://nginx.org/download/nginx-1.20.2.tar.gz">http://nginx.org/download/nginx-1.20.2.tar.gz</a></p><p>解压： tar -zxvf nginx-1.20.2.tar.gz</p><p>进入目录： cd nginx-1.20.2</p><p>安装配置： .&#x2F;configure </p><p>（提示 &#x2F;usr&#x2F;local&#x2F;nginx 目录）</p><p>编译安装： make </p><p>make install</p><p>进入目录： cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p><p>启动： .&#x2F;nginx</p><p>停止： .&#x2F;nginx -s stop</p><p>重新加载： .&#x2F;nginx -s reload</p><p>虚拟机测试： curl 127.0.0.1</p><p>真机测试： 浏览器</p><p>如果真机不成功， 可以开放防火墙端口，或关闭防火墙，测试 </p><p>可以进入 cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html 目录下编写自己的html 静态文件</p><h1 id="任务6：-安装-MySQL"><a href="#任务6：-安装-MySQL" class="headerlink" title="任务6： 安装 MySQL"></a>任务6： 安装 MySQL</h1><p>1、下载文件</p><p>wget <a href="https://mirrors.aliyun.com/mysql/MySQL-8.0/mysql-8.0.26-1.el7.x86_64.rpm-bundle.tar">https://mirrors.aliyun.com/mysql/MySQL-8.0/mysql-8.0.26-1.el7.x86_64.rpm-bundle.tar</a></p><p>或下载到本机，在上传到服务器</p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps1.jpg" alt="img"> </p><p>1.1 删除系统自带的 mariadb</p><p>rpm -e mariadb-libs-5.5.68-1.el7.centos.x86_64 –nodeps</p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps2.jpg" alt="img"> </p><p>2、解压缩</p><p>tar -xvf mysql-8.0.26-1.el7.x86_64.rpm-bundle.tar </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps3.jpg" alt="img"> </p><p>3、安装 common、libs、client、server</p><p>安装命令行</p><p>rpm -ivh mysql-community-common-8.0.26-1.el7.x86_64.rpm –nodeps –force </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps4.jpg" alt="img"> </p><p>rpm -ivh mysql-community-libs-8.0.26-1.el7.x86_64.rpm –nodeps –force</p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps5.jpg" alt="img"> </p><p>rpm -ivh mysql-community-client-8.0.26-1.el7.x86_64.rpm –nodeps –force</p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps6.jpg" alt="img"> </p><p>rpm -ivh mysql-community-server-8.0.26-1.el7.x86_64.rpm –nodeps –force </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps7.jpg" alt="img"> </p><p>4、初始化 MySQL</p><p>mysqld –initialize </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps8.jpg" alt="img"> </p><p>7、授权防火墙</p><p>chown mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql -R; 改变用户和用户组</p><p>systemctl start mysqld.service; </p><p>systemctl enable mysqld; 应该是默的，如果不是加上这句 </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps9.jpg" alt="img"> </p><p>8、查看数据库的初始化密码</p><p>cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep password </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps10.jpg" alt="img"> </p><p>9、登录数据库</p><p>mysql -uroot -p </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps11.jpg" alt="img"> </p><p>10、修改密码</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’; </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps12.jpg" alt="img"> </p><p>11、使用新密码登录</p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps13.jpg" alt="img"> </p><p>12、开启远程访问</p><p>create user ‘root‘@’%’ identified with mysql_native_password by ‘root’;</p><p>grant all privileges on <em>.</em> to ‘root‘@’%’ with grant option;</p><p>flush privileges; </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps14.jpg" alt="img"> </p><p>13、开放 3306 端口</p><p>firewall-cmd –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –permanent</p><p>systemctl restart firewalld.service</p><p>firewall-cmd –reload </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps15.jpg" alt="img"> </p><p>14、MySQL 安装默认使用美国的时区，北京时间比美国晚 8 小时</p><p>set global time_zone&#x3D;’+8:00’; </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps16.jpg" alt="img"> </p><p>15、创建数据表</p><p>create database test character set utf8 collate utf8_general_ci;</p><p>use test;</p><p>create table user( id int primary key auto_increment, name varchar(22), birthday datetime ); insert into user(name, birthday) VALUES (‘小明’,’1999-01-01’); insert into user(name, birthday) VALUES (‘小红’,’2000-01-01’); </p><p><img src="/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/wps17.jpg" alt="img"> </p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Linux/">Linux</category>
      
      
      <comments>http://example.com/2024/08/27/Linux/Linux%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenCV(二)-图像书品的加载与显示</title>
      <link>http://example.com/2024/08/26/OpenCV/OpenCV(%E4%BA%8C)-%E5%9B%BE%E5%83%8F%E4%B9%A6%E5%93%81%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%98%BE%E7%A4%BA/</link>
      <guid>http://example.com/2024/08/26/OpenCV/OpenCV(%E4%BA%8C)-%E5%9B%BE%E5%83%8F%E4%B9%A6%E5%93%81%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%98%BE%E7%A4%BA/</guid>
      <pubDate>Mon, 26 Aug 2024 07:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、课程题目&quot;&gt;&lt;a href=&quot;#一、课程题目&quot; class=&quot;headerlink&quot; title=&quot;一、课程题目&quot;&gt;&lt;/a&gt;一、课程题目&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;车辆检测&lt;ul&gt;
&lt;li&gt;窗口的展示&lt;/li&gt;
&lt;li&gt;图像&amp;#x2F;视频的加载&lt;/li&gt;
&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、课程题目"><a href="#一、课程题目" class="headerlink" title="一、课程题目"></a>一、课程题目</h1><ul><li>车辆检测<ul><li>窗口的展示</li><li>图像&#x2F;视频的加载</li><li>基本图形的绘制</li><li>车辆识别</li></ul></li></ul><h1 id="二、创建显示窗口"><a href="#二、创建显示窗口" class="headerlink" title="二、创建显示窗口"></a>二、创建显示窗口</h1><ul><li>namedWindow() 窗口命名</li><li>imshow() 显示窗口</li><li>destroyAllWindows() 销毁窗口</li><li>resizeWindow</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2  <span class="comment"># 导入 OpenCV 库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个名为 &#x27;new&#x27; 的窗口，并设置窗口模式为可调节大小</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;new&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将窗口 &#x27;new&#x27; 的大小调整为 640x480 像素</span></span><br><span class="line">cv2.resizeWindow(<span class="string">&#x27;new&#x27;</span>, <span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示内容在窗口 &#x27;new&#x27; 中，这里的参数 0 实际上是不合适的，通常应传入一张图像或一个数组</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;new&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户按键，直到有按键按下时才继续执行。返回值是按键的 ASCII 码</span></span><br><span class="line">key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查按键是否为 &#x27;q&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (key == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>)):</span><br><span class="line">    <span class="comment"># 关闭所有创建的窗口，释放资源</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、加载图片"><a href="#三、加载图片" class="headerlink" title="三、加载图片"></a>三、加载图片</h1><ul><li>imread<ul><li>im 是image的缩写</li><li>imread(path, flag)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;3.3_image&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;D:/0.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;3.3_image&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>))</span><br><span class="line"><span class="comment"># waitKey返回值是16位，取最后8位</span></span><br><span class="line"><span class="keyword">if</span> (key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">11111</span>)</span><br><span class="line">    <span class="comment"># 获取q键，直接释放资源</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="四、加载图片问题"><a href="#四、加载图片问题" class="headerlink" title="四、加载图片问题"></a>四、加载图片问题</h1><p>语法报错：</p><p><img src="/2024/08/26/OpenCV/OpenCV(%E4%BA%8C)-%E5%9B%BE%E5%83%8F%E4%B9%A6%E5%93%81%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%98%BE%E7%A4%BA/image-20240826171511878.png" alt="image-20240826171511878"></p><p>路径问题：</p><p>Windows   <code>D:\\uuu\\xxx.jpg</code></p><p>linux&#x2F;Mac: <code>/Users/x.jpt</code></p><h1 id="五、保存文件"><a href="#五、保存文件" class="headerlink" title="五、保存文件"></a>五、保存文件</h1><ul><li>imwrite(name, img)<ul><li>name 要保存的文件名</li><li>img 是Mat类型</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;3.3_image&#x27;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;D:/0.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;3.3_image&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">    key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># waitKey返回值是16位，取最后8位</span></span><br><span class="line">    <span class="keyword">if</span> (key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> (key &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sss&#x27;</span>)</span><br><span class="line">        <span class="comment"># 当用户点击s时，保存为1.jpg</span></span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;D:\\1.jpg&#x27;</span>, img)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;other&#x27;</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h1 id="六、从摄像头采集视频"><a href="#六、从摄像头采集视频" class="headerlink" title="六、从摄像头采集视频"></a>六、从摄像头采集视频</h1><h1 id="七、从多媒体文件中读取视频帧"><a href="#七、从多媒体文件中读取视频帧" class="headerlink" title="七、从多媒体文件中读取视频帧"></a>七、从多媒体文件中读取视频帧</h1><h1 id="八、将视频数据录制成多媒体文件"><a href="#八、将视频数据录制成多媒体文件" class="headerlink" title="八、将视频数据录制成多媒体文件"></a>八、将视频数据录制成多媒体文件</h1><h1 id="九、代码优化"><a href="#九、代码优化" class="headerlink" title="九、代码优化"></a>九、代码优化</h1><h1 id="十、控制鼠标"><a href="#十、控制鼠标" class="headerlink" title="十、控制鼠标"></a>十、控制鼠标</h1><h1 id="十一、TrackBat控件"><a href="#十一、TrackBat控件" class="headerlink" title="十一、TrackBat控件"></a>十一、TrackBat控件</h1>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/OpenCV/">OpenCV</category>
      
      
      <comments>http://example.com/2024/08/26/OpenCV/OpenCV(%E4%BA%8C)-%E5%9B%BE%E5%83%8F%E4%B9%A6%E5%93%81%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%98%BE%E7%A4%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VScode</title>
      <link>http://example.com/2024/08/26/%E8%BD%AF%E4%BB%B6/VScode/VScode/</link>
      <guid>http://example.com/2024/08/26/%E8%BD%AF%E4%BB%B6/VScode/VScode/</guid>
      <pubDate>Mon, 26 Aug 2024 07:07:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;官网：&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接点击下一步安装即可&lt;/p&gt;
&lt;p&gt;vscode使用git&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http</description>
        
      
      
      
      <content:encoded><![CDATA[<p>官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>直接点击下一步安装即可</p><p>vscode使用git</p><p><a href="https://blog.csdn.net/weixin_38023551/article/details/105785223">VSCode中的git使用篇_vscode git-CSDN博客</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/VScode/">VScode</category>
      
      
      <comments>http://example.com/2024/08/26/%E8%BD%AF%E4%BB%B6/VScode/VScode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mingw</title>
      <link>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/</link>
      <guid>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/</guid>
      <pubDate>Thu, 22 Aug 2024 08:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）&quot;&gt;&lt;a href=&quot;#下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）&quot; class=&quot;headerlink&quot; t</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）"><a href="#下载安装MinGW-w64详细步骤（c-c-的编译器gcc的windows版，win10真实可用）" class="headerlink" title="下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）"></a>下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）</h1><p><a href="https://blog.csdn.net/jjxcsdn/article/details/123058745">下载安装MinGW-w64详细步骤（c&#x2F;c++的编译器gcc的windows版，win10真实可用）-CSDN博客</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/mingw/">mingw</category>
      
      
      <comments>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/MINGW/mingw/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typora</title>
      <link>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/</link>
      <guid>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/</guid>
      <pubDate>Thu, 22 Aug 2024 08:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;0-Typora&quot;&gt;&lt;a href=&quot;#0-Typora&quot; class=&quot;headerlink&quot; title=&quot;0 Typora&quot;&gt;&lt;/a&gt;0 Typora&lt;/h1&gt;&lt;p&gt;基础Typora是一款&lt;strong&gt;支持实时预览的Markdown文本编辑器&lt;/stron</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="0-Typora"><a href="#0-Typora" class="headerlink" title="0 Typora"></a>0 Typora</h1><p>基础Typora是一款<strong>支持实时预览的Markdown文本编辑器</strong>。它有OS X、Windows、Linux三个平台的版本，且<strong>完全免费。</strong></p><h2 id="0-1-Markdown"><a href="#0-1-Markdown" class="headerlink" title="0.1 Markdown"></a>0.1 Markdown</h2><p>Markdown 是用来编写结构化文档的一种纯文本模式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度 的格式排版。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较收到认可的是 GFM标准，它是由著名代码托管网站 Github 所制定的。 Typora 主要使用的是 GFM 标准。</p><h1 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a>一、基本知识</h1><h2 id="1-0-打字机模式和专注模式"><a href="#1-0-打字机模式和专注模式" class="headerlink" title="1.0 打字机模式和专注模式"></a>1.0 打字机模式和专注模式</h2><p>[打字机模式]使得你所编辑的那一行永远处于屏幕正中。</p><p>[专注模式] 使你正在编辑的哪一行保留颜色，而其他行的字体呈灰色</p><p>你可以在 $视图-专注模式 &#x2F; 打字机模式$ 中勾选使用这两个模式</p><h2 id="1-1-空格和换行"><a href="#1-1-空格和换行" class="headerlink" title="1.1 空格和换行"></a>1.1 空格和换行</h2><p>Typora 在空格与换行部分主要是 使用 CommonMark 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><strong>空格</strong>：在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个  <code>\</code>转义符，或者直接使用 HTML风格的<code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行</strong>：需要说明的是，在 Markdown 语法下，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在Typora 中，你可以通过 <code>shift + Enter</code>完成一次软换行，软换行只在编辑界面可见，当文本导出时换行会省略。</li><li>**硬换行： **你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li></ul><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105094332841.png" alt="image-20211105094332841"></p><h2 id="1-2-emoji-表情"><a href="#1-2-emoji-表情" class="headerlink" title="1.2  emoji 表情"></a>1.2  emoji 表情</h2><p>在 Typora 中，你可以用 <code>:emoji:</code>的形式来打出 emoji，软件会自动给出图形的提示。</p><p>:horse:</p><h2 id="1-3-学术文档编辑器"><a href="#1-3-学术文档编辑器" class="headerlink" title="1.3 学术文档编辑器"></a>1.3 学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p><p><strong>LaTex</strong></p><p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ol><p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 &#96;&#96;&#96;&#96;&#96; 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/51bf2f290592e1ddbadb95765c04f297-1636077212750.png" alt="img"><strong>链接引用与脚注</strong></h3><p>**链接引用 **类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p>**脚注 **在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="  文件系统"></a><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/5f82606e6d89fe1eb24705c4ca6b895d.png" alt="img">  文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。</li></ul><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/ba295f21f0b71646bb36a0517e868ced.png" alt="img"></p><h1 id="二、数字符号"><a href="#二、数字符号" class="headerlink" title="二、数字符号"></a>二、数字符号</h1><h2 id="2-1-上标、下标、求和、括号"><a href="#2-1-上标、下标、求和、括号" class="headerlink" title="2.1 上标、下标、求和、括号"></a>2.1 上标、下标、求和、括号</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>上标</td><td><code>x^2</code>、<code>x^y</code>、<code>e^3</code></td><td>$x^2、x^y、e^3$</td></tr><tr><td>下标</td><td><code>x_0</code>、<code>a_1</code>、<code>T_1</code></td><td>$x_0、a_1、T_1$</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>$\sum$</td></tr><tr><td>求和上下标</td><td>\sum_0^3 、\sum\limits_0^{\infty} 、\sum\limits_{-\infty}^{\infty}</td><td>$\sum_0^3、\sum\limits_0^{\infty}、\sum\limits_{-\infty}^{\infty}$</td></tr><tr><td>中括号</td><td><code>[s(s+1)-(s-1)(s-2)]</code></td><td>$[s(s+1)-(s-1)(s-2)]$</td></tr><tr><td>花括号</td><td><code>\lbrace x-y \rbrace</code></td><td>$\lbrace x-y \rbrace$</td></tr></tbody></table><h2 id="2-2-三角函数、指数、对数"><a href="#2-2-三角函数、指数、对数" class="headerlink" title="2.2 三角函数、指数、对数"></a>2.2 三角函数、指数、对数</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>sin</td><td><code>\sin(x)</code></td><td>$\sin(x)$</td></tr><tr><td>cos</td><td><code>\cos(x)</code></td><td>$\cos(x)$</td></tr><tr><td>tan</td><td><code>\tan(x)</code></td><td>$\tan(x)$</td></tr><tr><td>log</td><td><code>\log_2 10</code></td><td>$\log_2 10$</td></tr><tr><td>ln</td><td><code>\ln2</code></td><td>$\ln2$</td></tr></tbody></table><h2 id="2-3-运算符"><a href="#2-3-运算符" class="headerlink" title="2.3 运算符"></a>2.3 运算符</h2><table><thead><tr><th></th><th><strong>markdown语法（输入在两个$$之间）</strong></th><th><strong>显示</strong></th></tr></thead><tbody><tr><td>乘</td><td><code>\times</code></td><td>$\times$</td></tr><tr><td>除</td><td><code>\div</code></td><td>$\div$</td></tr><tr><td>加减</td><td><code>\pm</code></td><td>$\pm$</td></tr><tr><td>减加</td><td><code>\mp</code></td><td>$\mp$</td></tr><tr><td>求和</td><td><code>\sum</code></td><td>$\sum$</td></tr><tr><td>求积</td><td><code>\prod</code></td><td>$\prod$</td></tr><tr><td>微分</td><td><code>\partial</code></td><td>$\partial$</td></tr><tr><td>积分</td><td><code>\int</code>、<code>\displaystyle\int</code></td><td>$\int$、$\displaystyle\int $</td></tr><tr><td>不等于</td><td><code>\neq</code></td><td>$\neq$</td></tr><tr><td>大于等于</td><td><code>\geq</code></td><td>$\geq$</td></tr><tr><td>小于等于</td><td><code>\leq</code></td><td>$\leq$</td></tr><tr><td>约等于</td><td><code>\approx</code></td><td>$\approx$</td></tr><tr><td>不大于等于</td><td><code>x+y  \ngeq z</code></td><td>$x+y  \ngeq z$</td></tr><tr><td>点乘</td><td><code>a \cdot b</code></td><td>$ a \cdot b$</td></tr><tr><td>星乘</td><td><code>a \ast b</code></td><td>$a \ast b$</td></tr><tr><td>分式</td><td><code>\frac&#123;y&#125;&#123;x&#125;</code>、<code>\frac&#123;1&#125;&#123;x+1&#125;</code></td><td>$\frac{y}{x}、\frac{1}{x+1}$</td></tr></tbody></table><h2 id="2-4-导数，省略号"><a href="#2-4-导数，省略号" class="headerlink" title="2.4 导数，省略号"></a>2.4 导数，省略号</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>无穷</td><td><code>\infty</code></td><td>$\infty$</td></tr><tr><td>矢量</td><td><code>\vec&#123;a&#125;</code></td><td>$\vec{a}$</td></tr><tr><td>一阶导数</td><td><code>\dot&#123;x&#125;</code></td><td>$\dot{x}$</td></tr><tr><td>二阶导数</td><td><code>\ddot&#123;x&#125;</code></td><td>$\ddot{x}$</td></tr><tr><td>算数平均值</td><td><code>\bar&#123;a&#125;</code></td><td>$\bar{a}$</td></tr><tr><td>概率分布</td><td><code>\hat&#123;a&#125;</code></td><td>$\hat{a}$</td></tr><tr><td>虚数 i、j</td><td><code>\imath</code>、<code>\jmath</code></td><td>$\imath$  $\jmath$</td></tr><tr><td>四种省略符号</td><td><code>\ldots</code> <code>\cdots</code> <code>vdots</code> <code>\ddots</code></td><td>$\dots$  $\cdots$  $\vdots$ $\ddots$</td></tr></tbody></table><h2 id="2-5-积分、微分"><a href="#2-5-积分、微分" class="headerlink" title="2.5 积分、微分"></a>2.5 积分、微分</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>平均数运算</td><td><code>\overline&#123;xyz&#125;</code></td><td>$\overline{xyz}$</td></tr><tr><td>开二次方运算</td><td><code>\sqrt&#123;x&#125;</code></td><td>$\sqrt{x}$</td></tr><tr><td>极限运算</td><td><code>\lim^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;y&#125;&#123;x&#125;&#125;</code></td><td>$\lim^{x \to \infty}_{y \to 0}{\frac{y}{x}}$</td></tr><tr><td>求和运算</td><td><code>\sum^&#123;x \to \infty&#125;_&#123;y \to 0&#125;&#123;\frac&#123;y&#125;&#123;x&#125;&#125;</code></td><td>$\sum^{x \to \infty}_{y \to 0}{\frac{y}{x}}$</td></tr><tr><td>积分运算</td><td><code>\int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;</code></td><td>$\int^{\infty}_{0}{xdx}$</td></tr><tr><td></td><td><code>\displaystyle \int^&#123;\infty&#125;_&#123;0&#125;&#123;xdx&#125;</code></td><td>$\displaystyle \int^{\infty}_{0}{xdx}$</td></tr><tr><td>微分运算</td><td><code>\frac&#123;\partial x&#125;&#123;\partial y&#125;</code></td><td>$\frac{\partial x}{\partial y}$</td></tr></tbody></table><h2 id="2-6-集合运算"><a href="#2-6-集合运算" class="headerlink" title="2.6 集合运算"></a>2.6 集合运算</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>属于</td><td><code>\in</code></td><td>$\in$</td></tr><tr><td>不属于</td><td><code>\notin</code></td><td>$\notin$</td></tr><tr><td>包含于</td><td><code>\subset</code> <code>\supset</code></td><td>$\subset$ $\supset$</td></tr><tr><td>真包含于</td><td><code>\subseteq</code> <code>\supseteq</code></td><td>$\subseteq$ $\supseteq$</td></tr><tr><td>并集</td><td><code>\cup</code></td><td>$\cup$</td></tr><tr><td>交集</td><td><code>\cap</code></td><td>$\cap$</td></tr><tr><td>差集</td><td><code>\setminus</code></td><td>$\setminus$</td></tr><tr><td>同或</td><td><code>\bigodot</code></td><td>$\bigodot$</td></tr><tr><td>同与</td><td><code>\bigotimes</code></td><td>$\bigotimes$</td></tr><tr><td>异或</td><td><code>\bigoplus</code></td><td>$\bigoplus$</td></tr><tr><td>实数集合</td><td><code>\mathbb&#123;R&#125;</code></td><td>$\mathbb{R}$</td></tr><tr><td>自然数集合</td><td><code>\mathbb&#123;Z&#125;</code></td><td>$\mathbb{Z}$</td></tr><tr><td>析取联结词</td><td><code>$\vee$</code></td><td>$\vee$</td></tr><tr><td>合取联结词</td><td><code>$\wedge$</code></td><td>$\wedge$</td></tr><tr><td>蕴涵连接词</td><td><code>$\rightarrow$</code></td><td>$\rightarrow$</td></tr></tbody></table><h2 id="2-7、箭头"><a href="#2-7、箭头" class="headerlink" title="2.7、箭头"></a>2.7、箭头</h2><table><thead><tr><th align="center">Markdown语法</th><th>形状</th></tr></thead><tbody><tr><td align="center"><code>$\uparrow$</code></td><td>$\uparrow$</td></tr><tr><td align="center"><code>$\Uparrow&amp;</code></td><td>$\Uparrow$</td></tr><tr><td align="center"><code>&amp;\downarrow$</code></td><td>$\downarrow$</td></tr><tr><td align="center"><code>$\Downarrow$</code></td><td>$\Downarrow$</td></tr><tr><td align="center"><code>$\leftarrow$</code></td><td>$\leftarrow$</td></tr><tr><td align="center"><code>$\Leftarrow$</code></td><td>$\Leftarrow$</td></tr><tr><td align="center"><code>$\rightarrow$</code></td><td>$\rightarrow$</td></tr><tr><td align="center"><code>$\Rightarrow$</code></td><td>$\Rightarrow$</td></tr><tr><td align="center">$<code>\updownarrow$</code></td><td>$\updownarrow$</td></tr><tr><td align="center">$<code>\Updownarrow$</code></td><td>$\Updownarrow$</td></tr><tr><td align="center"><code>$\leftrightarrow$</code></td><td>$\leftrightarrow$</td></tr><tr><td align="center"><code>$\Leftrightarrow$</code></td><td>$\Leftrightarrow$</td></tr></tbody></table><hr><p>长箭头</p><table><thead><tr><th align="center">MarkDown</th><th>箭头形状</th></tr></thead><tbody><tr><td align="center"><code>$\longleftarrow$</code></td><td>$\longleftarrow$</td></tr><tr><td align="center"><code>$\Longleftarrow$</code></td><td>$\Longleftarrow$</td></tr><tr><td align="center"><code>$\longrightarrow$</code></td><td>$\longrightarrow$</td></tr><tr><td align="center"><code>$\Longrightarrow$</code></td><td>$\Longrightarrow$</td></tr><tr><td align="center"><code>$\longleftrightarrow$</code></td><td>$\longleftrightarrow$</td></tr><tr><td align="center"><code>$\Longleftrightarrow$</code></td><td>$\Longleftrightarrow$</td></tr></tbody></table><hr><p>其他箭头</p><table><thead><tr><th align="center">MarkDown</th><th>箭头形状</th></tr></thead><tbody><tr><td align="center"><code>$\twoheadrightarrow$</code></td><td>$\twoheadrightarrow$</td></tr><tr><td align="center">![\rightarrowtail](Typora文档.assets</td><td>$\rightarrowtail$</td></tr><tr><td align="center"><code>$\looparrowright$</code></td><td>$\looparrowright$</td></tr><tr><td align="center"><code>$\curvearrowright$</code></td><td>$\curvearrowright$</td></tr><tr><td align="center"><code>$\circlearrowright$</code></td><td>$\circlearrowright$</td></tr><tr><td align="center"><code>$\Rsh$</code></td><td>$\Rsh$</td></tr><tr><td align="center"><code>$\multimap$</code></td><td>$\multimap$</td></tr><tr><td align="center"><code>$\leftrightsquigarrow$</code></td><td>$\leftrightsquigarrow$</td></tr><tr><td align="center"><code>$\rightsquigarrow$</code></td><td>$\rightsquigarrow$</td></tr><tr><td align="center"><code>$\leadsto$</code></td><td>$\leadsto$</td></tr><tr><td align="center"><code>$\nearrow$</code></td><td>$\nearrow$</td></tr><tr><td align="center"><code>$\searrow$</code></td><td>$\searrow$</td></tr><tr><td align="center"><code>$\swarrow$</code></td><td>$\swarrow$</td></tr><tr><td align="center"><code>$\nwarrow$</code></td><td>$\nwarrow$</td></tr><tr><td align="center"><code>$\nleftarrow$</code></td><td>$\nleftarrow$</td></tr><tr><td align="center"><code>$\nLeftarrow$</code></td><td>$\nLeftarrow$</td></tr><tr><td align="center"><code>$\nrightarrow$</code></td><td>$\nrightarrow$</td></tr><tr><td align="center"><code>$\nRightarrow$</code></td><td>$\nRightarrow$</td></tr><tr><td align="center"><code>$\nleftrightarrow$</code></td><td>$\nleftrightarrow$</td></tr><tr><td align="center"><code>$\nLeftrightarrow$</code></td><td>$\nLeftrightarrow$</td></tr><tr><td align="center"><code>$\dashrightarrow$</code></td><td>$\dashrightarrow$</td></tr><tr><td align="center"><code>$\dashleftarrow$</code></td><td>$\dashleftarrow$</td></tr><tr><td align="center"><code>$\leftleftarrows$</code></td><td>$\leftleftarrows$</td></tr><tr><td align="center"><code>$\leftrightarrows$</code></td><td>$\leftrightarrows$</td></tr><tr><td align="center"><code>$\Lleftarrow$</code></td><td>$\Lleftarrow$</td></tr><tr><td align="center"><code>$\twoheadleftarrow$</code></td><td>$\twoheadleftarrow$</td></tr><tr><td align="center"><code>$\leftarrowtail</code>$</td><td>$\leftarrowtail$</td></tr><tr><td align="center"><code>$\looparrowleft$</code></td><td>$\looparrowleft$</td></tr><tr><td align="center"><code>$\curvearrowleft$</code></td><td>$\curvearrowleft$</td></tr></tbody></table><hr><table><thead><tr><th align="center">箭头形状</th><th>MarkDown</th></tr></thead><tbody><tr><td align="center"><code>$\circlearrowleft$</code></td><td>$\circlearrowleft$</td></tr><tr><td align="center"><code>$\Lsh$</code></td><td>$\Lsh$</td></tr><tr><td align="center"><code>$\mapsto$</code></td><td>$\mapsto$</td></tr><tr><td align="center"><code>$\hookleftarrow$</code></td><td>$\hookleftarrow$</td></tr><tr><td align="center"><code>$\hookrightarrow</code>$</td><td>$\hookrightarrow$</td></tr><tr><td align="center"><code>$\upharpoonright$</code></td><td>$\upharpoonright$</td></tr><tr><td align="center"><code>$\upharpoonleft$</code></td><td>$\upharpoonleft$</td></tr><tr><td align="center"><code>$\downharpoonright</code>$</td><td>$\downharpoonright$</td></tr><tr><td align="center"><code>$\downharpoonleft</code>$</td><td>$\downharpoonleft$</td></tr><tr><td align="center"><code>$\leftharpoonup$</code></td><td>$\leftharpoonup$</td></tr><tr><td align="center"><code>$\rightharpoonup$</code></td><td>$\rightharpoonup$</td></tr><tr><td align="center"><code>$\rightharpoondown$</code></td><td>$\rightharpoondown$</td></tr><tr><td align="center"><code>$\leftharpoondown$</code></td><td>$\leftharpoondown$</td></tr><tr><td align="center"><code>$\upuparrows$</code></td><td>$\upuparrows$</td></tr><tr><td align="center"><code>$\downdownarrows$</code></td><td>$\downdownarrows$</td></tr><tr><td align="center"><code>$\rightrightarrows$</code></td><td>$\rightrightarrows$</td></tr><tr><td align="center"><code>$\rightleftarrows$</code></td><td>$\rightleftarrows$</td></tr><tr><td align="center"><code>$\leftleftarrows$</code></td><td>$\leftleftarrows$</td></tr><tr><td align="center"><code>$\leftrightarrows$</code></td><td>$\leftrightarrows$</td></tr><tr><td align="center"><code>$\rightleftharpoons$</code></td><td>$\rightleftharpoons$</td></tr><tr><td align="center"><code>$\leftrightharpoons$</code></td><td>$\leftrightharpoons$</td></tr></tbody></table><h2 id="2-8-其他"><a href="#2-8-其他" class="headerlink" title="2.8 其他"></a>2.8 其他</h2><table><thead><tr><th></th><th>markdown语法（输入在两个$$之间）</th><th>显示</th></tr></thead><tbody><tr><td>加粗</td><td><code>\textbf&#123;Latex&#125;</code></td><td>$\textbf{Latex}$</td></tr><tr><td>波浪号</td><td><code>\sim</code></td><td>$\sim$</td></tr><tr><td></td><td></td><td></td></tr><tr><td>字体变大</td><td><code>\displaystyle</code></td><td>$\displaystyle\frac{x+y}{y+z}$</td></tr><tr><td>下划线</td><td><code>\underline</code></td><td>$\underline{x+y}$</td></tr><tr><td>上大括号</td><td><code>\overbrace&#123;&#125;</code></td><td>$\overbrace{x+y}$</td></tr><tr><td>下大括号</td><td><code>\underbrace&#123;&#125;</code></td><td>$\underbrace{x+y}$</td></tr><tr><td>不是斜体</td><td><code>\rm</code></td><td>$\rm e$</td></tr><tr><td>字母上方或下方加数字</td><td><code>$\mathop&#123;U&#125;^&#123;n&#125;\limits_&#123;i=1&#125;$</code></td><td>$\mathop{U}^{n}\limits_{i&#x3D;1}$</td></tr><tr><td>存在</td><td><code>\exists</code></td><td>$\exists$</td></tr><tr><td>任意</td><td><code>\forall</code></td><td>$\forall$</td></tr></tbody></table><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母（大写）</th><th>markdown语法（输入在两个$$之间）</th><th>字母小写</th><th>markdown语法</th></tr></thead><tbody><tr><td>$A$</td><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>$B$</td><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>\Gamma</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>\Delta</td><td>$\delta$</td><td>\delta</td></tr><tr><td>$E$</td><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>$Z$</td><td>Z</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>$H$</td><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>\Theta</td><td>$\theta$</td><td>\theta</td></tr><tr><td>$I$</td><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>$K$</td><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>\Lambda</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>M</td><td></td><td>$\mu$</td><td>\mu</td></tr><tr><td>$N$</td><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>\Xi</td><td>$\xi$</td><td>\xi</td></tr><tr><td>$O$</td><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>\Pi</td><td>$\pi$</td><td>\pi</td></tr><tr><td>$P$</td><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>\Sigmma</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>$T$</td><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>\Upsilon</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>\Phi</td><td>$\phi$</td><td>\phi</td></tr><tr><td>$X$</td><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>\Psi</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>\Omega</td><td>$\omega$</td><td>\omega</td></tr><tr><td></td><td></td><td>$\varphi$</td><td>\varphi</td></tr></tbody></table><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20220423092649473.png" alt="image-20220423092649473"></p><h1 id="三、-Markdown-LaTex公式"><a href="#三、-Markdown-LaTex公式" class="headerlink" title="三、 Markdown&#x2F;LaTex公式"></a>三、 Markdown&#x2F;LaTex公式</h1><h2 id="3-1-基本函数公式"><a href="#3-1-基本函数公式" class="headerlink" title="3.1 基本函数公式"></a>3.1 基本函数公式</h2><ul><li>行内公式：$\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt$</li></ul><p><code>\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt</code></p><ul><li><p>行间公式<br>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105113339912.png" alt="image-20211105113339912"></p></li><li><p>$y_k &#x3D; \varphi(u_k+v_k)$<br><code>$y_k = \varphi(u_k+v_k)$</code></p></li><li><p>$y(x)&#x3D;x^3+2x^2+x+1$<br><code>$y(x)=x^3+2x^2+x+1$</code></p></li><li><p>$x^{y}&#x3D;(1+{\rm e}^x)^{-2xy}$<br><code>$x^&#123;y&#125;=(1+&#123;\rm e&#125;^x)^&#123;-2xy&#125;$</code></p></li><li><p>$\displaystyle f(n)&#x3D;\sum_{i&#x3D;1}^{n}{n*(n+1)}$<br><code>$\displaystyle f(n)=\sum_&#123;i=1&#125;^&#123;n&#125;&#123;n*(n+1)&#125;$</code></p></li></ul><h2 id="3-2-分段函数"><a href="#3-2-分段函数" class="headerlink" title="3.2 分段函数"></a>3.2 分段函数</h2><ul><li><p>分段函数<br>$$<br>y&#x3D;\begin{cases}<br>2x+1,&amp;x\leq0\<br>x,&amp;x&gt;0<br>\end{cases}<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105114606132.png" alt="image-20211105114606132"></p></li><li><p>齐次方程<br>$$<br>\left<br>{<br>\begin{array}{}<br>a_1x+b_1y+c_1z&#x3D;d_1 \<br>a_2x+b_2y+c_2z&#x3D;d_2 \<br>a_3x+b_3y+c_3z&#x3D;d_3<br>\end{array}<br>\right.<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115235227.png" alt="image-20211105115235227"></p></li></ul><h2 id="3-3-积分"><a href="#3-3-积分" class="headerlink" title="3.3 积分"></a>3.3 积分</h2><ul><li><p>一重积分<br>$$<br>\int_{\theta_1(x)^{\theta_2(x)}}&#x3D;1<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115407660.png" alt="image-20211105115407660"></p></li><li><p>二重积分<br>$$<br>\iint dx dy &#x3D;\sigma<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115458340.png" alt="image-20211105115458340"></p></li><li><p>三重积分<br>$$<br>\iiint dx dydz&#x3D;\nu<br>$$<br><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115553987.png" alt="image-20211105115553987"></p></li></ul><h2 id="3-4-微分和偏微分"><a href="#3-4-微分和偏微分" class="headerlink" title="3.4 微分和偏微分"></a>3.4 微分和偏微分</h2><ul><li><p>一阶微分方程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;dy&#125;&#123;dx&#125;+P(x)y = Q(x) \\</span><br><span class="line">\left. \frac&#123;&#123;\rm d&#125;y&#125;&#123;&#123;\rm d&#125;x&#125; \right|_&#123;x=0&#125; =3x+1=1</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105115859719.png" alt="image-20211105115859719"></p></li><li><p>二阶微分方程<br>$$y’’+py’+qy&#x3D;f(x)$$<br>$$\frac{d^2y}{dx^2}+p\frac{dy}{dx}+qy&#x3D;f(x)$$</p></li><li><p>偏微分方程<br>$$<br>\frac{\partial u}{\partial t}&#x3D; h^2 \left( \frac{\partial^2 u}{\partial x^2} +\frac{\partial^2 u}{\partial y^2}+ \frac{\partial^2 u}{\partial z^2}\right)<br>$$</p></li></ul><h2 id="3-5-矩阵和行列式"><a href="#3-5-矩阵和行列式" class="headerlink" title="3.5 矩阵和行列式"></a>3.5 矩阵和行列式</h2><p><img src="/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/image-20211105120251402.png" alt="image-20211105120251402"></p><ul><li><p>单位矩阵<br>$$\begin{bmatrix}<br>1&amp;0&amp;0\<br>0&amp;1&amp;0\<br>0&amp;0&amp;1\<br>\end{bmatrix}<br>$$</p><p>横省略号：\cdots<br>竖省略号：\vdots<br>斜省略号：\ddots</p></li><li><p><em>m</em> X <em>n</em> 矩阵<br>$$A&#x3D;\begin{bmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{bmatrix}$$</p></li><li><p>行列式<br>$$D&#x3D;\begin{vmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{vmatrix}$$</p></li><li><p>表格</p><p>$$\begin{array}{c|lll}<br>{}&amp;{a}&amp;{b}&amp;{c}\<br>\hline<br>{R_1}&amp;{c}&amp;{b}&amp;{a}\<br>{R_2}&amp;{b}&amp;{c}&amp;{c}\<br>\end{array}$$</p></li><li><p>增广矩阵<br>$$<br>\left[  \begin{array}  {c c | c}<br>1 &amp; 2 &amp; 3 \<br>\hline %插入横线，如果去掉\hline就是增广矩阵<br>4 &amp; 5 &amp; 6<br>\end{array}  \right]<br>$$</p></li></ul><h2 id="3-6-极限"><a href="#3-6-极限" class="headerlink" title="3.6 极限"></a>3.6 极限</h2><p>$$<br>f(n)&#x3D;\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$$<br>$$\frac{1}{\lim_{u \rightarrow \infty}}, \frac{1}{\lim\limits_{u \rightarrow \infty}}<br>$$</p><h2 id="3-7-其他"><a href="#3-7-其他" class="headerlink" title="3.7 其他"></a>3.7 其他</h2><table><thead><tr><th></th><th><strong>markdown语法（输入在两个$$之间）</strong></th><th><strong>显示</strong></th></tr></thead><tbody><tr><td>圆括号（小括号）</td><td>\left( \frac{a}{b} \right )</td><td>$\left(\frac{a}{b}\right)$</td></tr><tr><td>方括号（中括号）</td><td>\left[ \frac{a}{b} \right]</td><td>$\left[\frac{a}{b}\right]$</td></tr><tr><td>角括号</td><td>\left \langle \frac{a}{b} \right \rangle</td><td>$\left \langle \frac{a}{b} \right \rangle$</td></tr><tr><td>取整函数</td><td>\left \lfloor \frac{a}{b} \right \rfloor</td><td>$\left \lfloor \frac{a}{b} \right \rfloor$</td></tr><tr><td>取顶函数</td><td>\left \lceil \frac{c}{d} \right \rceil</td><td>$\left \lceil \frac{c}{d} \right \rceil$</td></tr><tr><td>斜线与反斜线</td><td>\left &#x2F; \frac{a}{b} \right \backslash</td><td>$\left &#x2F; \frac{a}{b} \right \backslash$</td></tr><tr><td>上下箭头</td><td>\left \uparrow \frac{a}{b} \right \downarrow</td><td>$\left \uparrow \frac{a}{b} \right \downarrow$</td></tr><tr><td>混合括号</td><td>\left [ 0,1 \right )</td><td>$\left [ 0,1 \right )$</td></tr><tr><td>空格</td><td><code>&amp;nbsp;&amp;ensp;&amp;emsp;&amp;thinsp;</code></td><td></td></tr><tr><td>左对齐</td><td><code>\begin&#123;array&#125;&#123;l&#125;    \end&#123;array&#125;</code></td><td></td></tr><tr><td>居中对齐</td><td><code>\begin&#123;array&#125;&#123;c&#125;    \end&#123;array&#125;</code></td><td></td></tr><tr><td>右对齐</td><td><code>\begin&#123;array&#125;&#123;r&#125;    \end&#123;array&#125;</code></td><td></td></tr></tbody></table><h2 id="3-8、空格"><a href="#3-8、空格" class="headerlink" title="3.8、空格"></a>3.8、空格</h2><table><thead><tr><th></th><th>markdown语法</th><th>显示</th></tr></thead><tbody><tr><td>两个quad空格</td><td>a \qquad b</td><td>$a \qquad b$</td></tr><tr><td>quad空格</td><td>a \quad b</td><td>$a \quad b$</td></tr><tr><td>大空格</td><td>a \ b</td><td>$ a\ b$</td></tr><tr><td>中等空格</td><td>a ;b</td><td>$a;b$</td></tr><tr><td>小空格</td><td>a , b</td><td>$a,b$</td></tr><tr><td>紧贴</td><td><code>a\! b</code></td><td>$a!b$</td></tr></tbody></table><h1 id="四、Typora优化"><a href="#四、Typora优化" class="headerlink" title="四、Typora优化"></a>四、Typora优化</h1><p><a href="https://zhuanlan.zhihu.com/p/361486179">Typora打造最适合编程笔记的精美主题（浅色版和修改后的深色版），可自行修改喜欢的样式。 - 知乎 (zhihu.com)</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/Typora/">Typora</category>
      
      
      <comments>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/Typora/Typora/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VS</title>
      <link>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/</link>
      <guid>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/</guid>
      <pubDate>Thu, 22 Aug 2024 08:59:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、配置&quot;&gt;&lt;a href=&quot;#一、配置&quot; class=&quot;headerlink&quot; title=&quot;一、配置&quot;&gt;&lt;/a&gt;一、配置&lt;/h1&gt;&lt;h2 id=&quot;1-1、安装&quot;&gt;&lt;a href=&quot;#1-1、安装&quot; class=&quot;headerlink&quot; title=&quot;1.1、安</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h1><h2 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h2><p><a href="https://blog.csdn.net/qq_53862369/article/details/117295784">Visual Studio 2013下载及其安装_vs2013下载官方下载-CSDN博客</a></p><p><a href="https://blog.csdn.net/YSJ367635984/article/details/104648941">visual studio 2019安装教程（详细的很）_vs2019安装教程-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_49329264/article/details/132640725">VS2022工具箱消失或者工具箱控件变为灰色不可用解决方案_vs工具箱控件灰色-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhebushibiaoshifu/article/details/132940838">Visual Studio复制、拷贝C++项目与第三方库配置信息到新的项目中_vs如何把项目配置完全添加到另外一个项目-CSDN博客</a></p><h2 id="1-2、VS调试"><a href="#1-2、VS调试" class="headerlink" title="1.2、VS调试"></a>1.2、VS调试</h2><p><a href="https://blog.csdn.net/weixin_74310945/article/details/128998270">https://blog.csdn.net/weixin_74310945/article/details/128998270</a></p><h2 id="1-3、快捷键"><a href="#1-3、快捷键" class="headerlink" title="1.3、快捷键"></a>1.3、快捷键</h2><ul><li>关闭文件：Ctrl + F4</li><li>关闭所有文件： Alt + W + L</li><li>回到上一步：Ctrl + -</li><li>隐藏：Ctrl + M，之后Ctrl + H</li></ul><h2 id="1-4、VS2022配置QT"><a href="#1-4、VS2022配置QT" class="headerlink" title="1.4、VS2022配置QT"></a>1.4、VS2022配置QT</h2><p><a href="https://www.cnblogs.com/W-cats/p/18177801">https://www.cnblogs.com/W-cats/p/18177801</a></p><h1 id="二、报错"><a href="#二、报错" class="headerlink" title="二、报错"></a>二、报错</h1><h2 id="LNK2005"><a href="#LNK2005" class="headerlink" title="LNK2005"></a>LNK2005</h2><p><a href="https://blog.csdn.net/zhanghefu/article/details/116266727">LNK2005错误的原因与解决-CSDN博客</a></p><h2 id="LNK2038"><a href="#LNK2038" class="headerlink" title="LNK2038"></a>LNK2038</h2><p><a href="https://www.cnblogs.com/arxive/p/11220854.html">error LNK2038: 检测到“RuntimeLibrary”的不匹配项: 值“MDd_DynamicDebug”不匹配值“MD_DynamicRelease” - wenglabs - 博客园 (cnblogs.com)</a></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E8%BD%AF%E4%BB%B6/">软件</category>
      
      <category domain="http://example.com/tags/VS/">VS</category>
      
      
      <comments>http://example.com/2024/08/22/%E8%BD%AF%E4%BB%B6/VS/VS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git</title>
      <link>http://example.com/2024/08/22/Git/git/</link>
      <guid>http://example.com/2024/08/22/Git/git/</guid>
      <pubDate>Thu, 22 Aug 2024 07:54:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、Git&quot;&gt;&lt;a href=&quot;#一、Git&quot; class=&quot;headerlink&quot; title=&quot;一、Git&quot;&gt;&lt;/a&gt;一、Git&lt;/h1&gt;&lt;h2 id=&quot;1-1、版本控制器的方式&quot;&gt;&lt;a href=&quot;#1-1、版本控制器的方式&quot; class=&quot;headerli</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h1><h2 id="1-1、版本控制器的方式"><a href="#1-1、版本控制器的方式" class="headerlink" title="1.1、版本控制器的方式"></a>1.1、版本控制器的方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a、集中式版本控制工具</span><br><span class="line">集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。</span><br><span class="line">svn因为每次存的都是差异 需要的硬盘空间会相对的小一点  可是回滚的速度会很慢</span><br><span class="line">举例：SVN和CVS</span><br><span class="line">优点: </span><br><span class="line">    代码存放在单一的服务器上 便于项目的管理</span><br><span class="line">缺点: </span><br><span class="line">    服务器宕机: 员工写的代码得不到保障</span><br><span class="line">    服务器炸了: 整个项目的历史记录都会丢失</span><br><span class="line">    </span><br><span class="line">b、分布式版本控制工具</span><br><span class="line">分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。</span><br><span class="line">git每次存的都是项目的完整快照 需要的硬盘空间会相对大一点</span><br><span class="line">    (Git团队对代码做了极致的压缩 最终需要的实际空间比svn多不了太多 可是Git的回滚速度极快)</span><br><span class="line">举例：Git</span><br><span class="line">优点:</span><br><span class="line">    完全的分布式</span><br><span class="line">缺点:    </span><br><span class="line">    学习起来比SVN陡峭</span><br></pre></td></tr></table></figure><h2 id="1-2、SVN"><a href="#1-2、SVN" class="headerlink" title="1.2、SVN"></a>1.2、SVN</h2><p><img src="/2024/08/22/Git/git/SVN.png" alt="SVN"></p><h2 id="1-3、Git"><a href="#1-3、Git" class="headerlink" title="1.3、Git"></a>1.3、Git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。</span><br><span class="line">git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</span><br><span class="line">同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</span><br><span class="line">到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</span><br><span class="line"> 速度</span><br><span class="line"> 简单的设计</span><br><span class="line"> 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</span><br><span class="line"> 完全分布式</span><br><span class="line"> 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/Git/git/Git.png" alt="Git"></p><h2 id="1-4、Git工作流程图"><a href="#1-4、Git工作流程图" class="headerlink" title="1.4、Git工作流程图"></a>1.4、Git工作流程图</h2><p><img src="/2024/08/22/Git/git/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="Git工作流程图"></p><p>命令如下：</p><ol><li>clone（克隆）: 从远程仓库中克隆代码到本地仓库</li><li>checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</li><li>add（添加）: 在提交前先将代码提交到暂存区</li><li>commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li>pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于fetch+merge</li><li>push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h2 id="1-5、资源"><a href="#1-5、资源" class="headerlink" title="1.5、资源"></a>1.5、资源</h2><ul><li><a href="https://blog.csdn.net/TroyeSivanlp/article/details/121172010">git教程1–如何操作本地仓库（保姆级教程，好上手）_gitlab-ce 本地仓库操作-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_43142509/article/details/123134869#Git_4">使用Git上传项目到GitHub（详细版）-CSDN博客</a></li><li><a href="https://blog.csdn.net/qq_41621896/article/details/118569844">gitLab配置ssh-CSDN博客</a></li><li><a href="https://blog.csdn.net/zongzhankui/article/details/78888651">Git提交到多个远程仓库_git怎样提交两个仓库的修改-CSDN博客</a></li><li><a href="https://blog.csdn.net/u011870022/article/details/117883717">windows下git配置github和gitee SSH-Key密钥方便同时将本地分支推送到远程仓库_git ecdsa key-CSDN博客</a></li></ul><h1 id="二、Git环境配置"><a href="#二、Git环境配置" class="headerlink" title="二、Git环境配置"></a>二、Git环境配置</h1><p>常用命令：</p><ul><li><code>ls</code>&#x2F;<code>ll</code> 查看当前目录</li><li><code>cat</code> 查看文件内容</li><li><code>touch</code> 创建文件</li><li><code>vi</code> vi编辑器（使用vi编辑器是为了方便展示效果，学员可以记事本、EditPlus、NotePad++等其它编辑器）</li></ul><h2 id="2-1、下载与安装"><a href="#2-1、下载与安装" class="headerlink" title="2.1、下载与安装"></a>2.1、下载与安装</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p><img src="/2024/08/22/Git/git/Git%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85.png" alt="Git下载与安装"></p><p>下载完成后可以得到如下安装文件：</p><p><img src="/2024/08/22/Git/git/Git%E5%AE%89%E8%A3%85%E5%8C%85.png" alt="Git安装包"></p><p>双击下载的安装文件来安装Git。安装完成后在电脑桌面（也可以是其他目录)点击右键，如果能够看到如下两个菜单则说明Git安装成功。</p><p><img src="/2024/08/22/Git/git/Git%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.png" alt="Git右键菜单"></p><p>备注：</p><p>Git GUI：Git提供的图形界面工具</p><p>Git Bash：Git提供的命令行工具</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><h2 id="2-2、基本配置"><a href="#2-2、基本配置" class="headerlink" title="2.2、基本配置"></a>2.2、基本配置</h2><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “itcast”</span><br><span class="line">git config --global user.email “hello@itcast.cn”</span><br></pre></td></tr></table></figure></li></ol><p>查看配置信息<br><code>git config --global user.name</code><br><code>git config --global user.email</code></p><h2 id="2-3、为常用指令配置别名（可选）"><a href="#2-3、为常用指令配置别名（可选）" class="headerlink" title="2.3、为常用指令配置别名（可选）"></a>2.3、为常用指令配置别名（可选）</h2><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li><p>打开用户目录，创建<code>.bashrc</code>文件<br> 部分windows系统不允许用户创建点号开头的文件，可以打开gitBash,执行<code>touch ~/.bashrc</code><br> <img src="/2024/08/22/Git/git/%E5%88%9B%E5%BB%BAbashrc.png" alt="创建bashrc"></p></li><li><p>在<code>.bashrc</code>文件中输入如下内容：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span></span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span></span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br></pre></td></tr></table></figure></li><li><p>打开gitBash，执行<code>source ~/.bashrc</code><br> <img src="/2024/08/22/Git/git/bashrc.png" alt="bashrc"></p></li></ol><h2 id="2-4、解决GitBash乱码问题"><a href="#2-4、解决GitBash乱码问题" class="headerlink" title="2.4、解决GitBash乱码问题"></a>2.4、解决GitBash乱码问题</h2><ol><li><p>打开GitBash执行下面命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure></li><li><p><code>$&#123;git_home&#125;/etc/bash.bashrc</code>文件最后加入下面两行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure></li></ol><h1 id="三、获取本地仓库"><a href="#三、获取本地仓库" class="headerlink" title="三、获取本地仓库"></a>三、获取本地仓库</h1><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库<br>1）在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库<br>2）进入这个目录中，点击右键打开Git bash窗口<br>3）执行命令<code>git init</code><br>4）如果创建成功后可在文件夹下看到隐藏的.git目录。</p><p><img src="/2024/08/22/Git/git/%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="获取本地仓库"></p><h1 id="四、基础操作指令"><a href="#四、基础操作指令" class="headerlink" title="四、基础操作指令"></a>四、基础操作指令</h1><p>Git工作目录下对于文件的<strong>修改</strong>（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行Git的命令而发生变化。</p><p><img src="/2024/08/22/Git/git/%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4.png" alt="基础操作指令"></p><p>本章节主要讲解如何使用命令来控制这些状态之间的转换：</p><ol><li>git add (工作区 –&gt; 暂存区)</li><li>git commit (暂存区 –&gt; 本地仓库)</li></ol><h2 id="4-1、-查看修改的状态-status"><a href="#4-1、-查看修改的状态-status" class="headerlink" title="4.1、&#x3D;&#x3D;查看修改的状态(status)&#x3D;&#x3D;"></a>4.1、&#x3D;&#x3D;查看修改的状态(status)&#x3D;&#x3D;</h2><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令形式：<code>git status</code></li></ul><h2 id="4-2、-添加工作区到暂存区-add"><a href="#4-2、-添加工作区到暂存区-add" class="headerlink" title="4.2、&#x3D;&#x3D;添加工作区到暂存区(add)&#x3D;&#x3D;"></a>4.2、&#x3D;&#x3D;添加工作区到暂存区(add)&#x3D;&#x3D;</h2><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：<code>git add 单个文件名|通配符</code><ul><li>将所有修改加入暂存区：<code>git add .</code></li></ul></li></ul><h2 id="4-3、-提交暂存区到本地仓库-commit"><a href="#4-3、-提交暂存区到本地仓库-commit" class="headerlink" title="4.3、&#x3D;&#x3D;提交暂存区到本地仓库(commit)&#x3D;&#x3D;"></a>4.3、&#x3D;&#x3D;提交暂存区到本地仓库(commit)&#x3D;&#x3D;</h2><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：<code>git commit -m &#39;注释内容&#39;</code></li></ul><h2 id="4-4、-查看提交日志-log"><a href="#4-4、-查看提交日志-log" class="headerlink" title="4.4、&#x3D;&#x3D;查看提交日志(log)&#x3D;&#x3D;"></a>4.4、&#x3D;&#x3D;查看提交日志(log)&#x3D;&#x3D;</h2><p><strong>在2.3中配置的别名<code>git-log</code>就包含了这些参数，所以后续可以直接使用指令<code>git-log</code></strong></p><ul><li>作用:查看提交记录</li><li>命令形式：<code>git log [option]</code><ul><li>options<ul><li><code>--all</code> 显示所有分支</li><li><code>--pretty=oneline</code> 将提交信息显示为一行</li><li><code>--abbrev-commit</code> 使得输出的commitID更简短</li><li><code>--graph</code> 以图的形式显示</li></ul></li></ul></li></ul><h2 id="4-5、版本回退"><a href="#4-5、版本回退" class="headerlink" title="4.5、版本回退"></a>4.5、版本回退</h2><ul><li>作用：版本切换</li><li>命令形式：<code>git reset --hard commitID</code><ul><li>commitID 可以使用<code>git-log</code>或<code>git log</code>指令查看</li></ul></li><li>如何查看已经删除的记录？<ul><li><code>git reflog</code></li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h2 id="4-6、添加文件至忽略列表"><a href="#4-6、添加文件至忽略列表" class="headerlink" title="4.6、添加文件至忽略列表"></a>4.6、添加文件至忽略列表</h2><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为<code> .gitignore</code>的文件（文件名称固定），列出要忽略的文件模式。下面是一个示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no .a files</span></span><br><span class="line">*.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">but <span class="keyword">do</span> track lib.a, even though you<span class="string">&#x27;re ignoring .a files above</span></span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only ignore the &#x27;</span>TODO<span class="string">&#x27; file in the current directory, not subdir/TODO</span></span></span><br><span class="line">/TODO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all files in the &#x27;</span>build/<span class="string">&#x27; directory</span></span></span><br><span class="line">build/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore doc/notes.txt, but not doc/server/arch.txt</span></span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ignore all .pdf files in the doc/ directory</span></span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h2 id="4-7、查询"><a href="#4-7、查询" class="headerlink" title="4.7、查询"></a>4.7、查询</h2><p>   git  status   :  查看工作目录中文件的状态(已跟踪(已提交 已暂存 已修改) 未跟踪)<br>   git  diff     :  查看未暂存的修改<br>   git  diff –cache : 查看未提交的暂存<br>   git  log –oneline : 查看提交记录</p><h2 id="练习-基础操作"><a href="#练习-基础操作" class="headerlink" title="练习:基础操作"></a>练习:基础操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################仓库初始化######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建目录（git_test01）并在目录下打开gitbash</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################创建文件并提交#####################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录下创建文件 file01.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改提交到本地仓库，提交记录内容为：commit 001</span></span><br><span class="line">git commit -m &#x27;commit 001&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################修改文件并提交######################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改file01的内容为：count=1</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改加入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 将修改提交到本地仓库，提交记录内容为：update file01</span></span></span><br><span class="line">git commit -m &#x27;update file01&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###################将最后一次修改还原##################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到倒数第2次提交的commitID</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">版本回退</span></span><br><span class="line">git reset commitID --hard</span><br></pre></td></tr></table></figure><hr><h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h2 id="5-1、查看本地分支"><a href="#5-1、查看本地分支" class="headerlink" title="5.1、查看本地分支"></a>5.1、查看本地分支</h2><ul><li>命令：<code>git branch</code></li></ul><h2 id="5-2、创建本地分支"><a href="#5-2、创建本地分支" class="headerlink" title="5.2、创建本地分支"></a>5.2、创建本地分支</h2><ul><li>命令：<code>git branch 分支名</code></li></ul><h2 id="5-3、切换分支-checkout"><a href="#5-3、切换分支-checkout" class="headerlink" title="5.3、切换分支(checkout)"></a>5.3、切换分支(checkout)</h2><ul><li>命令：<code>git checkout 分支名</code></li></ul><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><ul><li>命令：<code>git checkout -b 分支名</code></li></ul><h2 id="5-4、合并分支-merge"><a href="#5-4、合并分支-merge" class="headerlink" title="5.4、合并分支(merge)"></a>5.4、合并分支(merge)</h2><p>一个分支（合并分支）上的提交可以合并到另一个分支（目标分支）</p><ul><li>需要先切换到目标分支：<code>git checkout 目标分支名</code></li><li>合并命令：<code>git merge 合并分支名</code></li></ul><h2 id="5-5、删除分支"><a href="#5-5、删除分支" class="headerlink" title="5.5、删除分支"></a>5.5、删除分支</h2><p><strong>不能删除当前分支，只能删除其他分支</strong></p><ul><li><code>git branch -d 分支名</code> 删除分支时，需要做各种检查</li><li><code>git branch -D 分支名</code> 不做任何检查，强制删除</li><li>E.g.<br>  <img src="/2024/08/22/Git/git/%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF.png" alt="删除分支"></li></ul><h2 id="5-6、解决冲突"><a href="#5-6、解决冲突" class="headerlink" title="5.6、解决冲突"></a>5.6、解决冲突</h2><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><p>就是哪里合并有问题，你手动更改，再进行提交</p><p>冲突部分的内容处理如下所示：</p><p><img src="/2024/08/22/Git/git/%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86.png" alt="冲突处理.png"></p><h2 id="5-7、开发中分支使用原则与流程"><a href="#5-7、开发中分支使用原则与流程" class="headerlink" title="5.7、开发中分支使用原则与流程"></a>5.7、开发中分支使用原则与流程</h2><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支<br>  线上分支，主分支，中小规模项目作为线上运行的应用对应的分支。</li><li>develop（开发）分支<br>  是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支<br>  从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。</li><li>hotfix&#x2F;xxxx分支，<br>  从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等等。</li><li><img src="/2024/08/22/Git/git/%E5%88%86%E6%94%AF.png" alt="分支"></li></ul><h2 id="练习-分支操作"><a href="#练习-分支操作" class="headerlink" title="练习:分支操作"></a>练习:分支操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################创建并切换到dev01分支，在dev01分支提交</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]创建分支dev01</span></span><br><span class="line">git branch dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]切换到dev01</span></span><br><span class="line">git checkout dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]创建文件file02.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]将修改加入暂存区并提交到仓库,提交记录内容为：add file02 on dev</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file02 on dev&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################切换到master分支，将dev01合并到master分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[dev01]切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]合并dev01到master分支</span></span><br><span class="line">git merge dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]查看文件变化(目录下也出现了file02.txt)</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################删除dev01分支</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]删除dev01分支</span></span><br><span class="line">git branch -d dev01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[master]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br></pre></td></tr></table></figure><hr><h1 id="六、远程仓库"><a href="#六、远程仓库" class="headerlink" title="六、远程仓库"></a>六、远程仓库</h1><h2 id="6-1、-常用的托管服务-远程仓库"><a href="#6-1、-常用的托管服务-远程仓库" class="headerlink" title="6.1、 常用的托管服务[远程仓库]"></a>6.1、 常用的托管服务[远程仓库]</h2><p>​gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名gitHub<br>​码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于GitHub，码云速度会更快<br>​GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</p><h2 id="6-2、-注册码云"><a href="#6-2、-注册码云" class="headerlink" title="6.2、 注册码云"></a>6.2、 注册码云</h2><p>要想使用码云的相关服务，需要注册账号（地址： <a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</p><p><img src="/2024/08/22/Git/git/%E6%B3%A8%E5%86%8C%E7%A0%81%E4%BA%91.png" alt="注册码云"></p><h2 id="6-3、创建远程仓库"><a href="#6-3、创建远程仓库" class="headerlink" title="6.3、创建远程仓库"></a>6.3、创建远程仓库</h2><p><img src="/2024/08/22/Git/git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="创建远程仓库"></p><p>仓库创建完成后可以看到仓库地址，如下图所示:</p><p><img src="/2024/08/22/Git/git/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="仓库地址"></p><h2 id="6-4、配置SSH公钥"><a href="#6-4、配置SSH公钥" class="headerlink" title="6.4、配置SSH公钥"></a>6.4、配置SSH公钥</h2><ul><li>生成SSH公钥<ul><li><code>ssh-keygen -t rsa</code></li><li>不断回车<ul><li>如果公钥已经存在，则自动覆盖</li></ul></li></ul></li><li>Gitee设置账户共公钥<ul><li>获取公钥<ul><li><code>cat ~/.ssh/id_rsa.pub</code></li></ul></li><li><img src="/2024/08/22/Git/git/SSH%E5%85%AC%E9%92%A5.png" alt="SSH公钥"></li><li>验证是否配置成功<ul><li><code>ssh -T git@gitee.com</code></li></ul></li></ul></li></ul><h2 id="6-5、操作远程仓库"><a href="#6-5、操作远程仓库" class="headerlink" title="6.5、操作远程仓库"></a>6.5、操作远程仓库</h2><h3 id="6-5-1、添加远程仓库"><a href="#6-5-1、添加远程仓库" class="headerlink" title="6.5.1、添加远程仓库"></a>6.5.1、添加远程仓库</h3><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><ul><li><p>命令： <code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code></p><ul><li><p>远端名称，默认是origin，取决于远端服务器设置</p></li><li><p>仓库路径，从远端服务器获取此URL</p></li><li><p>例如：<br>  <code>git remote add origin git@gitee.com:czbk_zhang_meng/git_test.git</code><br>  <code>git remote set-url --add origin https://github.com/zkzong/mongodb.git</code><br>  <code>git push origin --all</code></p><p>  <img src="/2024/08/22/Git/git/%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="添加远程仓库"></p></li></ul></li></ul><h3 id="6-5-2、查看远程仓库"><a href="#6-5-2、查看远程仓库" class="headerlink" title="6.5.2、查看远程仓库"></a>6.5.2、查看远程仓库</h3><ul><li>命令：<code>git remote</code><br>  <img src="/2024/08/22/Git/git/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="查看远程仓库"></li><li>查看详细链接：<code>git remote -v</code></li></ul><h3 id="6-5-3、推送到远程仓库"><a href="#6-5-3、推送到远程仓库" class="headerlink" title="6.5.3、推送到远程仓库"></a>6.5.3、推送到远程仓库</h3><ul><li>命令：<code>git push[ -f][ --set-upstream][ 远端名称[ 本地分支名[:远端分支名]]]</code><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支<ul><li><code>git push origin master</code>&#x3D;<code>git push origin master:master</code><br>  <img src="/2024/08/22/Git/git/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95.png" alt="推送到远程仓库-两种写法"></li></ul></li><li><code>-f</code> &#x3D; <code>--force</code> 表示强制覆盖</li><li><code>-u</code> &#x3D; <code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<ul><li><code>git push --set-upstream origin master</code></li></ul></li><li>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。<ul><li><code>git push</code> 将master分支推送到已关联的远端分支。<br>  <img src="/2024/08/22/Git/git/%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="推送到远程仓库"></li></ul></li></ul></li></ul><p>查询远程仓库</p><p><img src="/2024/08/22/Git/git/%E6%9F%A5%E8%AF%A2%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="查询远程仓库"></p><h3 id="6-5-4、-本地分支与远程分支的关联关系"><a href="#6-5-4、-本地分支与远程分支的关联关系" class="headerlink" title="6.5.4、 本地分支与远程分支的关联关系"></a>6.5.4、 本地分支与远程分支的关联关系</h3><ul><li>查看关联关系我们可以使用 <code>git branch -vv</code> 命令</li></ul><p><img src="/2024/08/22/Git/git/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png" alt="查看本地分支和远程分支的关联关系"></p><h3 id="6-5-5、从远程仓库克隆"><a href="#6-5-5、从远程仓库克隆" class="headerlink" title="6.5.5、从远程仓库克隆"></a>6.5.5、从远程仓库克隆</h3><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><ul><li>命令: <code>git clone &lt;仓库路径&gt; [本地目录]</code><ul><li>本地目录可以省略，会自动生成一个目录</li></ul></li></ul><p><img src="/2024/08/22/Git/git/%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0.png" alt="克隆远程仓库到本地"></p><h3 id="6-5-6、从远程仓库中抓取和拉取"><a href="#6-5-6、从远程仓库中抓取和拉取" class="headerlink" title="6.5.6、从远程仓库中抓取和拉取"></a>6.5.6、从远程仓库中抓取和拉取</h3><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><ul><li>抓取 命令：<code>git fetch [remote name] [branch name]</code><ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</strong></li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul></li><li>拉取 命令：<code>git pull [remote name] [branch name]</code><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul><ol><li>在test01这个本地仓库进行一次提交并推送到远程仓库<br> <img src="/2024/08/22/Git/git/%E5%9C%A8test01%E8%BF%99%E4%B8%AA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="在test01这个本地仓库进行一次提交并推送到远程仓库"></li><li>在另一个仓库将远程提交的代码拉取到本地仓库<br> <img src="/2024/08/22/Git/git/%E5%B0%86%E4%BB%93%E5%BA%93%E9%87%8C%E8%BF%9C%E7%A8%8B%E6%8F%90%E4%BA%A4%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8B%89%E5%8F%96%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="将仓库里远程提交的代码拉取到本地仓库"></li></ol><h3 id="6-5-7、解决合并冲突"><a href="#6-5-7、解决合并冲突" class="headerlink" title="6.5.7、解决合并冲突"></a>6.5.7、解决合并冲突</h3><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。</p><p>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，<strong>故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>，如下图所示。</p><p><img src="/2024/08/22/Git/git/%E8%A7%A3%E5%86%B3%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png" alt="解决远程仓库合并冲突"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同</strong>，在此不再赘述，需要学员自己练习。</p><h3 id="练习-远程仓库操作"><a href="#练习-远程仓库操作" class="headerlink" title="练习:远程仓库操作"></a>练习:远程仓库操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########################1-将本地仓库推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]添加远程仓库</span></span><br><span class="line">git remote add origin git@gitee.com/**/**.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支推送到远程仓库,并与远程仓库的master分支绑定关联关系</span></span><br><span class="line">git push --set-upstream origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################2-将远程仓库克隆到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库克隆到本地git_test02目录下</span></span><br><span class="line">git clone git@gitee.com/**/**.git git_test02</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################3-将本地修改推送到远程仓库</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]创建文件file03.txt</span></span><br><span class="line">略</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将修改加入暂存区并提交到仓库,提交记录内容为：add file03</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test01]将master分支的修改推送到远程仓库</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################4-将远程仓库的修改更新到本地</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[git_test02]将远程仓库修改再拉取到本地</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以精简的方式显示提交记录</span></span><br><span class="line">git-log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件变化(目录下也出现了file03.txt)</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure><h1 id="附-几条铁令"><a href="#附-几条铁令" class="headerlink" title="附:几条铁令"></a>附:几条铁令</h1><ol><li><strong>切换分支前先提交本地的修改</strong></li><li>代码及时提交，提交过了就不会丢</li><li>遇到任何问题都不要删除文件目录，第1时间找老师</li></ol>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Git/">Git</category>
      
      
      <comments>http://example.com/2024/08/22/Git/git/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2024/08/09/MFC/MFC(%E4%B8%80)/</link>
      <guid>http://example.com/2024/08/09/MFC/MFC(%E4%B8%80)/</guid>
      <pubDate>Fri, 09 Aug 2024 08:13:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;一、MFC概念和作用&quot;&gt;&lt;a href=&quot;#一、MFC概念和作用&quot; class=&quot;headerlink&quot; title=&quot;一、MFC概念和作用&quot;&gt;&lt;/a&gt;一、MFC概念和作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MFC：微软基础类库 （Microsoft  Founda</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="一、MFC概念和作用"><a href="#一、MFC概念和作用" class="headerlink" title="一、MFC概念和作用"></a>一、MFC概念和作用</h1><ul><li><p>MFC：微软基础类库 （Microsoft  Foundation Class Library），封装了windows应用程序的各种API和相关机制的C++类库</p></li><li><p>总结：</p><ol><li>MFC是一个大的类库</li><li>MFC是一个应用程序框架</li></ol></li><li><p>为什么使用MFC？</p><ul><li>应用提供的框架，可以快速开发</li></ul></li><li><p>MFC常用的头文件</p><ul><li>afx.h-将各种MFC头文件包含在内</li><li>afxwin.h-包含了各种MFC窗口类。包含afx.h和windows.h</li><li>afxext.h-提供了扩展窗口类的支持，例如工具栏</li></ul></li></ul><h1 id="二、空win32程序模板"><a href="#二、空win32程序模板" class="headerlink" title="二、空win32程序模板"></a>二、空win32程序模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口过程函数声明</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序入口点</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义窗口类名</span></span><br><span class="line">    <span class="type">static</span> TCHAR szAppName[] = <span class="built_in">TEXT</span>(<span class="string">&quot;HelloWin&quot;</span>);</span><br><span class="line">    HWND hwnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    WNDCLASS wndclass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口类属性</span></span><br><span class="line">    wndclass.style = CS_HREDRAW | CS_VREDRAW; <span class="comment">// 水平和垂直重绘</span></span><br><span class="line">    wndclass.lpfnWndProc = WndProc; <span class="comment">// 指向窗口过程函数的指针</span></span><br><span class="line">    wndclass.cbClsExtra = <span class="number">0</span>; <span class="comment">// 类附加内存</span></span><br><span class="line">    wndclass.cbWndExtra = <span class="number">0</span>; <span class="comment">// 窗口附加内存</span></span><br><span class="line">    wndclass.hInstance = hInstance; <span class="comment">// 当前实例句柄</span></span><br><span class="line">    wndclass.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>, IDI_APPLICATION); <span class="comment">// 加载默认应用程序图标</span></span><br><span class="line">    wndclass.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_ARROW); <span class="comment">// 加载箭头光标</span></span><br><span class="line">    wndclass.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH); <span class="comment">// 设置背景颜色为白色</span></span><br><span class="line">    wndclass.lpszMenuName = <span class="literal">NULL</span>; <span class="comment">// 无菜单</span></span><br><span class="line">    wndclass.lpszClassName = szAppName; <span class="comment">// 窗口类名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------- 以下为 窗口类的注册 --------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">RegisterClass</span>(&amp;wndclass))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 注册失败，显示错误消息</span></span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;This program requires Windows NT!&quot;</span>), szAppName, MB_ICONERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------- 创建窗口 --------------------------</span></span><br><span class="line">    hwnd = <span class="built_in">CreateWindow</span>(szAppName, <span class="comment">// 窗口类名</span></span><br><span class="line">        <span class="built_in">TEXT</span>(<span class="string">&quot;The Hello Program&quot;</span>), <span class="comment">// 窗口标题</span></span><br><span class="line">        WS_OVERLAPPEDWINDOW, <span class="comment">// 窗口样式</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始水平位置</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始垂直位置</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始宽度</span></span><br><span class="line">        CW_USEDEFAULT, <span class="comment">// 初始高度</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 父窗口句柄</span></span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">// 菜单句柄</span></span><br><span class="line">        hInstance, <span class="comment">// 当前实例句柄</span></span><br><span class="line">        <span class="literal">NULL</span>); <span class="comment">// 窗口创建数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------- 显示窗口 ------------------------</span></span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwnd, iCmdShow);</span><br><span class="line">    <span class="comment">// ---------------------- 绘制用户区 ---------------------------</span></span><br><span class="line">    <span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------- 消息循环 -----------------------------------</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetMessage</span>(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg); <span class="comment">// 翻译消息</span></span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg); <span class="comment">// 分发消息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg.wParam; <span class="comment">// 返回消息的wParam值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------- 以下为窗口函数WndProc--------------------------------</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hdc;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    RECT rect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="comment">// 创建窗口时播放声音</span></span><br><span class="line">        <span class="built_in">PlaySound</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;hellowin.wav&quot;</span>), <span class="literal">NULL</span>, SND_FILENAME | SND_ASYNC);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        <span class="comment">// 绘制窗口内容</span></span><br><span class="line">        hdc = <span class="built_in">BeginPaint</span>(hwnd, &amp;ps);</span><br><span class="line">        <span class="built_in">GetClientRect</span>(hwnd, &amp;rect); <span class="comment">// 获取客户区矩形</span></span><br><span class="line">        <span class="built_in">DrawText</span>(hdc, <span class="built_in">TEXT</span>(<span class="string">&quot;Hello, Windows 98!&quot;</span>), <span class="number">-1</span>, &amp;rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER); <span class="comment">// 绘制文本</span></span><br><span class="line">        <span class="built_in">EndPaint</span>(hwnd, &amp;ps);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="comment">// 销毁窗口时退出消息循环</span></span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认窗口过程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、加载bmp文件"><a href="#三、加载bmp文件" class="headerlink" title="三、加载bmp文件"></a>三、加载bmp文件</h1><p>bmp文件是MFC中使用的位图，用来显示图片</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数：LoadBitmapFromFile</span></span><br><span class="line"><span class="comment">// 说明：从文件加载一个位图，并返回该位图的句柄</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">//   - HINSTANCE hInstance: 当前应用程序实例的句柄</span></span><br><span class="line"><span class="comment">//   - LPCTSTR lpszName: 包含位图文件路径的字符串</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">//   - 如果成功，返回加载的位图的句柄</span></span><br><span class="line"><span class="comment">//   - 如果失败，返回NULL</span></span><br><span class="line"><span class="function">HBITMAP <span class="title">LoadBitmapFromFile</span><span class="params">(HINSTANCE hInstance, LPCTSTR lpszName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个变量 hBitmap 并初始化为 NULL，用于存储加载的位图句柄</span></span><br><span class="line">    HBITMAP hBitmap = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 LoadImage 函数从文件加载位图</span></span><br><span class="line">    hBitmap = (HBITMAP)<span class="built_in">LoadImage</span>(</span><br><span class="line">        hInstance,  <span class="comment">// 当前应用程序实例的句柄</span></span><br><span class="line">        lpszName,   <span class="comment">// 位图文件路径</span></span><br><span class="line">        IMAGE_BITMAP,  <span class="comment">// 指明要加载的是位图</span></span><br><span class="line">        <span class="number">0</span>, <span class="number">0</span>,  <span class="comment">// 位图的宽度和高度，0 表示使用文件的原始大小</span></span><br><span class="line">        LR_LOADFROMFILE | LR_CREATEDIBSECTION  <span class="comment">// 从文件加载图像并创建一个 DIB 节</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 LoadImage 是否成功加载了位图</span></span><br><span class="line">    <span class="keyword">if</span> (hBitmap == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 hBitmap 仍然是 NULL，表示加载失败</span></span><br><span class="line">        <span class="comment">// 在这里添加错误处理代码，例如：</span></span><br><span class="line">        <span class="comment">// MessageBox(NULL, TEXT(&quot;Failed to load bitmap&quot;), TEXT(&quot;Error&quot;), MB_ICONERROR);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回加载的位图句柄</span></span><br><span class="line">    <span class="keyword">return</span> hBitmap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、更改文本框数据"><a href="#四、更改文本框数据" class="headerlink" title="四、更改文本框数据"></a>四、更改文本框数据</h1><p>这是一个按钮控件，通过点击按钮，更改文本数据</p><ol><li>使用CString定义一个字符串</li><li>使用Format 设置格式和内容</li><li>使用SetDlgItemText将字符串和控件练习起来</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnTractionMax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">m_iTractionMax = m_iControlMH;</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;电位值：%d&quot;</span>), m_iTractionMax);</span><br><span class="line"><span class="built_in">SetDlgItemText</span>(IDC_TRACTION_MAX, strTemp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、读取文件"><a href="#五、读取文件" class="headerlink" title="五、读取文件"></a>五、读取文件</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取司控器信息配置文件函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::ReadControllerInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义用于存储文件路径的缓冲区</span></span><br><span class="line">    TCHAR strFilePath[MAX_PATH];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前工作目录并存储到缓冲区中</span></span><br><span class="line">    <span class="built_in">GetCurrentDirectory</span>(MAX_PATH, strFilePath);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将文件名 &quot;controller.ini&quot; 拼接到当前工作目录路径后面</span></span><br><span class="line">    <span class="built_in">wcscat_s</span>(strFilePath, <span class="built_in">TEXT</span>(<span class="string">&quot;\\controller.ini&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 &quot;controller.ini&quot; 文件的 &quot;Controller&quot; 节读取 &quot;TractionMax&quot; 键的值</span></span><br><span class="line">    <span class="comment">// 如果未找到该键，则返回默认值 0</span></span><br><span class="line">    m_iTractionMax = <span class="built_in">GetPrivateProfileInt</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Controller&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;TractionMax&quot;</span>), <span class="number">0</span>, strFilePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义临时字符串变量用于格式化显示值</span></span><br><span class="line">    CString strTemp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将读取到的 &quot;TractionMax&quot; 值格式化为字符串并存储在 strTemp 中</span></span><br><span class="line">    strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;电位值：%d&quot;</span>), m_iTractionMax);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将格式化后的字符串显示在对话框控件上，控件的ID为 IDC_TRACTION_MAX</span></span><br><span class="line">    <span class="built_in">SetDlgItemText</span>(IDC_TRACTION_MAX, strTemp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="六、写入文件"><a href="#六、写入文件" class="headerlink" title="六、写入文件"></a>六、写入文件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnWrite</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">TCHAR strFilePath[MAX_PATH];</span><br><span class="line"><span class="built_in">GetCurrentDirectory</span>(MAX_PATH, strFilePath);</span><br><span class="line"><span class="built_in">wcscat_s</span>(strFilePath, <span class="built_in">TEXT</span>(<span class="string">&quot;\\controller.ini&quot;</span>));</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>), m_iTractionMax);</span><br><span class="line"><span class="built_in">WritePrivateProfileString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Controller&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;TractionMax&quot;</span>), strTemp, strFilePath);</span><br><span class="line">    <span class="comment">// 这里创建[Controller]，并在它下面创建TractionMax</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是为空情况下自动创建的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Controller]</span><br><span class="line">TractionMax=0</span><br><span class="line">TractionMin=5</span><br><span class="line">BreakMin=2010</span><br><span class="line">BreakMax=4000</span><br></pre></td></tr></table></figure><p>这是节点之后，更新的</p><p>其中的 # 和 ；是注释，自动跳过，没有影响</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">#</span>司控器设置</span><br><span class="line"></span><br><span class="line">[Controller]</span><br><span class="line">TractionMax =0</span><br><span class="line">;司控器最大牵引位</span><br><span class="line">TractionMin =5</span><br><span class="line">;司控器最小牵引位</span><br><span class="line">BreakMin =2010</span><br><span class="line">;司控器最小制动位</span><br><span class="line">BreakMax =4000</span><br><span class="line">;司控器最大制动位</span><br></pre></td></tr></table></figure><h1 id="七、创建子窗口"><a href="#七、创建子窗口" class="headerlink" title="七、创建子窗口"></a>七、创建子窗口</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::OnBnClickedBtnViewSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">m_pDlgSend-&gt;<span class="built_in">ShowWindow</span>(SW_NORMAL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建主窗口类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMainDlg.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMainDlg</span> : <span class="keyword">public</span> CDialogEx</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CChildDialog* m_pChildDlg; <span class="comment">// 指向子窗口的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMainDlg.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMainDlg::OnBnClickedBtnCreateChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_pChildDlg == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_pChildDlg = <span class="keyword">new</span> <span class="built_in">CChildDialog</span>(<span class="keyword">this</span>); <span class="comment">// 创建子对话框对象</span></span><br><span class="line">        m_pChildDlg-&gt;<span class="built_in">Create</span>(IDD_CHILD_DIALOG, <span class="keyword">this</span>); <span class="comment">// 创建子对话框</span></span><br><span class="line">        m_pChildDlg-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW); <span class="comment">// 显示子对话框</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建子窗口类</p></li><li><p>添加对话框资源<br>确保在资源文件中添加了 <code>IDD_MAIN_DIALOG</code>（主对话框）和 <code>IDD_CHILD_DIALOG</code>（子对话框）的对话框资源，并在主对话框中添加一个按钮，其 ID 设置为 <code>IDC_BTN_CREATE_CHILD</code>，用来创建和显示子对话框。</p></li></ol><h1 id="八、添加列表控件"><a href="#八、添加列表控件" class="headerlink" title="八、添加列表控件"></a>八、添加列表控件</h1><h4 id="设置列表控件样式和列头"><a href="#设置列表控件样式和列头" class="headerlink" title="设置列表控件样式和列头"></a>设置列表控件样式和列头</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CDlgSend::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CDialog::<span class="built_in">OnInitDialog</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置列表控件的扩展样式，包括全行选中、网格线、头部拖放和单行选择</span></span><br><span class="line">    DWORD dwExListStyle = m_listSend.<span class="built_in">GetExtendedStyle</span>() | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP | LVS_EX_SINGLEROW;</span><br><span class="line">    m_listSend.<span class="built_in">SetExtendedStyle</span>(dwExListStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义列头的标题和宽度</span></span><br><span class="line">    CString strListHead[] = &#123; <span class="built_in">TEXT</span>(<span class="string">&quot;ID&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Name&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;Value&quot;</span>) &#125;;</span><br><span class="line">    <span class="type">int</span> nListWidth[] = &#123; <span class="number">50</span>, <span class="number">580</span>, <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加列头到列表控件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(nListWidth) / <span class="built_in">sizeof</span>(<span class="type">int</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m_listSend.<span class="built_in">InsertColumn</span>(i, strListHead[i], LVCFMT_LEFT, nListWidth[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充列表控件的数据</span></span><br><span class="line">    <span class="built_in">FillListSend</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置定时器，每隔100毫秒执行一次</span></span><br><span class="line">    <span class="built_in">SetTimer</span>(IDT_TIMER_SEND, <span class="number">100</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE unless you set the focus to a control</span></span><br><span class="line">    <span class="comment">// 异常:  OCX 属性页应返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CDlgSend::FillListSend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_listSend.<span class="built_in">DeleteAllItems</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(strSend)/<span class="built_in">sizeof</span>(strSend[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line">m_listSend.<span class="built_in">InsertItem</span>(i, <span class="built_in">TEXT</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">CString strTemp;</span><br><span class="line">strTemp.<span class="built_in">Format</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%d&quot;</span>), i + <span class="number">1</span>);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">0</span>, strTemp);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">1</span>, strSend[i]);</span><br><span class="line">m_listSend.<span class="built_in">SetItemText</span>(i, <span class="number">2</span>, <span class="built_in">TEXT</span>(<span class="string">&quot;0&quot;</span>));</span><br><span class="line"></span><br><span class="line">m_listSend.<span class="built_in">SetItemData</span>(i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h4><ol><li><p>**设置列表控件样式 (<code>LVS_EX_</code> 开头的扩展样式)**：</p><ul><li><code>LVS_EX_FULLROWSELECT</code>：允许整行选择。</li><li><code>LVS_EX_GRIDLINES</code>：显示网格线。</li><li><code>LVS_EX_HEADERDRAGDROP</code>：允许头部拖放。</li><li><code>LVS_EX_SINGLEROW</code>：只允许选择单行。</li><li>这些样式通过按位或运算符 <code>|</code> 结合到 <code>dwExListStyle</code> 中，然后通过 <code>m_listSend.SetExtendedStyle(dwExListStyle);</code> 应用到列表控件。</li></ul></li><li><p><strong>定义和添加列头</strong>：</p><ul><li><code>CString strListHead[]</code> 定义了列头的标题。</li><li><code>int nListWidth[]</code> 定义了每列的宽度。</li><li>通过 <code>m_listSend.InsertColumn(i, strListHead[i], LVCFMT_LEFT, nListWidth[i], -1);</code> 将每个标题和对应的宽度添加到列表控件中。</li></ul></li><li><p><strong>填充列表控件数据</strong>：</p><ul><li><code>FillListSend();</code> 函数用于填充列表控件的数据。这个函数可能会从数据源获取数据，并将数据插入到列表控件的行中。</li></ul></li><li><p><strong>设置定时器</strong>：</p><ul><li><code>SetTimer(IDT_TIMER_SEND, 100, NULL);</code> 设置了一个定时器，每隔100毫秒触发一次定时器消息。这通常用于执行定时任务，如周期性地更新列表数据或其他界面操作。</li></ul></li><li><p><strong>返回值</strong>：</p><ul><li>函数最后返回 <code>TRUE</code>，除非将焦点设置到某个控件，否则应该返回 <code>TRUE</code>。在 MFC 对话框中，通常是 <code>TRUE</code>，除非你有特定的需求返回 <code>FALSE</code>。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 <code>CDlgSend::OnInitDialog()</code> 函数中，你初始化了 <code>m_listSend</code> 列表控件的样式、列头和数据。这些操作确保了列表控件的外观和行为符合预期，并且设置了定时器以便于定时执行任务。如果需要进一步的解释或有其他问题，请随时告诉我！</p><h1 id="九、套接字"><a href="#九、套接字" class="headerlink" title="九、套接字"></a>九、套接字</h1><p>这个套接字通讯是在你的程序，与电路板之间进行服务的，发送给电路板使用的是sendto()函数，需要注意，发送信息的DO数据，需要nMsg和nID都定义好，才可以发送给对方</p><p>你的代码展示了一个在 MFC 应用程序中初始化和关闭服务器端套接字的过程。以下是对这段代码的详细解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::InitSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WORD wVersionRequested;<span class="comment">// 存储请求的Winsock版本</span></span><br><span class="line">WSADATA wsaData;<span class="comment">// 接受Winsock的详细信息</span></span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载套接字库 1.1版本</span></span><br><span class="line">wVersionRequested = <span class="built_in">MAKEWORD</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化库，获取的信息保存到wsaData中</span></span><br><span class="line">err = <span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (err != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Load winsock failed!\n&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">LOBYTE</span>(wsaData.wVersion) != <span class="number">1</span> || <span class="built_in">HIBYTE</span>(wsaData.wVersion) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">WSACleanup</span>();<span class="comment">// 清理资源</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建套接字 </span></span><br><span class="line"><span class="comment">// AF_INET IPv4协议</span></span><br><span class="line"><span class="comment">// SOCK_DGRAM: 使用数据报套接字UDP</span></span><br><span class="line"><span class="comment">// 0:使用默认协议UDP</span></span><br><span class="line"><span class="comment">// 返回套接字描述符</span></span><br><span class="line">m_sockServer[i] = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (m_sockServer[i] == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Create socket failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> strPcIP[MAX_PATH];</span><br><span class="line">hostent* pHost;</span><br><span class="line"><span class="built_in">gethostname</span>(strPcIP, MAX_PATH); <span class="comment">//获得主机名</span></span><br><span class="line">pHost = <span class="built_in">gethostbyname</span>(strPcIP); <span class="comment">//获得主机结构</span></span><br><span class="line"></span><br><span class="line">m_addrServer[i].sin_addr.S_un.S_addr = (*(<span class="keyword">struct</span> in_addr *)pHost-&gt;h_addr_list[<span class="number">0</span>]).S_un.S_addr; <span class="comment">//本地IP地址</span></span><br><span class="line">m_addrServer[i].sin_family = AF_INET;</span><br><span class="line">m_addrServer[i].sin_port = <span class="built_in">htons</span>(m_myModuleInfo[i].nModulePcPort); <span class="comment">//本地端口号</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> strIP[MAX_PATH];</span><br><span class="line"><span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, m_myModuleInfo[i].strModuleIP, <span class="number">-1</span>, strIP, MAX_PATH, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">m_addrClient[i].sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(strIP); <span class="comment">//模块IP地址</span></span><br><span class="line">m_addrClient[i].sin_family = AF_INET;</span><br><span class="line">m_addrClient[i].sin_port = <span class="built_in">htons</span>(m_myModuleInfo[i].nModulePort); <span class="comment">//模块端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(m_sockServer[i], (SOCKADDR*)&amp;m_addrServer[i], <span class="built_in">sizeof</span>(SOCKADDR)) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Bind socket failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAAsyncSelect</span>(m_sockServer[i], <span class="keyword">this</span>-&gt;m_hWnd, WM_SOCKET, FD_READ | FD_WRITE) == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MessageBox</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;WSAAsyncSelect failed!\n&quot;</span>));</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束服务器端套接字函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::DestroySocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_iModuleNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(m_sockServer[i]);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更清晰地理解这个过程，我们可以看看UDP套接字通信的基本步骤：</p><ol><li><p><strong>创建套接字</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_sockSrv[<span class="number">0</span>] = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>设置客户端地址</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m_addrClient[<span class="number">0</span>].sin_family = AF_INET;</span><br><span class="line">m_addrClient[<span class="number">0</span>].sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">m_addrClient[<span class="number">0</span>].sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;client_ip_address&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>发送数据</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sendto</span>(m_sockSrv[<span class="number">0</span>], (<span class="type">char</span>*)&amp;data, <span class="built_in">sizeof</span>(data), <span class="number">0</span>, (SOCKADDR*)&amp;m_addrClient[<span class="number">0</span>], <span class="built_in">sizeof</span>(SOCK</span><br></pre></td></tr></table></figure></li></ol><p>在这个套接字消息响应函数中，处理了来自套接字的不同消息类型。让我们逐步分析这个函数的具体作用和逻辑：</p><h3 id="套接字接收代码详细解释："><a href="#套接字接收代码详细解释：" class="headerlink" title="套接字接收代码详细解释："></a>套接字接收代码详细解释：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT <span class="title">CInterfaceDlg::OnSocket</span><span class="params">(WPARAM wParam, LPARAM lParam)</span> <span class="comment">// 套接字响应，获取DI信息</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYDATA mdRecv[<span class="number">2</span>];<span class="comment">//每次接收两次数据 长度为0x0D*2</span></span><br><span class="line">SOCKADDR_IN addrTemp;</span><br><span class="line"><span class="type">int</span> nLen = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="built_in">WSAGETSELECTEVENT</span>(lParam))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> FD_READ:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mdRecv, <span class="number">0</span>, <span class="built_in">sizeof</span>(mdRecv));</span><br><span class="line"><span class="built_in">recvfrom</span>((SOCKET)wParam, (<span class="type">char</span>*)mdRecv, <span class="built_in">sizeof</span>(mdRecv), <span class="number">0</span>, (SOCKADDR*)&amp;addrTemp, &amp;nLen);</span><br><span class="line"><span class="comment">// 获取远程IP地址和端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 获取远程IP地址和端口号</span></span><br><span class="line"><span class="comment">//CString strIP;</span></span><br><span class="line"><span class="comment">//strIP.Format(_T(&quot;%d.%d.%d.%d&quot;),</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b1,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b2,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b3,</span></span><br><span class="line"><span class="comment">//addrTemp.sin_addr.S_un.S_un_b.s_b4);</span></span><br><span class="line"><span class="comment">//UINT nPort = ntohs(addrTemp.sin_port);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 显示远程IP地址和端口号</span></span><br><span class="line"><span class="comment">//CString strMsg;</span></span><br><span class="line"><span class="comment">//strMsg.Format(_T(&quot;远程IP: %s\n远程端口: %d&quot;), strIP, nPort);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(strMsg);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_iModuleNum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_sockServer[i] == (SOCKET)wParam)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nMsg = mdRecv[j].myByteData.nMsg &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nID = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; COM_ID_NUM; k++)</span><br><span class="line">&#123;</span><br><span class="line">nID = nID &lt;&lt; <span class="number">8</span>;</span><br><span class="line">nID = nID + (mdRecv[j].myByteData.nID[k] &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nMsg == COM_MSG &amp;&amp; nID == COM_DI)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_mdModuleDI[i], &amp;mdRecv[j], <span class="built_in">sizeof</span>(MYDATA));</span><br><span class="line"><span class="comment">// 检查和调试信息</span></span><br><span class="line"><span class="comment">//CString strDebug;</span></span><br><span class="line"><span class="comment">//strDebug.Format(_T(&quot;匹配的DI数据: nMsg = %d, nID = %d, bt_00 = %d, bt_01 = %d&quot;),</span></span><br><span class="line"><span class="comment">//nMsg, nID,</span></span><br><span class="line"><span class="comment">//m_mdModuleDI[i].myBitData.bt_00,</span></span><br><span class="line"><span class="comment">//m_mdModuleDI[i].myBitData.bt_01);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(strDebug);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> FD_WRITE:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码逻辑："><a href="#代码逻辑：" class="headerlink" title="代码逻辑："></a>代码逻辑：</h3><ol><li><p><strong>FD_READ</strong>: 当接收到FD_READ事件时，表示有数据可以读取。</p><ul><li>使用<code>recvfrom</code>从套接字读取数据到<code>chRecv</code>数组中。</li><li>检查数据前缀是否为<code>0x88</code>，如果是则解析ID，并根据ID检查是否为<code>0x00000060</code>。</li><li>如果ID匹配，从数据中提取按钮状态到<code>nBtn</code>数组中。</li><li>再次检查数据中的另一段（从索引13开始），重复上述步骤。</li></ul></li><li><p><strong>数据处理</strong>:</p><ul><li>遍历所有模块的套接字，找到与当前套接字匹配的模块。</li><li>对接收到的两段数据（<code>mdRecv</code>数组中的数据）进行处理：<ul><li>提取消息和ID。</li><li>根据消息和ID，决定将数据复制到<code>m_mdModuleDI</code>或<code>m_mdModuleAI</code>中，或处理其他类型的数据。</li></ul></li></ul></li><li><p><strong>FD_WRITE</strong>: 当接收到FD_WRITE事件时，表示套接字可以写入数据。此处未进行任何操作。</p></li><li><p><strong>默认处理</strong>: 对于其他未处理的事件类型，未进行任何操作。</p></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><p><strong>ID的计算</strong>：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nID = (chRecv[<span class="number">1</span>] &lt;&lt; <span class="number">24</span>) + (chRecv[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (chRecv[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) + chRecv[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p> ID的计算方式需要使用括号确保操作顺序正确，否则可能导致计算结果不正确。</p></li><li><p><strong>消息类型的处理</strong>：</p><ul><li>确保对每种消息类型和ID的处理逻辑正确。</li><li>对于未知消息类型或ID，可以考虑增加日志记录或错误处理。</li></ul></li><li><p><strong>内存操作</strong>：</p><ul><li>使用<code>memcpy</code>时，确保源和目标内存区域大小匹配，防止缓冲区溢出或内存损坏。</li></ul></li></ol><p>这个函数主要用于处理从套接字接收到的数据，并将解析后的数据存储到相应的模块结构中。</p><h2 id="程序发送数据到电路板"><a href="#程序发送数据到电路板" class="headerlink" title="程序发送数据到电路板"></a>程序发送数据到电路板</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInterfaceDlg::UpdateDataRecv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m_mdModuleDO[0].myBitData.bt_00 = m_dataRecv.bRisepanto; //升弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_00 = <span class="number">0</span>; <span class="comment">//升弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_01 = m_dataRecv.bDNPanto;<span class="comment">//降弓</span></span><br><span class="line">m_mdModuleDO[<span class="number">0</span>].myBitData.bt_02 = m_dataRecv.bRiseMode;<span class="comment">//升级模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印目标 IP 和端口号</span></span><br><span class="line"><span class="comment">//CString ipAddr(inet_ntoa(m_addrClient[0].sin_addr));</span></span><br><span class="line"><span class="comment">//CString port;</span></span><br><span class="line"><span class="comment">//port.Format(TEXT(&quot;%d&quot;), ntohs(m_addrClient[0].sin_port));</span></span><br><span class="line"><span class="comment">//CString msg;</span></span><br><span class="line"><span class="comment">//msg.Format(TEXT(&quot;Sending to IP: %s, Port: %s&quot;), ipAddr, port);</span></span><br><span class="line"><span class="comment">//AfxMessageBox(msg);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="built_in">sendto</span>(m_sockServer[<span class="number">0</span>], (<span class="type">char</span>*)&amp;m_mdModuleDO[<span class="number">0</span>], <span class="built_in">sizeof</span>(MYDATA), <span class="number">0</span>, (SOCKADDR*)&amp;m_addrClient[<span class="number">0</span>], <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，DO数据需要设置标志字段，直接发送是没办法收到的</p><h1 id="十、编辑框和按钮"><a href="#十、编辑框和按钮" class="headerlink" title="十、编辑框和按钮"></a>十、编辑框和按钮</h1><p>1、添加编辑框控件和按钮，然后更改ID和Caption</p><p><img src="/2024/08/09/MFC/MFC(%E4%B8%80)/image-20240716135319855.png" alt="image-20240716135319855"></p><p>2、编辑框添加成员变量，用来保存输入的编辑框信息<br><img src="/2024/08/09/MFC/MFC(%E4%B8%80)/image-20240716135443062.png" alt="image-20240716135443062"></p><p>添加之后，Dlg.h会多出变量定义，Dlg.cpp会将变量和控件绑定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dlg.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CDlg</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CEdit m_edtText;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dlg.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTextToSpeechDlg::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialogEx::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="built_in">DDX_Control</span>(pDX, IDC_EDIT_TEXT, m_edtText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、设置编辑框默认文本，在OnInitDialog()中设置初始文本或水印文字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CTextToSpeechDlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//m_edtText.SetWindowTextW(_T(&quot;请输入&quot;));</span></span><br><span class="line">m_edtText.<span class="built_in">SetCueBanner</span>(_T(<span class="string">&quot;请输入&quot;</span>));<span class="comment">// 设置水印文字，点击时自动消失</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// 除非将焦点设置到控件，否则返回 TRUE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、双击按钮，系统会自动初始化按钮触发的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CTextToSpeechDlg::OnBnClickedTranfer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CString strText;</span><br><span class="line">m_edtText.<span class="built_in">GetWindowText</span>(strText);<span class="comment">// 获取编辑框的输入</span></span><br><span class="line">m_edtText.<span class="built_in">SetCueBanner</span>(_T(<span class="string">&quot;请再次输入&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 CString 格式化字符串，检测是否得到编辑框信息</span></span><br><span class="line">CString message;</span><br><span class="line">message.<span class="built_in">Format</span>(_T(<span class="string">&quot;%s&quot;</span>), strText);</span><br><span class="line"><span class="built_in">MessageBox</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2024/08/09/MFC/MFC(%E4%B8%80)/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
